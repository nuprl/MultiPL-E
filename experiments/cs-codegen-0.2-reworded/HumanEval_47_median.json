{
  "name": "HumanEval_47_median",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public static float Median(List<long> l) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L, (long)7L}))) == (float)7L);\n    }\n\n}\n",
  "completions": [
    "        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (a.Length % 2 == 1)\n            return (float)a[a.Length / 2];\n        else\n            return (float)(a[a.Length / 2] + a[a.Length / 2 - 1]) / 2.0f;",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float) l.get(0);\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float) a[n / 2];\n        else {\n            int i = n / 2 - 1;\n            return (float) ((a[i] + a[i + 1]) / 2);\n        }",
    "        // Write your code here\n        if (l.Count == 0)\n            return 0;\n        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        return (float) arr[arr.Length / 2];\n    }\n\n    public static void main(String[] args) {\n        List<long> l = new List<long>(new long[]{3L, 1L, 2L, 4L, 5L});\n        Console.WriteLine(Median(l));",
    "        long[] a = l.ToArray();\n        int n = a.Length;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)a[0];\n        long[] b = new long[n];\n        for (int i = 0; i < n; i++)\n            b[i] = a[i];\n        Arrays.sort(b);\n        if (n % 2 == 1)\n            return (float)b[n / 2];\n        else {\n            int i = n / 2 - 1;\n            return (float)(b[i] + b[i + 1]) / 2.0f;\n        }",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[n / 2];",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        return (float)arr[arr.Length / 2];",
    "        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (a.length % 2 == 1)\n            return (float)a[a.Length / 2];\n        else\n            return (float)(a[a.Length / 2] + a[a.Length / 2 - 1]) / 2.0f;",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            int i = n / 2;\n            return (float)(a[i] + a[i - 1]) / 2.0f;\n        }",
    "        long[] a = l.ToArray();\n        int n = a.Length;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)a[0];\n        long m = a[n / 2];\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            long k = a[i];\n            a[i] = a[j];\n            a[j] = k;\n            i++;\n            j--;\n        }\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            long k = a[n / 2 - 1];\n            a[n / 2 - 1] = a[n / 2];\n            a[n / 2] = k;\n            return (float)((a[n / 2 - 1] + a[n / 2]) / 2.0);\n        }",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[n / 2];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"Median of an empty list\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[n / 2];",
    "        // Write your code here\n        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        if (l.Count == 1)\n            return l[0];\n        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        return (float) arr[arr.Length / 2];",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (a.Length % 2 == 1)\n            return (float)a[a.Length / 2];\n        else\n            return (float)(a[a.Length / 2] + a[a.Length / 2 - 1]) / 2.0f;",
    "        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        int n = a.Length;\n        if (n == 0) return 0;\n        if (n % 2 == 1) return (float)a[n / 2];\n        return (float)(a[n / 2] + a[n / 2 - 1]) / 2.0f;",
    "        long[] a = l.ToArray();\n        Arrays.sort(a);\n        return (float)a[a.Length / 2];",
    "        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (a.length % 2 == 1) {\n            return (float)a[a.length / 2];\n        }\n        else {\n            return (float)(a[a.length / 2] + a[a.length / 2 - 1]) / 2.0f;\n        }",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty.\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 0)\n            return (float)((a[n / 2] + a[n / 2 - 1]) / 2.0);\n        else\n            return (float)a[n / 2];",
    "        long[] a = l.ToArray();\n        int n = a.Length;\n        if (n == 0)\n            throw new Exception(\"List is empty.\");\n        if (n == 1)\n            return (float)a[0];\n        int i = n / 2;\n        int j = n - i;\n        long x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n        if (n % 2 == 0)\n            return (float)((a[i] + a[j]) / 2.0);\n        else\n            return (float)a[i];",
    "        long[] a = l.ToArray();\n        int n = a.Length;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)a[0];\n        long m = a[n / 2];\n        if (n % 2 == 0)\n            return (float)((m + a[n / 2 - 1]) / 2.0);\n        else\n            return (float)m;",
    "        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            long m = a[n / 2 - 1] + a[n / 2];\n            return (float)(m / 2);\n        }",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        if (arr.length % 2 == 1)\n            return (float) arr[arr.length / 2];\n        else\n            return (float) (arr[arr.length / 2] + arr[arr.length / 2 - 1]) / 2;",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (a.Length % 2 == 1)\n            return (float)a[a.Length / 2];\n        else\n            return (float)(a[a.Length / 2] + a[a.Length / 2 - 1]) / 2.0f;",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l.get_Item(0);\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else\n            return (float)(a[n / 2] + a[n / 2 - 1]) / 2.0f;",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            int mid = n / 2;\n            return (float)(a[mid - 1] + a[mid]) / 2.0f;\n        }",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        int mid = n / 2;\n        if (n % 2 == 1)\n            return (float)l[mid];\n        long a = l[mid - 1];\n        long b = l[mid];\n        return (float)(a + b) / 2.0f;",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        return (float)arr[arr.Length / 2];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            long m = (a[n / 2 - 1] + a[n / 2]) / 2;\n            return (float)m;\n        }",
    "        long[] arr = l.ToArray();\n        int n = arr.Length;\n        if (n == 0) return 0;\n        if (n == 1) return (float)arr[0];\n        long[] temp = new long[n];\n        for (int i = 0; i < n; i++) {\n            temp[i] = arr[i];\n        }\n        Arrays.Sort(temp);\n        int mid = n / 2;\n        if (n % 2 == 1) {\n            return (float)temp[mid];\n        }\n        else {\n            return (float)(temp[mid - 1] + temp[mid]) / 2.0f;\n        }",
    "        long[] a = l.ToArray();\n        int n = a.Length;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)a[0];\n        int i = n / 2;\n        int j = n - i;\n        if (n % 2 == 1)\n            return (float)a[i];\n        else {\n            long x = a[i];\n            long y = a[j];\n            return (float)((x + y) / 2.0);\n        }",
    "        long[] a = l.ToArray();\n        int n = a.Length;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)a[0];\n        long m = a[n / 2];\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            long k = a[i];\n            a[i] = a[j];\n            a[j] = k;\n            i++;\n            j--;\n        }\n        return (float)m;",
    "        long[] a = l.ToArray();\n        Arrays.sort(a);\n        if (a.length % 2 == 1)\n            return (float)a[a.Length / 2];\n        else\n            return (float)(a[a.Length / 2] + a[a.Length / 2 - 1]) / 2.0f;",
    "        long[] a = l.ToArray();\n        int n = a.Length;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)a[0];\n        int mid = n / 2;\n        if (n % 2 == 1)\n            return (float)a[mid];\n        else {\n            long a1 = a[mid - 1];\n            long a2 = a[mid];\n            return (float)((a1 + a2) / 2);\n        }",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        if (arr.Length % 2 == 1) {\n            return (float) arr[arr.Length / 2];\n        }\n        else {\n            return (float) ((arr[arr.Length / 2] + arr[arr.Length / 2 - 1]) / 2);\n        }",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"Median of an empty list\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[n / 2];",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (a.Length % 2 == 1)\n            return (float)a[a.Length / 2];\n        else\n            return (float)(a[a.Length / 2] + a[a.Length / 2 - 1]) / 2.0f;",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty.\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        long[] a = l.ToArray();\n        int n = a.Length;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)a[0];\n        long x = a[n / 2];\n        if (n % 2 == 0)\n            return (float)((x + a[n / 2 - 1]) / 2.0);\n        else\n            return (float)x;",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        int mid = arr.Length / 2;\n        if (arr.Length % 2 == 1)\n            return (float) arr[mid];\n        else\n            return (float) ((arr[mid - 1] + arr[mid]) / 2.0);",
    "        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (a.length % 2 == 1) {\n            return (float)a[a.Length / 2];\n        }\n        else {\n            return (float)(a[a.Length / 2] + a[a.Length / 2 - 1]) / 2.0f;\n        }",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        return (float) arr[arr.Length / 2];",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        if (arr.length % 2 == 1) {\n            return (float) arr[arr.length / 2];\n        }\n        else {\n            return (float) ((arr[arr.length / 2] + arr[arr.length / 2 - 1]) / 2.0);\n        }",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[n / 2];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        int mid = n / 2;\n        if (n % 2 == 1)\n            return (float)l[mid];\n        else {\n            long a = l[mid - 1];\n            long b = l[mid];\n            return (float)((a + b) / 2.0);\n        }",
    "        long[] a = l.ToArray();\n        int n = a.Length;\n        if (n == 0) return 0;\n        if (n == 1) return (float)a[0];\n        long m = a[n / 2];\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            long k = a[i];\n            a[i] = a[j];\n            a[j] = k;\n            i++;\n            j--;\n        }\n        return (float)m;",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[n / 2];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 0)\n            return (float)((a[n / 2] + a[n / 2 - 1]) / 2.0);\n        else\n            return (float)a[n / 2];",
    "        long[] arr = l.ToArray();\n        int n = arr.Length;\n        if (n == 0) return 0;\n        if (n == 1) return (float)arr[0];\n        if (n == 2) return (float)(arr[0] + arr[1]) / 2.0f;\n        long mid = n / 2;\n        if (n % 2 == 0) {\n            return (float)(arr[mid] + arr[mid - 1]) / 2.0f;\n        }\n        else {\n            return (float)arr[mid];\n        }",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        if (l.Count == 1)\n            return l.get(0);\n        int mid = l.Count / 2;\n        if (l.Count % 2 == 1)\n            return l.get(mid);\n        long left = l.get(mid - 1);\n        long right = l.get(mid);\n        return (float)((left + right) / 2);",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"Median of an empty list\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[n / 2];",
    "        if (l.Count == 0) return 0;\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float) l.get(0);\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float) a[n / 2];\n        else {\n            long m = a[n / 2 - 1] + a[n / 2];\n            return (float) ((m + a[n / 2]) / 2.0);\n        }",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        int i = n / 2;\n        int j = n - i;\n        long a = l[i];\n        long b = l[j];\n        return (float)(a + b) / 2.0f;",
    "        long[] arr = l.ToArray();\n        int n = arr.Length;\n        if (n == 0) return 0;\n        if (n == 1) return (float)arr[0];\n        if (n == 2) return (float)(arr[0] + arr[1]) / 2;\n        long m = arr[n / 2];\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            while (arr[i] < m) i++;\n            while (arr[j] > m) j--;\n            if (i <= j) {\n                long temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                i++;\n                j--;\n            }\n        }\n        return (float)m;",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        if (arr.Length % 2 == 0) {\n            return (float)((arr[arr.Length / 2] + arr[arr.Length / 2 - 1]) / 2.0);\n        }\n        else {\n            return (float)arr[arr.Length / 2];\n        }",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        if (l.Count == 1)\n            return (float) l.get(0);\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float) a[a.Length / 2];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            int mid = n / 2;\n            return (float)(a[mid - 1] + a[mid]) / 2.0f;\n        }",
    "        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        return (float)arr[arr.Length / 2];",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        return (float)arr[arr.Length / 2];",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        if (arr.Length % 2 == 1)\n            return (float)arr[arr.Length / 2];\n        else {\n            return (float)(arr[arr.Length / 2] + arr[(arr.Length / 2) - 1]) / 2.0f;\n        }",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        int mid = n / 2;\n        if (n % 2 == 1)\n            return (float)l[mid];\n        long a = l[mid - 1];\n        long b = l[mid];\n        return (float)((a + b) / 2.0);",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        if (l.Count == 1)\n            return l.get(0);\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (a.Length % 2 == 1)\n            return (float)a[a.Length / 2];\n        else\n            return (float)(a[a.Length / 2] + a[a.Length / 2 - 1]) / 2.0f;",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        if (l.Count == 1)\n            return l.get(0);\n        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        return (float) arr[arr.Length / 2];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[n / 2];",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (a.Length % 2 == 1)\n            return (float)a[a.Length / 2];\n        else\n            return (float)(a[a.Length / 2] + a[a.Length / 2 - 1]) / 2.0f;",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[n / 2];",
    "        long[] arr = l.ToArray();\n        int n = arr.Length;\n        if (n == 0) return 0;\n        if (n == 1) return (float)arr[0];\n        long[] sorted = arr.CopyTo(new long[n]);\n        Arrays.Sort(sorted);\n        if (n % 2 == 1) return (float)sorted[n / 2];\n        else return (float)(sorted[n / 2] + sorted[n / 2 - 1]) / 2.0f;",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        return (float)arr[arr.Length / 2];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        int mid = n / 2;\n        if (n % 2 == 1)\n            return (float)l[mid];\n        long a = l[mid - 1];\n        long b = l[mid];\n        return (a + b) / 2.0f;",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            long m = (a[n / 2 - 1] + a[n / 2]) / 2;\n            return (float)m;\n        }",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        return (float)arr[arr.Length / 2];",
    "        // Write your code here\n        return (float)l.OrderBy(x => x).Select(x => x).GetEnumerator().Current;",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"Median of an empty list\");\n        if (n == 1)\n            return l[0];\n        if (n % 2 == 1)\n            return l[n / 2];\n        long m = l[n / 2 - 1] + l[n / 2];\n        return (float)(m / 2);",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        if (arr.Length % 2 == 1)\n            return (float) arr[arr.Length / 2];\n        else\n            return (float) ((arr[arr.Length / 2] + arr[arr.Length / 2 - 1]) / 2.0);",
    "        // Write your code here\n        return 0;",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            int i = n / 2 - 1;\n            return (float)(a[i] + a[i + 1]) / 2.0f;\n        }",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (a.Length % 2 == 1)\n            return (float)a[a.Length / 2];\n        else\n            return (float)(a[a.Length / 2] + a[a.Length / 2 - 1]) / 2.0f;",
    "        int n = l.Count;\n        if (n == 0) return 0;\n        if (n == 1) return (float)l[0];\n        if (n % 2 == 0) {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n        }\n        else {\n            return (float)l[n / 2];\n        }",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"Median of an empty list\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            long l1 = a[n / 2 - 1];\n            long l2 = a[n / 2];\n            return (float)(l1 + l2) / 2.0f;\n        }",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (a.Length % 2 == 1)\n            return (float)a[a.Length / 2];\n        else\n            return (float)(a[a.Length / 2] + a[a.Length / 2 - 1]) / 2.0f;",
    "        long[] a = l.ToArray();\n        int n = a.Length;\n        if (n == 0) return 0;\n        if (n == 1) return (float)a[0];\n        long m = a[n / 2];\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (a[i] < m) {\n                i++;\n            } else if (a[j] > m) {\n                j--;\n            } else {\n                long temp = a[i];\n                a[i] = a[j];\n                a[j] = temp;\n                i++;\n                j--;\n            }\n        }\n        if (i == j) {\n            return (float)a[i];\n        }\n        if (i < j) {\n            long temp = a[i];\n            a[i] = a[j];\n            a[j] = temp;\n        }\n        return (float)(a[i] + a[j]) / 2.0f;",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (a.Length % 2 == 1)\n            return (float)a[a.Length / 2];\n        else\n            return (float)(a[a.Length / 2] + a[a.Length / 2 - 1]) / 2.0f;",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            long l1 = a[n / 2 - 1];\n            long l2 = a[n / 2];\n            return (float)(l1 + l2) / 2.0f;\n        }",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        if (l.Count == 1)\n            return l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (a.Length % 2 == 1)\n            return (float)a[a.Length / 2];\n        else\n            return (float)(a[a.Length / 2] + a[a.Length / 2 - 1]) / 2.0f;",
    "        int n = l.Count;\n        if (n == 0) return 0;\n        if (n == 1) return (float)l[0];\n        int i = n / 2;\n        int j = n - i;\n        if (n % 2 == 1) {\n            return (float)(l[i] + l[j]) / 2.0f;\n        }\n        else {\n            return (float)l[i];\n        }",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        int low = 0;\n        int high = n - 1;\n        while (low < high) {\n            int mid = (low + high) / 2;\n            if (l[mid] < l[high])\n                low = mid + 1;\n            else\n                high = mid;\n        }\n        return (float)l[low];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        int mid = n / 2;\n        if (n % 2 == 1)\n            return (float)l[mid];\n        long a = l[mid - 1];\n        long b = l[mid];\n        return (a + b) / 2.0f;",
    "        long[] a = l.ToArray();\n        int n = a.Length;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)a[0];\n        long m = a[n / 2];\n        if (n % 2 == 0)\n            return (float)((m + a[n / 2 - 1]) / 2.0);\n        else\n            return (float)m;",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            int i = n / 2 - 1;\n            return (float)(a[i] + a[i + 1]) / 2.0f;\n        }",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return l[0];\n        int mid = n / 2;\n        if (n % 2 == 1)\n            return l[mid];\n        long a = l[mid - 1];\n        long b = l[mid];\n        return (a + b) / 2.0f;",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        if (arr.Length % 2 == 1)\n            return (float) arr[arr.Length / 2];\n        else\n            return (float) ((arr[arr.Length / 2] + arr[arr.Length / 2 - 1]) / 2);",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        if (arr.Length % 2 == 1) {\n            return (float) arr[arr.Length / 2];\n        }\n        else {\n            return (float) (arr[arr.Length / 2] + arr[arr.Length / 2 - 1]) / 2.0f;\n        }",
    "        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (a.Length % 2 == 1)\n            return (float)a[a.Length / 2];\n        else\n            return (float)(a[a.Length / 2] + a[a.Length / 2 - 1]) / 2.0f;",
    "        long[] a = l.ToArray();\n        int n = a.Length;\n        if (n == 0) return 0;\n        if (n == 1) return (float)a[0];\n        if (n == 2) return (float)(a[0] + a[1]) / 2.0f;\n        long m = a[n / 2];\n        for (int i = 0; i < n / 2; i++) {\n            if (a[i] > m) {\n                m = a[i];\n            }\n        }\n        for (int i = n / 2; i < n; i++) {\n            if (a[i] > m) {\n                m = a[i];\n            }\n        }\n        return (float)m;",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            int i = n / 2 - 1;\n            return (float)(a[i] + a[i + 1]) / 2.0f;\n        }",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        if (arr.length % 2 == 0) {\n            return (float) (arr[arr.Length / 2] + arr[arr.Length / 2 - 1]) / 2;\n        }\n        else {\n            return (float) arr[arr.Length / 2];\n        }",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"Median of an empty list\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            long m = a[n / 2 - 1] + a[n / 2];\n            return (float)(m / 2);\n        }",
    "        // Write your code here\n        if (l.Count == 0)\n            return 0;\n        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        return (float) arr[arr.Length / 2];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float) l.get(0);\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float) a[n / 2];\n        else {\n            int i = n / 2 - 1;\n            return (float) ((a[i] + a[i + 1]) / 2.0);\n        }",
    "        long[] arr = l.ToArray();\n        int n = arr.Length;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float) arr[0];\n        long low = arr[0];\n        long high = arr[0];\n        for (int i = 1; i < n; i++) {\n            if (arr[i] < low)\n                low = arr[i];\n            else if (arr[i] > high)\n                high = arr[i];\n        }\n        int mid = (int) ((low + high) / 2);\n        if (mid % 2 == 1)\n            return (float) mid;\n        else\n            return (float) (mid / 2);",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (a.Length % 2 == 1)\n            return (float)a[a.Length / 2];\n        else\n            return (float)(a[a.Length / 2] + a[a.Length / 2 - 1]) / 2.0f;",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        return (float)arr[arr.Length / 2];",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        if (l.Count == 1)\n            return l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        long[] arr = l.ToArray();\n        Arrays.sort(arr);\n        if (arr.length % 2 == 1) {\n            return (float) arr[arr.length / 2];\n        }\n        else {\n            return (float) (arr[arr.length / 2] + arr[arr.length / 2 - 1]) / 2.0f;\n        }",
    "        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        long[] a = l.ToArray();\n        int n = a.Length;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)a[0];\n        long m = a[n / 2];\n        if (n % 2 == 0)\n            return (float)((m + a[n / 2 - 1]) / 2.0);\n        else\n            return (float)m;",
    "        int n = l.Count;\n        if (n == 0) return 0;\n        if (n == 1) return l[0];\n        if (n % 2 == 1) return l[n / 2];\n        long a = l[n / 2 - 1];\n        long b = l[n / 2];\n        return (float)((a + b) / 2);",
    "        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        if (l.Count == 0)\n            throw new Exception(\"Median of empty list\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        long[] arr = l.ToArray();\n        Arrays.sort(arr);\n        if (arr.length % 2 == 1) {\n            return (float)arr[arr.Length / 2];\n        }\n        else {\n            return (float)(arr[arr.Length / 2] + arr[arr.Length / 2 - 1]) / 2.0f;\n        }",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        int n = a.Length;\n        if (n == 1)\n            return (float)a[0];\n        int i = n / 2;\n        int j = n - i;\n        if (i % 2 == 1)\n            return (float)(a[i] + a[j]) / 2.0f;\n        else\n            return (float)a[i];",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        if (arr.Length % 2 == 0) {\n            return (float) (arr[arr.Length / 2] + arr[arr.Length / 2 - 1]) / 2.0f;\n        }\n        else {\n            return (float) arr[arr.Length / 2];\n        }",
    "        int n = l.Count;\n        if (n == 0) return 0;\n        if (n == 1) return l[0];\n        if (n % 2 == 1) return l[n / 2];\n        float m = l[n / 2 - 1];\n        float m2 = l[n / 2];\n        return (m + m2) / 2;",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"Median of an empty list\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        int mid = n / 2;\n        if (n % 2 == 1)\n            return (float)a[mid];\n        else\n            return (float)(a[mid - 1] + a[mid]) / 2.0f;",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            long l1 = a[n / 2 - 1];\n            long l2 = a[n / 2];\n            return (float)((l1 + l2) / 2.0);\n        }",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        int i = n / 2;\n        int j = n - i;\n        long a = l[i];\n        long b = l[j];\n        return (float)(a + b) / 2.0f;",
    "        int n = l.Count;\n        if (n == 0) return 0;\n        if (n == 1) return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[n / 2];",
    "        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        int n = a.Length;\n        if (n == 0) return 0;\n        if (n % 2 == 1) return (float)a[n / 2];\n        return (float)(a[n / 2] + a[n / 2 - 1]) / 2;",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        if (arr.Length % 2 == 1)\n            return (float) arr[arr.Length / 2];\n        else\n            return (float) ((arr[arr.Length / 2] + arr[arr.Length / 2 - 1]) / 2.0);",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        int i = n / 2;\n        int j = n - i;\n        if (i % 2 == 1)\n            return (float)(l[i] + l[j]);\n        else\n            return (float)(l[i] + l[j] / 2);",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        int mid = n / 2;\n        if (n % 2 == 0) {\n            return (float)((long)l[mid - 1] + (long)l[mid]) / 2;\n        }\n        else {\n            return (float)l[mid];\n        }",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            long m = a[n / 2 - 1] + a[n / 2];\n            return (float)(m / 2);\n        }",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            int i = n / 2 - 1;\n            return (float)(a[i] + a[i + 1]) / 2.0f;\n        }",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        if (arr.length % 2 == 0) {\n            return (float) (arr[arr.Length / 2] + arr[arr.Length / 2 - 1]) / 2.0f;\n        }\n        else {\n            return (float) arr[arr.Length / 2];\n        }",
    "        if (l.Count == 0) return 0;\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        return (float)arr[arr.Length / 2];",
    "        if (l.Count == 0)\n            throw new Exception(\"Median of an empty list\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            long l1 = a[n / 2 - 1];\n            long l2 = a[n / 2];\n            return (float)(l1 + l2) / 2.0f;\n        }",
    "        long[] a = l.ToArray();\n        int n = a.Length;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)a[0];\n        int i = n / 2;\n        int j = n - i;\n        if (n % 2 == 1)\n            return (float)a[i];\n        long x = a[i];\n        long y = a[j];\n        return (float)(x + y) / 2.0f;",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (a.Length % 2 == 1)\n            return (float)a[a.Length / 2];\n        else {\n            return (float)(a[a.Length / 2] + a[a.Length / 2 - 1]) / 2.0f;\n        }",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (a.Length % 2 == 1)\n            return (float)a[a.Length / 2];\n        else\n            return (float)(a[a.Length / 2] + a[a.Length / 2 - 1]) / 2.0f;",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l.get(0);\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        int mid = n / 2;\n        if (n % 2 == 1)\n            return (float)a[mid];\n        else\n            return (float)(a[mid - 1] + a[mid]) / 2.0f;",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            int i = n / 2 - 1;\n            return (float)(a[i] + a[i + 1]) / 2.0f;\n        }",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"Median of an empty list\");\n        if (n == 1)\n            return l[0];\n        int mid = n / 2;\n        if (n % 2 == 1)\n            return l[mid];\n        long a = l[mid - 1];\n        long b = l[mid];\n        return (a + b) / 2.0f;",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        if (arr.Length % 2 == 1) {\n            return (float) arr[arr.Length / 2];\n        }\n        else {\n            return (float) ((arr[arr.Length / 2] + arr[arr.Length / 2 - 1]) / 2.0);\n        }",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        int mid = n / 2;\n        if (n % 2 == 1)\n            return (float)l[mid];\n        long a = l[mid - 1];\n        long b = l[mid];\n        return (a + b) / 2.0f;",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            int i = n / 2 - 1;\n            return (float)(a[i] + a[i + 1]) / 2.0f;\n        }",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        if (l.Count == 1)\n            return l.get(0);\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        if (arr.Length % 2 == 1)\n            return (float)arr[arr.Length / 2];\n        else\n            return (float)(arr[arr.Length / 2] + arr[arr.Length / 2 - 1]) / 2.0f;",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        return (float)arr[arr.Length / 2];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[n / 2];",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        if (arr.Length % 2 == 1) {\n            return (float)arr[arr.Length / 2];\n        }\n        else {\n            return (float)(arr[arr.Length / 2] + arr[arr.Length / 2 - 1]) / 2.0f;\n        }",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        return (float)arr[arr.Length / 2];",
    "        // Write your code here\n        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        return (float)arr[arr.Length / 2];",
    "        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];\n    }\n\n    // Return the median of the two numbers a and b.\n    // >>> Median((long)3, (long)1)\n    // (float)2.0\n    // >>> Median((long)-10, (long)4)\n    // (float)3.0\n    public static float Median(long a, long b) {\n        return (float)(a + b) / 2.0f;\n    }\n\n    // Return the median of the three numbers a, b, and c.\n    // >>> Median((long)3, (long)1, (long)2)\n    // (float)2.0\n    // >>> Median((long)-10, (long)4, (long)6)\n    // (float)4.0\n    public static float Median(long a, long b, long c) {\n        return (float)(a + b + c) / 3.0f;\n    }\n\n    // Return the median of the four numbers a, b, c, and d.\n    // >>> Median((long)3, (long)1, (long)2, (long)4)\n    // (float)2.5\n    // >>> Median((long)-10, (long)4, (long)6, (long)1000)\n    // (float)4.5\n    public static float Median(long a, long b, long c, long d) {\n        return (float)(a + b + c + d) / 4.0f;\n    }\n\n    // Return the median of the five numbers a, b, c, d, and e.\n    // >>> Median((long)3, (long)1, (long)2, (long)4, (long)5)\n    // (float)3.0\n    // >>> Median((long)-10, (long)4, (long)6, (long)1000, (long)10)\n    // (float)5.0\n    public static float Median(long a, long b, long c, long d, long e) {\n        return (float)(a + b + c + d + e)",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            long m1 = a[n / 2 - 1];\n            long m2 = a[n / 2];\n            return (float)(m1 + m2) / 2.0f;\n        }",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[n / 2];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        int mid = n / 2;\n        if (n % 2 == 1)\n            return (float)l[mid];\n        long a = l[mid - 1];\n        long b = l[mid];\n        return (a + b) / 2.0f;",
    "        int n = l.Count;\n        if (n == 0) return 0;\n        if (n == 1) return l[0];\n        if (n % 2 == 1) return l[n / 2];\n        long l1 = l[n / 2 - 1];\n        long l2 = l[n / 2];\n        return (float)((l1 + l2) / 2);",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            long l1 = a[n / 2 - 1];\n            long l2 = a[n / 2];\n            return (float)(l1 + l2) / 2.0f;\n        }",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            long m = a[n / 2 - 1] + a[n / 2];\n            return (float)(m / 2);\n        }",
    "        long[] arr = l.ToArray();\n        Arrays.sort(arr);\n        if (arr.length % 2 == 1) {\n            return (float)arr[arr.length / 2];\n        }\n        else {\n            return (float)((arr[arr.length / 2] + arr[arr.length / 2 - 1]) / 2);\n        }",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        int n = l.Count;\n        if (n == 0) return 0;\n        if (n == 1) return l[0];\n        if (n % 2 == 0) {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2);\n        }\n        else {\n            return l[n / 2];\n        }",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        int mid = n / 2;\n        if (n % 2 == 1)\n            return (float)a[mid];\n        else\n            return (float)(a[mid - 1] + a[mid]) / 2.0f;",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            long l1 = a[n / 2 - 1];\n            long l2 = a[n / 2];\n            return (float)(l1 + l2) / 2.0f;\n        }",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        if (l.Count == 1)\n            return l.get(0);\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        int n = l.Count;\n        if (n == 0) return 0;\n        if (n == 1) return l[0];\n        long[] a = l.ToArray();\n        int mid = n / 2;\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (a[i] < a[j]) {\n                long temp = a[i];\n                a[i] = a[j];\n                a[j] = temp;\n                i++;\n            }\n            else {\n                j--;\n            }\n        }\n        if (a[mid] < a[i]) {\n            long temp = a[i];\n            a[i] = a[mid];\n            a[mid] = temp;\n        }\n        if (a[mid] < a[j]) {\n            long temp = a[j];\n            a[j] = a[mid];\n            a[mid] = temp;\n        }\n        return (float)a[mid];",
    "        // Write your code here\n        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        if (l.Count == 1)\n            return l[0];\n        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        return (float) arr[arr.Length / 2];\n    }\n\n    public static void main(String[] args) {\n        List<long> l = new List<long>(new long[]{3L, 1L, 2L, 4L, 5L});\n        float result = Median(l);\n        Console.WriteLine(\"{0}\", result);",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            long l1 = a[n / 2 - 1];\n            long l2 = a[n / 2];\n            return (float)(l1 + l2) / 2.0f;\n        }",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        return (float)arr[arr.Length / 2];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        int low = 0;\n        int high = n - 1;\n        while (low < high) {\n            int mid = (low + high) / 2;\n            if (l[mid] > l[high])\n                low = mid + 1;\n            else\n                high = mid;\n        }\n        return (float)l[low];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty.\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            long m = a[n / 2 - 1] + a[n / 2];\n            return (float)(m / 2);\n        }",
    "        long[] a = l.ToArray();\n        Arrays.sort(a);\n        if (a.length % 2 == 1) {\n            return (float)a[a.Length / 2];\n        }\n        else {\n            return (float)(a[a.Length / 2] + a[a.Length / 2 - 1]) / 2.0f;\n        }",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        int i = n / 2;\n        int j = n - i;\n        long a = l[i];\n        long b = l[j];\n        return (float)(a + b) / 2.0f;",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (a.Length % 2 == 1)\n            return (float)a[a.Length / 2];\n        else\n            return (float)(a[a.Length / 2] + a[a.Length / 2 - 1]) / 2.0f;",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        int mid = n / 2;\n        if (n % 2 == 1)\n            return (float)l[mid];\n        else {\n            long a = l[mid - 1];\n            long b = l[mid];\n            return (float)((a + b) / 2.0);\n        }",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            long l1 = a[n / 2 - 1];\n            long l2 = a[n / 2];\n            return (float)((l1 + l2) / 2.0);\n        }",
    "        long[] a = l.ToArray();\n        int n = a.Length;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)a[0];\n        long x = a[n / 2];\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            long k = a[i];\n            a[i] = a[j];\n            a[j] = k;\n            i++;\n            j--;\n        }\n        if (n % 2 == 1)\n            return (float)a[i];\n        else {\n            long k = a[i];\n            a[i] = a[j];\n            a[j] = k;\n            return (float)(a[i] + a[j]) / 2.0f;\n        }",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        return (float) arr[arr.Length / 2];",
    "        long[] a = l.ToArray();\n        int n = a.Length;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)a[0];\n        long m = a[n / 2];\n        if (n % 2 == 0)\n            return (float)((m + a[n / 2 - 1]) / 2.0);\n        else\n            return (float)m;",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        int i = n / 2;\n        if (n % 2 == 1)\n            return (float)l[i];\n        long a = l[i - 1];\n        long b = l[i];\n        return (float)(a + b) / 2.0f;",
    "        if (l.Count == 0) return 0;\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (n % 2 == 1)\n            return (float)a[n / 2];\n        else {\n            long m = a[n / 2 - 1] + a[n / 2];\n            return (float)(m / 2);\n        }",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        if (arr.Length % 2 == 1)\n            return (float) arr[arr.Length / 2];\n        else\n            return (float) ((arr[arr.Length / 2] + arr[arr.Length / 2 - 1]) / 2.0);",
    "        long[] arr = l.ToArray();\n        Arrays.sort(arr);\n        if (arr.length % 2 == 0) {\n            return (float) (arr[arr.Length / 2] + arr[arr.Length / 2 - 1]) / 2.0f;\n        }\n        else {\n            return (float) arr[arr.Length / 2];\n        }",
    "        long[] arr = l.ToArray();\n        int n = arr.Length;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float) arr[0];\n        long[] sorted = arr.clone();\n        Arrays.sort(sorted);\n        if (n % 2 == 1)\n            return (float) sorted[n / 2];\n        else {\n            long mid = sorted[n / 2 - 1] + sorted[n / 2];\n            return (float) (mid / 2);\n        }",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        long[] arr = l.ToArray();\n        Arrays.Sort(arr);\n        return (float)arr[arr.Length / 2];",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        if (l.Count == 1)\n            return l.get(0);\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (a.Length % 2 == 1)\n            return (float)a[a.Length / 2];\n        else\n            return (float)(a[a.Length / 2] + a[a.Length / 2 - 1]) / 2.0f;",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        if (a.Length % 2 == 1)\n            return (float)a[a.Length / 2];\n        else\n            return (float)(a[a.Length / 2] + a[a.Length / 2 - 1]) / 2.0f;",
    "        int n = l.Count;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)l[0];\n        int mid = n / 2;\n        if (n % 2 == 1)\n            return (float)l[mid];\n        else {\n            long a = l[mid - 1];\n            long b = l[mid];\n            return (a + b) / 2.0f;\n        }",
    "        if (l.Count == 0)\n            throw new Exception(\"List is empty.\");\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[a.Length / 2];",
    "        long[] a = l.ToArray();\n        int n = a.Length;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)a[0];\n        long m = a[n / 2];\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            long k = a[i];\n            a[i] = a[j];\n            a[j] = k;\n            i++;\n            j--;\n        }\n        if (n % 2 == 1)\n            return (float)a[i];\n        else {\n            long k = a[i];\n            a[i] = a[j];\n            a[j] = k;\n            return (float)(a[i] + a[j]) / 2.0f;\n        }",
    "        int n = l.Count;\n        if (n == 0) return 0;\n        if (n == 1) return l[0];\n        long[] a = l.ToArray();\n        Arrays.Sort(a);\n        return (float)a[n / 2];",
    "        long[] a = l.ToArray();\n        int n = a.Length;\n        if (n == 0)\n            throw new Exception(\"List is empty\");\n        if (n == 1)\n            return (float)a[0];\n        int i = n / 2;\n        int j = n - i;\n        if (i % 2 == 1)\n            return (float)a[i];\n        else {\n            long ai = a[i];\n            long aj = a[j];\n            return (float)(ai + aj) / 2.0f;\n        }"
  ],
  "stop_tokens": [
    "\n    }\n"
  ]
}