{
  "name": "HumanEval_16_count_distinct_characters",
  "language": "cs",
  "prompt": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n",
  "tests": "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().ToCharArray().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Select(c => c).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfg2fvf2r.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = str.ToCharArray();\n        var hashset = new HashSet<char>(chars);\n        return chars.Length - hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7af757164b3744589809d14392c383a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7af757164b3744589809d14392c383a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        var chars = str.ToCharArray();\n        var dict = new Dictionary<char, int>();\n        for (var i = 0; i < chars.Length; i++) {\n            dict[chars[i]]++;\n        }\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException: The given key 'a' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CountDistinctCharacters (System.String str) [0x00013] in <11f864b9869b4f3186c65d056279e225>:0 \n  at Problem.Main (System.String[] args) [0x00015] in <11f864b9869b4f3186c65d056279e225>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException: The given key 'a' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CountDistinctCharacters (System.String str) [0x00013] in <11f864b9869b4f3186c65d056279e225>:0 \n  at Problem.Main (System.String[] args) [0x00015] in <11f864b9869b4f3186c65d056279e225>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmraiau39.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfg2fvf2r.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of characters and their count\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Return the number of distinct characters\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpu9kqikky.cs(17,20): error CS1002: ; expected\n/tmp/tmpu9kqikky.cs(17,20): error CS1525: Invalid expression term ':'\n/tmp/tmpu9kqikky.cs(17,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of characters and their counts\n        Dictionary<char, int> charCounts = new Dictionary<char, int>();\n        for (char c : str) {\n            charCounts[c]++;\n        }\n        // Return the number of distinct characters\n        return charCounts.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2h1yczgm.cs(17,21): error CS1002: ; expected\n/tmp/tmp2h1yczgm.cs(17,21): error CS1525: Invalid expression term ':'\n/tmp/tmp2h1yczgm.cs(17,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfg2fvf2r.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of all the characters in the string\n        var dictionary = str.ToLower().ToCharArray().Select(c => (char)c).ToDictionary();\n\n        // Return the number of distinct characters in the string\n        return dictionary.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmparhp3xy_.cs(16,75): error CS1501: No overload for method 'ToDictionary' takes 0 arguments\n/tmp/tmparhp3xy_.cs(19,27): error CS0428: Cannot convert method group 'Count' to non-delegate type 'long'. Did you intend to invoke the method?\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmraiau39.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = str.ToCharArray();\n        var dict = new Dictionary<char, int>();\n        for (var c : chars) {\n            dict[c] = dict[c] + 1;\n        }\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmperwxok6x.cs(17,20): error CS1002: ; expected\n/tmp/tmperwxok6x.cs(17,20): error CS1525: Invalid expression term ':'\n/tmp/tmperwxok6x.cs(17,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Select(x => (int)x).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).Distinct();\n        return chars.Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7hs3kimt.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmraiau39.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of lowercase characters\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Count the number of elements in the dictionary\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsn6mm3h4.cs(17,20): error CS1002: ; expected\n/tmp/tmpsn6mm3h4.cs(17,20): error CS1525: Invalid expression term ':'\n/tmp/tmpsn6mm3h4.cs(17,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmraiau39.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of all the characters in the string\n        // and count the number of times each character appears\n        var dict = str.ToLower().ToCharArray().ToDictionary(\n            key => key,\n            value => value);\n\n        // Return the number of distinct characters in the string\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same key has already been added. Key: c\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement] (TSource[] source, System.Func`2[T,TResult] keySelector, System.Func`2[T,TResult] elementSelector, System.Collections.Generic.IEqualityComparer`1[T] comparer) [0x00029] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement] (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult] keySelector, System.Func`2[T,TResult] elementSelector, System.Collections.Generic.IEqualityComparer`1[T] comparer) [0x00051] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement] (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult] keySelector, System.Func`2[T,TResult] elementSelector) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.CountDistinctCharacters (System.String str) [0x0000c] in <6dda71d24cb34ee8904bc00946c3a2c9>:0 \n  at Problem.Main (System.String[] args) [0x00029] in <6dda71d24cb34ee8904bc00946c3a2c9>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with the same key has already been added. Key: c\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) [0x000dd] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement] (TSource[] source, System.Func`2[T,TResult] keySelector, ",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of all the characters in the string\n        var dict = Enumerable.From(str).ToDictionary(x => x, x => x);\n\n        // Return the number of distinct characters in the string\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphhkc73me.cs(16,31): error CS0117: 'Enumerable' does not contain a definition for 'From'\n/tmp/tmphhkc73me.cs(19,21): error CS0428: Cannot convert method group 'Count' to non-delegate type 'long'. Did you intend to invoke the method?\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = str.ToCharArray();\n        var hashset = new HashSet<char>(chars);\n        return chars.Length - hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7af757164b3744589809d14392c383a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7af757164b3744589809d14392c383a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp95mo0d34.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary that maps each character to its count\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n        for (char c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Return the number of distinct characters\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_zycurw8.cs(17,21): error CS1002: ; expected\n/tmp/tmp_zycurw8.cs(17,21): error CS1525: Invalid expression term ':'\n/tmp/tmp_zycurw8.cs(17,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToLower();\n        return chars.Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmplg4azhci.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n/tmp/tmplg4azhci.cs(16,22): error CS1061: 'int' does not contain a definition for 'Distinct' and no accessible extension method 'Distinct' accepting a first argument of type 'int' could be found (are you missing a using directive or an assembly reference?)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary that maps each character to its count\n        var dictionary = new Dictionary<char, int>();\n        for (var c : str) {\n            dictionary[c] = dictionary[c] + 1;\n        }\n        // Return the number of distinct characters\n        return dictionary.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8z0zjn99.cs(17,20): error CS1002: ; expected\n/tmp/tmp8z0zjn99.cs(17,20): error CS1525: Invalid expression term ':'\n/tmp/tmp8z0zjn99.cs(17,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of characters and their counts\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Return the number of distinct characters\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp_b0p4egb.cs(17,20): error CS1002: ; expected\n/tmp/tmp_b0p4egb.cs(17,20): error CS1525: Invalid expression term ':'\n/tmp/tmp_b0p4egb.cs(17,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmraiau39.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfg2fvf2r.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary that will hold the unique characters in the string\n        // and initialize it with the first character of the string\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n        dict[str[0]] = 1;\n\n        // Loop through the rest of the characters in the string\n        for (int i = 1; i < str.Length; i++) {\n            // If the character is already in the dictionary, then increment the count\n            if (dict.ContainsKey(str[i])) {\n                dict[str[i]]++;\n            }\n            // Otherwise, add the character to the dictionary\n            else {\n                dict[str[i]] = 1;\n            }\n        }\n\n        // Return the number of unique characters in the string\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside the bounds of the array.\n  at Problem.CountDistinctCharacters (System.String str) [0x00007] in <605fa782b46b4e1ab15f624f6b5a10a1>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <605fa782b46b4e1ab15f624f6b5a10a1>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the array.\n  at Problem.CountDistinctCharacters (System.String str) [0x00007] in <605fa782b46b4e1ab15f624f6b5a10a1>:0 \n  at Problem.Main (System.String[] args) [0x00001] in <605fa782b46b4e1ab15f624f6b5a10a1>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return chars.Count(x => hashset.Contains(x));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvvc4978m.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().ToCharArray().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmraiau39.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmraiau39.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmraiau39.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmraiau39.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of characters and their counts\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n        for (char c : str.ToCharArray()) {\n            dict[c] = dict[c] + 1;\n        }\n        // Return the number of distinct characters\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfw4v34xb.cs(17,21): error CS1002: ; expected\n/tmp/tmpfw4v34xb.cs(17,21): error CS1525: Invalid expression term ':'\n/tmp/tmpfw4v34xb.cs(17,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfg2fvf2r.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmraiau39.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of all the characters in the string\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Return the number of distinct characters in the string\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2njxhczn.cs(17,20): error CS1002: ; expected\n/tmp/tmp2njxhczn.cs(17,20): error CS1525: Invalid expression term ':'\n/tmp/tmp2njxhczn.cs(17,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of all the characters in the string\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Count the number of unique characters\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpia2_q02s.cs(17,20): error CS1002: ; expected\n/tmp/tmpia2_q02s.cs(17,20): error CS1525: Invalid expression term ':'\n/tmp/tmpia2_q02s.cs(17,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmraiau39.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8vywxi6l.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var result = Enumerable.From(str).Distinct().ToArray();\n        return result.Length;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmph4ggjhwc.cs(15,33): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmraiau39.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = str.ToCharArray();\n        var hashset = new HashSet<char>(chars);\n        return chars.Length - hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7af757164b3744589809d14392c383a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7af757164b3744589809d14392c383a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of characters and their count\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Return the number of distinct characters\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpu9kqikky.cs(17,20): error CS1002: ; expected\n/tmp/tmpu9kqikky.cs(17,20): error CS1525: Invalid expression term ':'\n/tmp/tmpu9kqikky.cs(17,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfg2fvf2r.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = str.ToCharArray();\n        var hashset = new HashSet<char>(chars);\n        return chars.Length - hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7af757164b3744589809d14392c383a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7af757164b3744589809d14392c383a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = str.ToCharArray();\n        var hashset = new HashSet<char>(chars);\n        return chars.Length - hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7af757164b3744589809d14392c383a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7af757164b3744589809d14392c383a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Select(x => (int)x).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of characters and their count\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Return the number of distinct characters\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpu9kqikky.cs(17,20): error CS1002: ; expected\n/tmp/tmpu9kqikky.cs(17,20): error CS1525: Invalid expression term ':'\n/tmp/tmpu9kqikky.cs(17,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8vywxi6l.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8vywxi6l.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of all the characters in the string\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Count the number of distinct characters in the string\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfnwmihfc.cs(17,20): error CS1002: ; expected\n/tmp/tmpfnwmihfc.cs(17,20): error CS1525: Invalid expression term ':'\n/tmp/tmpfnwmihfc.cs(17,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of characters and their count\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Convert the dictionary to a sorted list of tuples\n        var sortedList = dict.ToSortedList(a => a.Key);\n        // Return the number of distinct characters\n        return sortedList.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpq71sympj.cs(17,20): error CS1002: ; expected\n/tmp/tmpq71sympj.cs(17,20): error CS1525: Invalid expression term ':'\n/tmp/tmpq71sympj.cs(17,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of all the characters in the string\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Return the number of distinct characters in the string\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2njxhczn.cs(17,20): error CS1002: ; expected\n/tmp/tmp2njxhczn.cs(17,20): error CS1525: Invalid expression term ':'\n/tmp/tmp2njxhczn.cs(17,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp95mo0d34.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of all the characters in the string\n        var dict = Enumerable.From(str).ToDictionary(x => x, x => x);\n\n        // Return the number of distinct characters in the string\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphhkc73me.cs(16,31): error CS0117: 'Enumerable' does not contain a definition for 'From'\n/tmp/tmphhkc73me.cs(19,21): error CS0428: Cannot convert method group 'Count' to non-delegate type 'long'. Did you intend to invoke the method?\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of all the characters in the string\n        // and count the number of times each character appears\n        var dict = str.ToLower().ToCharArray().Select(c => (char)c).ToDictionary();\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292797,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpg_v5yhnw.cs(17,69): error CS1501: No overload for method 'ToDictionary' takes 0 arguments\n/tmp/tmpg_v5yhnw.cs(18,21): error CS0428: Cannot convert method group 'Count' to non-delegate type 'long'. Did you intend to invoke the method?\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var result = Enumerable.Empty<char>();\n        for (var c : str) {\n            result = result.Concat(Enumerable.Repeat(c, 1).Distinct());\n        }\n        return result.Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpxyqtacb5.cs(16,20): error CS1002: ; expected\n/tmp/tmpxyqtacb5.cs(16,20): error CS1525: Invalid expression term ':'\n/tmp/tmpxyqtacb5.cs(16,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of all the characters in the string\n        // and count the number of times each character appears\n        // >>> d = {c for c in str}\n        // >>> len(d)\n        // (3L)\n        // >>> len(set(d))\n        // (3L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n        // >>> len(set(d).symmetric_difference(d))\n        // (0L)\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292797,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgnfmay8f.cs(14,24): error CS0161: 'Problem.CountDistinctCharacters(string)': not all code paths return a value\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => x).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292797,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpinr7uhnt.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Select(x => (int)x).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfg2fvf2r.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary that maps each character to its count\n        // Dictionary<char, int> dict = new Dictionary<char, int>();\n        // foreach (char c in str)\n        //     dict[c] = dict[c] + 1;\n        // return dict.Count;\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292797,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8vywxi6l.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().ToCharArray().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfg2fvf2r.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Select(x => x).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292797,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().ToCharArray().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = str.ToCharArray();\n        var charsCount = chars.Length;\n        var charsCountDistinct = chars.Distinct().Count();\n        return charsCountDistinct;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292797,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <702e25a6dab1416e97bc12d3dd48e710>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <702e25a6dab1416e97bc12d3dd48e710>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmraiau39.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of all the characters in the string\n        var dict = Enumerable.From(str).ToDictionary(x => x, x => x);\n\n        // Return the number of distinct characters in the string\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmphhkc73me.cs(16,31): error CS0117: 'Enumerable' does not contain a definition for 'From'\n/tmp/tmphhkc73me.cs(19,21): error CS0428: Cannot convert method group 'Count' to non-delegate type 'long'. Did you intend to invoke the method?\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Select(x => x).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292797,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of characters\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Count the number of distinct characters\n        var count = 0;\n        for (var c : dict) {\n            if (c > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpsk06t64l.cs(17,20): error CS1002: ; expected\n/tmp/tmpsk06t64l.cs(17,20): error CS1525: Invalid expression term ':'\n/tmp/tmpsk06t64l.cs(17,20): error CS1001: Identifier expected\n/tmp/tmpsk06t64l.cs(22,20): error CS1002: ; expected\n/tmp/tmpsk06t64l.cs(22,20): error CS1525: Invalid expression term ':'\n/tmp/tmpsk06t64l.cs(22,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8vywxi6l.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8vywxi6l.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of all the characters in the string\n        IDictionary<char, int> charDict = new Dictionary<char, int>();\n        for (int i = 0; i < str.Length; i++) {\n            char c = str[i];\n            if (!charDict.ContainsKey(c)) {\n                charDict.Add(c, 1);\n            }\n            else {\n                charDict[c]++;\n            }\n        }\n        // Count the number of keys in the dictionary\n        return charDict.Keys.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292797,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5853d2c88642476198c79d24c882287b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <5853d2c88642476198c79d24c882287b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmraiau39.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = str.ToCharArray();\n        var hashset = new HashSet<Char>(chars);\n        return hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292797,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7d0f46a22bec40769013c033dec560e6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7d0f46a22bec40769013c033dec560e6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfg2fvf2r.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Select(x => (int)x).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).Distinct();\n        return chars.Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7hs3kimt.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmraiau39.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of all the characters in the string\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Return the number of distinct characters in the string\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp2njxhczn.cs(17,20): error CS1002: ; expected\n/tmp/tmp2njxhczn.cs(17,20): error CS1525: Invalid expression term ':'\n/tmp/tmp2njxhczn.cs(17,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8vywxi6l.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of characters and their counts\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c]++;\n        }\n        // Return the number of distinct characters\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyk_b_h_f.cs(17,20): error CS1002: ; expected\n/tmp/tmpyk_b_h_f.cs(17,20): error CS1525: Invalid expression term ':'\n/tmp/tmpyk_b_h_f.cs(17,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfg2fvf2r.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8vywxi6l.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmraiau39.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8vywxi6l.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8vywxi6l.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8vywxi6l.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Select(x => x).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292797,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary that maps each character to its count\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n        for (char c : str.ToCharArray()) {\n            dict[c]++;\n        }\n        // Return the number of distinct characters\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp9yq62sw1.cs(17,21): error CS1002: ; expected\n/tmp/tmp9yq62sw1.cs(17,21): error CS1525: Invalid expression term ':'\n/tmp/tmp9yq62sw1.cs(17,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8vywxi6l.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of characters and their counts\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c]++;\n        }\n        // Return the number of distinct characters\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpyk_b_h_f.cs(17,20): error CS1002: ; expected\n/tmp/tmpyk_b_h_f.cs(17,20): error CS1525: Invalid expression term ':'\n/tmp/tmpyk_b_h_f.cs(17,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var result = 0;\n        for (var ch : str) {\n            result += (ch.ToLower() == ch) ? 1 : 0;\n        }\n        return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp3mh_bzxu.cs(16,21): error CS1002: ; expected\n/tmp/tmp3mh_bzxu.cs(16,21): error CS1525: Invalid expression term ':'\n/tmp/tmp3mh_bzxu.cs(16,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Select(x => (int)x).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp8vywxi6l.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of characters and their count\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Return the number of distinct characters\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpu9kqikky.cs(17,20): error CS1002: ; expected\n/tmp/tmpu9kqikky.cs(17,20): error CS1525: Invalid expression term ':'\n/tmp/tmpu9kqikky.cs(17,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmraiau39.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).Distinct();\n        return chars.Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp7hs3kimt.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of all the characters in the string\n        var dictionary = new Dictionary<char, int>();\n        for (var c : str) {\n            dictionary[c] = dictionary[c] + 1;\n        }\n        // Count the number of elements in the dictionary\n        return dictionary.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp1y08u3vx.cs(17,20): error CS1002: ; expected\n/tmp/tmp1y08u3vx.cs(17,20): error CS1525: Invalid expression term ':'\n/tmp/tmp1y08u3vx.cs(17,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp95mo0d34.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Select(c => (int)c).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292797,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = str.ToCharArray();\n        var hashset = new HashSet<char>(chars);\n        return chars.Length - hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7af757164b3744589809d14392c383a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7af757164b3744589809d14392c383a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        return chars.Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpfg2fvf2r.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().ToCharArray().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Select(x => (int)x).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp95mo0d34.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Write your code here\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmraiau39.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpmraiau39.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = Enumerable.From(str).ToArray();\n        var hashset = new HashSet<char>(chars);\n        return chars.Count(x => hashset.Contains(x));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpvvc4978m.cs(15,32): error CS0117: 'Enumerable' does not contain a definition for 'From'\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of characters and their counts\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n        for (char c : str) {\n            dict[c]++;\n        }\n        // Count the number of characters in the dictionary\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpgbd7chx4.cs(17,21): error CS1002: ; expected\n/tmp/tmpgbd7chx4.cs(17,21): error CS1525: Invalid expression term ':'\n/tmp/tmpgbd7chx4.cs(17,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = str.ToCharArray();\n        var hashset = new HashSet<char>(chars);\n        return chars.Length - hashset.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7af757164b3744589809d14392c383a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[] args) [0x00000] in <7af757164b3744589809d14392c383a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of characters\n        Dictionary<char, int> dict = new Dictionary<char, int>();\n        for (char c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Count the number of unique characters\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpdtlyz7w4.cs(17,21): error CS1002: ; expected\n/tmp/tmpdtlyz7w4.cs(17,21): error CS1525: Invalid expression term ':'\n/tmp/tmpdtlyz7w4.cs(17,21): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of all the characters in the string\n        var dict = new Dictionary<char, int>();\n        for (var c : str) {\n            dict[c] = dict[c] + 1;\n        }\n        // Count the number of distinct characters\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292796,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmpkne_4jo3.cs(17,20): error CS1002: ; expected\n/tmp/tmpkne_4jo3.cs(17,20): error CS1525: Invalid expression term ':'\n/tmp/tmpkne_4jo3.cs(17,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        // Create a dictionary of all the characters in the string\n        var dictionary = new Dictionary<char, int>();\n        for (var c : str) {\n            dictionary[c] = dictionary[c] + 1;\n        }\n        // Return the number of distinct characters\n        return dictionary.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292797,
      "stdout": "Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n/tmp/tmp492u_odp.cs(17,20): error CS1002: ; expected\n/tmp/tmp492u_odp.cs(17,20): error CS1525: Invalid expression term ':'\n/tmp/tmp492u_odp.cs(17,20): error CS1001: Identifier expected\n",
      "stderr": "",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var chars = str.ToCharArray();\n        var count = chars.Length;\n        var dict = new Dictionary<char, int>();\n        for (var i = 0; i < chars.Length; i++) {\n            var c = chars[i];\n            dict[c] = dict[c] + 1;\n        }\n        return dict.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292797,
      "stdout": "",
      "stderr": "\nUnhandled Exception:\nSystem.Collections.Generic.KeyNotFoundException: The given key 'a' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CountDistinctCharacters (System.String str) [0x0001c] in <41cbb36077164f6488c3bc5cce118ab8>:0 \n  at Problem.Main (System.String[] args) [0x00015] in <41cbb36077164f6488c3bc5cce118ab8>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Collections.Generic.KeyNotFoundException: The given key 'a' was not present in the dictionary.\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item (TKey key) [0x0001e] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.CountDistinctCharacters (System.String str) [0x0001c] in <41cbb36077164f6488c3bc5cce118ab8>:0 \n  at Problem.Main (System.String[] args) [0x00015] in <41cbb36077164f6488c3bc5cce118ab8>:0 \n",
      "exit_code": 1,
      "status": "OK"
    },
    {
      "program": "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        return str.ToLower().Select(x => x).Distinct().Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n",
      "timestamp": 1664292797,
      "stdout": "",
      "stderr": "None",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}