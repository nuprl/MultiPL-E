name: HumanEval_151_double_the_difference
language: swift
prompt: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
  /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
  /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
  \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
  \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
  \ [Double]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(double_the_difference(lst: [] as [Double])\
  \ == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
  \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
  \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
  \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
  \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
completions: ["    var sum = 0\n    for number in lst {\n        if ((number - floor(number))\
    \ == 0) && (number >= 0) && (number % 2 != 0) {\n            sum += Int(pow(number,\
    \ 2))\n        }\n    }\n    return sum", '  fatalError("not implemented")', " \
    \   var sum_odd_squares = 0\n    for num in lst {\n        if num > 0 && num ==\
    \ floor(num) {\n            if num % 2 == 1 {\n                sum_odd_squares\
    \ += Int(pow(num, 2))\n            }\n        }\n    }\n    return sum_odd_squares",
  "    // Your code here\n    let lst1 = lst.filter({ $0 % 2 == 1 })\n    let lst2\
    \ = lst1.map({ $0 * $0 })\n    let lst3 = lst2.filter({ $0 > 0 })\n    let lst4\
    \ = lst3.filter({ Double($0) == $0 })\n    return lst4.reduce(0, +)", '    return
    0', "    var sum = 0\n    for elem in lst {\n        if elem >= 0 && elem == floor(elem)\
    \ && elem % 2 == 1 {\n            sum += Int(elem) * Int(elem)\n        }\n  \
    \  }\n    return sum", "    let odd_lst = lst.filter { $0 % 2 == 1 }\n    return\
    \ odd_lst.reduce(0) { x, y in x + Int(y*y) }", "    let filtered_list = lst.filter{\
    \ Int($0) == $0 && $0 >= 0 }\n    let filtered_odd_list = filtered_list.filter{\
    \ $0 % 2 == 1 }\n    let sum_of_squares = filtered_odd_list.reduce(0) { $0 + Int($1)\
    \ * Int($1) }\n    return sum_of_squares", "    var total = 0\n    for n in lst\
    \ {\n        if n.truncatingRemainder(dividingBy: 2) == 1 && n > 0 {\n       \
    \     total += Int(n * n)\n        }\n    }\n    return total", "    let odds\
    \ = filter(lst) { $0 % 2 == 1 }\n    let doubles = map(odds) { $0 * $0 }\n   \
    \ return reduce(doubles, 0) { $0 + $1 }", "    // --START--\n    return 0\n  \
    \  // --END--", '    return 0', '    return 0', "\tvar result = 0\n\tfor i in\
    \ lst {\n\t\tif (i > 0) && (i.truncatingRemainder(dividingBy: 1) == 0) {\n\t\t\
    \tif i.truncatingRemainder(dividingBy: 2) != 0 {\n\t\t\t\tresult += Int(pow(i,\
    \ 2))\n\t\t\t}\n\t\t}\n\t}\n\treturn result", "    var diff = 0\n    for i in\
    \ lst {\n        if !(i.isInteger) || i < 0 {\n            continue\n        }\n\
    \        if i % 2 == 1 {\n            diff += Int(i * i)\n        }\n    }\n \
    \   return diff", "    let squareTheNum = lst.map{$0 * $0}\n    let oddNum = squareTheNum.filter{$0\
    \ % 2 != 0}\n    let sum = oddNum.reduce(0, combine: +)\n    return sum", "  \
    \  return lst.filter({\n        Int($0) % 2 == 1\n    }).map({\n        $0 * $0\n\
    \    }).reduce(0, combine: +)", '  return 0', "    var sum: Double = 0\n    for\
    \ i in lst {\n        if (i%2 != 0) {\n            sum += pow(i, 2)\n        }\n\
    \    }\n    return Int(sum)", "    let odd = lst.filter { $0 % 2 == 1 }\n    let\
    \ squared = odd.map { $0 * $0 }\n    return Int(squared.reduce(0, combine: +))"]
stop_tokens:
- "\n}"
