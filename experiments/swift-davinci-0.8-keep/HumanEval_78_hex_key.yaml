name: HumanEval_78_hex_key
language: swift
prompt: "\n/// You have been tasked to write a function that receives \n/// a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n/// digits that are\
  \ primes (prime number, or a prime, is a natural number \n/// greater than 1 that\
  \ is not a product of two smaller natural numbers).\n/// Hexadecimal digits are\
  \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3, 5,\
  \ 7, 11, 13, 17,...\n/// So you have to determine a number of the following digits:\
  \ 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may assume\
  \ the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F are\
  \ always uppercase.\n/// Examples:\n/// For num = \"AB\" the output should be 1.\n\
  /// For num = \"1077E\" the output should be 2.\n/// For num = \"ABED1A33\" the\
  \ output should be 4.\n/// For num = \"123456789ABCDEF0\" the output should be 6.\n\
  /// For num = \"2020\" the output should be 2.\nfunc hex_key(num: String) -> Int\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(hex_key(num: \"AB\") == 1)\nassert(hex_key(num:\
  \ \"1077E\") == 2)\nassert(hex_key(num: \"ABED1A33\") == 4)\nassert(hex_key(num:\
  \ \"2020\") == 2)\nassert(hex_key(num: \"123456789ABCDEF0\") == 6)\nassert(hex_key(num:\
  \ \"112233445566778899AABBCCDDEEFF00\") == 12)"
completions: ["    let num = num.map {(c: Character) -> Int in\n        if let code\
    \ = Int(String(c), radix: 16) {\n            return code\n        }\n        return\
    \ 0\n    }\n    let digits = num.filter {(num: Int) -> Bool in\n        if num\
    \ == 2 || num == 3 || num == 5 || num == 7 || num == 11 || num == 13 {\n     \
    \       return true\n        }\n        return false\n    }\n    return digits.count",
  "    if num.count == 0 {\n        return 0\n    }\n    var hexes: [Character] =\
    \ [Character]()\n    var counter: Int = 0\n    for c in num {\n        if c >=\
    \ \"A\" && c <= \"F\" {\n            hexes.append(c)\n        }\n    }\n    for\
    \ hex in hexes {\n        if is_prime(n: Int(String(hex), radix: 16)!) {\n   \
    \         counter += 1\n        }\n    }\n    return counter", "\tvar dict: [Character:\
    \ Int] = [\"0\": 0, \"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6,\
    \ \"7\": 7, \"8\": 8, \"9\": 9, \"A\": 10, \"B\": 11, \"C\": 12, \"D\": 13, \"\
    E\": 14, \"F\": 15]\n\tvar res = 0\n\tvar num = num\n\tfor key in dict.keys {\n\
    \t\twhile num.contains(key) {\n\t\t\tres += isPrime(num: dict[key]!) ? 1 : 0\n\
    \t\t\tnum = num.replacingOccurrences(of: \"\\(key)\", with: \"\")\n\t\t}\n\t}\n\
    \treturn res", "    let hex = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\"\
    ,\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    let primes = [\"2\",\"\
    3\",\"5\",\"7\",\"B\",\"D\"]\n    var count = 0\n    for i in num {\n        if\
    \ primes.contains(String(i)) {\n            count += 1\n        }\n    }\n   \
    \ return count", "    let num = num.uppercased()\n    let primes: Set<Character>\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    return num.filter { primes.contains($0)\
    \ }.count", "    let allowed = \"23456789ABD\".characters.map{ String($0) }\n\
    \    return allowed.filter{ num.characters.contains($0.characters.first!) }.count",
  "    let hex_primes = [0x2, 0x3, 0x5, 0x7, 0xb, 0xd]\n    let n = num.unicodeScalars.filter({(hex_primes.contains($0.value)\
    \ || (0xa...0xf).contains($0.value))}).count\n    return n", "    var arr = Array(num)\n\
    \    var count = 0\n    for i in 0..<arr.count {\n        if arr[i] == \"2\" ||\
    \ arr[i] == \"3\" || arr[i] == \"5\" || arr[i] == \"7\" || arr[i] == \"B\" ||\
    \ arr[i] == \"D\" {\n            count += 1\n        }\n    }\n    return count",
  "    let primes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var result = 0\n\
    \    for c in num {\n        if primes.contains(String(c)) {\n            result\
    \ += 1\n        }\n    }\n    return result", "    let hex = \"0123456789ABCDEF\"\
    \n    let primes = [2, 3, 5, 7, 11, 13]\n    return num.filter { primes.contains(hex.firstIndex(of:\
    \ $0)! + 1) }.count", "    let hex_nums = [2, 3, 5, 7, 11, 13]\n    var total\
    \ = 0\n    let array = Array(num)\n    for i in array {\n        let char_to_int\
    \ = Int(String(i), radix: 16)\n        let hex_num = hex_nums.filter({$0 == char_to_int})\n\
    \        if hex_num.count > 0 {\n            total += 1\n        }\n    }\n  \
    \  return total", "    let hexes = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n\
    \    return num.filter { hexes.contains($0) }.count", "    var res = 0\n    for\
    \ i in num {\n        if isHexPrime(i) {\n            res += 1\n        }\n  \
    \  }\n    return res", "    let regex = try! NSRegularExpression(pattern: \"([2-7]|[B-D])\"\
    , options: [])\n    let matches = regex.matches(in: num, options: [], range: NSRange(location:\
    \ 0, length: num.count))\n    return matches.count", "    var primes = [2, 3,\
    \ 5, 7, 11, 13]\n    var count = 0\n    for c in num {\n        let ch = \"\\\
    (c)\"\n        if let n = Int(ch, radix: 16) {\n            if primes.contains(n)\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count",
  '    return 0', "    var output = 0\n    let hexes = [\"0\", \"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\"\
    , \"F\"]\n    let primes = [2, 3, 5, 7, 11, 13]\n    for digit in num {\n    \
    \    if primes.contains(hexes.firstIndex(of: String(digit))!) {\n            output\
    \ += 1\n        }\n    }\n    return output", "    let hex_prime_digits = [\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\"]\n    var result = 0\n    for digit in\
    \ num {\n        if hex_prime_digits.contains(String(digit)) {\n            result\
    \ += 1\n        }\n    }\n    return result", "    let prime = [\"2\", \"3\",\
    \ \"5\", \"7\", \"B\", \"D\"]\n    var num_arr = [Character]()\n    for c in num\
    \ {\n        num_arr.append(c)\n    }\n    return num_arr.filter({prime.contains($0.description)}).count",
  "    let hexDigits = \"0123456789ABCDEF\"\n    let hexPrimes = \"2357BDF\"\n   \
    \ let setPrimes = Set(hexPrimes.characters)\n    let setDigits = Set(hexDigits.characters)\n\
    \    let isValid = Array(num.characters).reduce(true) { (acc, ch) in acc && setDigits.contains(ch)\
    \ }\n    return isValid ? Array(num.characters).reduce(0) { (acc, ch) in acc +\
    \ (setPrimes.contains(ch) ? 1 : 0) } : 0"]
stop_tokens:
- "\n}"
