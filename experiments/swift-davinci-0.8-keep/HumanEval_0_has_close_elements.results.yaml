language: swift
name: HumanEval_0_has_close_elements
results:
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    while i < numbers.count - 1 {\n      \
    \  var j = i + 1\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: -4
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var numbersLeft: [Double] = numbers.sorted(by: {$0 <\
    \ $1})\n    var numbersRight: [Double] = numbers.sorted(by: {$0 > $1})\n    while\
    \ numbersLeft.count > 0 && numbersRight.count > 0 {\n        if Double(numbersLeft.last!)\
    \ - Double(numbersRight.last!) <= threshold {\n            return true\n     \
    \   }\n        if Double(numbersLeft.last!) > Double(numbersRight.last!) {\n \
    \           numbersLeft.removeLast()\n        } else {\n            numbersRight.removeLast()\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmptrd7zn4z/tmptrd7zn4z.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8e38e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8e35dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8e35da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8e35d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptrd7zn4z                        0x0000564f1ade4771 <unavailable> + 6001

    5    libc.so.6                          0x00002ae8e3acf460 __libc_start_main +
    245

    6    tmptrd7zn4z                        0x0000564f1ade4299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013523
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    let sorted_numbers = numbers.sorted()\n    for i in 0\
    \ ..< sorted_numbers.count - 1 {\n        if abs(sorted_numbers[i] - sorted_numbers[i\
    \ + 1]) < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013523
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var has_close_elements = false\n    var index = 0\n \
    \   while index < numbers.count - 1 && !has_close_elements {\n        var inner_index\
    \ = index + 1\n        while inner_index < numbers.count && !has_close_elements\
    \ {\n            has_close_elements = abs(numbers[index] - numbers[inner_index])\
    \ < threshold\n            inner_index += 1\n        }\n        index += 1\n \
    \   }\n    return has_close_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013523
- exit_code: -4
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n  for n in numbers {\n    for k in numbers {\n      if n\
    \ != k && abs(n - k) < threshold {\n        return true\n      }\n    }\n  }\n\
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpzzsx_z68/tmpzzsx_z68.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9b00b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9afda8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9afda8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9afda77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzzsx_z68                        0x0000564fb064c9ec <unavailable> + 6636

    5    libc.so.6                          0x00002ae9b029d460 __libc_start_main +
    245

    6    tmpzzsx_z68                        0x0000564fb064c1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013523
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0 ..< numbers.count {\n        for j in i+1\
    \ ..< numbers.count {\n            if abs(numbers[i] - numbers[j]) < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013523
- exit_code: -4
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpgsad__49/tmpgsad__49.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba69227ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba691f75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba691f75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba691f747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgsad__49                        0x000056329a0ea37e <unavailable> + 4990

    5    libc.so.6                          0x00002ba69246a460 __libc_start_main +
    245

    6    tmpgsad__49                        0x000056329a0e9fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013523
- exit_code: -4
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    return numbers.enumerated().reduce(false) { (acc, index)\
    \ -> Bool in\n        guard !acc else { return true }\n        return index.offset\
    \ != 0 ? numbers[index.offset - 1] < (index.element + threshold) : false\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpc7dgssdm/tmpc7dgssdm.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3bc63b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3bc60a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3bc60a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3bc60a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc7dgssdm                        0x0000557c650d3691 <unavailable> + 5777

    5    libc.so.6                          0x00002b3bc659d460 __libc_start_main +
    245

    6    tmpc7dgssdm                        0x0000557c650d31b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660013523
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: -4
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 1..<numbers.count {\n        if abs(numbers[i]\
    \ - numbers[i - 1]) < threshold {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpi40ldhrw/tmpi40ldhrw.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80b1ef7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80b1beeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80b1bee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80b1bed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi40ldhrw                        0x0000556c73ffe894 <unavailable> + 6292

    5    libc.so.6                          0x00002b80b20e3460 __libc_start_main +
    245

    6    tmpi40ldhrw                        0x0000556c73ffe2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013523
- exit_code: -4
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n  var has = false\n  var prev = 0.0\n  for i in numbers {\n\
    \    if i - prev < threshold {\n      has = true\n    }\n    prev = i\n  }\n \
    \ return has\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpwbmrby8g/tmpwbmrby8g.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d5bae4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d5b7dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d5b7db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d5b7da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbmrby8g                        0x0000558f7e5c95e1 <unavailable> + 5601

    5    libc.so.6                          0x00002b1d5bcd0460 __libc_start_main +
    245

    6    tmpwbmrby8g                        0x0000558f7e5c9109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660013523
- exit_code: -4
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    if threshold > 0 {\n        var i = 0\n        while\
    \ i < numbers.count - 1 {\n            if abs(numbers[i] - numbers[i + 1]) < threshold\
    \ {\n                return true\n            }\n            i += 1\n        }\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpklqxz3vr/tmpklqxz3vr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abab1b2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abab1822b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abab1822988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abab18217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpklqxz3vr                        0x0000558e07684704 <unavailable> + 5892

    5    libc.so.6                          0x00002abab1d17460 __libc_start_main +
    245

    6    tmpklqxz3vr                        0x0000558e07684139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013523
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count-1\
    \ {\n        if abs(sortedNumbers[i] - sortedNumbers[i+1]) < threshold {\n   \
    \         return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    var count =\
    \ sortedNumbers.count\n    var i = 0\n    while i < count - 1 {\n        var current\
    \ = sortedNumbers[i]\n        var next = sortedNumbers[i + 1]\n        if next\
    \ - current < threshold {\n            return true\n        }\n        i += 1\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013523
- exit_code: -4
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var newNumbers = numbers\n    while newNumbers.count\
    \ > 1 {\n        var min: Double = 100\n        var minIndex: Int = -1\n     \
    \   for index in 0...newNumbers.count - 1 {\n            if index + 1 < newNumbers.count\
    \ {\n                let diff = abs(newNumbers[index] - newNumbers[index + 1])\n\
    \                if diff < min {\n                    min = diff\n           \
    \         minIndex = index\n                }\n            }\n        }\n    \
    \    if min < threshold {\n            return true\n        }\n        newNumbers.remove(at:\
    \ minIndex)\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmp9tse0d02/tmp9tse0d02.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca71a04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca716fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca716fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca716fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9tse0d02                        0x000055937b496b0c <unavailable> + 6924

    5    libc.so.6                          0x00002aca71bf0460 __libc_start_main +
    245

    6    tmp9tse0d02                        0x000055937b496319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013523
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n    for i\
    \ in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i] < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 1
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    if numbers.count == 0 {\n        return false\n    }\n\
    \    if numbers.count == 1 {\n        return false\n    }\n    if numbers.count\
    \ == 2 {\n        if fabs(numbers[0] - numbers[1]) <= threshold {\n          \
    \  return true\n        }\n        return false\n    }\n    var sorted_numbers\
    \ = numbers\n    sorted_numbers.sort()\n    var right_idx = sorted_numbers.count\
    \ - 1\n    var left_idx = right_idx - 1\n    while left_idx >= 0 {\n        if\
    \ fabs(sorted_numbers[left_idx] - sorted_numbers[right_idx]) <= threshold {\n\
    \            return true\n        }\n        left_idx -= 1\n        right_idx\
    \ -= 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpviilomfo.swift:16:12: error: cannot find 'fabs' in scope\n    \
    \    if fabs(numbers[0] - numbers[1]) <= threshold {\n           ^~~~\n/tmp/tmpviilomfo.swift:26:12:\
    \ error: cannot find 'fabs' in scope\n        if fabs(sorted_numbers[left_idx]\
    \ - sorted_numbers[right_idx]) <= threshold {\n           ^~~~\n"
  stdout: ''
  timestamp: 1660013523
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    guard numbers.count > 1 else {\n        return false\n\
    \    }\n    var numbers = numbers\n    numbers.sort()\n    for i in 0..<numbers.count\
    \ - 1 {\n        if numbers[i + 1] - numbers[i] < threshold {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013523
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var result = false\n    for (index, element) in numbers.enumerated()\
    \ {\n        for otherElement in numbers[index + 1..<numbers.count] {\n      \
    \      if (abs(element - otherElement) < threshold) {\n                result\
    \ = true\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013523
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in 0..<numbers.count\
    \ {\n            if (i != j) && (abs(numbers[i] - numbers[j]) < threshold) {\n\
    \                return true\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013523
