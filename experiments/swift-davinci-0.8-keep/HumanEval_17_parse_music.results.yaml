language: swift
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    /// Your code goes here\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: '/tmp/tmpilmexuq5.swift:13:1: error: missing return in global function expected
    to return ''[Int]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    \n    var beats: [Int] = []\n    let beats_legend: [Character:\
    \ Int] = [\"o\": 4, \"o|\": 2, \".|\": 1]\n    \n    let music_components = music_string.split(separator:\
    \ \" \")\n    \n    for component in music_components {\n        if let beat =\
    \ beats_legend[component.first!] {\n            beats.append(beat)\n        }\n\
    \    }\n    \n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7t6zrbwp.swift:14:51: error: cannot convert value of type 'String'\
    \ to expected dictionary key type 'Character'\n    let beats_legend: [Character:\
    \ Int] = [\"o\": 4, \"o|\": 2, \".|\": 1]\n                                  \
    \                ^\n/tmp/tmp7t6zrbwp.swift:14:60: error: cannot convert value\
    \ of type 'String' to expected dictionary key type 'Character'\n    let beats_legend:\
    \ [Character: Int] = [\"o\": 4, \"o|\": 2, \".|\": 1]\n                      \
    \                                     ^\n"
  stdout: ''
  timestamp: 1660013783
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    music_string.replacingOccurrences(of:\
    \ \" \", with: \"\").forEach { char in\n        switch char {\n        case \"\
    o\":\n            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0i9ywic4.swift:13:18: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    music_string.replacingOccurrences(of: \" \", with:\
    \ \"\").forEach { char in\n    ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    for char in music_string {\n\
    \        switch char {\n        case \"o\":\n            result.append(4)\n  \
    \      case \"|\":\n            if music_string[music_string.index(before: music_string.endIndex)]\
    \ == \"o\" {\n                result.append(2)\n            } else {\n       \
    \         result.append(1)\n            }\n        default:\n            print(\"\
    How did this happen?\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp5hnadviy/tmp5hnadviy.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d5532dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d55024b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d55024988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d550237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hnadviy                        0x0000562a9b03ac61 <unavailable> + 7265

    5    libc.so.6                          0x00002b0d55519460 __libc_start_main +
    245

    6    tmp5hnadviy                        0x0000562a9b03a519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: -1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var array = [Int]()\n    var musicString = music_string\n\
    \    while musicString.count > 0 {\n        if musicString.starts(with: \"o\"\
    ) {\n            array.append(4)\n            musicString.removeFirst()\n    \
    \    } else if musicString.starts(with: \"o|\") {\n            array.append(2)\n\
    \            musicString.removeFirst(2)\n        } else if musicString.starts(with:\
    \ \".|\") {\n            array.append(1)\n            musicString.removeFirst(2)\n\
    \        }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013788
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var notes = music_string.split(separator:\
    \ \" \")\n    for note in notes {\n        if note.contains(\"o\") {\n       \
    \     if note.contains(\"|\") {\n                result.append(2)\n          \
    \  } else {\n                result.append(4)\n            }\n        } else {\n\
    \            result.append(1)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    let arr = music_string.components(separatedBy:\
    \ \" \")\n    for i in arr {\n        if i == \"o\" {\n            beats.append(4)\n\
    \        } else if i == \"o|\" {\n            beats.append(2)\n        } else\
    \ if i == \".|\" {\n            beats.append(1)\n        }\n    }\n    return\
    \ beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpiv0jvepj.swift:13:28: error: value of type 'String' has no member\
    \ 'components'\n    let arr = music_string.components(separatedBy: \" \")\n  \
    \            ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013783
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let music_string = music_string.replacingOccurrences(of:\
    \ \"\\\\s\", with: \"\", options: .regularExpression)\n    var beat_ints: [Int]\
    \ = []\n    var last_char = music_string.startIndex\n    for index in music_string.indices\
    \ {\n        if music_string[index] == \"|\" || music_string[index] == \" \" {\n\
    \            let str = music_string[last_char..<index]\n            switch str\
    \ {\n            case \"o\":\n                beat_ints.append(4)\n          \
    \  case \".\":\n                beat_ints.append(1)\n            default:\n  \
    \              fatalError(\"invalid str: \\(str)\")\n            }\n         \
    \   last_char = music_string.index(after: index)\n        }\n    }\n    return\
    \ beat_ints\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpq_3wavce.swift:12:37: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let music_string = music_string.replacingOccurrences(of:\
    \ \"\\\\s\", with: \"\", options: .regularExpression)\n                      \
    \ ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpq_3wavce.swift:12:89: error: cannot\
    \ infer contextual base in reference to member 'regularExpression'\n    let music_string\
    \ = music_string.replacingOccurrences(of: \"\\\\s\", with: \"\", options: .regularExpression)\n\
    \                                                                            \
    \           ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013782
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let split = music_string.split(separator: \" \")\n \
    \   var result: [Int] = []\n    for i in split {\n        switch i {\n       \
    \ case \"o\":\n            result.append(4)\n        case \"o|\":\n          \
    \  result.append(2)\n        case \".|\":\n            result.append(1)\n    \
    \    default:\n            continue\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    let notes = music_string.split(separator:\
    \ \" \")\n    for (index, note) in notes.enumerated() {\n        if note == \"\
    o\" {\n            beats.append(4)\n        } else if note == \"o|\" {\n     \
    \       beats.append(2)\n        } else if note == \".|\" {\n            beats.append(1)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    var currentNote = \"\"\n\
    \    for char in music_string {\n        if char == \"|\" {\n            if currentNote\
    \ == \"o\" {\n                beats.append(4)\n            } else if currentNote\
    \ == \"o\" {\n                beats.append(2)\n            } else if currentNote\
    \ == \".\" {\n                beats.append(1)\n            }\n            currentNote\
    \ = \"\"\n        } else {\n            currentNote += String(char)\n        }\n\
    \    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpv0goycyk/tmpv0goycyk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85feda0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85fea97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85fea97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85fea967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0goycyk                        0x00005587a440881f <unavailable> + 6175

    5    libc.so.6                          0x00002b85fef8c460 __libc_start_main +
    245

    6    tmpv0goycyk                        0x00005587a4408359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n  let tempoDict: [Character: Int] = [\"o\": 4, \".\": 1,\
    \ \"|\": 2]\n  var result: [Int] = []\n  var note: Int = 0\n  for c in music_string\
    \ {\n    if let tmp = tempoDict[c] {\n      note += tmp\n    } else {\n      result.append(note)\n\
    \      note = 0\n    }\n  }\n  result.append(note)\n  return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpo402uqwr/tmpo402uqwr.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad694879c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad694570b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad694570988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad69456f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo402uqwr                        0x00005563cae326de <unavailable> + 5854

    5    libc.so.6                          0x00002ad694a65460 __libc_start_main +
    245

    6    tmpo402uqwr                        0x00005563cae32329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var music_lengths = [Int]()\n    var beat_lengths =\
    \ [String: Int]()\n    beat_lengths[\"o\"] = 4\n    beat_lengths[\"o|\"] = 2\n\
    \    beat_lengths[\".|\"] = 1\n    let music_array = music_string.components(separatedBy:\
    \ \" \")\n    for music_item in music_array {\n        music_lengths.append(beat_lengths[music_item]!)\n\
    \    }\n    return music_lengths\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpltxvwacf.swift:17:36: error: value of type 'String' has no member\
    \ 'components'\n    let music_array = music_string.components(separatedBy: \"\
    \ \")\n                      ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013783
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    let music_string_subs = music_string.components(separatedBy:\
    \ \" \")\n    for notes in music_string_subs {\n        switch notes {\n     \
    \   case \"o\":\n            beats.append(4)\n        case \"o|\":\n         \
    \   beats.append(2)\n        case \".|\":\n            beats.append(1)\n     \
    \   default:\n            print(\"no\")\n        }\n    }\n    return beats\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpn5z9pb5l.swift:13:42: error: value of type 'String' has no member\
    \ 'components'\n    let music_string_subs = music_string.components(separatedBy:\
    \ \" \")\n                            ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013783
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let crescents = music_string.components(separatedBy:\
    \ \"|\")\n    var result: [Int] = []\n    for crescent in crescents {\n      \
    \  result.append(count_crescent(crescent: crescent))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpa9s1erj6.swift:12:34: error: value of type 'String' has no member\
    \ 'components'\n    let crescents = music_string.components(separatedBy: \"|\"\
    )\n                    ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013783
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    return notes.map {\n        switch $0 {\n        case \"o\":\n    \
    \        return 4\n        case \"o|\":\n            return 2\n        case \"\
    .|\":\n            return 1\n        default:\n            return 0\n        }\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp6dnzz9r4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var temp_str = music_string\n\
    \    while temp_str.count > 0 {\n        if temp_str.first == \"o\" {\n      \
    \      result.append(4)\n            temp_str.removeFirst()\n        } else if\
    \ temp_str.first == \".\" {\n            result.append(1)\n            temp_str.removeFirst()\n\
    \        }\n        temp_str.removeFirst()\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:623: Fatal error: Can''t remove
    first element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e52519c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e52210561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5e52210286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5e5221013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5e5220fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b5e521ffff0 RangeReplaceableCollection.removeFirst()
    + 272

    6    tmp7u38rcad                        0x000055dee9bcf357 <unavailable> + 9047

    7    tmp7u38rcad                        0x000055dee9bce797 <unavailable> + 6039

    8    libc.so.6                          0x00002b5e52705460 __libc_start_main +
    245

    9    tmp7u38rcad                        0x000055dee9bce3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var array = music_string.characters.split{$0\
    \ == \" \"}.map(String.init)\n    for value in array {\n        if value == \"\
    o\" {\n            result.append(4)\n        } else if value == \"o|\" {\n   \
    \         result.append(2)\n        } else if value == \".|\" {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmjwtbstu.swift:13:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var array = music_string.characters.split{$0 == \"\
    \ \"}.map(String.init)\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpmjwtbstu.swift:13:9: warning: variable\
    \ 'array' was never mutated; consider changing to 'let' constant\n    var array\
    \ = music_string.characters.split{$0 == \" \"}.map(String.init)\n    ~~~ ^\n \
    \   let\n"
  stdout: ''
  timestamp: 1660013783
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    return [1]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpzt7ahe0c/tmpzt7ahe0c.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b829beacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b829bba3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b829bba3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b829bba27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzt7ahe0c                        0x0000560481c7f40e <unavailable> + 5134

    5    libc.so.6                          0x00002b829c098460 __libc_start_main +
    245

    6    tmpzt7ahe0c                        0x0000560481c7f059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013783
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    return music_string.split(separator: \" \").map({ (character)\
    \ -> Int in\n        switch character {\n        case \"o\":\n            return\
    \ 4\n        case \"o|\":\n            return 2\n        case \".|\":\n      \
    \      return 1\n        default:\n            return 0\n        }\n    })\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013783
