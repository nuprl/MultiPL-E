name: HumanEval_133_sum_squares
language: swift
prompt: "\n/// You are given a list of numbers.\n/// You need to return the sum of\
  \ squared numbers in the given list,\n/// round each element in the list to the\
  \ upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output should\
  \ be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
  \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n///\
  \ For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double]) ->\
  \ Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\n\
  assert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0,\
  \ 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst:\
  \ [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
  assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
  \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9]) ==\
  \ 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0]) ==\
  \ 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
completions: ['    return Int(lst.map { pow(ceil($0), 2) }.reduce(0, +))', '    return
    0', '    return 0', '    return 0', '    return lst.map{Int(ceil($0))}.reduce(0){$0
    + $1 * $1}', '    return 0', '  return lst.map { Int(ceil($0)) }.reduce(0) { $0
    + $1 * $1 }', '    return Int(lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +))',
  "    var result = 0\n    for n in lst {\n        result += Int(ceil(n)) * Int(ceil(n))\n\
    \    }\n    return result", '    return lst.map { Int(ceil($0)) }.reduce(0) {
    $0 + $1 * $1 }', '    return 0', "    var square_sum = 0\n    for num in lst {\n\
    \        square_sum += Int(ceil(num)) * Int(ceil(num))\n    }\n    return square_sum",
  '    return lst.map {Int(ceil($0))}.reduce(0) { $0 + ($1 * $1) }', '    return lst.map{Int(ceil($0))}.reduce(0,
    combine: {$0 + $1 * $1})', '    return Int(lst.map {$0 * $0}.reduce(0, +))', " \
    \   var sum = 0\n    for i in lst {\n        sum += Int(ceil(i * i))\n    }\n\
    \    return sum", '    return lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 *
    $1 }', "    var squares: [Int] = [Int]()\n    for item in lst {\n        squares.append(Int(ceil(item\
    \ * item)))\n    }\n    return squares.reduce(0, +)", "    let result = lst.map({\
    \ Int(ceil($0)) }).reduce(0, { $0 + $1 * $1 })\n    return result", "    var sum\
    \ = 0\n    for num in lst {\n        sum += Int(ceil(num * num))\n    }\n    return\
    \ sum"]
stop_tokens:
- "\n}"
