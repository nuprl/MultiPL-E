name: HumanEval_54_same_chars
language: swift
prompt: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n///\
  \ True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
  \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
  /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
  \ String, s1: String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
  ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
  \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"\
  dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") ==\
  \ false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\n\
  assert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
completions: ["    var a = Array(s0.characters)\n    var b = Array(s1.characters)\n\
    \    for c in a {\n        if let i = b.index(of: c) {\n            b.remove(at:\
    \ i)\n        } else {\n            return false\n        }\n    }\n    return\
    \ b.isEmpty", '    return true', "    // TODO: complete the function\n    return\
    \ true", "    let c0 = count_chars(s0)\n    let c1 = count_chars(s1)\n    for\
    \ k in c0.keys {\n        if c0[k] != c1[k] {\n            return false\n    \
    \    }\n    }\n    return true", "    var chars0 = [Character](s0.characters)\n\
    \    var chars1 = [Character](s1.characters)\n    if chars0.count != chars1.count\
    \ {\n        return false\n    }\n    chars0.sortInPlace()\n    chars1.sortInPlace()\n\
    \    for i in 0..<chars0.count {\n        if chars0[i] != chars1[i] {\n      \
    \      return false\n        }\n    }\n    return true", "  if s0.count != s1.count\
    \ {\n    return false\n  }\n  let arr0 = Array(s0)\n  let arr1 = Array(s1)\n \
    \ let set0 = NSCountedSet(array: arr0)\n  let set1 = NSCountedSet(array: arr1)\n\
    \  var count = 0\n  for c in arr0 {\n    count += set1.count(for: c)\n  }\n  return\
    \ count == s0.count", '    return s0.characters.count == s1.characters.count &&
    s0.sorted() == s1.sorted()', "    let s0 = Array(s0)\n    let s1 = Array(s1)\n\
    \    var s0_chars = [Character: Int]()\n    var s1_chars = [Character: Int]()\n\
    \    for c in s0 {\n        if let c_count = s0_chars[c] {\n            s0_chars[c]\
    \ = c_count + 1\n        } else {\n            s0_chars[c] = 1\n        }\n  \
    \  }\n    for c in s1 {\n        if let c_count = s1_chars[c] {\n            s1_chars[c]\
    \ = c_count + 1\n        } else {\n            s1_chars[c] = 1\n        }\n  \
    \  }\n    for (k, v) in s0_chars {\n        if let v1 = s1_chars[k] {\n      \
    \      if v != v1 {\n                return false\n            }\n        } else\
    \ {\n            return false\n        }\n    }\n    for (k, v) in s1_chars {\n\
    \        if let v1 = s0_chars[k] {\n            if v != v1 {\n               \
    \ return false\n            }\n        } else {\n            return false\n  \
    \      }\n    }\n    return true", '    return s0.sorted() == s1.sorted()', "\t\
    var h0: [Character: Int] = [:]\n\tvar h1: [Character: Int] = [:]\n\tfor c in s0\
    \ {\n\t\th0[c] = (h0[c] ?? 0) + 1\n\t}\n\tfor c in s1 {\n\t\th1[c] = (h1[c] ??\
    \ 0) + 1\n\t}\n\treturn h0 == h1", "    // TODO: Implement this function!\n  \
    \  return false", "    let s = s0 + s1\n    let c = Array(s.characters).sort()\n\
    \    let s2 = String(c)\n    return s0.characters.count == s1.characters.count\
    \ && s == s2", "    let s0 = Array(s0.characters)\n    let s1 = Array(s1.characters)\n\
    \    if s0.count != s1.count {\n        return false\n    }\n    for i in 0..<s0.count\
    \ {\n        if s0[i] != s1[i] {\n            return false\n        }\n    }\n\
    \    return true", "\tvar set0 = NSCountedSet()\n\ts0.forEach { set0.add($0) }\n\
    \tvar set1 = NSCountedSet()\n\ts1.forEach { set1.add($0) }\n\tfor char in set0\
    \ {\n\t\tguard let char = char as? Character else { continue }\n\t\tguard set0.count(for:\
    \ char) == set1.count(for: char) else { return false }\n\t}\n\treturn true", " \
    \   var chars = s0.characters.sorted()\n    let chars1 = s1.characters.sorted()\n\
    \    var chars0 = [Character]()\n    for c in chars {\n        chars0.append(c)\n\
    \    }\n    if chars0.count != chars1.count {\n        return false\n    }\n \
    \   for i in 0..<chars.count {\n        if chars[i] != chars1[i] {\n         \
    \   return false\n        }\n    }\n    return true", "    var count0 = [Character:\
    \ Int]()\n    var count1 = [Character: Int]()\n    for ch in s0 {\n        if\
    \ count0[ch] == nil {\n            count0[ch] = 1\n        } else {\n        \
    \    count0[ch]! += 1\n        }\n    }\n    for ch in s1 {\n        if count1[ch]\
    \ == nil {\n            count1[ch] = 1\n        } else {\n            count1[ch]!\
    \ += 1\n        }\n    }\n    return count0 == count1", "    var c0 = s0.characters.sorted(by:\
    \ <)\n    var c1 = s1.characters.sorted(by: <)\n    return c0 == c1", "    var\
    \ map = [Character: Int]()\n    for ch in s0 {\n        if let val = map[ch] {\n\
    \            map[ch] = val + 1\n        } else {\n            map[ch] = 1\n  \
    \      }\n    }\n    for ch in s1 {\n        if let val = map[ch] {\n        \
    \    map[ch] = val - 1\n        } else {\n            return false\n        }\n\
    \    }\n    for val in map.values {\n        if val != 0 {\n            return\
    \ false\n        }\n    }\n    return true", "    // YOUR CODE HERE\n    var dict1:\
    \ [Character: Int] = [:]\n    var dict2: [Character: Int] = [:]\n    for char\
    \ in s0 {\n        if dict1[char] == nil {\n            dict1[char] = 1\n    \
    \    } else {\n            dict1[char]! += 1\n        }\n    }\n    for char in\
    \ s1 {\n        if dict2[char] == nil {\n            dict2[char] = 1\n       \
    \ } else {\n            dict2[char]! += 1\n        }\n    }\n    return dict1\
    \ == dict2", "  if s0.characters.count != s1.characters.count {\n    return false\n\
    \  }\n  var s0 = s0.characters.sorted()\n  var s1 = s1.characters.sorted()\n \
    \ for i in 0..<s0.count {\n    if s0[i] != s1[i] {\n      return false\n    }\n\
    \  }\n  return true"]
stop_tokens:
- "\n}"
