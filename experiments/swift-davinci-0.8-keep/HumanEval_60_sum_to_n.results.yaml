language: swift
name: HumanEval_60_sum_to_n
results:
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n\
    /// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>>\
    \ sum_to_n(10)\n/// 55\n/// >>> sum_to_n(1)\n/// 1\nfunc sum_to_n(n: Int) -> Int\
    \ {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824318
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n\
    /// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>>\
    \ sum_to_n(10)\n/// 55\n/// >>> sum_to_n(1)\n/// 1\nfunc sum_to_n(n: Int) -> Int\
    \ {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824318
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n\
    /// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>>\
    \ sum_to_n(10)\n/// 55\n/// >>> sum_to_n(1)\n/// 1\nfunc sum_to_n(n: Int) -> Int\
    \ {\n    // TODO: Write this function\n    var sum: Int = 0\n    for var i = 1;\
    \ i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpjatz77z4.swift:16:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 1; i <= n; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n\
    /// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>>\
    \ sum_to_n(10)\n/// 55\n/// >>> sum_to_n(1)\n/// 1\nfunc sum_to_n(n: Int) -> Int\
    \ {\n    if n == 1 {\n        return 1\n    }\n    return n + sum_to_n(n - 1)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpzggxmsr5.swift:17:25: error: missing argument label 'n:' in call\n\
    \    return n + sum_to_n(n - 1)\n                        ^\n                 \
    \       n: \n"
  stdout: ''
  timestamp: 1659824318
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n\
    /// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>>\
    \ sum_to_n(10)\n/// 55\n/// >>> sum_to_n(1)\n/// 1\nfunc sum_to_n(n: Int) -> Int\
    \ {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpz6gtkip2/tmpz6gtkip2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c145c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c142bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c142bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c142ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz6gtkip2                        0x00005594580721b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b5c147b0460 __libc_start_main +
    245

    6    tmpz6gtkip2                        0x0000559458071e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824357
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n\
    /// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>>\
    \ sum_to_n(10)\n/// 55\n/// >>> sum_to_n(1)\n/// 1\nfunc sum_to_n(n: Int) -> Int\
    \ {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpz6gtkip2/tmpz6gtkip2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c145c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c142bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c142bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c142ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz6gtkip2                        0x00005594580721b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b5c147b0460 __libc_start_main +
    245

    6    tmpz6gtkip2                        0x0000559458071e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824357
- exit_code: -4
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n\
    /// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>>\
    \ sum_to_n(10)\n/// 55\n/// >>> sum_to_n(1)\n/// 1\nfunc sum_to_n(n: Int) -> Int\
    \ {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) ==\
    \ 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: Exception
  stderr: 'tmpz6gtkip2/tmpz6gtkip2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c145c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c142bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c142bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c142ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz6gtkip2                        0x00005594580721b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b5c147b0460 __libc_start_main +
    245

    6    tmpz6gtkip2                        0x0000559458071e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824357
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n\
    /// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>>\
    \ sum_to_n(10)\n/// 55\n/// >>> sum_to_n(1)\n/// 1\nfunc sum_to_n(n: Int) -> Int\
    \ {\n    var i = 1\n    var total = 0\n    while i <= n {\n        total += i\n\
    \        i += 1\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824357
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n\
    /// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>>\
    \ sum_to_n(10)\n/// 55\n/// >>> sum_to_n(1)\n/// 1\nfunc sum_to_n(n: Int) -> Int\
    \ {\n    var result = 0\n    var number = 1\n    while number <= n {\n       \
    \ result += number\n        number += 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824357
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n\
    /// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>>\
    \ sum_to_n(10)\n/// 55\n/// >>> sum_to_n(1)\n/// 1\nfunc sum_to_n(n: Int) -> Int\
    \ {\n    return Int(0.5 * Double(n) * Double(n + 1))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824357
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n\
    /// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>>\
    \ sum_to_n(10)\n/// 55\n/// >>> sum_to_n(1)\n/// 1\nfunc sum_to_n(n: Int) -> Int\
    \ {\n    var x = 0\n    for i in 1...n {\n        x += i\n    }\n    return x\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824357
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n\
    /// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>>\
    \ sum_to_n(10)\n/// 55\n/// >>> sum_to_n(1)\n/// 1\nfunc sum_to_n(n: Int) -> Int\
    \ {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824318
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n\
    /// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>>\
    \ sum_to_n(10)\n/// 55\n/// >>> sum_to_n(1)\n/// 1\nfunc sum_to_n(n: Int) -> Int\
    \ {\n    return (1 + n) * n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824357
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n\
    /// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>>\
    \ sum_to_n(10)\n/// 55\n/// >>> sum_to_n(1)\n/// 1\nfunc sum_to_n(n: Int) -> Int\
    \ {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824318
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n\
    /// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>>\
    \ sum_to_n(10)\n/// 55\n/// >>> sum_to_n(1)\n/// 1\nfunc sum_to_n(n: Int) -> Int\
    \ {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824318
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n\
    /// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>>\
    \ sum_to_n(10)\n/// 55\n/// >>> sum_to_n(1)\n/// 1\nfunc sum_to_n(n: Int) -> Int\
    \ {\n    var sum = 0\n    for i in 1...n {\n        sum += i\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\n\
    assert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824318
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n\
    /// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>>\
    \ sum_to_n(10)\n/// 55\n/// >>> sum_to_n(1)\n/// 1\nfunc sum_to_n(n: Int) -> Int\
    \ {\n    if n == 1 {\n        return 1\n    }\n    return n + sum_to_n(n-1)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmp79tg88ny.swift:17:25: error: missing argument label 'n:' in call\n\
    \    return n + sum_to_n(n-1)\n                        ^\n                   \
    \     n: \n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 1
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n\
    /// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>>\
    \ sum_to_n(10)\n/// 55\n/// >>> sum_to_n(1)\n/// 1\nfunc sum_to_n(n: Int) -> Int\
    \ {\n    if n <= 0 {\n        return 0\n    }\n    return n + sum_to_n(n-1)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) ==\
    \ 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
    \ 100) == 5050)"
  status: SyntaxError
  stderr: "/tmp/tmpaf3t3uhq.swift:17:25: error: missing argument label 'n:' in call\n\
    \    return n + sum_to_n(n-1)\n                        ^\n                   \
    \     n: \n"
  stdout: ''
  timestamp: 1659824357
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n\
    /// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>>\
    \ sum_to_n(10)\n/// 55\n/// >>> sum_to_n(1)\n/// 1\nfunc sum_to_n(n: Int) -> Int\
    \ {\n    // Put your code here!\n    return n * (n + 1) / 2\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n:\
    \ 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824357
- exit_code: 0
  program: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n\
    /// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>>\
    \ sum_to_n(10)\n/// 55\n/// >>> sum_to_n(1)\n/// 1\nfunc sum_to_n(n: Int) -> Int\
    \ {\n\treturn (n + 1) * n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_to_n(n:\
    \ 1) == 1)\nassert(sum_to_n(n: 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n:\
    \ 30) == 465)\nassert(sum_to_n(n: 100) == 5050)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824357
