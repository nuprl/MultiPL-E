language: swift
name: HumanEval_45_triangle_area
results:
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(5, 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double\
    \ {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824565
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(5, 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double\
    \ {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824565
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(5, 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double\
    \ {\n    return 0.5 * Double(a) * Double(h)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824565
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(5, 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double\
    \ {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824565
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(5, 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double\
    \ {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824565
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(5, 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double\
    \ {\n    let area = Double(a * h) / 2\n    return area\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824565
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(5, 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double\
    \ {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824565
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(5, 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double\
    \ {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824565
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(5, 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double\
    \ {\n    let area = Double(a * h) / 2\n    return area\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824565
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(5, 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double\
    \ {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824565
- exit_code: 1
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(5, 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double\
    \ {\n    return Double(0.5 * a * h)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: SyntaxError
  stderr: "/tmp/tmpvwoayhqm.swift:6:19: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    return Double(0.5 * a * h)\n          \
    \        ^\n                  Int( )\n"
  stdout: ''
  timestamp: 1659824599
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(5, 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double\
    \ {\n    let area = Double(a) * Double(h) / 2\n    return area\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824599
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(5, 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double\
    \ {\n    return Double(a * h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) == 2.0)\nassert(triangle_area(a:\
    \ 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824565
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(5, 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double\
    \ {\n    return (Double(a) * Double(h)) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824599
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(5, 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double\
    \ {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824565
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(5, 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double\
    \ {\n  return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h: 2) ==\
    \ 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824599
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(5, 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double\
    \ {\n  return 0.5 * Double(a) * Double(h)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824599
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(5, 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double\
    \ {\n    return Double(a) * Double(h) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a: 2, h:\
    \ 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824565
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(5, 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double\
    \ {\n    let area = Double(a) * Double(h) / 2\n    return area\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824599
- exit_code: 0
  program: "\n/// Given length of a side and high return area for a triangle.\n///\
    \ >>> triangle_area(5, 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double\
    \ {\n    let area = 0.5 * Double(a) * Double(h)\n    return area\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 5, h: 3) == 7.5)\nassert(triangle_area(a:\
    \ 2, h: 2) == 2.0)\nassert(triangle_area(a: 10, h: 8) == 40.0)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824599
