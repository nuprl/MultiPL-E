language: swift
name: HumanEval_132_is_nested
results:
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// is_nested('[[]]') \u279E True\n/// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n/// is_nested('[][]') \u279E False\n/// is_nested('[]') \u279E\
    \ False\n/// is_nested('[[][]]') \u279E True\n/// is_nested('[[]][[') \u279E True\n\
    func is_nested(string: String) -> Bool {\n\tvar stack: [Character] = []\n\tfor\
    \ i in string {\n\t\tif !stack.isEmpty && i == \"]\" && stack.last == \"[\" {\n\
    \t\t\tstack.removeLast()\n\t\t} else {\n\t\t\tstack.append(i)\n\t\t}\n\t}\n\t\
    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmphwxxz2do/tmphwxxz2do.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac95b2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac95823b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac95823988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac958227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphwxxz2do                        0x000055f980cb686b <unavailable> + 6251

    5    libc.so.6                          0x00002aac95d18460 __libc_start_main +
    245

    6    tmphwxxz2do                        0x000055f980cb63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// is_nested('[[]]') \u279E True\n/// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n/// is_nested('[][]') \u279E False\n/// is_nested('[]') \u279E\
    \ False\n/// is_nested('[[][]]') \u279E True\n/// is_nested('[[]][[') \u279E True\n\
    func is_nested(string: String) -> Bool {\n\tvar inBrackets = 0\n\tfor i in string\
    \ {\n\t\tif i == \"[\" {\n\t\t\tinBrackets += 1\n\t\t} else if i == \"]\" {\n\t\
    \t\tinBrackets -= 1\n\t\t}\n\t\tif inBrackets < 0 {\n\t\t\treturn false\n\t\t\
    }\n\t}\n\treturn inBrackets > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpqiqi0j3p/tmpqiqi0j3p.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49190d9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4918dd0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4918dd0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4918dcf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqiqi0j3p                        0x00005655218f640b <unavailable> + 5131

    5    libc.so.6                          0x00002b49192c5460 __libc_start_main +
    245

    6    tmpqiqi0j3p                        0x00005655218f6099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// is_nested('[[]]') \u279E True\n/// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n/// is_nested('[][]') \u279E False\n/// is_nested('[]') \u279E\
    \ False\n/// is_nested('[[][]]') \u279E True\n/// is_nested('[[]][[') \u279E True\n\
    func is_nested(string: String) -> Bool {\n    var stack = [String]()\n    for\
    \ char in string {\n        if stack.isEmpty {\n            stack.append(String(char))\n\
    \        } else {\n            if String(char) == \"]\" && stack.last == \"[\"\
    \ {\n                stack.removeLast()\n            } else {\n              \
    \  stack.append(String(char))\n            }\n        }\n    }\n    return stack.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpvayab1j_/tmpvayab1j_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acda4600c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acda42f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acda42f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acda42f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvayab1j_                        0x00005560f15007db <unavailable> + 6107

    5    libc.so.6                          0x00002acda47ec460 __libc_start_main +
    245

    6    tmpvayab1j_                        0x00005560f1500329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// is_nested('[[]]') \u279E True\n/// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n/// is_nested('[][]') \u279E False\n/// is_nested('[]') \u279E\
    \ False\n/// is_nested('[[][]]') \u279E True\n/// is_nested('[[]][[') \u279E True\n\
    func is_nested(string: String) -> Bool {\n    let brackets = string.filter({$0\
    \ == \"[\" || $0 == \"]\"})\n    let stack = Stack<Character>()\n    for bracket\
    \ in brackets {\n        if stack.isEmpty {\n            stack.push(bracket)\n\
    \        } else {\n            if stack.peek() == \"[\" && bracket == \"]\" {\n\
    \                stack.pop()\n            } else {\n                stack.push(bracket)\n\
    \            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfrsyeaaf.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ let stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// is_nested('[[]]') \u279E True\n/// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n/// is_nested('[][]') \u279E False\n/// is_nested('[]') \u279E\
    \ False\n/// is_nested('[[][]]') \u279E True\n/// is_nested('[[]][[') \u279E True\n\
    func is_nested(string: String) -> Bool {\n\t//in: [][]\n\t//out: true\n\t//in:\
    \ [][]\n\t//out: true\n\t//in: [][]\n\t//out: true\n\t\n\t//at least one bracket\
    \ in the subsequence is nested \n\t//subsequence of brackets\n\t\n\treturn false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpemzvyl0m/tmpemzvyl0m.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0998d38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0998a2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0998a2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0998a2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpemzvyl0m                        0x000056279b79825b <unavailable> + 4699

    5    libc.so.6                          0x00002b0998f24460 __libc_start_main +
    245

    6    tmpemzvyl0m                        0x000056279b797ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// is_nested('[[]]') \u279E True\n/// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n/// is_nested('[][]') \u279E False\n/// is_nested('[]') \u279E\
    \ False\n/// is_nested('[[][]]') \u279E True\n/// is_nested('[[]][[') \u279E True\n\
    func is_nested(string: String) -> Bool {\n    return string.firstIndex(of: \"\
    [\")! < string.lastIndex(of: \"]\")!\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\"\
    ) == false)\nassert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string:\
    \ \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpzzxvt4mk/tmpzzxvt4mk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbf92adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbf8fa4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbf8fa4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbf8fa37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzzxvt4mk                        0x000056375772f65b <unavailable> + 5723

    5    libc.so.6                          0x00002adbf9499460 __libc_start_main +
    245

    6    tmpzzxvt4mk                        0x000056375772f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// is_nested('[[]]') \u279E True\n/// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n/// is_nested('[][]') \u279E False\n/// is_nested('[]') \u279E\
    \ False\n/// is_nested('[[][]]') \u279E True\n/// is_nested('[[]][[') \u279E True\n\
    func is_nested(string: String) -> Bool {\n    var leftBrackets = 0\n    var isFirst\
    \ = true\n    for character in string {\n        if character == \"[\" {\n   \
    \         leftBrackets += 1\n            isFirst = false\n        } else if character\
    \ == \"]\" {\n            if isFirst {\n                return false\n       \
    \     }\n            leftBrackets -= 1\n            if leftBrackets < 0 {\n  \
    \              return false\n            }\n        }\n    }\n    return leftBrackets\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_nested(string: \"[[]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string:\
    \ \"[][]\") == false)\nassert(is_nested(string: \"[]\") == false)\nassert(is_nested(string:\
    \ \"[[[[]]]]\") == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\n\
    assert(is_nested(string: \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\"\
    ) == false)\nassert(is_nested(string: \"[]]\") == false)\nassert(is_nested(string:\
    \ \"[[]][[\") == true)\nassert(is_nested(string: \"[[][]]\") == true)\nassert(is_nested(string:\
    \ \"\") == false)\nassert(is_nested(string: \"[[[[[[[[\") == false)\nassert(is_nested(string:\
    \ \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp9yrhroal/tmp9yrhroal.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b2bcdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b2b9d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b2b9d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b2b9d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yrhroal                        0x000055cd0e93754b <unavailable> + 5451

    5    libc.so.6                          0x00002b0b2bec7460 __libc_start_main +
    245

    6    tmp9yrhroal                        0x000055cd0e937099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// is_nested('[[]]') \u279E True\n/// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n/// is_nested('[][]') \u279E False\n/// is_nested('[]') \u279E\
    \ False\n/// is_nested('[[][]]') \u279E True\n/// is_nested('[[]][[') \u279E True\n\
    func is_nested(string: String) -> Bool {\n    return string.contains(\"[]\")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmptultcf89/tmptultcf89.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f85c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f8595db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f8595d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f8595c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptultcf89                        0x0000556fe35133db <unavailable> + 5083

    5    libc.so.6                          0x00002b6f85e52460 __libc_start_main +
    245

    6    tmptultcf89                        0x0000556fe3512fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// is_nested('[[]]') \u279E True\n/// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n/// is_nested('[][]') \u279E False\n/// is_nested('[]') \u279E\
    \ False\n/// is_nested('[[][]]') \u279E True\n/// is_nested('[[]][[') \u279E True\n\
    func is_nested(string: String) -> Bool {\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmposn5cooj/tmposn5cooj.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ed9dfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ed9af5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ed9af5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ed9af47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmposn5cooj                        0x00005575457542fb <unavailable> + 4859

    5    libc.so.6                          0x00002b9ed9fea460 __libc_start_main +
    245

    6    tmposn5cooj                        0x0000557545753ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// is_nested('[[]]') \u279E True\n/// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n/// is_nested('[][]') \u279E False\n/// is_nested('[]') \u279E\
    \ False\n/// is_nested('[[][]]') \u279E True\n/// is_nested('[[]][[') \u279E True\n\
    func is_nested(string: String) -> Bool {\n    return string.contains(\"[]\")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmptultcf89/tmptultcf89.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f85c66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f8595db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f8595d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f8595c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptultcf89                        0x0000556fe35133db <unavailable> + 5083

    5    libc.so.6                          0x00002b6f85e52460 __libc_start_main +
    245

    6    tmptultcf89                        0x0000556fe3512fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// is_nested('[[]]') \u279E True\n/// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n/// is_nested('[][]') \u279E False\n/// is_nested('[]') \u279E\
    \ False\n/// is_nested('[[][]]') \u279E True\n/// is_nested('[[]][[') \u279E True\n\
    func is_nested(string: String) -> Bool {\n  var counter = 0\n  for char in string\
    \ {\n    if char == \"[\" {\n      counter += 1\n    } else if char == \"]\" {\n\
    \      counter -= 1\n    }\n    if counter < 0 {\n      return false\n    }\n\
    \  }\n  return counter == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmparpr5m7w/tmparpr5m7w.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9aa5bacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9aa58a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9aa58a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9aa58a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmparpr5m7w                        0x000055d9f5e3254b <unavailable> + 5451

    5    libc.so.6                          0x00002b9aa5d98460 __libc_start_main +
    245

    6    tmparpr5m7w                        0x000055d9f5e32099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: 1
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// is_nested('[[]]') \u279E True\n/// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n/// is_nested('[][]') \u279E False\n/// is_nested('[]') \u279E\
    \ False\n/// is_nested('[[][]]') \u279E True\n/// is_nested('[[]][[') \u279E True\n\
    func is_nested(string: String) -> Bool {\n    var stack = Stack<Character>()\n\
    \    for char in string {\n        if char == \"[\" {\n            stack.push(char)\n\
    \        } else if char == \"]\" {\n            if stack.isEmpty() {\n       \
    \         return false\n            } else {\n                stack.pop()\n  \
    \          }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyp4bg3xs.swift:12:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1660013550
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// is_nested('[[]]') \u279E True\n/// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n/// is_nested('[][]') \u279E False\n/// is_nested('[]') \u279E\
    \ False\n/// is_nested('[[][]]') \u279E True\n/// is_nested('[[]][[') \u279E True\n\
    func is_nested(string: String) -> Bool {\n    var stack = [Character]()\n    for\
    \ ch in string {\n        if ch == \"[\" {\n            stack.append(ch)\n   \
    \     } else if ch == \"]\" {\n            if stack.isEmpty {\n              \
    \  return false\n            } else {\n                stack.removeLast()\n  \
    \          }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpxqojd_cf/tmpxqojd_cf.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b845a7aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b845a4a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b845a4a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b845a4a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxqojd_cf                        0x00005615000ad7bb <unavailable> + 6075

    5    libc.so.6                          0x00002b845a99a460 __libc_start_main +
    245

    6    tmpxqojd_cf                        0x00005615000ad309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// is_nested('[[]]') \u279E True\n/// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n/// is_nested('[][]') \u279E False\n/// is_nested('[]') \u279E\
    \ False\n/// is_nested('[[][]]') \u279E True\n/// is_nested('[[]][[') \u279E True\n\
    func is_nested(string: String) -> Bool {\n    var result = false\n    var inBrackets\
    \ = 0\n    for bracket in string {\n        if bracket == \"[\" {\n          \
    \  inBrackets += 1\n        } else if bracket == \"]\" {\n            inBrackets\
    \ -= 1\n        }\n        if inBrackets < 0 {\n            return false\n   \
    \     }\n        if inBrackets > 0 {\n            result = true\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp1ufec5lz/tmp1ufec5lz.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5759872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5759569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5759569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57595687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ufec5lz                        0x000055f3587df54b <unavailable> + 5451

    5    libc.so.6                          0x00002b5759a5e460 __libc_start_main +
    245

    6    tmp1ufec5lz                        0x000055f3587df099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// is_nested('[[]]') \u279E True\n/// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n/// is_nested('[][]') \u279E False\n/// is_nested('[]') \u279E\
    \ False\n/// is_nested('[[][]]') \u279E True\n/// is_nested('[[]][[') \u279E True\n\
    func is_nested(string: String) -> Bool {\n    var count = 0\n    for char in string\
    \ {\n        if char == \"[\" {\n            count += 1\n        } else if char\
    \ == \"]\" {\n            count -= 1\n        }\n        if count < 0 {\n    \
    \        return false\n        }\n    }\n    return count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp5ehetcnl/tmp5ehetcnl.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3254308c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3253fffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3253fff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3253ffe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ehetcnl                        0x0000562db7dc154b <unavailable> + 5451

    5    libc.so.6                          0x00002b32544f4460 __libc_start_main +
    245

    6    tmp5ehetcnl                        0x0000562db7dc1099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// is_nested('[[]]') \u279E True\n/// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n/// is_nested('[][]') \u279E False\n/// is_nested('[]') \u279E\
    \ False\n/// is_nested('[[][]]') \u279E True\n/// is_nested('[[]][[') \u279E True\n\
    func is_nested(string: String) -> Bool {\n    var left = 0\n    var right = 0\n\
    \    for character in string {\n        if character == \"[\" {\n            left\
    \ += 1\n        } else if character == \"]\" {\n            right += 1\n     \
    \   }\n        if right > left {\n            return false\n        }\n    }\n\
    \    return left == right\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_nested(string:\
    \ \"[[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\n\
    assert(is_nested(string: \"[][]\") == false)\nassert(is_nested(string: \"[]\"\
    ) == false)\nassert(is_nested(string: \"[[[[]]]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]]]]]\") == false)\nassert(is_nested(string: \"[][][[]]\") == true)\n\
    assert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string: \"[]]\"\
    ) == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp1x_og8bp/tmp1x_og8bp.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abed95f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abed92edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abed92ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abed92ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1x_og8bp                        0x000056428100554b <unavailable> + 5451

    5    libc.so.6                          0x00002abed97e2460 __libc_start_main +
    245

    6    tmp1x_og8bp                        0x0000564281005099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// is_nested('[[]]') \u279E True\n/// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n/// is_nested('[][]') \u279E False\n/// is_nested('[]') \u279E\
    \ False\n/// is_nested('[[][]]') \u279E True\n/// is_nested('[[]][[') \u279E True\n\
    func is_nested(string: String) -> Bool {\n    let openingBrackets = [\"[\"]\n\
    \    let closingBrackets = [\"]\"]\n    var stack = [Character]()\n    for char\
    \ in string {\n        if openingBrackets.contains(String(char)) {\n         \
    \   stack.append(char)\n        } else if closingBrackets.contains(String(char))\
    \ {\n            if stack.isEmpty {\n                return false\n          \
    \  } else {\n                let lastOpen = stack.popLast()\n                if\
    \ String(lastOpen!) != \"[\" {\n                    return false\n           \
    \     }\n            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp_kq1tt6s/tmp_kq1tt6s.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b114bcc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b114b9b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b114b9b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b114b9b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_kq1tt6s                        0x0000563de133899b <unavailable> + 6555

    5    libc.so.6                          0x00002b114beae460 __libc_start_main +
    245

    6    tmp_kq1tt6s                        0x0000563de13384e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// is_nested('[[]]') \u279E True\n/// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n/// is_nested('[][]') \u279E False\n/// is_nested('[]') \u279E\
    \ False\n/// is_nested('[[][]]') \u279E True\n/// is_nested('[[]][[') \u279E True\n\
    func is_nested(string: String) -> Bool {\n    var a = 0\n    var b = 0\n    for\
    \ i in string {\n        if i == \"[\" {\n            a += 1\n        } else if\
    \ i == \"]\" {\n            b += 1\n        }\n    }\n    return a > b ? true\
    \ : false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_nested(string: \"\
    [[]]\") == true)\nassert(is_nested(string: \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string:\
    \ \"[][]\") == false)\nassert(is_nested(string: \"[]\") == false)\nassert(is_nested(string:\
    \ \"[[[[]]]]\") == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\n\
    assert(is_nested(string: \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\"\
    ) == false)\nassert(is_nested(string: \"[]]\") == false)\nassert(is_nested(string:\
    \ \"[[]][[\") == true)\nassert(is_nested(string: \"[[][]]\") == true)\nassert(is_nested(string:\
    \ \"\") == false)\nassert(is_nested(string: \"[[[[[[[[\") == false)\nassert(is_nested(string:\
    \ \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmp1cvn7jf0/tmp1cvn7jf0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44c6900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44c65f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44c65f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44c65f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1cvn7jf0                        0x00005573fe1e440b <unavailable> + 5131

    5    libc.so.6                          0x00002b44c6aec460 __libc_start_main +
    245

    6    tmp1cvn7jf0                        0x00005573fe1e4099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1660013740
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// is_nested('[[]]') \u279E True\n/// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n/// is_nested('[][]') \u279E False\n/// is_nested('[]') \u279E\
    \ False\n/// is_nested('[[][]]') \u279E True\n/// is_nested('[[]][[') \u279E True\n\
    func is_nested(string: String) -> Bool {\n    var stack = [Character]()\n    for\
    \ c in string {\n        if c == \"[\" {\n            stack.append(c)\n      \
    \  } else if c == \"]\" {\n            if stack.isEmpty {\n                return\
    \ false\n            } else {\n                stack.removeLast()\n          \
    \  }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'tmpr25kxp8m/tmpr25kxp8m.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b155cdecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b155cae3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b155cae3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b155cae27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr25kxp8m                        0x000055f30c08c7bb <unavailable> + 6075

    5    libc.so.6                          0x00002b155cfd8460 __libc_start_main +
    245

    6    tmpr25kxp8m                        0x000055f30c08c309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013551
- exit_code: -4
  program: "\n/// Create a function that takes a string as input which contains only\
    \ square brackets.\n/// The function should return True if and only if there is\
    \ a valid subsequence of brackets \n/// where at least one bracket in the subsequence\
    \ is nested.\n/// is_nested('[[]]') \u279E True\n/// is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n/// is_nested('[][]') \u279E False\n/// is_nested('[]') \u279E\
    \ False\n/// is_nested('[[][]]') \u279E True\n/// is_nested('[[]][[') \u279E True\n\
    func is_nested(string: String) -> Bool {\n    var open = 0\n    var close = 0\n\
    \    var two = 0\n    var one = 0\n    var check:Bool = false\n    var brackets\
    \ = string.compactMap {String($0)}\n    for i in 0..<brackets.count{\n       \
    \ if brackets[i] == \"[\" {\n            open += 1\n        }\n        if brackets[i]\
    \ == \"]\" {\n            close += 1\n        }\n        if brackets[i] == \"\
    [\" && brackets[i+1] == \"[\"{\n            two += 1\n        }\n        if brackets[i]\
    \ == \"]\" && brackets[i+1] == \"]\"{\n            two += 1\n        }\n     \
    \   if brackets[i] == \"[\" && brackets[i+1] == \"]\"{\n            one += 1\n\
    \        }\n        if brackets[i] == \"]\" && brackets[i+1] == \"[\"{\n     \
    \       one += 1\n        }\n    }\n    if open == close && one == 1 && two ==\
    \ 0{\n        check = true\n    }\n    return check\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_nested(string: \"[[]]\") == true)\nassert(is_nested(string:\
    \ \"[]]]]]]][[[[[]\") == false)\nassert(is_nested(string: \"[][]\") == false)\n\
    assert(is_nested(string: \"[]\") == false)\nassert(is_nested(string: \"[[[[]]]]\"\
    ) == true)\nassert(is_nested(string: \"[]]]]]]]]]]\") == false)\nassert(is_nested(string:\
    \ \"[][][[]]\") == true)\nassert(is_nested(string: \"[[]\") == false)\nassert(is_nested(string:\
    \ \"[]]\") == false)\nassert(is_nested(string: \"[[]][[\") == true)\nassert(is_nested(string:\
    \ \"[[][]]\") == true)\nassert(is_nested(string: \"\") == false)\nassert(is_nested(string:\
    \ \"[[[[[[[[\") == false)\nassert(is_nested(string: \"]]]]]]]]\") == false)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b063b4f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b063b1f0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b063b1f0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b063b1f013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b063b1efbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b063afeffc3 <unavailable> + 188355

    6    tmp1jy5soyy                        0x000055eab0aeb6dc <unavailable> + 9948

    7    tmp1jy5soyy                        0x000055eab0aea5f6 <unavailable> + 5622

    8    libc.so.6                          0x00002b063b6e5460 __libc_start_main +
    245

    9    tmp1jy5soyy                        0x000055eab0aea2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660013740
