language: swift
name: HumanEval_116_sort_array
results:
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        if String(a,\
    \ radix: 2).filter({ $0 == \"1\" }).count == String(b, radix: 2).filter({ $0 ==\
    \ \"1\" }).count {\n            return a < b\n        }\n        return String(a,\
    \ radix: 2).filter({ $0 == \"1\" }).count < String(b, radix: 2).filter({ $0 ==\
    \ \"1\" }).count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824730
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted {\n        let b1 = String($0, radix: 2).components(separatedBy:\
    \ \"1\").count\n        let b2 = String($1, radix: 2).components(separatedBy:\
    \ \"1\").count\n        return b1 < b2 ? true : b1 == b2 ? $0 < $1 : false\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp0clw4d6l.swift:11:39: error: value of type 'String' has no member\
    \ 'components'\n        let b1 = String($0, radix: 2).components(separatedBy:\
    \ \"1\").count\n                 ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824730
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        return a.numberOfOnes()\
    \ == b.numberOfOnes() ? a < b : a.numberOfOnes() < b.numberOfOnes()\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpghx3xbah.swift:11:18: error: value of type 'Int' has no member\
    \ 'numberOfOnes'\n        return a.numberOfOnes() == b.numberOfOnes() ? a < b\
    \ : a.numberOfOnes() < b.numberOfOnes()\n               ~ ^~~~~~~~~~~~\n/tmp/tmpghx3xbah.swift:11:38:\
    \ error: value of type 'Int' has no member 'numberOfOnes'\n        return a.numberOfOnes()\
    \ == b.numberOfOnes() ? a < b : a.numberOfOnes() < b.numberOfOnes()\n        \
    \                           ~ ^~~~~~~~~~~~\n/tmp/tmpghx3xbah.swift:11:65: error:\
    \ value of type 'Int' has no member 'numberOfOnes'\n        return a.numberOfOnes()\
    \ == b.numberOfOnes() ? a < b : a.numberOfOnes() < b.numberOfOnes()\n        \
    \                                                      ~ ^~~~~~~~~~~~\n/tmp/tmpghx3xbah.swift:11:84:\
    \ error: value of type 'Int' has no member 'numberOfOnes'\n        return a.numberOfOnes()\
    \ == b.numberOfOnes() ? a < b : a.numberOfOnes() < b.numberOfOnes()\n        \
    \                                                                         ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824730
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n  return arr.map { $0 < 0 ? -$0 : $0 }.sorted {\n    $0.binaryString.filter\
    \ { $0 == \"1\" }.count < $1.binaryString.filter { $0 == \"1\" }.count\n  }.map\
    \ { $0 < 0 ? -$0 : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpzuxg9sdr.swift:10:10: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n  return arr.map { $0 < 0 ? -$0 : $0 }.sorted {\n         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824827
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var arr = arr\n    let sorted = arr.sorted { (a, b) -> Bool\
    \ in\n        return a.decimalToBinary.count < b.decimalToBinary.count\n    }\n\
    \    arr = sorted\n    arr.insert(contentsOf: arr.sorted { (a, b) -> Bool in\n\
    \        return a.decimalToBinary.count == b.decimalToBinary.count && a < b\n\
    \    }, at: 0)\n    arr.append(contentsOf: arr.sorted { (a, b) -> Bool in\n  \
    \      return a.decimalToBinary.count == b.decimalToBinary.count && a > b\n  \
    \  })\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpvsbxkzr9.swift:12:18: error: value of type 'Int' has no member\
    \ 'decimalToBinary'\n        return a.decimalToBinary.count < b.decimalToBinary.count\n\
    \               ~ ^~~~~~~~~~~~~~~\n/tmp/tmpvsbxkzr9.swift:12:44: error: value\
    \ of type 'Int' has no member 'decimalToBinary'\n        return a.decimalToBinary.count\
    \ < b.decimalToBinary.count\n                                         ~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpvsbxkzr9.swift:16:18: error: value of type 'Int' has no member 'decimalToBinary'\n\
    \        return a.decimalToBinary.count == b.decimalToBinary.count && a < b\n\
    \               ~ ^~~~~~~~~~~~~~~\n/tmp/tmpvsbxkzr9.swift:16:45: error: value\
    \ of type 'Int' has no member 'decimalToBinary'\n        return a.decimalToBinary.count\
    \ == b.decimalToBinary.count && a < b\n                                      \
    \    ~ ^~~~~~~~~~~~~~~\n/tmp/tmpvsbxkzr9.swift:19:18: error: value of type 'Int'\
    \ has no member 'decimalToBinary'\n        return a.decimalToBinary.count == b.decimalToBinary.count\
    \ && a > b\n               ~ ^~~~~~~~~~~~~~~\n/tmp/tmpvsbxkzr9.swift:19:45: error:\
    \ value of type 'Int' has no member 'decimalToBinary'\n        return a.decimalToBinary.count\
    \ == b.decimalToBinary.count && a > b\n                                      \
    \    ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824730
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {sort_binary_values($0, $1)})\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp64djm7yx.swift:10:28: error: cannot find 'sort_binary_values' in\
    \ scope\n    return arr.sorted(by: {sort_binary_values($0, $1)})\n           \
    \                ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824730
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n  var newArray = [Int]()\n  var num0Array = [Int]()\n  var num1Array\
    \ = [Int]()\n  var num2Array = [Int]()\n  var num3Array = [Int]()\n  var num4Array\
    \ = [Int]()\n  var num5Array = [Int]()\n  var num6Array = [Int]()\n  var num7Array\
    \ = [Int]()\n  var num8Array = [Int]()\n  var num9Array = [Int]()\n  for i in\
    \ arr {\n    switch i.numOf1() {\n    case 0:\n      num0Array.append(i)\n   \
    \ case 1:\n      num1Array.append(i)\n    case 2:\n      num2Array.append(i)\n\
    \    case 3:\n      num3Array.append(i)\n    case 4:\n      num4Array.append(i)\n\
    \    case 5:\n      num5Array.append(i)\n    case 6:\n      num6Array.append(i)\n\
    \    case 7:\n      num7Array.append(i)\n    case 8:\n      num8Array.append(i)\n\
    \    case 9:\n      num9Array.append(i)\n    default:\n      break\n    }\n  }\n\
    \  newArray = newArray + num0Array.sorted()\n  newArray = newArray + num1Array.sorted()\n\
    \  newArray = newArray + num2Array.sorted()\n  newArray = newArray + num3Array.sorted()\n\
    \  newArray = newArray + num4Array.sorted()\n  newArray = newArray + num5Array.sorted()\n\
    \  newArray = newArray + num6Array.sorted()\n  newArray = newArray + num7Array.sorted()\n\
    \  newArray = newArray + num8Array.sorted()\n  newArray = newArray + num9Array.sorted()\n\
    \  return newArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpkzvhhgow.swift:22:14: error: value of type 'Int' has no member\
    \ 'numOf1'\n    switch i.numOf1() {\n           ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824730
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let onesFirst = numOnes($0)\n\
    \        let onesSecond = numOnes($1)\n        if onesFirst == onesSecond {\n\
    \            return $0 < $1\n        }\n        return onesFirst < onesSecond\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpmc5tcp3s.swift:11:25: error: cannot find 'numOnes' in scope\n \
    \       let onesFirst = numOnes($0)\n                        ^~~~~~~\n/tmp/tmpmc5tcp3s.swift:12:26:\
    \ error: cannot find 'numOnes' in scope\n        let onesSecond = numOnes($1)\n\
    \                         ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824730
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    let sorted_zero = arr.filter { $0 == 0 }\n    let sorted_one\
    \ = arr.filter { $0 == 1 }\n    let sorted_two = arr.filter { $0 == 2 }\n    let\
    \ sorted_three = arr.filter { $0 == 3 }\n    let sorted_four = arr.filter { $0\
    \ == 4 }\n    let sorted_five = arr.filter { $0 == 5 }\n    let sorted_six = arr.filter\
    \ { $0 == 6 }\n    let sorted_seven = arr.filter { $0 == 7 }\n    let sorted_eight\
    \ = arr.filter { $0 == 8 }\n    let sorted_nine = arr.filter { $0 == 9 }\n   \
    \ let sorted_ten = arr.filter { $0 == 10 }\n    let sorted_eleven = arr.filter\
    \ { $0 == 11 }\n    let sorted_twelve = arr.filter { $0 == 12 }\n    let sorted_thirteen\
    \ = arr.filter { $0 == 13 }\n    let sorted_fourteen = arr.filter { $0 == 14 }\n\
    \    let sorted_fifteen = arr.filter { $0 == 15 }\n    let sorted_sixteen = arr.filter\
    \ { $0 == 16 }\n    let sorted_seventeen = arr.filter { $0 == 17 }\n    let sorted_eighteen\
    \ = arr.filter { $0 == 18 }\n    let sorted_nineteen = arr.filter { $0 == 19 }\n\
    \    let sorted_twenty = arr.filter { $0 == 20 }\n    let sorted_twenty_one =\
    \ arr.filter { $0 == 21 }\n    let sorted_twenty_two = arr.filter { $0 == 22 }\n\
    \    let sorted_twenty_three = arr.filter { $0 == 23 }\n    let sorted_twenty_four\
    \ = arr.filter { $0 == 24 }\n    let sorted_twenty_five = arr.filter { $0 == 25\
    \ }\n    let sorted_twenty_six = arr.filter { $0 == 26 }\n    let sorted_twenty_seven\
    \ = arr.filter { $0 == 27 }\n    let sorted_twenty_eight = arr.filter { $0 ==\
    \ 28 }\n    let sorted_twenty_nine = arr.filter\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpz9aos_7p.swift:10:9: warning: initialization of immutable value\
    \ 'sorted_zero' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let sorted_zero = arr.filter { $0 == 0 }\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmpz9aos_7p.swift:11:9: warning: initialization of immutable value 'sorted_one'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   let sorted_one = arr.filter { $0 == 1 }\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpz9aos_7p.swift:12:9:\
    \ warning: initialization of immutable value 'sorted_two' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    let sorted_two = arr.filter\
    \ { $0 == 2 }\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpz9aos_7p.swift:13:9: warning:\
    \ initialization of immutable value 'sorted_three' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sorted_three = arr.filter { $0\
    \ == 3 }\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpz9aos_7p.swift:14:9: warning: initialization\
    \ of immutable value 'sorted_four' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    let sorted_four = arr.filter { $0 == 4 }\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpz9aos_7p.swift:15:9: warning: initialization of immutable value\
    \ 'sorted_five' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let sorted_five = arr.filter { $0 == 5 }\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmpz9aos_7p.swift:16:9: warning: initialization of immutable value 'sorted_six'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   let sorted_six = arr.filter { $0 == 6 }\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpz9aos_7p.swift:17:9:\
    \ warning: initialization of immutable value 'sorted_seven' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    let sorted_seven = arr.filter\
    \ { $0 == 7 }\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpz9aos_7p.swift:18:9: warning:\
    \ initialization of immutable value 'sorted_eight' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sorted_eight = arr.filter { $0\
    \ == 8 }\n    ~"
  stdout: ''
  timestamp: 1659824730
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        return a.numberOfOnes()\
    \ < b.numberOfOnes()\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmplo6jzsqd.swift:11:18: error: value of type 'Int' has no member\
    \ 'numberOfOnes'\n        return a.numberOfOnes() < b.numberOfOnes()\n       \
    \        ~ ^~~~~~~~~~~~\n/tmp/tmplo6jzsqd.swift:11:37: error: value of type 'Int'\
    \ has no member 'numberOfOnes'\n        return a.numberOfOnes() < b.numberOfOnes()\n\
    \                                  ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824730
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n  // Your code goes here\n  return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpv0dtinye/tmpv0dtinye.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7d4680c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7d4377b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7d4377988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7d43767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0dtinye                        0x00005565b16d63e4 <unavailable> + 5092

    5    libc.so.6                          0x00002ba7d486c460 __libc_start_main +
    245

    6    tmpv0dtinye                        0x00005565b16d5fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824730
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (left, right) -> Bool in\n        let leftLiteral\
    \ = String(left, radix: 2)\n        let rightLiteral = String(right, radix: 2)\n\
    \        let leftCount = leftLiteral.filter { $0 == \"1\" }.count\n        let\
    \ rightCount = rightLiteral.filter { $0 == \"1\" }.count\n        if leftCount\
    \ == rightCount {\n            return left < right\n        }\n        return\
    \ leftCount < rightCount\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824730
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    let sortedWithOnes = arr.sorted { (num1, num2) -> Bool in\n\
    \        let ones1 = num1.numberOfOnes()\n        let ones2 = num2.numberOfOnes()\n\
    \        if ones1 == ones2 {\n            return num1 < num2\n        }\n    \
    \    return ones1 < ones2\n    }\n    return sortedWithOnes\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmp9o59a4hp.swift:11:26: error: value of type 'Int' has no member\
    \ 'numberOfOnes'\n        let ones1 = num1.numberOfOnes()\n                  \
    \  ~~~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824730
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var newArr = arr\n    for i in 0..<newArr.count {\n        for\
    \ j in 0..<newArr.count - 1 {\n            let b0 = String(newArr[j], radix: 2).count\n\
    \            let b1 = String(newArr[j + 1], radix: 2).count\n            if b0\
    \ > b1 {\n                newArr.swapAt(j, j + 1)\n            } else if b0 ==\
    \ b1 {\n                if newArr[j] > newArr[j + 1] {\n                    newArr.swapAt(j,\
    \ j + 1)\n                }\n            }\n        }\n    }\n    return newArr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpv2wofznr/tmpv2wofznr.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfaa3f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfaa0e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfaa0e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfaa0e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv2wofznr                        0x0000560ebb0d27b4 <unavailable> + 6068

    5    libc.so.6                          0x00002acfaa5dc460 __libc_start_main +
    245

    6    tmpv2wofznr                        0x0000560ebb0d2399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824730
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let onesA = a.nonzeroBitCount\n\
    \        let onesB = b.nonzeroBitCount\n        return onesA == onesB ? a < b\
    \ : onesA < onesB\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpkgfnn297/tmpkgfnn297.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac083148c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac082e3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac082e3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac082e3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkgfnn297                        0x000055b0c346759b <unavailable> + 5531

    5    libc.so.6                          0x00002ac083334460 __libc_start_main +
    245

    6    tmpkgfnn297                        0x000055b0c3467039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824730
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n  var ones: [(Int, Int)] = []\n  for num in arr {\n    ones.append((num,\
    \ String(num, radix: 2).components(separatedBy: \"1\").count - 1))\n  }\n  ones.sort\
    \ { (tuple1, tuple2) -> Bool in\n    if tuple1.1 == tuple2.1 {\n      return tuple1.0\
    \ < tuple2.0\n    }\n    return tuple1.1 < tuple2.1\n  }\n  return ones.map {\
    \ $0.0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp3nrd3rs8.swift:12:45: error: value of type 'String' has no member\
    \ 'components'\n    ones.append((num, String(num, radix: 2).components(separatedBy:\
    \ \"1\").count - 1))\n                      ~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824730
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    let length = arr.count\n    if length < 2 {\n        return\
    \ arr\n    }\n    let middle = length / 2\n    let left = sort_array(Array(arr[0..<middle]))\n\
    \    let right = sort_array(Array(arr[middle..<length]))\n    return merge(left,\
    \ right: right)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpqgmoqfjw.swift:15:27: error: missing argument label 'arr:' in call\n\
    \    let left = sort_array(Array(arr[0..<middle]))\n                         \
    \ ^\n                          arr: \n/tmp/tmpqgmoqfjw.swift:16:28: error: missing\
    \ argument label 'arr:' in call\n    let right = sort_array(Array(arr[middle..<length]))\n\
    \                           ^\n                           arr: \n/tmp/tmpqgmoqfjw.swift:17:12:\
    \ error: cannot find 'merge' in scope\n    return merge(left, right: right)\n\
    \           ^~~~~\n"
  stdout: ''
  timestamp: 1659824730
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { a, b in\n        let aOnes = ones(from:\
    \ a)\n        let bOnes = ones(from: b)\n        if aOnes != bOnes {\n       \
    \     return aOnes < bOnes\n        }\n        return a < b\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpj6zdmg_b.swift:11:21: error: cannot find 'ones' in scope\n    \
    \    let aOnes = ones(from: a)\n                    ^~~~\n/tmp/tmpj6zdmg_b.swift:12:21:\
    \ error: cannot find 'ones' in scope\n        let bOnes = ones(from: b)\n    \
    \                ^~~~\n"
  stdout: ''
  timestamp: 1659824730
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var binary = [Int: [Int]]()\n    for i in arr {\n        var\
    \ binaryArr = [Int]()\n        let b = String(i, radix: 2)\n        for c in b\
    \ {\n            binaryArr.append(Int(String(c))!)\n        }\n        if binary[binaryArr.filter\
    \ { $0 == 1 }.count] == nil {\n            binary[binaryArr.filter { $0 == 1 }.count]\
    \ = [i]\n        } else {\n            binary[binaryArr.filter { $0 == 1 }.count]?.append(i)\n\
    \        }\n    }\n    var rtn = [Int]()\n    for key in binary.keys.sorted()\
    \ {\n        var val = binary[key]!\n        val.sort()\n        rtn.append(contentsOf:\
    \ val)\n    }\n    return rtn\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpc2kqb2z1/tmpc2kqb2z1.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b662dc33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b662d92a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b662d92a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b662d92a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b662d929bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpc2kqb2z1                        0x00005632e4a6fc1b <unavailable> + 11291

    6    tmpc2kqb2z1                        0x00005632e4a6eecb <unavailable> + 7883

    7    libc.so.6                          0x00002b662de1f460 __libc_start_main +
    245

    8    tmpc2kqb2z1                        0x00005632e4a6ea59 <unavailable> + 6745

    '
  stdout: ''
  timestamp: 1659824730
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n  return arr.sorted { (a, b) -> Bool in\n    if a.nonzeroBitCount\
    \ == b.nonzeroBitCount {\n      return a < b\n    }\n    return a.nonzeroBitCount\
    \ < b.nonzeroBitCount\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpi_tdl_or/tmpi_tdl_or.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3523451c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3523148b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3523148988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35231477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi_tdl_or                        0x00005575210df59b <unavailable> + 5531

    5    libc.so.6                          0x00002b352363d460 __libc_start_main +
    245

    6    tmpi_tdl_or                        0x00005575210df039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824730
