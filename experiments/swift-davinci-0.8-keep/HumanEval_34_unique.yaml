name: HumanEval_34_unique
language: swift
prompt: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5, 2,\
  \ 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\
  \ == [0, 2, 3, 5, 9, 123])"
completions: ['    return Array(Set(l))', "    var r = [Int]()\n    for i in l {\n\
    \        if !contains(r, i) {\n            r.append(i)\n        }\n    }\n   \
    \ return r", "    var seen: [Int:Bool] = [:]\n    return l.filter {seen.updateValue(true,\
    \ forKey: $0) == nil}", "    var uniq = [Int]()\n    for el in l {\n        if\
    \ !uniq.contains(el) {\n            uniq.append(el)\n        }\n    }\n    return\
    \ uniq.sorted()", "    var list = l\n    return list.uniq().sorted()", "    var\
    \ arr = l\n    arr.sort(<)\n    var res: [Int] = []\n    var last = arr[0]\n \
    \   res.append(last)\n    for num in arr {\n        if last != num {\n       \
    \     res.append(num)\n            last = num\n        }\n    }\n    return res",
  '    return Array(Set(l))', "    var seen: [Int:Bool] = [:]\n    return l.filter({(x:\
    \ Int) -> Bool in\n        if seen[x] != nil {\n            return false\n   \
    \     } else {\n            seen[x] = true\n            return true\n        }\n\
    \    })", "    var set = Set<Int>()\n    l.forEach { set.insert($0) }\n    return\
    \ Array(set).sorted()", '  return Array(Set(l))', "    let sorted = sorted(l)\n\
    \    var result: [Int] = []\n    var last: Int?\n    for i in sorted {\n     \
    \   if last != i {\n            result.append(i)\n            last = i\n     \
    \   }\n    }\n    return result", "    var j = 0\n    for i in 1..<l.count {\n\
    \        if l[i] != l[j] {\n            j += 1\n            l[j] = l[i]\n    \
    \    }\n    }\n    return Array(l[0...j])", '    return Set(l).sort()', "    return\
    \ l.reduce([Int]()) { result, e in\n        if result.contains(e) {\n        \
    \    return result\n        } else {\n            return result + [e]\n      \
    \  }\n    }", "    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return Array(Set(l)).sorted()', '    return Array(Set(l))', '    return Array(Set(l)).sorted()',
  "    var l2 = l\n    l2.sort()\n    let result = l2.reduce([]) {\n        acc, x\
    \ in\n        if acc.last != x {\n            return acc + [x]\n        } else\
    \ {\n            return acc\n        }\n    }\n    return result"]
stop_tokens:
- "\n}"
