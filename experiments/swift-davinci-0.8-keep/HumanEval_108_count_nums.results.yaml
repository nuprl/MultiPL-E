language: swift
name: HumanEval_108_count_nums
results:
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter{\n        var sum = 0\n        var val = $0\n\
    \        if val < 0 {\n            val = -val\n        }\n        while val >\
    \ 0 {\n            sum += val % 10\n            val /= 10\n        }\n       \
    \ return sum > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpcj0ofoe4/tmpcj0ofoe4.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba566b35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba56682cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba56682c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba56682b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcj0ofoe4                        0x000055afe1bef560 <unavailable> + 5472

    5    libc.so.6                          0x00002ba566d21460 __libc_start_main +
    245

    6    tmpcj0ofoe4                        0x000055afe1bef129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013329
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { abs($0).digits.reduce(0, +) > 0 }.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpwe7vaa0c.swift:10:33: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { abs($0).digits.reduce(0, +) > 0 }.count\n\
    \                        ~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660013329
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ (a) -> Bool in\n        return abs(a) > 9\
    \ &&\n            Double(a).sign() != Double(Int(String(abs(a)).characters.dropFirst().reduce(0,\
    \ +))).sign()\n    }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpssosc9sj.swift:12:23: error: cannot call value of non-function\
    \ type 'FloatingPointSign'\n            Double(a).sign() != Double(Int(String(abs(a)).characters.dropFirst().reduce(0,\
    \ +))).sign()\n                      ^   ~~\n                          \n/tmp/tmpssosc9sj.swift:12:97:\
    \ error: cannot call value of non-function type 'FloatingPointSign'\n        \
    \    Double(a).sign() != Double(Int(String(abs(a)).characters.dropFirst().reduce(0,\
    \ +))).sign()\n                                                              \
    \                                  ^   ~~\n                                  \
    \                                                                  \n/tmp/tmpssosc9sj.swift:12:92:\
    \ error: cannot convert value of type '(Int) -> Int' to expected argument type\
    \ '(Int, Character) throws -> Int'\n            Double(a).sign() != Double(Int(String(abs(a)).characters.dropFirst().reduce(0,\
    \ +))).sign()\n                                                              \
    \                             ^\n"
  stdout: ''
  timestamp: 1660013341
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpgy5bw0is/tmpgy5bw0is.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef4aee7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef4abdeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef4abde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef4abdd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgy5bw0is                        0x00005622fca92485 <unavailable> + 5253

    5    libc.so.6                          0x00002aef4b0d3460 __libc_start_main +
    245

    6    tmpgy5bw0is                        0x00005622fca91f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013329
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n\tlet arrSum = arr.map({ a in abs(a) })\n\t\t.map({ Int(String($0).characters.map({\
    \ Int(String($0))! }).reduce(0, +))! })\n\treturn arrSum.reduce(0, +) > 0 ? arr.count\
    \ : 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as [Int])\
    \ == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1,\
    \ 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5]) ==\
    \ 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpq076vhoq.swift:11:14: error: missing argument label 'exactly:'\
    \ in call\n                .map({ Int(String($0).characters.map({ Int(String($0))!\
    \ }).reduce(0, +))! })\n                           ^\n                       \
    \    exactly: \n"
  stdout: ''
  timestamp: 1660013334
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n  var result = 0\n  for i in arr {\n    var abs = i\n    if abs <\
    \ 0 {\n      abs = -abs\n    }\n    if abs < 10 {\n      result += 1\n    } else\
    \ {\n      while abs >= 10 {\n        var sum = 0\n        while abs >= 10 {\n\
    \          sum += abs % 10\n          abs /= 10\n        }\n        sum += abs\n\
    \        abs = sum\n      }\n      result += 1\n    }\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp_qzc9hke/tmp_qzc9hke.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af409520c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af409217b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af409217988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4092167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qzc9hke                        0x000055a0f8ebf5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002af40970c460 __libc_start_main +
    245

    6    tmp_qzc9hke                        0x000055a0f8ebf169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013329
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { abs($0) > 0 && String(abs($0)).reduce(0, {$0\
    \ + Int(String($1))!}) > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpt0uyf5vq/tmpt0uyf5vq.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f8768ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f87385b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f87385988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f873847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt0uyf5vq                        0x000055955b38d8f0 <unavailable> + 6384

    5    libc.so.6                          0x00002b0f8787a460 __libc_start_main +
    245

    6    tmpt0uyf5vq                        0x000055955b38d4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660013329
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0;\n    for number in arr {\n        var sum = 0;\n\
    \        var temp = number;\n        if temp < 0 {\n            temp = -temp;\n\
    \        }\n        while temp > 0 {\n            sum += temp % 10;\n        \
    \    temp /= 10;\n        }\n        if sum > 0 {\n            count += 1;\n \
    \       }\n    }\n    return count;\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpdhhdzmqm/tmpdhhdzmqm.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb4378bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb43482b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb43482988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb434817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdhhdzmqm                        0x0000555e9903e5a0 <unavailable> + 5536

    5    libc.so.6                          0x00002acb43977460 __libc_start_main +
    245

    6    tmpdhhdzmqm                        0x0000555e9903e169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013329
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter{abs($0) % 10 != 0}.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp3nrzw7se/tmp3nrzw7se.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad156460c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad156157b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad156157988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1561567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3nrzw7se                        0x000056018e0fe640 <unavailable> + 5696

    5    libc.so.6                          0x00002ad15664c460 __libc_start_main +
    245

    6    tmp3nrzw7se                        0x000056018e0fe209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013329
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        var sum = 0\n   \
    \     if num < 0 {\n            sum += -1\n        }\n        var nextNum = abs(num)\n\
    \        while nextNum != 0 {\n            sum += nextNum % 10\n            nextNum\
    \ /= 10\n        }\n        if sum > 0 {\n            count += 1\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpolqu8pyu/tmpolqu8pyu.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4f52a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4f4f9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4f4f9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4f4f9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpolqu8pyu                        0x000055aa9f2a2690 <unavailable> + 5776

    5    libc.so.6                          0x00002ae4f5493460 __libc_start_main +
    245

    6    tmpolqu8pyu                        0x000055aa9f2a2259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013329
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    var sum = 0\n    for num in arr {\n       \
    \ var tmp = num\n        if tmp < 0 {\n            tmp = abs(tmp)\n        }\n\
    \        while tmp != 0 {\n            sum += tmp % 10\n            tmp /= 10\n\
    \        }\n        if sum > 0 {\n            count += 1\n        }\n        sum\
    \ = 0\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpyrx2v6op/tmpyrx2v6op.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d749d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d746cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d746cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d746cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrx2v6op                        0x0000556810566690 <unavailable> + 5776

    5    libc.so.6                          0x00002b3d74bc2460 __libc_start_main +
    245

    6    tmpyrx2v6op                        0x0000556810566259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013329
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter{sum_digits($0) > 0}.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpv3_ta_xs.swift:10:23: error: cannot find 'sum_digits' in scope\n\
    \    return arr.filter{sum_digits($0) > 0}.count\n                      ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013329
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n\treturn arr.filter({ is_num($0) }).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpn1x8gl2j.swift:10:22: error: cannot find 'is_num' in scope\n  \
    \      return arr.filter({ is_num($0) }).count\n                            ^~~~~~\n"
  stdout: ''
  timestamp: 1660013329
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter {\n        $0 != 0 && $0.numbers.map { abs($0)\
    \ }.reduce(0, +) > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpbjxgqeni.swift:11:23: error: value of type 'Int' has no member\
    \ 'numbers'\n        $0 != 0 && $0.numbers.map { abs($0) }.reduce(0, +) > 0\n\
    \                   ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013330
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    // TODO: Implement count_nums\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpg4ptg0ye/tmpg4ptg0ye.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad75cb95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad75c88cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad75c88c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad75c88b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg4ptg0ye                        0x000055cf98865485 <unavailable> + 5253

    5    libc.so.6                          0x00002ad75cd81460 __libc_start_main +
    245

    6    tmpg4ptg0ye                        0x000055cf98864f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013329
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var result = 0\n    for item in arr {\n        var abs_item =\
    \ abs(item)\n        var sum = 0\n        while (abs_item > 0) {\n           \
    \ sum += abs_item % 10\n            abs_item /= 10\n        }\n        if (sum\
    \ > 0) {\n            result += 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpbb2wn6wh/tmpbb2wn6wh.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6db3b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6db3817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6db3817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6db38167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbb2wn6wh                        0x0000561ed857d690 <unavailable> + 5776

    5    libc.so.6                          0x00002b6db3d0c460 __libc_start_main +
    245

    6    tmpbb2wn6wh                        0x0000561ed857d259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013329
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    if arr.isEmpty {\n        return 0\n    }\n    var count = 0\n\
    \    for element in arr {\n        var el = element\n        var sum = 0\n   \
    \     if el < 0 {\n            el = abs(el)\n            sum += 1\n        }\n\
    \        for _ in String(el) {\n            sum += el % 10\n            el /=\
    \ 10\n        }\n        if sum > 0 {\n            count += 1\n        }\n   \
    \ }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp420ncba5/tmp420ncba5.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10417fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10414f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10414f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10414f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp420ncba5                        0x000055e59e3e4860 <unavailable> + 6240

    5    libc.so.6                          0x00002b10419e7460 __libc_start_main +
    245

    6    tmp420ncba5                        0x000055e59e3e4429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013329
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var sum = 0\n    var count = 0\n    for num in arr {\n       \
    \ if (num < 0) {\n            sum = sum + -1*(num%10)\n        } else {\n    \
    \        sum = sum + num%10\n        }\n    }\n    if (sum > 0) {\n        count\
    \ = count + 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp55ryrtfq/tmp55ryrtfq.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fbdb51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fbd848b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fbd848988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fbd8477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp55ryrtfq                        0x0000556ba3c855a0 <unavailable> + 5536

    5    libc.so.6                          0x00002b9fbdd3d460 __libc_start_main +
    245

    6    tmp55ryrtfq                        0x0000556ba3c85169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013329
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var result = 0\n    for num in arr {\n        if sum_digits(num)\
    \ > 0 {\n            result += 1\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmph89u86ya.swift:12:12: error: cannot find 'sum_digits' in scope\n\
    \        if sum_digits(num) > 0 {\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013329
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for x in arr {\n        var y = x\n       \
    \ if x < 0 {\n            y = -x\n        }\n        if get_signed_sum(y) > 0\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0i542j6f.swift:16:12: error: cannot find 'get_signed_sum' in scope\n\
    \        if get_signed_sum(y) > 0 {\n           ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013329
