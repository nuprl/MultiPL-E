name: HumanEval_124_valid_date
language: swift
prompt: "\n/// You have to write a function which validates a given date string and\n\
  /// returns True if the date is valid otherwise False.\n/// The date is valid if\
  \ all of the following rules are satisfied:\n/// 1. The date string is not empty.\n\
  /// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  /// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date\
  \ should be in the format: mm-dd-yyyy\n/// for example: \n/// valid_date('03-11-2000')\
  \ => True\n/// valid_date('15-01-2012') => False\n/// valid_date('04-0-2040') =>\
  \ False\n/// valid_date('06-04-2020') => True\n/// valid_date('06/04/2020') => False\n\
  func valid_date(date: String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(valid_date(date: \"03-11-2000\") == true)\n\
  assert(valid_date(date: \"15-01-2012\") == false)\nassert(valid_date(date: \"04-0-2040\"\
  ) == false)\nassert(valid_date(date: \"06-04-2020\") == true)\nassert(valid_date(date:\
  \ \"01-01-2007\") == true)\nassert(valid_date(date: \"03-32-2011\") == false)\n\
  assert(valid_date(date: \"\") == false)\nassert(valid_date(date: \"04-31-3000\"\
  ) == false)\nassert(valid_date(date: \"06-06-2005\") == true)\nassert(valid_date(date:\
  \ \"21-31-2000\") == false)\nassert(valid_date(date: \"04-12-2003\") == true)\n\
  assert(valid_date(date: \"04122003\") == false)\nassert(valid_date(date: \"20030412\"\
  ) == false)\nassert(valid_date(date: \"2003-04\") == false)\nassert(valid_date(date:\
  \ \"2003-04-12\") == false)\nassert(valid_date(date: \"04-2003\") == false)"
completions: ["\tvar valid = false\n\tlet dateFormatter = DateFormatter()\n\tdateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n\tdateFormatter.timeZone = TimeZone(abbreviation: \"GMT+0:00\"\
    )\n\tif let date = dateFormatter.date(from: date) {\n\t\tvalid = true\n\t}\n\t\
    return valid", '  return false', '  return false', "  var result = false\n  let\
    \ validChars = NSCharacterSet(charactersInString: \"0123456789-\")\n  let date\
    \ = date.componentsSeparatedByCharactersInSet(validChars.invertedSet)\n  let dateLength\
    \ = date.count\n  let month = Int(date[0])\n  let day = Int(date[1])\n  let year\
    \ = Int(date[2])\n  if dateLength == 3 {\n    if year > 0 && year < 10000 {\n\
    \      if month > 0 && month < 13 {\n        if day > 0 && day < 32 {\n      \
    \    if month == 1 || month == 3 || month == 5 || month == 7 || month == 8 ||\
    \ month == 10 || month == 12 {\n            result = true\n          } else if\
    \ month == 4 || month == 6 || month == 9 || month == 11 {\n            if day\
    \ < 31 {\n              result = true\n            }\n          } else if month\
    \ == 2 {\n            if day < 30 {\n              result = true\n           \
    \ }\n          }\n        }\n      }\n    }\n  }\n  return result", "    if date.count\
    \ == 0 {\n        return false\n    }\n    let dates = date.split(separator: \"\
    -\")\n    if dates.count != 3 {\n        return false\n    }\n    guard let month\
    \ = Int(dates[0]), let day = Int(dates[1]), let year = Int(dates[2]) else {\n\
    \        return false\n    }\n    let days31 = [1, 3, 5, 7, 8, 10, 12]\n    let\
    \ days30 = [4, 6, 9, 11]\n    if days31.contains(month) {\n        if day < 1\
    \ || day > 31 {\n            return false\n        }\n    } else if days30.contains(month)\
    \ {\n        if day < 1 || day > 30 {\n            return false\n        }\n \
    \   } else if month == 2 {\n        if day < 1 || day > 29 {\n            return\
    \ false\n        }\n    } else {\n        return false\n    }\n    if month <\
    \ 1 || month > 12 {\n        return false\n    }\n    return true", '  return
    true', "    let f = DateFormatter()\n    f.dateFormat = \"mm-dd-yyyy\"\n    let\
    \ d = f.date(from: date)\n    return d != nil", "    let pattern = \"^[0-1][0-9]-[0-3][0-9]-[0-9]{4}$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n  \
    \  let matches = regex.matches(in: date, options: [], range: NSRange(location:\
    \ 0, length: date.count))\n    if matches.count == 0 {\n        return false\n\
    \    }\n    let dateArr = date.split(separator: \"-\")\n    let mm = Int(dateArr[0])!\n\
    \    let dd = Int(dateArr[1])!\n    let yyyy = Int(dateArr[2])!\n    if mm < 1\
    \ || mm > 12 {\n        return false\n    }\n    if dd < 1 || dd > 31 {\n    \
    \    return false\n    }\n    if (mm == 4 || mm == 6 || mm == 9 || mm == 11) &&\
    \ dd > 30 {\n        return false\n    }\n    if mm == 2 && (dd > 29 || (dd ==\
    \ 29 && !yyyy.isLeapYear())) {\n        return false\n    }\n    return true",
  '    // Your code here', "  let dateFormatter = DateFormatter()\n  dateFormatter.dateFormat\
    \ = \"MM-dd-yyyy\"\n  dateFormatter.timeZone = TimeZone(abbreviation: \"GMT+0:00\"\
    )\n  let date = dateFormatter.date(from: date)\n  return date != nil", "    let\
    \ components = date.components(separatedBy: \"-\")\n    guard components.count\
    \ == 3 else { return false }\n    guard let month = Int(components[0]), let day\
    \ = Int(components[1]), let year = Int(components[2]) else { return false }\n\
    \    if month < 1 || month > 12 { return false }\n    if year < 0 { return false\
    \ }\n    if month == 2 {\n        if (year % 4 == 0 && year % 100 != 0) || year\
    \ % 400 == 0 {\n            if day < 1 || day > 29 { return false }\n        }\
    \ else {\n            if day < 1 || day > 28 { return false }\n        }\n   \
    \ } else if month == 1 || month == 3 || month == 5 || month == 7 || month == 8\
    \ || month == 10 || month == 12 {\n        if day < 1 || day > 31 { return false\
    \ }\n    } else {\n        if day < 1 || day > 30 { return false }\n    }\n  \
    \  return true", "    //    var month = Int()\n    //    var day = Int()\n   \
    \ //    var year = Int()\n    //\n    //    var dateArr = date.components(separatedBy:\
    \ \"-\")\n    //    month = Int(dateArr[0])!\n    //    day = Int(dateArr[1])!\n\
    \    //    year = Int(dateArr[2])!\n    //\n    //    if (month < 1 || month >\
    \ 12) {\n    //        return false\n    //    }\n    //\n    //    if (year <\
    \ 1) {\n    //        return false\n    //    }\n    //\n    //    if (month ==\
    \ 2) {\n    //        if (day < 1 || day > 29) {\n    //            return false\n\
    \    //        }\n    //    } else if (month == 4 || month == 6 || month == 9\
    \ || month == 11) {\n    //        if (day < 1 || day > 30) {\n    //        \
    \    return false\n    //        }\n    //    } else {\n    //        if (day\
    \ < 1 || day > 31) {\n    //            return false\n    //        }\n    //\
    \    }\n    //\n    //    return true\n    \n    let dateFormatter = DateFormatter()\n\
    \    dateFormatter.dateFormat = \"MM-dd-yyyy\"\n    dateFormatter.timeZone = TimeZone(abbreviation:\
    \ \"GMT+0:00\")\n    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\"\
    )\n    let dateVal = dateFormatter.date(from: date)\n    if dateVal != nil {\n\
    \        return true\n    }\n    return false", '  return date.validDate()', '    return
    false', "    if date.isEmpty {\n        return false\n    }\n    let dateArray\
    \ = date.components(separatedBy: \"-\")\n    if dateArray.count != 3 {\n     \
    \   return false\n    }\n    if let month = Int(dateArray[0]), month < 1 || month\
    \ > 12 {\n        return false\n    }\n    if let day = Int(dateArray[1]), day\
    \ < 1 || day > 31 {\n        return false\n    }\n    if let year = Int(dateArray[2]),\
    \ year < 1 {\n        return false\n    }\n    return true", '    return false',
  '  // your code here', '    return false', "  let dateFormatter = DateFormatter()\n\
    \  dateFormatter.dateFormat = \"MM-dd-yyyy\"\n  return dateFormatter.date(from:\
    \ date) != nil", "    //TODO: Write your solution here\n    let reg = try! NSRegularExpression(pattern:\
    \ \"([0-9]{2})-([0-9]{2})-([0-9]{4})\", options: .caseInsensitive)\n    let match\
    \ = reg.firstMatch(in: date, options: .anchored, range: NSRange(location: 0, length:\
    \ date.count))\n    guard match != nil else {\n        return false\n    }\n \
    \   let month = Int(date[Range(match!.range(at: 1), in: date)!])!\n    let day\
    \ = Int(date[Range(match!.range(at: 2), in: date)!])!\n    let year = Int(date[Range(match!.range(at:\
    \ 3), in: date)!])!\n    if month > 12 || month < 1 {\n        return false\n\
    \    }\n    if month == 2 {\n        if year % 4 == 0 {\n            if day >\
    \ 29 || day < 1 {\n                return false\n            }\n        } else\
    \ {\n            if day > 28 || day < 1 {\n                return false\n    \
    \        }\n        }\n    } else if month == 4 || month == 6 || month == 9 ||\
    \ month == 11 {\n        if day > 30 || day < 1 {\n            return false\n\
    \        }\n    } else {\n        if day > 31 || day < 1 {\n            return\
    \ false\n        }\n    }\n    return true"]
stop_tokens:
- "\n}"
