name: HumanEval_51_remove_vowels
language: swift
prompt: "\n/// remove_vowels is a function that takes string and returns string without\
  \ vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
  /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
  /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfunc remove_vowels(text: String)\
  \ -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
  \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
  ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
  \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
  \ \"ybcd\") == \"ybcd\")"
completions: ["    var result = \"\"\n    for character in text {\n        switch\
    \ character {\n        case \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\":\n            break\n        default:\n            result.append(character)\n\
    \        }\n    }\n    return result", '    return text.filter { !$0.isVowel }',
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\"\
    , \"U\"]\n    var filteredText = \"\"\n    for character in text {\n        if\
    \ !vowels.contains(String(character)) {\n            filteredText.append(character)\n\
    \        }\n    }\n    return filteredText", "    let vowels: [Character] = [\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    return\
    \ String(text.characters.filter{!vowels.contains($0)})", "    let vowels: [Character]\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n \
    \   var str = \"\"\n    for ch in text {\n        if !vowels.contains(ch) {\n\
    \            str.append(ch)\n        }\n    }\n    return str", "    var new_text\
    \ = text\n    let vowels = \"aeiou\"\n    for vowel in vowels {\n        if let\
    \ range = new_text.range(of: String(vowel)) {\n            new_text.remove(at:\
    \ range.lowerBound)\n        }\n    }\n    return new_text", "    var result:\
    \ String = \"\"\n    for i in text {\n        if i == \"a\" || i == \"A\" || i\
    \ == \"e\" || i == \"E\" || i == \"i\" || i == \"I\" || i == \"o\" || i == \"\
    O\" || i == \"u\" || i == \"U\" {\n            continue\n        }\n        result\
    \ += String(i)\n    }\n    return result", "    var new_text = text\n    new_text\
    \ = new_text.replacingOccurrences(of: \"a\", with: \"\")\n    new_text = new_text.replacingOccurrences(of:\
    \ \"A\", with: \"\")\n    new_text = new_text.replacingOccurrences(of: \"e\",\
    \ with: \"\")\n    new_text = new_text.replacingOccurrences(of: \"E\", with: \"\
    \")\n    new_text = new_text.replacingOccurrences(of: \"i\", with: \"\")\n   \
    \ new_text = new_text.replacingOccurrences(of: \"I\", with: \"\")\n    new_text\
    \ = new_text.replacingOccurrences(of: \"o\", with: \"\")\n    new_text = new_text.replacingOccurrences(of:\
    \ \"O\", with: \"\")\n    new_text = new_text.replacingOccurrences(of: \"u\",\
    \ with: \"\")\n    new_text = new_text.replacingOccurrences(of: \"U\", with: \"\
    \")\n    return new_text", '    return text.characters.filter{!(vowels.contains($0))}.reduce("",{$0
    + String($1)})', "    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"\
    u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    var res_text = \"\"\n    for i in\
    \ text {\n        if !vowels.contains(i) {\n            res_text.append(i)\n \
    \       }\n    }\n    return res_text", "    let vowels = \"aeiouAEIOU\"\n   \
    \ return String(text.filter { !vowels.contains($0) })", "    var vowels = \"aeiouAEIOU\"\
    \n    var s = \"\"\n    for c in text {\n        if !vowels.contains(c) {\n  \
    \          s += String(c)\n        }\n    }\n    return s", "    let vowels: Set<Character>\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n \
    \   return String(text.characters.filter { !vowels.contains($0) })", "    let\
    \ vowels: String = \"aeiou\"\n    var modified_text: String = \"\"\n    for character\
    \ in text {\n        if (!vowels.contains(character)) {\n            modified_text.append(character)\n\
    \        }\n    }\n    return modified_text", "    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    var filteredCharacters\
    \ = [Character]()\n    for character in text {\n        if !vowels.contains(String(character))\
    \ {\n            filteredCharacters.append(character)\n        }\n    }\n    return\
    \ String(filteredCharacters)", "    return text.filter {\n        switch $0 {\n\
    \        case \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"\
    U\":\n            return false\n        default:\n            return true\n  \
    \      }\n    }", "    let vowels = \"aeiou\"\n    var index = 0\n    var text\
    \ = text\n    var result = \"\"\n    while index < text.characters.count {\n \
    \       let a = text[text.startIndex.advancedBy(index)]\n        if !vowels.containsString(String(a))\
    \ {\n            result += String(a)\n        }\n        index += 1\n    }\n \
    \   return result", '    return text.replacingOccurrences(of: "[aeiouAEIOU]",
    with: "", options: [.regularExpression])', "    let vowels: [Character] = [\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    var result\
    \ = \"\"\n    for char in text {\n        if vowels.contains(char) {\n       \
    \     continue\n        }\n        result.append(char)\n    }\n    return result",
  "    var result = \"\"\n    for character in text {\n        switch character {\n\
    \        case \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"\
    U\":\n            break\n        default:\n            result.append(character)\n\
    \        }\n    }\n    return result"]
stop_tokens:
- "\n}"
