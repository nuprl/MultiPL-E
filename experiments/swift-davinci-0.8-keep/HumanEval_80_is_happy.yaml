name: HumanEval_80_is_happy
language: swift
prompt: "\n/// You are given a string s.\n/// Your task is to check if the string\
  \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
  \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
  /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
  /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
  \ -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
  \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"\
  aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
  ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\"\
  ) == false)"
completions: ["    let s = s.characters.map {String($0)}\n    guard s.count >= 3 else\
    \ {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n        let\
    \ sss = [s[i], s[i + 1], s[i + 2]]\n        if sss[0] == sss[1] || sss[0] == sss[2]\
    \ || sss[1] == sss[2] {\n            return false\n        }\n    }\n    return\
    \ true", '    return false', "    guard s.count >= 3 else { return false }\n \
    \   for i in 0..<s.count - 2 {\n        let index1 = s.index(s.startIndex, offsetBy:\
    \ i)\n        let index2 = s.index(s.startIndex, offsetBy: i + 1)\n        let\
    \ index3 = s.index(s.startIndex, offsetBy: i + 2)\n        if s[index1] == s[index2]\
    \ || s[index1] == s[index3] || s[index2] == s[index3] {\n            return false\n\
    \        }\n    }\n    return true", "    let chars = Array(s)\n    let length\
    \ = chars.count\n    if length < 3 {\n        return false\n    }\n    for index\
    \ in 0...length - 3 {\n        if chars[index] == chars[index + 1] || chars[index]\
    \ == chars[index + 2] || chars[index + 1] == chars[index + 2] {\n            return\
    \ false\n        }\n    }\n    return true", "    var s = s.map { String($0) }\n\
    \    while s.count >= 3 {\n        let letter = s.remove(at: 0)\n        let next\
    \ = s.remove(at: 0)\n        let last = s.remove(at: 0)\n        if letter ==\
    \ next || next == last || letter == last {\n            return false\n       \
    \ }\n    }\n    return true", "    if s.count < 3 {\n        return false\n  \
    \  }\n    return !(1..<s.count - 1).map { s.index(s.startIndex, offsetBy: $0)\
    \ }.contains { i in\n        s[s.index(i, offsetBy: -1)] == s[i] || s[i] == s[s.index(i,\
    \ offsetBy: 1)]\n    }", "    if s.count < 3 {\n        return false\n    }\n\
    \    for i in 0...s.count - 3 {\n        if String(s[s.index(s.startIndex, offsetBy:\
    \ i)]) == String(s[s.index(s.startIndex, offsetBy: i + 1)]) {\n            return\
    \ false\n        }\n    }\n    return true", "    let s = s.lowercased()\n   \
    \ if s.count < 3 {\n        return false\n    }\n    var previous1 = \"\"\n  \
    \  var previous2 = \"\"\n    for character in s {\n        if character == previous1\
    \ || character == previous2 {\n            return false\n        }\n        previous2\
    \ = previous1\n        previous1 = String(character)\n    }\n    return true",
  "  let array = Array(s)\n  if array.count < 3 {\n    return false\n  }\n  if array.count\
    \ == 3 {\n    return array[0] != array[1] && array[1] != array[2] && array[0]\
    \ != array[2]\n  }\n  for i in 0..<array.count - 2 {\n    if array[i] == array[i\
    \ + 1] || array[i + 1] == array[i + 2] || array[i] == array[i + 2] {\n      return\
    \ false\n    }\n  }\n  return true", "    if s.count < 3 {\n        return false\n\
    \    }\n    var chars = [Character]()\n    for i in 0..<s.count {\n        chars.append(s[i])\n\
    \    }\n    if chars.count == 3 {\n        if chars[0] == chars[1] || chars[1]\
    \ == chars[2] || chars[0] == chars[2] {\n            return false\n        }\n\
    \        return true\n    }\n    for i in 0..<chars.count - 2 {\n        if chars[i]\
    \ == chars[i + 1] || chars[i + 1] == chars[i + 2] || chars[i] == chars[i + 2]\
    \ {\n            return false\n        }\n    }\n    return true", "    if s.count\
    \ < 3 {\n        return false\n    }\n    for i in 0..<s.count-2 {\n        let\
    \ subStr = s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy:\
    \ i+3)]\n        if Set(subStr).count < 3 {\n            return false\n      \
    \  }\n    }\n    return true", "    guard s.count >= 3 else { return false }\n\
    \    for i in 2..<s.count {\n        if s[s.index(s.startIndex, offsetBy: i)]\
    \ == s[s.index(s.startIndex, offsetBy: i - 1)] &&\n            s[s.index(s.startIndex,\
    \ offsetBy: i)] == s[s.index(s.startIndex, offsetBy: i - 2)] {\n            return\
    \ false\n        }\n    }\n    return true", "    if s.count < 3 {\n        return\
    \ false\n    }\n    var (last1, last2, last3) = (s.removeFirst(), s.removeFirst(),\
    \ s.removeFirst())\n    for _ in 1..<s.count {\n        let next = s.removeFirst()\n\
    \        if next == last1 || next == last2 || next == last3 {\n            return\
    \ false\n        }\n        (last1, last2, last3) = (last2, last3, next)\n   \
    \ }\n    return true", "    if s.count < 3 {\n        return false\n    }\n  \
    \  var letterTracker = [Character : Int]()\n    for char in s {\n        if letterTracker[char]\
    \ == nil {\n            letterTracker[char] = 1\n        } else {\n          \
    \  letterTracker[char]! += 1\n        }\n    }\n    return !letterTracker.values.contains(where:\
    \ {$0 > 1})", '    return false', "    let isHappy = s.characters.count >= 3 &&\
    \ s.characters.count % 3 == 0\n    return isHappy", "  if s.count < 3 {\n    return\
    \ false\n  }\n  for i in 0..<s.count - 2 {\n    let start = s.index(s.startIndex,\
    \ offsetBy: i)\n    let end = s.index(s.startIndex, offsetBy: i + 3)\n    let\
    \ subString = s[start..<end]\n    let distinctArray = Array(Set(subString))\n\
    \    if distinctArray.count != 3 {\n      return false\n    }\n  }\n  return true",
  "    let str = Array(s)\n    if str.count < 3 {\n        return false\n    }\n \
    \   var set = Set<Character>()\n    var i = 0\n    while i < str.count - 2 {\n\
    \        if set.contains(str[i]) {\n            return false\n        }\n    \
    \    set.insert(str[i])\n        if str[i] == str[i + 1] || str[i] == str[i +\
    \ 2] || str[i + 1] == str[i + 2] {\n            return false\n        }\n    \
    \    i += 1\n    }\n    return true", '  return true', "    let split = Array(s)\n\
    \    var happy = true\n    for i in 0..<s.count-2 {\n        let word = split[i...i+2]\n\
    \        if Set(word).count != 3 {\n            happy = false\n        }\n   \
    \ }\n    return happy"]
stop_tokens:
- "\n}"
