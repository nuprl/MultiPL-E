language: swift
name: HumanEval_27_flip_case
results:
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped_string = \"\"\n    for char in string {\n\
    \        if char.isLetter {\n            if char.isUppercase {\n             \
    \   flipped_string.append(char.lowercased())\n            } else {\n         \
    \       flipped_string.append(char.uppercased())\n            }\n        } else\
    \ {\n            flipped_string.append(char)\n        }\n    }\n    return flipped_string\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.characters.map { char in\n        if\
    \ char.isUppercase {\n            return Character(String(char).lowercased())\n\
    \        } else {\n            return Character(String(char).uppercased())\n \
    \       }\n    }.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpqhmfzl82.swift:8:20: error: cannot convert return expression of\
    \ type 'Character' to return type 'String'\n            return Character(String(char).lowercased())\n\
    \                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824506
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped_string = \"\"\n    for c in string.characters\
    \ {\n        let upper_c = String(c).uppercaseString\n        let lower_c = String(c).lowercaseString\n\
    \        if upper_c == String(c) {\n            flipped_string.append(lower_c)\n\
    \        } else {\n            flipped_string.append(upper_c)\n        }\n   \
    \ }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpp8tk7cwi.swift:7:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in string.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpp8tk7cwi.swift:8:33:\
    \ error: value of type 'String' has no member 'uppercaseString'\n        let upper_c\
    \ = String(c).uppercaseString\n                      ~~~~~~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpp8tk7cwi.swift:9:33: error: value of type 'String' has no member 'lowercaseString'\n\
    \        let lower_c = String(c).lowercaseString\n                      ~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824506
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = \"\"\n    for character in string {\n\
    \        if character.isUppercase {\n            result.append(character.lowercased())\n\
    \        } else {\n            result.append(character.uppercased())\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var result = string\n    for i in 0..<string.characters.count\
    \ {\n        let index = string.index(string.startIndex, offsetBy: i)\n      \
    \  if isUpperCase(string[index]) {\n            result.replaceSubrange(index...index,\
    \ with: String(describing: string[index]).lowercased())\n        } else {\n  \
    \          result.replaceSubrange(index...index, with: String(describing: string[index]).uppercased())\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpznugwgll.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpznugwgll.swift:9:12: error: cannot find 'isUpperCase' in scope\n\
    \        if isUpperCase(string[index]) {\n           ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmpzrlekxpv/tmpzrlekxpv.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01beaedc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01be7e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01be7e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01be7e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzrlekxpv                        0x00005633b746b3f5 <unavailable> + 5109

    5    libc.so.6                          0x00002b01becd9460 __libc_start_main +
    245

    6    tmpzrlekxpv                        0x00005633b746af49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824506
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var newString = \"\"\n    for character in string {\n\
    \        let stringCharacter = String(character)\n        if stringCharacter ==\
    \ stringCharacter.uppercaseString {\n            newString += stringCharacter.lowercaseString\n\
    \        } else {\n            newString += stringCharacter.uppercaseString\n\
    \        }\n    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp9e0o8ueq.swift:9:47: error: value of type 'String' has no member\
    \ 'uppercaseString'\n        if stringCharacter == stringCharacter.uppercaseString\
    \ {\n                              ~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp9e0o8ueq.swift:10:42:\
    \ error: value of type 'String' has no member 'lowercaseString'\n            newString\
    \ += stringCharacter.lowercaseString\n                         ~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~\n/tmp/tmp9e0o8ueq.swift:12:42: error: value of type 'String'\
    \ has no member 'uppercaseString'\n            newString += stringCharacter.uppercaseString\n\
    \                         ~~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824506
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.characters.map {\n        $0.isUppercase\
    \ ? $0.lowercase() : $0.uppercase()\n    }.reduce(\"\", combine: +)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp5ct4q4j4.swift:7:29: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'lowercase'\n        $0.isUppercase ? $0.lowercase()\
    \ : $0.uppercase()\n                         ~~ ^~~~~~~~~\n/tmp/tmp5ct4q4j4.swift:7:46:\
    \ error: value of type 'String.Element' (aka 'Character') has no member 'uppercase'\n\
    \        $0.isUppercase ? $0.lowercase() : $0.uppercase()\n                  \
    \                        ~~ ^~~~~~~~~\n/tmp/tmp5ct4q4j4.swift:8:13: error: extraneous\
    \ argument label 'combine:' in call\n    }.reduce(\"\", combine: +)\n        \
    \    ^    ~~~~~~~~~\n                 \n"
  stdout: ''
  timestamp: 1659824506
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return flip_case(string, { char in\n        return\
    \ char\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpkqk7xyy_.swift:6:30: error: extra argument in call\n    return\
    \ flip_case(string, { char in\n                    ~~~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824506
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map { char in\n        if char.isUppercase\
    \ {\n            return char.lowercased()\n        } else {\n            return\
    \ char.uppercased()\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpywenzcwr.swift:6:19: error: cannot convert return expression of\
    \ type '[String]' to return type 'String'\n    return string.map { char in\n \
    \          ~~~~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824506
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.characters.map { $0.isUpperCase()\
    \ ? $0.lowercaseString : $0.uppercaseString })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpiv7s7793.swift:6:46: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isUpperCase'\n    return String(string.characters.map\
    \ { $0.isUpperCase() ? $0.lowercaseString : $0.uppercaseString })\n          \
    \                                ~~ ^~~~~~~~~~~\n/tmp/tmpiv7s7793.swift:6:65:\
    \ error: value of type 'String.Element' (aka 'Character') has no member 'lowercaseString'\n\
    \    return String(string.characters.map { $0.isUpperCase() ? $0.lowercaseString\
    \ : $0.uppercaseString })\n                                                  \
    \           ~~ ^~~~~~~~~~~~~~~\n/tmp/tmpiv7s7793.swift:6:86: error: value of type\
    \ 'String.Element' (aka 'Character') has no member 'uppercaseString'\n    return\
    \ String(string.characters.map { $0.isUpperCase() ? $0.lowercaseString : $0.uppercaseString\
    \ })\n                                                                       \
    \           ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824506
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return String(string.characters.map {\n        char\
    \ in return char.isUppercase ? char.lowercase : char.uppercase\n    })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpy41gh5fy.swift:7:48: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'lowercase'\n        char in return char.isUppercase\
    \ ? char.lowercase : char.uppercase\n                                        \
    \  ~~~~ ^~~~~~~~~\n/tmp/tmpy41gh5fy.swift:7:65: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'uppercase'\n        char in return char.isUppercase\
    \ ? char.lowercase : char.uppercase\n                                        \
    \                   ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824506
- exit_code: -4
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.uppercased()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
    \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
    \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: Exception
  stderr: 'tmp2l2rimzk/tmp2l2rimzk.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b177939dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1779094b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1779094988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17790937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2l2rimzk                        0x000055b1e7240445 <unavailable> + 5189

    5    libc.so.6                          0x00002b1779589460 __libc_start_main +
    245

    6    tmp2l2rimzk                        0x000055b1e723ff99 <unavailable> + 3993

    '
  stdout: ''
  timestamp: 1659824454
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var flippedString = \"\"\n    for character in string\
    \ {\n        var flippedCharacter = character\n        if character.isLowercase\
    \ {\n            flippedCharacter = character.uppercased()\n        } else if\
    \ character.isUppercase {\n            flippedCharacter = character.lowercased()\n\
    \        }\n        flippedString.append(flippedCharacter)\n    }\n    return\
    \ flippedString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpphf4lgy6.swift:10:42: error: cannot assign value of type 'String'\
    \ to type 'Character'\n            flippedCharacter = character.uppercased()\n\
    \                               ~~~~~~~~~~^~~~~~~~~~~~\n/tmp/tmpphf4lgy6.swift:12:42:\
    \ error: cannot assign value of type 'String' to type 'Character'\n          \
    \  flippedCharacter = character.lowercased()\n                               ~~~~~~~~~~^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824506
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.map {\n        switch $0 {\n        case\
    \ \"a\"...\"z\":\n            return Character($0.uppercased())\n        case\
    \ \"A\"...\"Z\":\n            return Character($0.lowercased())\n        default:\n\
    \            return $0\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\")\
    \ == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp_qr5i0zr.swift:6:19: error: cannot convert return expression of\
    \ type '[Character]' to return type 'String'\n    return string.map {\n      \
    \     ~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1659824506
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped_string = \"\"\n    for character in string\
    \ {\n        if character.isUppercase {\n            flipped_string.append(character.lowercased())\n\
    \        } else {\n            flipped_string.append(character.uppercased())\n\
    \        }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824506
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped: String = \"\"\n    for c in string.characters\
    \ {\n        if c.isUppercase {\n            flipped.append(c.lowercaseString)\n\
    \        } else {\n            flipped.append(c.uppercaseString)\n        }\n\
    \    }\n    return flipped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpb1u2k6wz.swift:7:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in string.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpb1u2k6wz.swift:9:30:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   flipped.append(c.lowercaseString)\n                           ~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpb1u2k6wz.swift:11:30: error: value of type 'Character' has no member 'uppercaseString'\n\
    \            flipped.append(c.uppercaseString)\n                           ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824506
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    return string.characters.reduce(\"\") { (result, character)\
    \ in\n        let characterString = String(character)\n        if characterString.lowercaseString\
    \ == characterString {\n            return result + characterString.uppercaseString\n\
    \        } else {\n            return result + characterString.lowercaseString\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmp9hfsx224.swift:6:36: error: missing argument label 'into:' in call\n\
    \    return string.characters.reduce(\"\") { (result, character) in\n        \
    \                           ^\n                                    into: \n/tmp/tmp9hfsx224.swift:6:30:\
    \ error: cannot convert return expression of type '(_, _) -> _' to return type\
    \ 'String'\n    return string.characters.reduce(\"\") { (result, character) in\n\
    \           ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824506
- exit_code: 1
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var output = \"\"\n    for character in string {\n\
    \        if character.lowercaseString == character {\n            output += character.uppercaseString\n\
    \        } else {\n            output += character.lowercaseString\n        }\n\
    \    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(flip_case(string:\
    \ \"\") == \"\")\nassert(flip_case(string: \"Hello!\") == \"hELLO!\")\nassert(flip_case(string:\
    \ \"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")"
  status: SyntaxError
  stderr: "/tmp/tmpogph8smu.swift:8:22: error: value of type 'Character' has no member\
    \ 'lowercaseString'\n        if character.lowercaseString == character {\n   \
    \        ~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpogph8smu.swift:9:33: error: value\
    \ of type 'Character' has no member 'uppercaseString'\n            output += character.uppercaseString\n\
    \                      ~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpogph8smu.swift:11:33:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n         \
    \   output += character.lowercaseString\n                      ~~~~~~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824506
- exit_code: 0
  program: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
    \ String) -> String {\n    var flipped_string = \"\"\n    for letter in string\
    \ {\n        if letter.isUppercase {\n            flipped_string.append(letter.lowercased())\n\
    \        } else {\n            flipped_string.append(letter.uppercased())\n  \
    \      }\n    }\n    return flipped_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string: \"Hello!\"\
    ) == \"hELLO!\")\nassert(flip_case(string: \"These violent delights have violent\
    \ ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824506
