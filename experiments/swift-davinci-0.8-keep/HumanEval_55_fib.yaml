name: HumanEval_55_fib
language: swift
prompt: "\n/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
  /// 1\n/// >>> fib(8)\n/// 21\nfunc fib(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\n\
  assert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
completions: ["    var a = 0\n    var b = 1\n    for _ in 0..<n {\n        let tmp\
    \ = a\n        a = b\n        b = tmp + b\n    }\n    return a", "    if n <=\
    \ 1 {\n        return n\n    }\n    return fib(n - 1) + fib(n - 2)", '    return
    n', "    if n <= 1 {\n        return n\n    } else {\n        return fib(n - 1)\
    \ + fib(n - 2)\n    }", "    var f = 0, t = 1\n    for _ in 1...n {\n        (f,\
    \ t) = (t, f + t)\n    }\n    return f", "    if n <= 2 {\n        return 1\n\
    \    }\n    return fib(n: n - 1) + fib(n: n - 2)", '    return 1', "    if n <=\
    \ 1 {\n        return n\n    } else {\n        return fib(n - 1) + fib(n - 2)\n\
    \    }", "  if n <= 1 {\n    return n\n  } else {\n    return fib(n - 1) + fib(n\
    \ - 2)\n  }", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n   \
    \     return 1\n    }\n    return fib(n: n - 1) + fib(n: n - 2)", "    precondition(n\
    \ >= 0, \"n is negative\")\n    switch n {\n    case 0, 1:\n        return n\n\
    \    default:\n        return fib(n - 1) + fib(n - 2)\n    }", '    return n <
    2 ? n : fib(n - 1) + fib(n - 2)', "    if n == 0 {\n        return 0\n    } else\
    \ if n == 1 {\n        return 1\n    } else {\n        return fib(n: n - 1) +\
    \ fib(n: n - 2)\n    }", "    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n: n - 1) + fib(n: n - 2)", "    if n <= 1 {\n        return n\n    }\n\
    \    return fib(n - 1) + fib(n - 2)", "    if n == 0 {\n        return 0\n   \
    \ } else if n == 1 {\n        return 1\n    } else {\n        return fib(n - 1)\
    \ + fib(n - 2)\n    }", "    guard n > 1 else { return n }\n    return fib(n:\
    \ n - 1) + fib(n: n - 2)", "    if n <= 1 {\n        return n\n    }\n    var\
    \ a = 0\n    var b = 1\n    for _ in 2...n {\n        let c = a + b\n        a\
    \ = b\n        b = c\n    }\n    return b", "  if n <= 1 {\n    return n\n  }\
    \ else {\n    return fib(n - 1) + fib(n - 2)\n  }", "    if n <= 1 {\n       \
    \ return n\n    }\n    return fib(n - 1) + fib(n - 2)"]
stop_tokens:
- "\n}"
