name: HumanEval_65_circular_shift
language: swift
prompt: "\n/// Circular shift the digits of the integer x, shift the digits right\
  \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
  \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>> circular_shift(12,\
  \ 2)\n/// \"12\"\nfunc circular_shift(x: Int, shift: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(circular_shift(x: 100, shift: 2) == \"001\"\
  )\nassert(circular_shift(x: 12, shift: 2) == \"12\")\nassert(circular_shift(x: 97,\
  \ shift: 8) == \"79\")\nassert(circular_shift(x: 12, shift: 1) == \"21\")\nassert(circular_shift(x:\
  \ 11, shift: 101) == \"11\")"
completions: ["    let temp = String(x)\n    let length = temp.characters.count\n\
    \    if shift > length {\n        return String(temp.characters.reverse())\n \
    \   }\n    let index = temp.startIndex.advancedBy(shift)\n    let right = temp.substringFromIndex(index)\n\
    \    let left = temp.substringToIndex(index)\n    return right + left", "    var\
    \ digits: [Int] = []\n    var mutable_x = x\n    while mutable_x > 0 {\n     \
    \   digits.append(mutable_x % 10)\n        mutable_x /= 10\n    }\n    if shift\
    \ > digits.count {\n        return digits.reverse().map { String($0) }.joinWithSeparator(\"\
    \")\n    }\n    let slice = digits[shift..<digits.count]\n    digits.removeRange(shift..<digits.count)\n\
    \    digits.insertContentsOf(slice, at: 0)\n    return digits.map { String($0)\
    \ }.joinWithSeparator(\"\")", "    let numDigits = 1 + Int(log10(Double(x)))\n\
    \    if shift > numDigits {\n        return String(reverse(Array(String(x))))\n\
    \    }\n    var head = x / Int(pow(10.0, Double(numDigits - shift)))\n    var\
    \ tail = x % Int(pow(10.0, Double(numDigits - shift)))\n    if shift > 0 {\n \
    \       return String(tail) + String(head)\n    }\n    return String(x)", "  \
    \  let s = String(x)\n    let sz = s.characters.count\n    if shift > sz {\n \
    \       return String(s.characters.reverse())\n    }\n    let pos = sz - shift\n\
    \    let (a, b) = s.characters.splitAtIndex(pos)\n    return String(b) + String(a)",
  "    var ret = \"\"\n    let x_string = String(x)\n    if shift >= x_string.count\
    \ {\n        // num of shift > num of digits, reverse the digits\n        for\
    \ c in x_string.reversed() {\n            ret.append(c)\n        }\n    } else\
    \ {\n        // num of shift < num of digits, only do partial shift\n        let\
    \ chars = Array(x_string)\n        for i in 0..<x_string.count {\n           \
    \ let new_index = (i + shift) % x_string.count\n            ret.append(chars[new_index])\n\
    \        }\n    }\n    return ret", "  var s = String(x)\n  if shift > s.count\
    \ {\n    s = String(s.reversed())\n  } else {\n    let r = s.index(s.startIndex,\
    \ offsetBy: shift)\n    s = String(s[r...]) + String(s[..<r])\n  }\n  return s",
  "    let x_str = \"\\(x)\"\n    if shift >= x_str.characters.count {\n        return\
    \ String(x_str.characters.reverse())\n    }\n    var result = \"\"\n    let index\
    \ = x_str.startIndex.advancedBy(shift)\n    result += x_str.substringFromIndex(index)\n\
    \    result += x_str.substringToIndex(index)\n    return result", '    return
    String(String(x).characters.reverse().suffix(shift).reverse())', "    let digits\
    \ = digits_of(x)\n    let shift = shift % digits.count\n    let right = digits[shift..<digits.count]\n\
    \    let left = digits[0..<shift]\n    return String(right) + String(left)", " \
    \   let s = String(x)\n    if shift >= s.count {\n        return String(s.reversed())\n\
    \    }\n    let first = s.index(s.startIndex, offsetBy: shift)\n    let last =\
    \ s.index(s.endIndex, offsetBy: -shift)\n    return String(s[first..<last])",
  "    var x2 = x\n    var digits: [Int] = []\n    var result: String = \"\"\n   \
    \ var i: Int = 0\n    while (x2 != 0) {\n        let digit = x2 % 10\n       \
    \ digits.append(digit)\n        x2 = x2 / 10\n    }\n    i = shift % digits.count\n\
    \    while (i < digits.count) {\n        result += String(digits[i])\n       \
    \ i += 1\n    }\n    i = 0\n    while (i < shift % digits.count) {\n        result\
    \ += String(digits[i])\n        i += 1\n    }\n    return result", "    var result\
    \ = \"\"\n    let digits = String(x)\n    let length = digits.characters.count\n\
    \    if shift >= length {\n        // reverse the digits\n        for c in digits.characters.reverse()\
    \ {\n            result += String(c)\n        }\n    } else {\n        // split\
    \ into left and right and swap\n        let left = digits.substringToIndex(digits.startIndex.advancedBy(shift))\n\
    \        let right = digits.substringFromIndex(digits.startIndex.advancedBy(shift))\n\
    \        result = right + left\n    }\n    return result", "  var z = String(x)\n\
    \  if shift > z.count {\n    var y = String(z.reversed())\n    y.removeLast()\n\
    \    return y\n  }\n  return String(z.dropFirst(shift)) + String(z.prefix(shift))",
  '    return String(String(x).characters.reverse())', "    let str = \"\\(x)\"\n\
    \    if shift >= str.count {\n        return String(str.reversed())\n    }\n \
    \   let index = str.index(str.startIndex, offsetBy: shift)\n    return String(str[index...]\
    \ + str[..<index])", '    return "\(String(Array(String(x)).dropLast(shift) +
    Array(String(x)).dropFirst(String(x).count - shift)))"', "    var s = String(x)\n\
    \    if shift > s.characters.count {\n        return String(s.characters.reverse())\n\
    \    }\n    let index = s.startIndex.advancedBy(shift)\n    s = s.substringFromIndex(index)\
    \ + s.substringToIndex(index)\n    return s", "    var s = String(x)\n    while\
    \ shift > 0 {\n        s = (s as NSString).substring(from: 1) + s[0]\n       \
    \ shift -= 1\n    }\n    return s", "    var result = \"\"\n    if shift >= x.description.count\
    \ {\n        for c in x.description.reversed() {\n            result.append(c)\n\
    \        }\n    } else {\n        for i in 0..<x.description.count {\n       \
    \     let index = (i + shift) % x.description.count\n            result.append(x.description[x.description.index(x.description.startIndex,\
    \ offsetBy: index)])\n        }\n    }\n    return result", "    var x = x\n \
    \   var result = \"\"\n    var digit = 0\n    var count = 0\n    while x > 0 {\n\
    \        digit = x % 10\n        if shift < count {\n            result = result\
    \ + String(digit)\n        } else {\n            result = String(digit) + result\n\
    \        }\n        x = x / 10\n        count++\n    }\n    return result"]
stop_tokens:
- "\n}"
