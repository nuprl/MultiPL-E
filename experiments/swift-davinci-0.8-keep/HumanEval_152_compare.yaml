name: HumanEval_152_compare
language: swift
prompt: "\n/// I think we all remember that feeling when the result of some long-awaited\n\
  /// event is finally known. The feelings and thoughts you have at that moment are\n\
  /// definitely worth noting down and comparing.\n/// Your task is to determine if\
  \ a person correctly guessed the results of a number of matches.\n/// You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n/// Return an array of the same length denoting how far off each guess was.\
  \ If they have guessed correctly,\n/// the value is 0, and if not, the value is\
  \ the absolute difference between the guess and the score.\n/// example:\n/// compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
  \ -> [0,0,0,0,3,3]\n/// compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
  func compare(game: [Int], guess: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(compare(game: [1, 2, 3, 4, 5, 1], guess:\
  \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3])\nassert(compare(game: [0, 0, 0, 0,\
  \ 0, 0], guess: [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0])\nassert(compare(game:\
  \ [1, 2, 3], guess: [-1, -2, -3]) == [2, 4, 6])\nassert(compare(game: [1, 2, 3,\
  \ 5], guess: [-1, 2, 3, 4]) == [2, 0, 0, 1])"
completions: ['    return game.enumerated().map { $0.element - guess[$0.offset] }',
  "    var right: [Int] = []\n    for i in 0..<game.count {\n        if game[i] ==\
    \ guess[i] {\n            right.append(0)\n        } else {\n            right.append(abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return right", "    guard game.count ==\
    \ guess.count else { fatalError(\"Check your arrays\") }\n    var ret: [Int] =\
    \ []\n    for (index, value) in game.enumerated() {\n        let diff = abs(value\
    \ - guess[index])\n        ret.append(diff)\n    }\n    return ret", "    var\
    \ result: [Int] = []\n    for i in 0..<game.count {\n        let diff = abs(game[i]\
    \ - guess[i])\n        result.append(diff)\n    }\n    return result", "    var\
    \ retArray: [Int] = []\n    for i in 0..<game.count {\n        retArray.append(abs(game[i]\
    \ - guess[i]))\n    }\n    return retArray", "    \n    var result = [Int]()\n\
    \    \n    for (index, value) in game.enumerated() {\n        let absDif = abs(value\
    \ - guess[index])\n        result.append(absDif)\n    }\n    \n    return result",
  "    var compareArray = [Int]()\n    for i in 0..<game.count {\n        let result\
    \ = abs(game[i] - guess[i])\n        compareArray.append(result)\n    }\n    return\
    \ compareArray", "    var differenceArray: [Int] = []\n    for index in 0..<game.count\
    \ {\n        let difference = abs(game[index] - guess[index])\n        differenceArray.append(difference)\n\
    \    }\n    return differenceArray", '    return zip(game, guess).map(difference)',
  "    var i = 0\n    var result = [Int]()\n    while i < game.count {\n        if\
    \ game[i] > guess[i] {\n            result.append(game[i] - guess[i])\n      \
    \  } else if game[i] < guess[i] {\n            result.append(guess[i] - game[i])\n\
    \        } else {\n            result.append(0)\n        }\n        i += 1\n \
    \   }\n    return result", "    let result = zip(game, guess).map { abs($0 - $1)\
    \ }\n    return result", "    var result = [Int]()\n    for i in 0...game.count-1\
    \ {\n        let difference = abs(game[i] - guess[i])\n        result.append(difference)\n\
    \    }\n    return result", "    var results = [Int]()\n    var counter = 0\n\
    \    while counter < game.count {\n        if game[counter] > guess[counter] {\n\
    \            results.append(game[counter] - guess[counter])\n        } else if\
    \ game[counter] < guess[counter] {\n            results.append(guess[counter]\
    \ - game[counter])\n        } else {\n            results.append(0)\n        }\n\
    \        counter += 1\n    }\n    return results", "    var result: [Int] = []\n\
    \    for i in 0...game.count-1 {\n        result.append(abs(game[i] - guess[i]))\n\
    \    }\n    return result", "    var results: [Int] = []\n    for (index, _) in\
    \ game.enumerated() {\n        let result = game[index] == guess[index] ? 0 :\
    \ abs(game[index] - guess[index])\n        results.append(result)\n    }\n   \
    \ return results", "    guard game.count == guess.count else {\n        return\
    \ [0]\n    }\n    var resultArray: [Int] = []\n    for (index, element) in game.enumerated()\
    \ {\n        if element < guess[index] {\n            resultArray.append(guess[index]\
    \ - element)\n        } else if element > guess[index] {\n            resultArray.append(element\
    \ - guess[index])\n        } else {\n            resultArray.append(0)\n     \
    \   }\n    }\n    return resultArray", "    var result = [Int]()\n    for (index,\
    \ number) in game.enumerated() {\n        if number == guess[index] {\n      \
    \      result.append(0)\n        } else {\n            result.append(abs(number\
    \ - guess[index]))\n        }\n    }\n    return result", "    guard game.count\
    \ == guess.count else {\n        return []\n    }\n    var score: [Int] = []\n\
    \    for (index, value) in game.enumerated() {\n        let diff = abs(value -\
    \ guess[index])\n        score.append(diff)\n    }\n    return score", '    return
    game.enumerated().map { abs($0.element - guess[$0.offset]) }', "    var result\
    \ = [Int]()\n    for i in 0..<game.count {\n        let a = game[i]\n        let\
    \ b = guess[i]\n        result.append(abs(a - b))\n    }\n    return result"]
stop_tokens:
- "\n}"
