language: swift
name: HumanEval_20_find_closest_elements
results:
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    // 1. find absolute difference between each 2\n \
    \   // 2. find smallest 2\n    // 3. return\n    var abs_diff_dict = [Double:\
    \ [Double]]()\n    var abs_diff = [Double]()\n    var pair_list = [(Double, Double)]()\n\
    \    var sorted_abs_diff = [Double]()\n    for i in 0..<numbers.count-1 {\n  \
    \      for j in i+1..<numbers.count {\n            abs_diff.append(abs(numbers[i]\
    \ - numbers[j]))\n            pair_list.append((numbers[i], numbers[j]))\n   \
    \     }\n    }\n    //print(abs_diff)\n    for i in 0..<abs_diff.count {\n   \
    \     abs_diff_dict[abs_diff[i]] = [pair_list[i].0, pair_list[i].1]\n    }\n \
    \   sorted_abs_diff = abs_diff.sorted()\n    //print(abs_diff_dict)\n    //print(sorted_abs_diff)\n\
    \    return (abs_diff_dict[sorted_abs_diff[0]]![0], abs_diff_dict[sorted_abs_diff[0]]![1])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpljiy92yn/tmpljiy92yn.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36398bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36395b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36395b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36395b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpljiy92yn                        0x000055fd5d850c42 <unavailable> + 7234

    5    libc.so.6                          0x00002b3639aa8460 __libc_start_main +
    245

    6    tmpljiy92yn                        0x000055fd5d850699 <unavailable> + 5785

    '
  stdout: ''
  timestamp: 1660013687
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    if numbers.count < 2 {\n        return (0, 0)\n \
    \   }\n    var closest = (numbers[0], numbers[1])\n    var difference = abs(closest.0\
    \ - closest.1)\n    for i in 0..<numbers.count {\n        for j in (i + 1)..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < difference {\n            \
    \    closest = (numbers[i], numbers[j])\n                difference = abs(numbers[i]\
    \ - numbers[j])\n            }\n        }\n    }\n    return closest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp3kb3zbdq/tmp3kb3zbdq.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af95b025c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af95ad1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af95ad1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af95ad1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3kb3zbdq                        0x00005654ae4c1912 <unavailable> + 6418

    5    libc.so.6                          0x00002af95b211460 __libc_start_main +
    245

    6    tmp3kb3zbdq                        0x00005654ae4c1369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013687
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    \n    var newNumbers: [Double] = numbers.sort()\n\
    \    var currentClosest: Double = Double.infinity\n    var closestElements: (Double,\
    \ Double) = (0, 0)\n    \n    for number in newNumbers {\n        let closest\
    \ = abs(number - newNumbers[newNumbers.indexOf(number)!+1])\n        if closest\
    \ < currentClosest {\n            currentClosest = closest\n            closestElements\
    \ = (number, newNumbers[newNumbers.indexOf(number)!+1])\n        }\n    }\n  \
    \  \n    return closestElements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpainkkh_v.swift:10:40: error: cannot use mutating member on immutable\
    \ value: 'numbers' is a 'let' constant\n    var newNumbers: [Double] = numbers.sort()\n\
    \                               ~~~~~~~ ^\n/tmp/tmpainkkh_v.swift:10:40: error:\
    \ cannot convert value of type '()' to specified type '[Double]'\n    var newNumbers:\
    \ [Double] = numbers.sort()\n                               ~~~~~~~~^~~~~~\n/tmp/tmpainkkh_v.swift:15:58:\
    \ error: value of type '[Double]' has no member 'indexOf'\n        let closest\
    \ = abs(number - newNumbers[newNumbers.indexOf(number)!+1])\n                \
    \                              ~~~~~~~~~~ ^~~~~~~\n/tmp/tmpainkkh_v.swift:18:62:\
    \ error: value of type '[Double]' has no member 'indexOf'\n            closestElements\
    \ = (number, newNumbers[newNumbers.indexOf(number)!+1])\n                    \
    \                              ~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013687
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    if numbers.count < 2 {\n        return (0, 0)\n \
    \   }\n    var (first, second) = (numbers[0], numbers[1])\n    if abs(first -\
    \ second) > abs(numbers[numbers.count - 1] - numbers[numbers.count - 2]) {\n \
    \       (first, second) = (numbers[numbers.count - 1], numbers[numbers.count -\
    \ 2])\n    }\n    for i in 0..<numbers.count - 1 {\n        if abs(numbers[i]\
    \ - numbers[i + 1]) < abs(first - second) {\n            (first, second) = (numbers[i],\
    \ numbers[i + 1])\n        }\n    }\n    return (first, second)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpbee5jb33/tmpbee5jb33.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2ee971c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2ee668b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2ee668988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2ee6677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbee5jb33                        0x000055c228bec912 <unavailable> + 6418

    5    libc.so.6                          0x00002ac2eeb5d460 __libc_start_main +
    245

    6    tmpbee5jb33                        0x000055c228bec369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013687
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    // TODO: implement function\n    return (0.0, 0.0)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpkmnztl4x/tmpkmnztl4x.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add8da4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add8d745b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add8d745988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add8d7447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkmnztl4x                        0x000055d5925e548e <unavailable> + 5262

    5    libc.so.6                          0x00002add8dc3a460 __libc_start_main +
    245

    6    tmpkmnztl4x                        0x000055d5925e5049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1660013687
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    assert(numbers.count >= 2)\n    var closest: (Double,\
    \ Double) = (numbers[0], numbers[1])\n    var closest_difference = closest.1 -\
    \ closest.0\n    for i in 0..<numbers.count {\n        for j in i..<numbers.count\
    \ {\n            if i != j {\n                let difference = numbers[j] - numbers[i]\n\
    \                if difference < closest_difference {\n                    closest\
    \ = (numbers[i], numbers[j])\n                    closest_difference = difference\n\
    \                }\n            }\n        }\n    }\n    return closest\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp9d61ubkr/tmp9d61ubkr.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba13b5acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba13b2a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba13b2a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba13b2a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9d61ubkr                        0x000055e5bc91f6be <unavailable> + 5822

    5    libc.so.6                          0x00002ba13b798460 __libc_start_main +
    245

    6    tmp9d61ubkr                        0x000055e5bc91f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013687
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var minDiff = numbers[1] - numbers[0]\n    var minPair\
    \ = (numbers[0], numbers[1])\n    for i in 0..<numbers.count - 1 {\n        for\
    \ j in (i + 1)..<numbers.count {\n            let diff = numbers[j] - numbers[i]\n\
    \            if diff < minDiff {\n                minDiff = diff\n           \
    \     minPair = (numbers[i], numbers[j])\n            }\n        }\n    }\n  \
    \  return minPair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpdbmuo0rb/tmpdbmuo0rb.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b748bd8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b748ba84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b748ba84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b748ba837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdbmuo0rb                        0x000055912d20b6be <unavailable> + 5822

    5    libc.so.6                          0x00002b748bf79460 __libc_start_main +
    245

    6    tmpdbmuo0rb                        0x000055912d20b279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013687
- exit_code: 0
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    // Determine the smallest number\n    let sorted\
    \ = numbers.sorted()\n    var closest_one = sorted[0]\n    var closest_two = sorted[1]\n\
    \    var difference = closest_two - closest_one\n    var index = 1\n    while\
    \ index < sorted.count - 1 {\n        if sorted[index+1] - sorted[index] < difference\
    \ {\n            closest_one = sorted[index]\n            closest_two = sorted[index+1]\n\
    \            difference = closest_two - closest_one\n        }\n        index\
    \ += 1\n    }\n    return (closest_one, closest_two)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013687
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ - 1 {\n        for j in (i + 1)..<numbers.count {\n            let difference\
    \ = abs(numbers[i] - numbers[j])\n            if difference < closest_difference\
    \ {\n                closest_difference = difference\n                closest_elements\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpmbnomaai/tmpmbnomaai.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abece7b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abece4a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abece4a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abece4a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmbnomaai                        0x000055ec44113912 <unavailable> + 6418

    5    libc.so.6                          0x00002abece99e460 __libc_start_main +
    245

    6    tmpmbnomaai                        0x000055ec44113369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013687
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    precondition(numbers.count >= 2)\n    if (numbers.count\
    \ == 2) {\n        return (numbers[0], numbers[1])\n    }\n    var min = numbers[0]\
    \ - numbers[1]\n    var max = numbers[0] - numbers[1]\n    for x in 0...numbers.count\
    \ - 2 {\n        for y in x+1...numbers.count - 1 {\n            if (min > numbers[x]\
    \ - numbers[y]) {\n                min = numbers[x] - numbers[y]\n           \
    \ }\n            if (max < numbers[x] - numbers[y]) {\n                max = numbers[x]\
    \ - numbers[y]\n            }\n        }\n    }\n    return (min, max)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp4j8wne1t/tmp4j8wne1t.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2606700c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26063f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26063f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26063f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4j8wne1t                        0x000055e19c7c56be <unavailable> + 5822

    5    libc.so.6                          0x00002b26068ec460 __libc_start_main +
    245

    6    tmp4j8wne1t                        0x000055e19c7c5279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013687
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    guard numbers.count >= 2 else {\n        fatalError(\"\
    find_closest_elements: not enough numbers to compare\")\n    }\n    var closest1\
    \ = numbers[0]\n    var closest2 = numbers[1]\n    var lowestDiff = closest2 -\
    \ closest1\n    for index in 0..<numbers.count {\n        guard index < numbers.count\
    \ - 1 else {\n            break\n        }\n        let diff = numbers[index +\
    \ 1] - numbers[index]\n        if diff < lowestDiff {\n            closest1 =\
    \ numbers[index]\n            closest2 = numbers[index + 1]\n            lowestDiff\
    \ = diff\n        }\n    }\n    return (closest1, closest2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpajz7amxr/tmpajz7amxr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b747d117c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b747ce0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b747ce0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b747ce0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajz7amxr                        0x00005635949f074e <unavailable> + 5966

    5    libc.so.6                          0x00002b747d303460 __libc_start_main +
    245

    6    tmpajz7amxr                        0x00005635949f0309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013687
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var diff\
    \ = fabs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n        for\
    \ j in 0..<numbers.count {\n            if i != j {\n                let newDiff\
    \ = fabs(numbers[i] - numbers[j])\n                if newDiff < diff {\n     \
    \               closest = (numbers[i], numbers[j])\n                    diff =\
    \ newDiff\n                }\n            }\n        }\n    }\n    return closest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmps47gx9so.swift:10:16: error: cannot find 'fabs' in scope\n    var\
    \ diff = fabs(closest.0 - closest.1)\n               ^~~~\n/tmp/tmps47gx9so.swift:14:31:\
    \ error: cannot find 'fabs' in scope\n                let newDiff = fabs(numbers[i]\
    \ - numbers[j])\n                              ^~~~\n"
  stdout: ''
  timestamp: 1660013687
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var diff = 1E300\n    var closest1 = 0.0\n    var\
    \ closest2 = 0.0\n    var start = 0\n    var end = 1\n    while end < numbers.count\
    \ {\n        let diff1 = numbers[end] - numbers[start]\n        if diff1 < diff\
    \ {\n            diff = diff1\n            closest1 = numbers[start]\n       \
    \     closest2 = numbers[end]\n        }\n        start += 1\n        end += 1\n\
    \    }\n    return (closest1, closest2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp0_zup5g6/tmp0_zup5g6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b575bf15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b575bc0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b575bc0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b575bc0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_zup5g6                        0x00005640d58e553e <unavailable> + 5438

    5    libc.so.6                          0x00002b575c101460 __libc_start_main +
    245

    6    tmp0_zup5g6                        0x00005640d58e50f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013687
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var tup = (Double.infinity, Double.infinity)\n  \
    \  for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n    \
    \        if abs(numbers[i] - numbers[j]) < abs(tup.0 - tup.1) {\n            \
    \    tup = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return\
    \ tup\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmphwfzuqtb/tmphwfzuqtb.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f3a1ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f39ee3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f39ee3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f39ee27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphwfzuqtb                        0x00005590d6a677fe <unavailable> + 6142

    5    libc.so.6                          0x00002b1f3a3d8460 __libc_start_main +
    245

    6    tmphwfzuqtb                        0x00005590d6a673b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013687
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var minDist = abs(numbers[0] - numbers[1])\n    var\
    \ minIndex = 0\n    for i in 0...numbers.count - 2 {\n        if abs(numbers[i]\
    \ - numbers[i + 1]) < minDist {\n            minDist = abs(numbers[i] - numbers[i\
    \ + 1])\n            minIndex = i\n        }\n    }\n    return (numbers[minIndex],\
    \ numbers[minIndex + 1])\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpkyamqn6p/tmpkyamqn6p.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b307b6dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b307b3d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b307b3d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b307b3d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkyamqn6p                        0x000055f2e894d912 <unavailable> + 6418

    5    libc.so.6                          0x00002b307b8c8460 __libc_start_main +
    245

    6    tmpkyamqn6p                        0x000055f2e894d369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013687
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var diff : Double = abs(numbers[0] - numbers[1])\n\
    \    var min1 : Double = numbers[0]\n    var min2 : Double = numbers[1]\n    for\
    \ var i=0; i<numbers.count-1; i++ {\n        for var j=i+1; j<numbers.count; j++\
    \ {\n            if abs(numbers[i] - numbers[j]) < diff {\n                diff\
    \ = abs(numbers[i] - numbers[j])\n                min1 = numbers[i]\n        \
    \        min2 = numbers[j]\n            }\n        }\n    }\n    return (min1,\
    \ min2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpibsjdrfn.swift:12:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i=0; i<numbers.count-1; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpibsjdrfn.swift:13:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for var j=i+1; j<numbers.count; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013687
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_elements\
    \ = (0.0, 0.0)\n    for var i = 0; i < numbers.count; i++ {\n        for var j\
    \ = i + 1; j < numbers.count; j++ {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < min_difference {\n              \
    \  min_difference = difference\n                min_elements = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return min_elements\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmpk0y2wik0.swift:11:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = 0; i < numbers.count; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpk0y2wik0.swift:12:9: error: C-style for statement has been removed in\
    \ Swift 3\n        for var j = i + 1; j < numbers.count; j++ {\n        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013687
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in 0..<numbers.count {\n    \
    \        if abs(numbers[i] - numbers[j]) < abs(closest.0 - closest.1) {\n    \
    \            closest = (numbers[i], numbers[j])\n            }\n        }\n  \
    \  }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpkcwijiz9/tmpkcwijiz9.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67a292dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67a2624b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67a2624988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67a26237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkcwijiz9                        0x0000561c102a17ae <unavailable> + 6062

    5    libc.so.6                          0x00002b67a2b19460 __libc_start_main +
    245

    6    tmpkcwijiz9                        0x0000561c102a1369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013687
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    assert(numbers.count >= 2)\n    var c1 = numbers[0]\n\
    \    var c2 = numbers[1]\n    var d = c2 - c1\n    var d_min = d\n    for i in\
    \ 1 ..< numbers.count - 1 {\n        c1 = numbers[i]\n        c2 = numbers[i +\
    \ 1]\n        d = c2 - c1\n        if d < d_min {\n            d_min = d\n   \
    \     }\n    }\n    return (d_min, d_min)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpdjrdgqsy/tmpdjrdgqsy.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b940744ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9407145b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9407145988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94071447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdjrdgqsy                        0x000055d4647c46be <unavailable> + 5822

    5    libc.so.6                          0x00002b940763a460 __libc_start_main +
    245

    6    tmpdjrdgqsy                        0x000055d4647c4279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013687
- exit_code: 1
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference: Double = DBL_MAX\n    var min_difference_pair:\
    \ (Double, Double) = (DBL_MAX, DBL_MAX)\n    for index in 0..<numbers.count {\n\
    \        for second_index in 0..<numbers.count {\n            if index != second_index\
    \ {\n                let difference = abs(numbers[index] - numbers[second_index])\n\
    \                if difference < min_difference {\n                    min_difference\
    \ = difference\n                    min_difference_pair = (numbers[index], numbers[second_index])\n\
    \                }\n            }\n        }\n    }\n    return min_difference_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: SyntaxError
  stderr: "/tmp/tmplb0fkf7o.swift:9:34: error: cannot find 'DBL_MAX' in scope\n  \
    \  var min_difference: Double = DBL_MAX\n                                 ^~~~~~~\n\
    /tmp/tmplb0fkf7o.swift:10:50: error: cannot find 'DBL_MAX' in scope\n    var min_difference_pair:\
    \ (Double, Double) = (DBL_MAX, DBL_MAX)\n                                    \
    \             ^~~~~~~\n/tmp/tmplb0fkf7o.swift:10:59: error: cannot find 'DBL_MAX'\
    \ in scope\n    var min_difference_pair: (Double, Double) = (DBL_MAX, DBL_MAX)\n\
    \                                                          ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013687
