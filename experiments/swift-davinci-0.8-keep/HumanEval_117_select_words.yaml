name: HumanEval_117_select_words
language: swift
prompt: "\n/// Given a string s and a natural number n, you have been tasked to implement\
  \ \n/// a function that returns a list of all words from string s that contain exactly\
  \ \n/// n consonants, in order these words appear in the string s.\n/// If the string\
  \ s is empty then the function should return an empty list.\n/// Note: you may assume\
  \ the input string contains only letters and spaces.\n/// Examples:\n/// select_words(\"\
  Mary had a little lamb\", 4) ==> [\"little\"]\n/// select_words(\"Mary had a little\
  \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n/// select_words(\"simple white space\",\
  \ 2) ==> []\n/// select_words(\"Hello world\", 4) ==> [\"world\"]\n/// select_words(\"\
  Uncle sam\", 3) ==> [\"Uncle\"]\nfunc select_words(s: String, n: Int) -> [String]\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\"\
  , n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n:\
  \ 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
  \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"world\"\
  ])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
  \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
  \ == [\"b\", \"c\", \"d\", \"f\"])"
completions: ["    var words = [String]()\n    var vowels = \"aeiou\"\n    var consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    var word = \"\"\n    var consonantCounter =\
    \ 0\n    for i in s.characters {\n        if vowels.containsString(String(i))\
    \ || (i == \" \") {\n            if word != \"\" {\n                if consonantCounter\
    \ == n {\n                    words.append(word)\n                }\n        \
    \        word = \"\"\n                consonantCounter = 0\n            }\n  \
    \      } else if consonants.containsString(String(i)) {\n            word += String(i)\n\
    \            consonantCounter += 1\n        }\n    }\n    if word != \"\" {\n\
    \        if consonantCounter == n {\n            words.append(word)\n        }\n\
    \    }\n    return words", "    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n \
    \   let vowels = \"aeiou\"\n    let word = s.components(separatedBy: \" \")\n\
    \    var result = [String]()\n    for i in word {\n        var consonant = 0\n\
    \        var vowel = 0\n        for j in i {\n            if vowels.contains(j)\
    \ {\n                vowel += 1\n            } else if consonants.contains(j)\
    \ {\n                consonant += 1\n            }\n        }\n        if consonant\
    \ == n {\n            result.append(i)\n        }\n    }\n    return result",
  "    let vowels = Set([\"a\", \"e\", \"i\", \"o\", \"u\"])\n    return s.components(separatedBy:\
    \ \" \").filter { word in\n        word.filter { !vowels.contains($0) }.count\
    \ == n\n    }", '    return [String]()', "    let vowels = \"aeiou\"\n    let\
    \ array = s.split(separator: \" \")\n    var results = [String]()\n    for word\
    \ in array {\n        var con = 0\n        for c in word {\n            if !vowels.contains(c)\
    \ {\n                con += 1\n            }\n        }\n        if con == n {\n\
    \            results.append(String(word))\n        }\n    }\n    return results",
  '    return s.components(separatedBy: " ").filter { $0.filter { !$0.isVowel }.count
    == n }', "  let vowels = \"aeiou\"\n  return s.split(separator: \" \").filter\
    \ { word in\n    word.filter { c in\n      !vowels.contains(c)\n    }.count ==\
    \ n\n  }", '    return s.components(separatedBy: " ").filter { $0.countOfVowels()
    + $0.countOfConsonants() == n }', "    if s.isEmpty {\n        return []\n   \
    \ }\n    let consonants = Set(\"bcdfghjklmnpqrstvwxyz\")\n    let str = s.lowercased()\n\
    \    let words = str.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        if word.filter({ consonants.contains($0) }).count\
    \ == n {\n            result.append(word)\n        }\n    }\n    return result",
  '  return []', "    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var counter = 0\n        for ch in word {\n   \
    \         if consonants.contains(ch) {\n                counter += 1\n       \
    \     }\n        }\n        if counter == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result", '    return s.split(separator: " ").filter{$0.replacingOccurrences(of:
    "a|e|i|o|u", with: "", options: .regularExpression).count == n}.map{String($0)}',
  "\treturn s.components(separatedBy: \" \").filter { $0.rangeOfCharacter(from: CharacterSet(charactersIn:\
    \ \"aeiou\")) == nil && $0.count == n }", "    var consonants = 0\n    var words\
    \ = [String]()\n    for letter in s {\n        switch letter {\n        case \"\
    a\", \"e\", \"i\", \"o\", \"u\", \" \":\n            break\n        default:\n\
    \            consonants += 1\n        }\n    }\n    return []", "    return s.split(\"\
    \ \").filter {\n        $0.filter(\"aeiou\".contains).count == n\n    }", '    return
    s.components(separatedBy: .whitespaces).filter({ $0.numConsonants() == n })',
  "    let vowels = \"aeiouAEIOU\"\n    let words = s.components(separatedBy: \" \"\
    )\n    return words.filter { $0.filter { !vowels.contains($0) }.count == n }",
  "    var r = [String]()\n    for word in s.split(separator: \" \") {\n        var\
    \ c = 0\n        for letter in word {\n            if is_consonant(letter) {\n\
    \                c += 1\n            }\n        }\n        if c == n {\n     \
    \       r.append(String(word))\n        }\n    }\n    return r", "    var words\
    \ = [String]()\n    var word = \"\"\n    var consonants = 0\n    for ch in s {\n\
    \        if ch == \" \" {\n            if consonants == n {\n                words.append(word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            switch ch {\n            case \"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\":\n                continue\n            default:\n            \
    \    consonants += 1\n            }\n            word.append(ch)\n        }\n\
    \    }\n    if consonants == n {\n        words.append(word)\n    }\n    return\
    \ words", "    var ret: [String] = []\n    let words = s.split(separator: \" \"\
    )\n    for word in words {\n        if isTargetWord(word: word, targetLength:\
    \ n) {\n            ret.append(String(word))\n        }\n    }\n    return ret"]
stop_tokens:
- "\n}"
