name: HumanEval_2_truncate_number
language: swift
prompt: "\n/// Given a positive floating point number, it can be decomposed into\n\
  /// and integer part (largest integer smaller than given number) and decimals\n\
  /// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n\
  /// >>> truncate_number(3.5)\n/// 0.5\nfunc truncate_number(number: Double) -> Double\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(truncate_number(number: 3.5) == 0.5)\nassert(truncate_number(number:\
  \ 1.25) == 0.25)\nassert(truncate_number(number: 123.0) == 0.0)"
completions: ['    return number - floor(number)', "    let result = Double(Int(number))\n\
    \    let truncated = number - result\n    return truncated", '    return (number
    < 0 ? ceil(number) : floor(number))', '    return number.truncatingRemainder(dividingBy:
    1)', '    return number % 1.0', '    return number - floor(number)', '    return
    number.truncatingRemainder(dividingBy: 1)', '    return floor(number)', "  if\
    \ number == 0 {\n    return 0\n  }\n  return number - Double(Int(number))", '    return
    number.truncatingRemainder(dividingBy: 1)', '  return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', "    let number_int = floor(number)\n\
    \    return number - number_int", "    var difference = number.truncatingRemainder(dividingBy:\
    \ 1)\n    if difference < 0 {\n        difference += 1\n    }\n    return difference",
  '    return number - floor(number)', "    let trunc_int = Int(number)\n    return\
    \ number - Double(trunc_int)", '    return number.truncatingRemainder(dividingBy:
    1)', '    return number - Double(Int(number))', '    return number - Double(Int(number))',
  "    let integer_part = Int(number)\n    return number - Double(integer_part)"]
stop_tokens:
- "\n}"
