name: HumanEval_130_tri
language: swift
prompt: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) =\
  \ 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2)\
  \ + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n///\
  \ tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You\
  \ are given a non-negative integer number n, you have to a return a list of the\
  \ \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// tri(3)\
  \ = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n:\
  \ 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n:\
  \ 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
  assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2,\
  \ 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
  \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
  \ 1) == [1, 3])"
completions: ["\tvar result = [Int]()\n\tresult.append(1)\n\tresult.append(3)\n\t\
    if n > 1 {\n\t\tresult.append(2)\n\t}\n\tfor index in 3...n {\n\t\tif index %\
    \ 2 == 0 {\n\t\t\tresult.append(1 + index / 2)\n\t\t} else {\n\t\t\tresult.append(result[index\
    \ - 1] + result[index - 2] + result[index + 1])\n\t\t}\n\t}\n\treturn result",
  "    var triSequence = [Int]()\n    for i in 0...n {\n        if i == 0 {\n    \
    \        triSequence.append(1)\n        } else if i == 1 {\n            triSequence.append(3)\n\
    \        } else if i == 2 {\n            triSequence.append(2)\n        } else\
    \ if i % 2 == 0 {\n            triSequence.append(1 + i / 2)\n        } else {\n\
    \            triSequence.append(triSequence[i - 1] + triSequence[i - 2] + triSequence[i\
    \ + 1])\n        }\n    }\n    return triSequence", "  var triArray = [1, 3, 2]\n\
    \  if n < 3 {\n    return Array(triArray[0..<n + 1])\n  }\n  for i in 3...n {\n\
    \    if i % 2 == 0 {\n      triArray.append(1 + i / 2)\n    } else {\n      triArray.append(triArray[i\
    \ - 1] + triArray[i - 2] + triArray[i + 1])\n    }\n  }\n  return triArray", " \
    \ if n == 0 {\n    return [1]\n  }\n  if n == 1 {\n    return [1, 3]\n  }\n  if\
    \ n == 2 {\n    return [1, 3, 2]\n  }\n  var arr = [1, 3, 2]\n  for i in 3...n\
    \ {\n    let val = i % 2 == 0 ? (1 + i / 2) : (arr[i - 1] + arr[i - 2] + arr[i\
    \ - 3])\n    arr.append(val)\n  }\n  return arr", "    switch n {\n    case 0:\n\
    \        return [1]\n    case 1:\n        return [1, 3]\n    case 2:\n       \
    \ return [1, 3, 2]\n    default:\n        var sequence = [1, 3, 2]\n        for\
    \ i in 3...n {\n            let triN = sequence[i - 1] + sequence[i - 2] + sequence[i\
    \ - 3]\n            sequence.append(triN)\n        }\n        return sequence\n\
    \    }", "    // create Array with 0...n\n    let range = Array(0...n)\n    var\
    \ result: [Int] = []\n    for i in range {\n        // check number\n        switch\
    \ i {\n        case 0:\n            result.append(1)\n        case 1:\n      \
    \      result.append(3)\n        case 2:\n            result.append(2)\n     \
    \   default:\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result", "    if n == 0 {\n        return\
    \ [0]\n    } else if n == 1 {\n        return [1, 3]\n    } else if n == 2 {\n\
    \        return [1, 3, 2]\n    } else {\n        var list = [1, 3, 2]\n      \
    \  for i in 3...n {\n            if i % 2 == 0 {\n                list.append(1\
    \ + i / 2)\n            } else {\n                list.append(list[i - 2] + list[i\
    \ - 1] + list[i + 1])\n            }\n        }\n        return list\n    }",
  '    return [1, 3, 2, 8]', "    var tri = [1, 3, 2]\n    if n < 3 {\n        return\
    \ tri.dropLast(3 - n)\n    }\n    for i in (3...n) {\n        if i % 2 == 0 {\n\
    \            tri.append(1 + i / 2)\n        } else {\n            tri.append(tri[i\
    \ - 1] + tri[i - 2] + tri[i + 1])\n        }\n    }\n    return tri", "  guard\
    \ n > 0 else { return [] }\n  guard n > 1 else { return [1] }\n  guard n > 2 else\
    \ { return [1, 3] }\n  var sum = [1, 3, 2]\n  for i in 3...n {\n    let lastThree\
    \ = sum[i - 3] + sum[i - 2] + sum[i - 1]\n    sum.append(lastThree)\n  }\n  return\
    \ sum", "  guard n > 0 else { return [] }\n  guard n > 1 else { return [1] }\n\
    \  guard n > 2 else { return [1, 3] }\n  return Array(stride(from: 0, to: n +\
    \ 1, by: 1)).map({ $0 == 0 ? 1 : $0 == 1 ? 3 : $0 == 2 ? 2 : tri(n: $0 - 1) +\
    \ tri(n: $0 - 2) + tri(n: $0 - 3) })", "    guard n > 0 else { return [] }\n \
    \   var result = [1, 3, 2]\n    var index = 3\n    while index <= n {\n      \
    \  let item = (index % 2 == 0) ? (1 + index / 2) : (result[index - 1] + result[index\
    \ - 2] + result[index + 1])\n        result.append(item)\n        index += 1\n\
    \    }\n    return result", "  var result = [1, 3, 2]\n  guard n > 2 else { return\
    \ [Int](result[0...n]) }\n  for i in 3...n {\n    let a = result[i - 1]\n    let\
    \ b = result[i - 2]\n    let c = result[i - 3]\n    result.append(i % 2 == 0 ?\
    \ 1 + i / 2 : a + b + c)\n  }\n  return result", "    return [Int](1...n).map\
    \ {\n        ($0 + 1) % 2 == 0 ? ($0 + 1) / 2 : tri(n: $0 - 1) + tri(n: $0 - 2)\
    \ + tri(n: $0 + 1)\n    }", '    return (0...n).map {n in n <= 1 ? 1 : n <= 2
    ? 3 : 1 + n / 2}', "    if n < 0 {\n        return []\n    } else if n == 0 {\n\
    \        return [1]\n    } else if n == 1 {\n        return [1, 3]\n    } else\
    \ if n == 2 {\n        return [1, 3, 2]\n    }\n    var triNumbers = [1, 3, 2]\n\
    \    while triNumbers.count - 1 < n {\n        let nextNumber = triNumbers[triNumbers.count\
    \ - 1] + triNumbers[triNumbers.count - 2] + triNumbers[triNumbers.count - 3]\n\
    \        triNumbers.append(nextNumber)\n    }\n    return triNumbers", "    if\
    \ n == 0 {\n        return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n\
    \    }\n    if n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1,\
    \ 3, 2]\n    for _ in 3...n {\n        let x = result[result.count - 1]\n    \
    \    let y = result[result.count - 2]\n        let z = result[result.count - 3]\n\
    \        result.append(x + y + z)\n    }\n    return result", "    var tri = [1,\
    \ 3, 2]\n    for i in 3...n {\n        let e = i % 2 == 0 ? 1 + i / 2 : tri[i\
    \ - 1] + tri[i - 2] + tri[i + 1]\n        tri.append(e)\n    }\n    return tri",
  "    var res = [Int]()\n    for i in 0...n {\n        if i == 0 {\n            res.append(1)\n\
    \        } else if i == 1 {\n            res.append(3)\n        } else if i ==\
    \ 2 {\n            res.append(2)\n        } else if i % 2 == 0 {\n           \
    \ res.append(1 + i / 2)\n        } else {\n            res.append(res[i - 1] +\
    \ res[i - 2] + res[i - 3])\n        }\n    }\n    return res", "    if n == 0\
    \ {\n        return [0]\n    }\n    if n == 1 {\n        return [1, 3]\n    }\n\
    \    if n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3, 2]\n\
    \    var i = 3\n    while i <= n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n        i += 1\n    }\n    return result"]
stop_tokens:
- "\n}"
