name: HumanEval_66_digitSum
language: swift
prompt: "\n/// Task\n/// Write a function that takes a string as input and returns\
  \ the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// digitSum(\"\
  \") => 0\n/// digitSum(\"abAB\") => 131\n/// digitSum(\"abcCd\") => 67\n/// digitSum(\"\
  helloE\") => 69\n/// digitSum(\"woArBld\") => 131\n/// digitSum(\"aAaaaXa\") =>\
  \ 153\nfunc digitSum(s: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(digitSum(s: \"\") == 0)\nassert(digitSum(s:\
  \ \"abAB\") == 131)\nassert(digitSum(s: \"abcCd\") == 67)\nassert(digitSum(s: \"\
  helloE\") == 69)\nassert(digitSum(s: \"woArBld\") == 131)\nassert(digitSum(s: \"\
  aAaaaXa\") == 153)\nassert(digitSum(s: \" How are yOu?\") == 151)\nassert(digitSum(s:\
  \ \"You arE Very Smart\") == 327)"
completions: ["    let sum = s.filter({$0.isUppercase}).reduce(0, {$0 + Int($1.asciiValue!)})\n\
    \    return sum", '    return s.compactMap { $0.isUppercase ? Int($0.asciiValue!)
    : nil }.reduce(0, +)', "    var sum = 0\n    s.forEach {\n        if let ascii\
    \ = Int($0.asciiValue) {\n            if ascii >= 65 && ascii <= 90 {\n      \
    \          sum += ascii\n            }\n        }\n    }\n    return sum", " \
    \   let string = s.uppercased()\n    return string.characters.map{ String($0)\
    \ }.reduce(0) { $0 + Int(String($1))! }", '    return s.unicodeScalars.filter{$0.isASCII
    && CharacterSet.uppercaseLetters.contains($0)}.reduce(0){$0 + Int($1.value)}',
  '    return s.unicodeScalars.filter { $0.isUppercase }.reduce(0) { $0 + Int($1.value)
    }', '    return s.unicodeScalars.filter{CharacterSet.uppercaseLetters.contains($0)}.reduce(0,
    +)', '    return s.characters.filter{$0.isUppercase}.reduce(0){$0 + Int(String($1).unicodeScalars.first!.value)}',
  "    return s.reduce(0) {\n        $1.isUppercase ? $0 + $1.unicodeScalars.first!.value\
    \ : $0\n    }", '    return s.reduce(0) { $0 + ($1.isUppercase ? $1.asciiValue
    : 0) }', '    return s.filter({$0.isUppercase}).reduce(0, {x, y in x + Int(y.asciiValue!)})',
  "    return s.unicodeScalars.reduce(0) { (result, scalar) in\n        scalar.value\
    \ < 65 || scalar.value > 90 ? result : result + Int(scalar.value)\n    }", '    return
    0', '    return s.asciiArray.reduce(0) { $0 + ($1 < 91 ? $1 : 0) }', "    var\
    \ sum = 0\n    s.map{\n        if let i = Int(String($0)), CharacterSet.uppercaseLetters.contains($0.unicodeScalars.first!)\
    \ {\n            sum += i\n        }\n    }\n    return sum", '  return s.filter
    { $0.isUppercase }.flatMap { $0.asciiValue }.reduce(0, +)', '    return s.unicodeScalars.filter
    { $0.value > 64 && $0.value < 91 }.reduce(0) { $0 + Int($1.value) }', "    guard\
    \ !s.isEmpty else { return 0 }\n    let sum = s.filter({ $0.isUppercase }).reduce(0,\
    \ { $0 + Int($0.unicodeScalars.first!.value) })\n    return sum", '    return
    s.unicodeScalars.filter { $0.isUppercase }.reduce(0) { $0 + Int($1.value) }',
  "    var sum = 0\n    for char in s {\n        let code = Int(String(char).unicodeScalars.first!.value)\n\
    \        if code >= 65 && code <= 90 {\n            sum += code\n        }\n \
    \   }\n    return sum"]
stop_tokens:
- "\n}"
