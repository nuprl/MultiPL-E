name: HumanEval_21_rescale_to_unit
language: swift
prompt: "\n/// Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n/// such that the smallest number will become 0 and the largest\
  \ will become 1\n/// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers: [Double]) -> [Double] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) ==\
  \ [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
  \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
  \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
  \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
completions: ["    var min = numbers[0]\n    var max = numbers[0]\n    for number\
    \ in numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    let\
    \ range = max - min\n    let rescaled = numbers.map { (number) -> Double in\n\
    \        (number - min) / range\n    }\n    return rescaled", "    precondition(numbers.count\
    \ >= 2)\n    let minimum = numbers.minElement()!\n    let maximum = numbers.maxElement()!\n\
    \    return numbers.map { $0 - minimum }.map { $0 / (maximum - minimum) }", " \
    \   let min_max = get_min_max(numbers)\n    return numbers.map { ($0 - min_max.min)\
    \ / (min_max.max - min_max.min) }", "    var numbers = numbers\n    let min =\
    \ numbers.minElement()!\n    let max = numbers.maxElement()!\n    for i in 0..<numbers.count\
    \ {\n        numbers[i] = (numbers[i] - min) / (max - min)\n    }\n    return\
    \ numbers", "    var numbers = numbers\n    let max_num = numbers.maxElement()!\n\
    \    let min_num = numbers.minElement()!\n    numbers = numbers.map { (number)\
    \ -> Double in\n        (number - min_num) / (max_num - min_num)\n    }\n    return\
    \ numbers", "    let minimum = numbers.minElement()\n    let maximum = numbers.maxElement()\n\
    \    return numbers.map {($0 - minimum!) / (maximum! - minimum!)}", "    let current_min\
    \ = numbers.minElement()!\n    let current_max = numbers.maxElement()!\n    return\
    \ numbers.map { ($0 - current_min) / (current_max - current_min) }", "    precondition(numbers.count\
    \ >= 2)\n    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let span = max - min\n    if span > 0 {\n        return numbers.map { (n:\
    \ Double) -> Double in\n            return (n - min) / span\n        }\n    }\
    \ else {\n        return numbers.map { (n: Double) -> Double in\n            return\
    \ 0.0\n        }\n    }", "    var result = [Double]()\n    var min = numbers[0]\n\
    \    var max = numbers[0]\n    for n in numbers {\n        if n < min {\n    \
    \        min = n\n        }\n        if n > max {\n            max = n\n     \
    \   }\n    }\n    let dist = max - min\n    for n in numbers {\n        result.append((n\
    \ - min) / dist)\n    }\n    return result", "    assert(numbers.count >= 2)\n\
    \    var output = [Double]()\n    let min = numbers.minElement()!\n    let max\
    \ = numbers.maxElement()!\n    let range = max - min\n    if range == 0 {\n  \
    \      output = numbers.map { _ in return 0.5 }\n    } else {\n        output\
    \ = numbers.map { x in return (x - min) / range }\n    }\n    return output",
  "    let min_value = numbers.minElement()!\n    let max_value = numbers.maxElement()!\n\
    \    return numbers.map { min($1, $0) }.map { max($1, $0) }.map { ($0 - min_value)\
    \ / (max_value - min_value) }", "    var new_numbers = numbers.map({ $0 })\n \
    \   let min = new_numbers.minElement()!\n    let max = new_numbers.maxElement()!\n\
    \    new_numbers = new_numbers.map({\n        ($0 - min) / (max - min)\n    })\n\
    \    return new_numbers", "    let min_max = (min: numbers.minElement()!, max:\
    \ numbers.maxElement()!)\n    return numbers.map { (el) -> Double in\n       \
    \ if el == min_max.max {\n            return 1.0\n        } else if el == min_max.min\
    \ {\n            return 0.0\n        } else {\n            return (el - min_max.min)\
    \ / (min_max.max - min_max.min)\n        }\n    }", "    let min_number = numbers.minElement()!\n\
    \    let max_number = numbers.maxElement()!\n    let numbers_range = max_number\
    \ - min_number\n    let transformed_numbers = numbers.map { number in\n      \
    \  (number - min_number) / numbers_range\n    }\n    return transformed_numbers",
  "    assert(numbers.count >= 2)\n    let min_max_pair = min_max(numbers)\n    let\
    \ minimum = min_max_pair.0\n    let maximum = min_max_pair.1\n    return numbers.map\
    \ { rescale_to_unit($0, minimum: minimum, maximum: maximum) }", "    guard numbers.count\
    \ > 1 else {\n        return numbers\n    }\n    let min = numbers.min()!\n  \
    \  let max = numbers.max()!\n    let range = max - min\n    return numbers.map\
    \ { $0 / range }", "    let scale = 1.0 / numbers.max()!\n    return numbers.map({\
    \ (v: Double) -> Double in\n        return v * scale\n    })", "    var min_value\
    \ = numbers[0]\n    var max_value = numbers[0]\n    for n in numbers {\n     \
    \   if n < min_value {\n            min_value = n\n        }\n        if n > max_value\
    \ {\n            max_value = n\n        }\n    }\n    let diff = max_value - min_value\n\
    \    return numbers.map { (n) -> Double in\n        return (n - min_value) / diff\n\
    \    }", "    let min_max = find_min_max(numbers)\n    return numbers.map { (x:\
    \ Double) -> Double in\n        // FIXME: Should check for division by zero\n\
    \        (x - min_max.min) / (min_max.max - min_max.min)\n    }", "    let min_val\
    \ = numbers.minElement()\n    let max_val = numbers.maxElement()\n    if (min_val\
    \ == nil || max_val == nil) {\n        return numbers\n    }\n    let dist = max_val!\
    \ - min_val!\n    if (dist == 0) {\n        return numbers\n    }\n    return\
    \ numbers.map { (v: Double) -> Double in\n        (v - min_val!) / dist\n    }"]
stop_tokens:
- "\n}"
