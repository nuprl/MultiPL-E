name: HumanEval_91_is_bored
language: swift
prompt: "\n/// You'll be given a string of words, and your task is to count the number\n\
  /// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences\
  \ are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(\"Hello\
  \ world\")\n/// 0\n/// >>> is_bored(\"The sky is blue. The sun is shining. I love\
  \ this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_bored(S: \"Hello world\") == 0)\nassert(is_bored(S:\
  \ \"Is the sky blue?\") == 0)\nassert(is_bored(S: \"I love It !\") == 1)\nassert(is_bored(S:\
  \ \"bIt\") == 0)\nassert(is_bored(S: \"I feel good today. I will be productive.\
  \ will kill It\") == 2)\nassert(is_bored(S: \"You and I are going for a walk\")\
  \ == 0)"
completions: ['    return S.components(separatedBy: [".","!","?"]).reduce(0, { ($1.hasPrefix("I")
    ? $0 + 1 : $0 ) } )', "    let boring = String(S.filter { $0 == \"I\" })\n   \
    \ return boring.count", "    let split = S.components(separatedBy: \".!?\")\n\
    \    var num = 0\n    for i in split {\n        if i.hasPrefix(\"I\") {\n    \
    \        num += 1\n        }\n    }\n    return num", "    return S.split(separator:\
    \ \".\")\n        .map({ $0.split(separator: \"?\")})\n        .flatMap({ $0 })\n\
    \        .map({ $0.split(separator: \"!\")})\n        .flatMap({ $0 })\n     \
    \   .filter({ $0.starts(with: \"I\") })\n        .count", "    let words = S.components(separatedBy:\
    \ \".?!\")\n    var count = 0\n    for word in words {\n        if word.trimmingCharacters(in:\
    \ .whitespacesAndNewlines).hasPrefix(\"I\") {\n            count += 1\n      \
    \  }\n    }\n    return count", "    let sentences = S.components(separatedBy:\
    \ \".\")\n    return sentences.reduce(0) {\n        var count = $0\n        if\
    \ $1.first == \"I\" {\n            count += 1\n        }\n        return count\n\
    \    }", '    return 0', "    let sentences = S.components(separatedBy: \".?!\"\
    )\n    var count = 0\n    for sentence in sentences {\n        let words = sentence.components(separatedBy:\
    \ \" \")\n        if words.count > 0 {\n            if words[0] == \"I\" {\n \
    \               count += 1\n            }\n        }\n    }\n    return count",
  "    var res = 0\n    var tmp = \"\"\n    for c in S {\n        if c == \".\" ||\
    \ c == \"?\" || c == \"!\" {\n            if tmp.hasPrefix(\"I\") {\n        \
    \        res += 1\n            }\n            tmp = \"\"\n        } else {\n \
    \           tmp.append(c)\n        }\n    }\n    return res", "    var a = S.components(separatedBy:\
    \ \".\")\n    var b = S.components(separatedBy: \"?\")\n    var c = S.components(separatedBy:\
    \ \"!\")\n    var count = 0\n    for i in a {\n        if i.hasPrefix(\"I\") {\n\
    \            count += 1\n        }\n    }\n    for i in b {\n        if i.hasPrefix(\"\
    I\") {\n            count += 1\n        }\n    }\n    for i in c {\n        if\
    \ i.hasPrefix(\"I\") {\n            count += 1\n        }\n    }\n    return count",
  "    return S.split(separator: \".\").reduce(0) { (r, s) -> Int in\n        let\
    \ w = s.split(separator: \" \")\n        return r + (w.count > 0 && w[0] == \"\
    I\" ? 1 : 0)\n    }", '    return S.split(separator: ".").filter { $0.split(separator:
    " ").first == "I" }.count', "    let S = S.components(separatedBy: [\".\", \"\
    ?\", \"!\"])\n    var count = 0\n    for i in S {\n        if i.prefix(1) == \"\
    I\" {\n            count += 1\n        }\n    }\n    return count", '    // your
    code here', '    return S.split(separator: "!").joined(separator: "!").split(separator:
    ".").joined(separator: ".").split(separator: "?").joined(separator: "?").split(separator:
    " ").filter({ $0 == "I" }).count', "  let split = S.split(separator: \".\").map\
    \ { String($0) }\n  return split.map(is_bored_sentence).reduce(0, +)", "    var\
    \ count = 0\n    let characters = Array(S.characters)\n    var string = \"\"\n\
    \    for i in 0..<characters.count {\n        if characters[i] == \".\" || characters[i]\
    \ == \"?\" || characters[i] == \"!\" {\n            let sentence = String(string.characters.dropFirst())\n\
    \            if sentence.hasPrefix(\"I\") {\n                count += 1\n    \
    \        }\n            string = \"\"\n        } else {\n            string.append(characters[i])\n\
    \        }\n    }\n    return count", "    let s = S.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let sArr = s.components(separatedBy: \".\")\n    var ret: Int = 0\n    for\
    \ s in sArr {\n        if s.starts(with: \"I\") {\n            ret += 1\n    \
    \    }\n    }\n    return ret", "    \n    let sentences = S.components(separatedBy:\
    \ \".\")\n    var boredoms = 0\n    \n    for sentence in sentences {\n      \
    \  if sentence.count > 0 {\n            let firstLetter = sentence.prefix(1)\n\
    \            if firstLetter == \"I\" {\n                boredoms += 1\n      \
    \      }\n        }\n    }\n    \n    return boredoms", "    // Enter your code\
    \ here\n    var sentence = 0\n    var capital = 0\n    var iterator = S.makeIterator()\n\
    \    while let char = iterator.next() {\n        if (char == \"I\") {\n      \
    \      capital += 1\n        }\n        if (char == \".\" || char == \"?\" ||\
    \ char == \"!\") {\n            sentence += 1\n        }\n    }\n    if (capital\
    \ == 0) {\n        return 0\n    }\n    if (capital > sentence) {\n        return\
    \ sentence\n    }\n    return capital"]
stop_tokens:
- "\n}"
