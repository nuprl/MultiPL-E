name: HumanEval_103_rounded_avg
language: swift
prompt: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
  \ n and m, and your task is to compute the\n/// average of the integers from n through\
  \ m (including n and m). \n/// Round the answer to the nearest integer and convert\
  \ that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// rounded_avg(1,\
  \ 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10, 20) => \"0b1111\"\
  \n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n: Int, m: Int) -> Result<String,\
  \ Int> {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"\
  ))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
  \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
  \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
  0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
  ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
  \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
  \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
  assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
  \ == .success(\"0b101\"))"
completions: ["    guard n <= m else { return .failure(-1) }\n    let avg = (n + m)\
    \ / 2\n    return .success(avg.binary)", "    if n > m {\n        return .failure(-1)\n\
    \    }\n    let average = Int(round(Double(n + m) / 2))\n    return .success(String(average,\
    \ radix: 2))", "    guard n <= m else { return .failure(-1) }\n    return .success(\n\
    \        String(String(Int(Double(n + m) / 2).rounded(), radix: 2).suffix(Int.bitWidth))\n\
    \    )", "    if n > m {\n        return .failure(-1)\n    }\n    let average\
    \ = ((n + m) / 2)\n    let binary = String(average, radix: 2)\n    return .success(\"\
    0b\\(binary)\")", "    guard n <= m else { return .failure(-1) }\n    var sum\
    \ = 0\n    for i in n...m {\n        sum += i\n    }\n    let average = sum /\
    \ (m - n + 1)\n    let binaryString = String(average, radix: 2)\n    return .success(\"\
    0b\\(binaryString)\")", "    guard n <= m else { return .failure(-1) }\n    let\
    \ sum = (n...m).reduce(0, +)\n    let avg = Int(round(Double(sum) / Double(m -\
    \ n + 1)))\n    return .success(String(avg, radix: 2))", "    guard n <= m else\
    \ { return .failure(-1) }\n    let sum = (n...m).reduce(0, +)\n    let rounded\
    \ = sum / (m - n + 1)\n    return .success(String(rounded, radix: 2))", "    guard\
    \ n <= m else { return .failure(-1) }\n    let sum = Array(n...m).reduce(0, +)\n\
    \    let avg = (sum + (m - n + 1) / 2) / (m - n + 1)\n    return .success(String(avg,\
    \ radix: 2))", "    guard n <= m else { return .failure(-1) }\n    return .success(String(Int(Double(n\
    \ + m)/2).toBinary()))", "    if n > m {\n        return .failure(-1)\n    }\n\
    \    let result = Int(Double(n + m) / 2)\n    return .success(String(result, radix:\
    \ 2))", "    if n > m {\n        return .failure(-1)\n    }\n    let average =\
    \ round(((Double(n) + Double(m)) / 2))\n    return .success(String(format: \"\
    0b%04o\", Int(average)))", "    guard n <= m else { return .failure(-1) }\n  \
    \  let avg = (n...m).reduce(0, +) / (m - n + 1)\n    return .success(avg.binaryString)",
  "    guard n <= m else { return .failure(-1) }\n    let sum = n + m\n    let avg\
    \ = sum / 2\n    let bit = (avg % 2 == 0) ? 0 : 1\n    let binary: String = String(bit)\
    \ + String(binary)\n    return rounded_avg(n: 0, m: avg / 2)", "    guard n <=\
    \ m else { return .failure(-1) }\n    return .success(String(Int(Double(n + m)\
    \ / 2.0).bin))", "    guard n <= m else { return .failure(-1) }\n    let sum =\
    \ (n + m) * (m - n + 1) / 2\n    let avg = sum / (m - n + 1)\n    return .success(String(avg,\
    \ radix: 2))", "    if n > m {\n        return .failure(-1)\n    } else {\n  \
    \      let sum = (n...m).reduce(0, +)\n        let avg = (sum + n) / (m - n +\
    \ 1)\n        return .success(avg.binary)\n    }", "    var sum = 0\n    if n\
    \ > m {\n        return .failure(-1)\n    }\n    for i in n...m {\n        sum\
    \ += i\n    }\n    let average = sum / (m - n + 1)\n    return .success(String(average,\
    \ radix: 2))", "    guard n <= m else { return .failure(-1) }\n    return .success(\"\
    0b\\(String(format: \"%b\", (n+m)/2))\")", "    if n > m {\n        return .failure(-1)\n\
    \    }\n    let sum = m + n\n    let quotient = sum / 2\n    let remainder = sum\
    \ % 2\n    let binary = String(quotient, radix: 2)\n    let result = \"0b\" +\
    \ (remainder > 0 ? binary + \"1\" : binary)\n    return .success(result)", " \
    \   if n > m {\n        return .failure(-1)\n    }\n    var sum = 0\n    for i\
    \ in n...m {\n        sum += i\n    }\n    return .success(String(sum / (m - n\
    \ + 1), radix: 2))"]
stop_tokens:
- "\n}"
