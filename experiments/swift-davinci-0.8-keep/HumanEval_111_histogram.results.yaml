language: swift
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    for character in test.componentsSeparatedByString(\" \") {\n \
    \       if let count = dict[character] {\n            dict[character] = count\
    \ + 1\n        } else {\n            dict[character] = 1\n        }\n    }\n \
    \   return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3gpnaqpq.swift:13:27: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    for character in test.componentsSeparatedByString(\"\
    \ \") {\n                     ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820635
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var hist = [String\
    \ : Int]()\n    for character in test.lowercaseString.characters {\n        if\
    \ let value = hist[String(character)] {\n            hist[String(character)] =\
    \ value + 1\n        } else {\n            hist[String(character)] = 1\n     \
    \   }\n    }\n    var result = [String : Int]()\n    var maxValue = 0\n    for\
    \ (key, value) in hist {\n        if value > maxValue {\n            maxValue\
    \ = value\n            result = [key : value]\n        } else if value == maxValue\
    \ {\n            result[key] = value\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8iw4i7wa.swift:13:27: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for character in test.lowercaseString.characters {\n\
    \                     ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820635
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n  return test.components(separatedBy:\
    \ \" \").reduce(into: [:]) { (result, val) in\n    result[val] = (result[val]\
    \ ?? 0) + 1\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpad926zp8.swift:12:15: error: value of type 'String' has no member\
    \ 'components'\n  return test.components(separatedBy: \" \").reduce(into: [:])\
    \ { (result, val) in\n         ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820635
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    \n    let letters\
    \ = test.componentsSeparatedByString(\" \")\n    var dictionary = [String : Int]()\n\
    \    \n    for letter in letters {\n        if let count = dictionary[letter]\
    \ {\n            dictionary[letter] = count + 1\n        } else {\n          \
    \  dictionary[letter] = 1\n        }\n    }\n    \n    return dictionary\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbulauxet.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820635
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for character in test.componentsSeparatedByString(\" \"\
    ) {\n        let count = histogram[character] ?? 0\n        histogram[character]\
    \ = count + 1\n    }\n    let maxCount = histogram.maxElement({ (a, b) -> Bool\
    \ in\n        return a.1 < b.1\n    })?.1\n    return histogram.filter({ (key,\
    \ value) -> Bool in\n        return value == maxCount\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpjn1xkdt0.swift:13:27: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    for character in test.componentsSeparatedByString(\"\
    \ \") {\n                     ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjn1xkdt0.swift:19:9:\
    \ error: type of expression is ambiguous without more context\n    })?.1\n~~~~~~~~^\n"
  stdout: ''
  timestamp: 1659820635
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    return test.lowercaseString.characters.reduce([String\
    \ : Int]()) { $0 + [$1.description : ($0[$1.description] ?? 0) + 1] }\n      \
    \  .filter { $0.1 == max($0.1, $1.1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpx45oimrx.swift:12:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return test.lowercaseString.characters.reduce([String :\
    \ Int]()) { $0 + [$1.description : ($0[$1.description] ?? 0) + 1] }\n        \
    \   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820665
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    var bestLetter: String?\n    var bestCount = 0\n    var bestLetters\
    \ = [String]()\n    var count = 0\n    for letter in letters {\n        for l\
    \ in letters {\n            if letter == l {\n                count += 1\n   \
    \         }\n        }\n        if count > bestCount {\n            bestCount\
    \ = count\n            bestLetter = letter\n            bestLetters = [letter]\n\
    \        } else if count == bestCount {\n            bestLetters.append(letter)\n\
    \        }\n        count = 0\n    }\n    var histogram = [String : Int]()\n \
    \   for letter in bestLetters {\n        histogram[letter] = bestCount\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp7nnd6z3f.swift:12:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820635
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let splitted = test.split(separator: \" \")\n    var max = 0\n\
    \    for letter in splitted {\n        result[String(letter)] = result[String(letter)]\
    \ ?? 0 + 1\n        if result[String(letter)]! > max {\n            max = result[String(letter)]!\n\
    \        }\n    }\n    var final = [String : Int]()\n    for (key, value) in result\
    \ {\n        if value == max {\n            final[key] = value\n        }\n  \
    \  }\n    return final\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmp4ald94h4/tmp4ald94h4.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1d4882c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1d4579b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1d4579988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1d45787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ald94h4                        0x0000560d70277c0b <unavailable> + 7179

    5    libc.so.6                          0x00002ab1d4a6e460 __libc_start_main +
    245

    6    tmp4ald94h4                        0x0000560d702777a9 <unavailable> + 6057

    '
  stdout: ''
  timestamp: 1659820636
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dictionary:\
    \ [String : Int] = [:]\n    var maxCount = 0\n    var maxKey = \"\"\n    for letter\
    \ in test.components(separatedBy: \" \") {\n        if dictionary[letter] == nil\
    \ {\n            dictionary[letter] = 1\n        } else {\n            dictionary[letter]!\
    \ += 1\n        }\n        if maxCount < dictionary[letter]! {\n            maxCount\
    \ = dictionary[letter]!\n            maxKey = letter\n        }\n    }\n    let\
    \ filteredDictionary = dictionary.filter { $0.value == maxCount }\n    return\
    \ filteredDictionary\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmppl72qc76.swift:15:24: error: value of type 'String' has no member\
    \ 'components'\n    for letter in test.components(separatedBy: \" \") {\n    \
    \              ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820635
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    \n    var result\
    \ = [String : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n\
    \    \n    for (index, value) in array.enumerate() {\n        if let occurrence\
    \ = result[value] {\n            result[value] = occurrence + 1\n        } else\
    \ {\n            result[value] = 1\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_jmumugx.swift:14:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820635
- exit_code: -4
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    return [\"a\":\
    \ 1, \"b\": 1, \"c\": 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: Exception
  stderr: 'tmpcgjk_dam/tmpcgjk_dam.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f9991ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f99615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f99615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f996147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcgjk_dam                        0x000055e90484b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b4f99b0a460 __libc_start_main +
    245

    6    tmpcgjk_dam                        0x000055e90484b139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1659820635
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    let words = test.componentsSeparatedByString(\"\
    \ \")\n    var dict = [String : Int]()\n    for word in words {\n        dict[word]\
    \ = dict[word] == nil ? 1 : dict[word]! + 1\n    }\n    let max = dict.values.maxElement()\n\
    \    var result = [String : Int]()\n    for (key, value) in dict {\n        if\
    \ value == max {\n            result[key] = value\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5j2kyb5o.swift:12:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let words = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp5j2kyb5o.swift:17:27:\
    \ error: value of type 'Dictionary<String, Int>.Values' has no member 'maxElement'\n\
    \    let max = dict.values.maxElement()\n              ~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820635
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let trimmedTest = test.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    if (trimmedTest.isEmpty) {\n        return dict\n    }\n    for letter in\
    \ trimmedTest.components(separatedBy: \" \") {\n        if (dict[letter] == nil)\
    \ {\n            dict[letter] = 1\n        } else {\n            dict[letter]\
    \ = dict[letter]! + 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxf8_z1im.swift:13:28: error: value of type 'String' has no member\
    \ 'trimmingCharacters'\n    let trimmedTest = test.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \                      ~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpxf8_z1im.swift:13:52:\
    \ error: cannot infer contextual base in reference to member 'whitespacesAndNewlines'\n\
    \    let trimmedTest = test.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \                                                  ~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820635
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    return test.characters.reduce([String\
    \ : Int]()) {\n        var result = $0\n        result[String($1)] = result[String($1)]\
    \ != nil ? result[String($1)]! + 1 : 1\n        return result\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp7831o2oa.swift:12:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    return test.characters.reduce([String : Int]()) {\n\
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659820635
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var count = [String\
    \ : Int]()\n    test.components(separatedBy: \" \").forEach {\n        count[$0]\
    \ = (count[$0] ?? 0) + 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpt5z2ohya.swift:13:10: error: value of type 'String' has no member\
    \ 'components'\n    test.components(separatedBy: \" \").forEach {\n    ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820635
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    for key in test.characters {\n        if let value = result[String(key)]\
    \ {\n            result[String(key)] = value + 1\n        } else {\n         \
    \   result[String(key)] = 1\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp53vlbhlh.swift:13:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for key in test.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820635
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    test.components(separatedBy: \" \").forEach {\n        let count\
    \ = result[$0] ?? 0\n        result[$0] = count + 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpgwrtp6pn.swift:13:10: error: value of type 'String' has no member\
    \ 'components'\n    test.components(separatedBy: \" \").forEach {\n    ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820635
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    if test.isEmpty\
    \ {\n        return [:]\n    }\n    var lettersDict = [String : Int]()\n    let\
    \ lettersArray = test.components(separatedBy: \" \")\n    for letter in lettersArray\
    \ {\n        if lettersDict[letter] == nil {\n            lettersDict[letter]\
    \ = 1\n        } else {\n            lettersDict[letter]! += 1\n        }\n  \
    \  }\n    return lettersDict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpkagw8t8h.swift:16:29: error: value of type 'String' has no member\
    \ 'components'\n    let lettersArray = test.components(separatedBy: \" \")\n \
    \                      ~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820635
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n  let arrayOfCharacters\
    \ = test.componentsSeparatedByString(\" \")\n  var histogram:[String : Int] =\
    \ [:]\n  for (_, value) in arrayOfCharacters.enumerate() {\n    histogram[value]\
    \ = (histogram[value] ?? 0) + 1\n  }\n  return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpsilc26uo.swift:12:32: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n  let arrayOfCharacters = test.componentsSeparatedByString(\"\
    \ \")\n                          ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpsilc26uo.swift:14:3:\
    \ error: failed to produce diagnostic for expression; please submit a bug report\
    \ (https://swift.org/contributing/#reporting-bugs) and include the project\n \
    \ for (_, value) in arrayOfCharacters.enumerate() {\n  ^\n"
  stdout: ''
  timestamp: 1659820635
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String\
    \ : Int] = [:]\n    let array = test.characters.split(\" \").map(String.init)\n\
    \    for word in array {\n        if let count = result[word] {\n            result[word]\
    \ = count + 1\n        } else {\n            result[word] = 1\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp7nj4e682.swift:13:33: error: no exact matches in call to instance\
    \ method 'split'\n    let array = test.characters.split(\" \").map(String.init)\n\
    \                                ^\nSwift.Sequence:2:40: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public\
    \ __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [Self.SubSequence]\n                                       ^\n"
  stdout: ''
  timestamp: 1659820635
