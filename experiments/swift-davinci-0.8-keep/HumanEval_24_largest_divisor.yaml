name: HumanEval_24_largest_divisor
language: swift
prompt: "\n/// For a given number n, find the largest number that divides n evenly,\
  \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n: Int)\
  \ -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
  \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
  \ == 50)\nassert(largest_divisor(n: 49) == 7)"
completions: ["    let limit = Int(sqrt(Double(n))) + 1\n    for i in (2...limit).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1", '    return 0', "    for i in (1...n/2).reverse() {\n        if n % i ==\
    \ 0 {\n            return i\n        }\n    }\n    return 1", "    var x = n\n\
    \    while x > 0 {\n        if n % x == 0 {\n            return x\n        }\n\
    \        x -= 1\n    }\n    return x", "    var largest = 1\n    for i in 1..<n\
    \ {\n        if n % i == 0 {\n            largest = i\n        }\n    }\n    return\
    \ largest", "    let divisors = [Int](1...n/2)\n    return divisors.filter { n\
    \ % $0 == 0 }.max()!", "    var largest_divisor = 0\n    var divisor = n\n   \
    \ while divisor > 0 {\n        if n % divisor == 0 {\n            largest_divisor\
    \ = divisor\n        }\n        divisor -= 1\n    }\n    return largest_divisor",
  "    var i = n\n    while i > 0 {\n        if n % i == 0 {\n            return i\n\
    \        }\n        i -= 1\n    }\n    return 0", "    for i in (1..<n).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1", "    var m = n\n    for i in (1..<n).reverse() {\n        if m % i == 0\
    \ {\n            return i\n        }\n    }\n    return 0", "    let sqrtn = Int(sqrt(Double(n)))\n\
    \    for i in stride(from: sqrtn, through: 2, by: -1) {\n        if n % i == 0\
    \ {\n            return i\n        }\n    }\n    return 1", "\tlet limit = Int(floor(sqrt(Double(n))))\n\
    \t\n\tfor i in (2...limit).reverse() {\n\t\tif n % i == 0 {\n\t\t\treturn i\n\t\
    \t}\n\t}\n\t\n\treturn 1", "    var largest = 1\n    for i in (2...n/2).reversed()\
    \ {\n        if n % i == 0 {\n            largest = i\n            break\n   \
    \     }\n    }\n    return largest", "    if n < 2 {\n        return 1\n    }\n\
    \    var num = n\n    var largest = 2\n    while num % 2 == 0 {\n        num /=\
    \ 2\n    }\n    largest = max(largest, num)\n    for i in stride(from: 3, through:\
    \ n/2, by: 2) {\n        while num % i == 0 {\n            num /= i\n        }\n\
    \        largest = max(largest, num)\n    }\n    return num", "    var divisor\
    \ = n\n    var max = divisor\n    while divisor > 0 {\n        if n % divisor\
    \ == 0 {\n            max = divisor\n        }\n        divisor -= 1\n    }\n\
    \    return max", "    for i in stride(from: n - 1, through: 1, by: -1) {\n  \
    \      if n % i == 0 {\n            return i\n        }\n    }\n    return 0",
  '    return n / 2', "    var last_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            last_divisor = i\n        }\n    }\n    return last_divisor",
  "\treturn Int(sqrt(Double(n)))", "    var ld = n-1\n    for i in 1..<n {\n     \
    \   if n % i == 0 {\n            ld = i\n        }\n    }\n    return ld"]
stop_tokens:
- "\n}"
