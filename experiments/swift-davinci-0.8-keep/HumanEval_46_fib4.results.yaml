language: swift
name: HumanEval_46_fib4
results:
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var sum = 0\n    var a = 0\n    var b = 0\n    var c = 2\n   \
    \ var d = 0\n    for _ in 4...n {\n        sum = a + b + c + d\n        a = b\n\
    \        b = c\n        c = d\n        d = sum\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824893
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpe9cf1apg/tmpe9cf1apg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a76847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a7653eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a7653e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a7653d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9cf1apg                        0x000055b2af5af1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b5a76a33460 __libc_start_main +
    245

    6    tmpe9cf1apg                        0x000055b2af5aee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpe9cf1apg/tmpe9cf1apg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a76847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a7653eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a7653e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a7653d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9cf1apg                        0x000055b2af5af1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b5a76a33460 __libc_start_main +
    245

    6    tmpe9cf1apg                        0x000055b2af5aee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    guard n > 2 else { return 2*n }\n    var x = Array(repeating: 0, count: n+1)\n\
    \    x[0] = 0\n    x[1] = 0\n    x[2] = 2\n    x[3] = 0\n    for i in 4...n {\n\
    \        x[i] = x[i-1] + x[i-2] + x[i-3] + x[i-4]\n    }\n    return x[n]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824893
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        var dp = [0, 0, 2, 0]\n        for i in 4...n {\n \
    \           dp.append(dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4])\n        }\n    \
    \    return dp[n]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824893
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    \n    var a: [Int] = [0,0,2,0]\n    var i = 3\n    if (n < a.count) {\n \
    \       return a[n]\n    }\n    while i < n {\n        let result = a[0] + a[1]\
    \ + a[2] + a[3]\n        a[0] = a[1]\n        a[1] = a[2]\n        a[2] = a[3]\n\
    \        a[3] = result\n        i += 1\n    }\n    return a[3]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824893
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    let fibs = [0, 0, 2, 0]\n    guard n > 3 else { return fibs[n] }\n    var\
    \ a = fibs[0]\n    var b = fibs[1]\n    var c = fibs[2]\n    var d = fibs[3]\n\
    \    for _ in 4...n {\n        let temp = d\n        d = a + b + c + d\n     \
    \   a = b\n        b = c\n        c = temp\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824893
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 4 {\n        return [0, 0, 2, 0][n]\n    }\n    var a = 0\n    var\
    \ b = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = b + c\
    \ + d\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpm_sl3ox8/tmpm_sl3ox8.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace820eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace81de5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace81de5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace81de47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm_sl3ox8                        0x000055df14a41495 <unavailable> + 5269

    5    libc.so.6                          0x00002ace822da460 __libc_start_main +
    245

    6    tmpm_sl3ox8                        0x000055df14a41149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824893
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    \n    if n == 0 {\n        return 0\n    }\n    \n    if n == 1 {\n     \
    \   return 0\n    }\n    \n    if n == 2 {\n        return 2\n    }\n    \n  \
    \  if n == 3 {\n        return 0\n    }\n    \n    var first = 0\n    var second\
    \ = 0\n    var third = 2\n    var fourth = 0\n    var result = 0\n    \n    for\
    \ _ in 4...n {\n        result = first + second + third + fourth\n        first\
    \ = second\n        second = third\n        third = fourth\n        fourth = result\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824893
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \  //TODO: Implement Me!\n  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpn56burg0/tmpn56burg0.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a4a18fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a49e86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a49e86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a49e857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn56burg0                        0x000055b59e2761b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b8a4a37b460 __libc_start_main +
    245

    6    tmpn56burg0                        0x000055b59e275e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824893
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \  var previousValues = [0, 0, 2, 0]\n  var nextValue = 0\n  var count = 4\n \
    \ while count <= n {\n    nextValue = previousValues[0] + previousValues[1] +\
    \ previousValues[2] + previousValues[3]\n    previousValues[0] = previousValues[1]\n\
    \    previousValues[1] = previousValues[2]\n    previousValues[2] = previousValues[3]\n\
    \    previousValues[3] = nextValue\n    count += 1\n  }\n  return nextValue\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824893
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    return fib4_iter(n: n, a: 0, b: 0, c: 2, d: 0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpw_kxghgl.swift:16:12: error: cannot find 'fib4_iter' in scope\n\
    \    return fib4_iter(n: n, a: 0, b: 0, c: 2, d: 0)\n           ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824893
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \  var a = 0\n  var b = 0\n  var c = 2\n  var d = 0\n  var i = 3\n  while i <=\
    \ n {\n    d = a + b + c\n    a = b\n    b = c\n    c = d\n    i += 1\n  }\n \
    \ return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpq6gco7qm/tmpq6gco7qm.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d8781bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d87512b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d87512988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d875117b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq6gco7qm                        0x00005652d45841b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b3d87a07460 __libc_start_main +
    245

    6    tmpq6gco7qm                        0x00005652d4583e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824893
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n    } else\
    \ {\n        for _ in 4...n {\n            d = a + b + c\n            a = b\n\
    \            b = c\n            c = d\n        }\n        return d\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_zp0lwuo/tmp_zp0lwuo.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba253b83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba25387ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba25387a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2538797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zp0lwuo                        0x000055a66ef793b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ba253d6f460 __libc_start_main +
    245

    6    tmp_zp0lwuo                        0x000055a66ef78fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpe9cf1apg/tmpe9cf1apg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a76847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a7653eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a7653e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a7653d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9cf1apg                        0x000055b2af5af1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b5a76a33460 __libc_start_main +
    245

    6    tmpe9cf1apg                        0x000055b2af5aee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if n <= 3 {\n\
    \        return n + 1\n    }\n    for _ in 4...n {\n        d = a + b + c\n  \
    \      a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpazhfoilf/tmpazhfoilf.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b260131dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2601014b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2601014988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26010137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpazhfoilf                        0x000055e70f8383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b2601509460 __libc_start_main +
    245

    6    tmpazhfoilf                        0x000055e70f837fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824893
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    return fib4Helper(n, fib1: 0, fib2: 0, fib3: 2, fib4: 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmp8bowb2x6.swift:16:12: error: cannot find 'fib4Helper' in scope\n\
    \    return fib4Helper(n, fib1: 0, fib2: 0, fib3: 2, fib4: 0)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824893
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    // TODO\n    var arr = [0, 0, 2, 0]\n    if n < 4 {\n        return arr[n]\n\
    \    }\n    var i = 4\n    while i <= n {\n        arr.append(arr[i-1] + arr[i-2]\
    \ + arr[i-3] + arr[i-4])\n        i += 1\n    }\n    return arr[n]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824893
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var x = 0\n    var y = 0\n    var z = 2\n    var w = 0\n    for\
    \ _ in 4...n {\n        x = y\n        y = z\n        z = w\n        w = x + y\
    \ + z + w\n    }\n    return w\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n:\
    \ 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmprdak75u1/tmprdak75u1.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49e3167c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49e2e5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49e2e5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49e2e5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdak75u1                        0x000055cb8a882335 <unavailable> + 4917

    5    libc.so.6                          0x00002b49e3353460 __libc_start_main +
    245

    6    tmprdak75u1                        0x000055cb8a881fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824893
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for i in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp18so3z7f/tmp18so3z7f.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0f69e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0f66dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0f66db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0f66da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp18so3z7f                        0x0000565009ab7335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab0f6bd0460 __libc_start_main +
    245

    6    tmp18so3z7f                        0x0000565009ab6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824893
