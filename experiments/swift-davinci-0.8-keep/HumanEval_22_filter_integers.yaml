name: HumanEval_22_filter_integers
language: swift
prompt: "\n/// Filter given list of any python values only for integers\n/// >>> filter_integers(['a',\
  \ 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n/// [1,\
  \ 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable])\
  \ == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
  \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
  \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
completions: ['    return filter_values(values: values, filter_func: is_int)', " \
    \   var result = [Int]()\n    for value in values {\n        if let v = value\
    \ as? Int {\n            result.append(v)\n        }\n    }\n    return result",
  "    values.filter {\n        if let i = $0 as? Int {\n            return true\n\
    \        }\n        return false\n    }.map { $0 as! Int }", "    var result:\
    \ [Int] = []\n    for x in values {\n        if let x_int = x as? Int {\n    \
    \        result.append(x_int)\n        }\n    }\n    return result", "    return\
    \ values.filter { (elem) -> Bool in\n        if let number = elem as? Int {\n\
    \            return true\n        }\n        return false\n    } as! [Int]", " \
    \   return values.compactMap { (value) -> Int? in\n        if let value = value\
    \ as? Int {\n            return value\n        }\n        return nil\n    }",
  "    let intergers = values.filter { v in\n        if let v = v as? Int {\n    \
    \        return true\n        }\n        return false\n    }\n    return intergers\
    \ as! [Int]", '    return values.compactMap({ $0 as? Int })', '    return filter_any(values,
    type: Int.self) as! [Int]', "    var res = [Int]()\n    for v in values {\n  \
    \      if let v = v as? Int {\n            res.append(v)\n        }\n    }\n \
    \   return res", "    var result = [Int]()\n    for value in values {\n      \
    \  if let intValue = value as? Int {\n            result.append(intValue)\n  \
    \      }\n    }\n    return result", '    return filter_integers(arr: values.map
    { $0 as! AnyHashable })', '    return values.compactMap { $0 as? Int }', "   \
    \ return values.compactMap({ (value) -> Int? in\n        guard let i = value as?\
    \ Int else { return nil }\n        return i\n    })", '    return values.filter({
    $0 is Int }).map({ $0 as! Int })', "    var integers = [Int]()\n    for value\
    \ in values {\n        if let int = value as? Int {\n            integers.append(int)\n\
    \        }\n    }\n    return integers", '    return filter_by_types(values: values,
    types: [Int.self])', "    var result = [Int]()\n    for value in values {\n  \
    \      if let integer = value as? Int {\n            result.append(integer)\n\
    \        }\n    }\n    return result", "    var filtered = [Int]()\n    for value\
    \ in values {\n        if let integer = value as? Int {\n            filtered.append(integer)\n\
    \        }\n    }\n    return filtered", '    return [3]']
stop_tokens:
- "\n}"
