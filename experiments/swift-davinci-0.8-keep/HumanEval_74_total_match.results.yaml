language: swift
name: HumanEval_74_total_match
results:
- exit_code: 0
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    let s1 = lst1.reduce(0) { x, y in x + y.count }\n\
    \    let s2 = lst2.reduce(0) { x, y in x + y.count }\n    return s1 <= s2 ? lst1\
    \ : lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820680
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    let total1 = lst1.map { $0.count }.reduce(0, +)\n\
    \    let total2 = lst2.map { $0.count }.reduce(0, +)\n    return total1 < total2\
    \ ? lst1 : lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpqe_t17d5/tmpqe_t17d5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25c9598c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25c928fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25c928f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25c928e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqe_t17d5                        0x0000563171e24627 <unavailable> + 9767

    5    libc.so.6                          0x00002b25c9784460 __libc_start_main +
    245

    6    tmpqe_t17d5                        0x0000563171e23239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659820680
- exit_code: 0
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n  var lst1Total = 0\n  var lst2Total = 0\n  for word\
    \ in lst1 {\n    lst1Total += word.count\n  }\n  for word in lst2 {\n    lst2Total\
    \ += word.count\n  }\n  if lst1Total > lst2Total {\n    return lst2\n  } else\
    \ {\n    return lst1\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820680
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    return lst1.joined().count < lst2.joined().count\
    \ ? lst1 : lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp58_by3ke/tmp58_by3ke.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ffa97dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ffa674b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ffa674988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ffa6737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp58_by3ke                        0x000055a2a97ee5b7 <unavailable> + 9655

    5    libc.so.6                          0x00002b1ffab69460 __libc_start_main +
    245

    6    tmp58_by3ke                        0x000055a2a97ed1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659820680
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var a = lst1.map({ $0.count }).reduce(0, +)\n \
    \   var b = lst2.map({ $0.count }).reduce(0, +)\n    return a < b ? lst1 : lst2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpwq5075c_/tmpwq5075c_.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9f0bf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9f08ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9f08eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9f08ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwq5075c_                        0x00005613ddc06627 <unavailable> + 9767

    5    libc.so.6                          0x00002ba9f0de0460 __libc_start_main +
    245

    6    tmpwq5075c_                        0x00005613ddc05239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659820680
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    let count1 = lst1.reduce(0) { $0 + $1.count }\n\
    \    let count2 = lst2.reduce(0) { $0 + $1.count }\n    return count1 < count2\
    \ ? lst1 : lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpulze3fzf/tmpulze3fzf.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af780f71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af780c68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af780c68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af780c677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpulze3fzf                        0x0000556a38aaf577 <unavailable> + 9591

    5    libc.so.6                          0x00002af78115d460 __libc_start_main +
    245

    6    tmpulze3fzf                        0x0000556a38aae189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659820680
- exit_code: 0
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    let total1 = lst1.reduce(0) { $0 + $1.count }\n\
    \    let total2 = lst2.reduce(0) { $0 + $1.count }\n    return total1 > total2\
    \ ? lst2 : lst1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820680
- exit_code: 0
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    let sumCharsOfLst1 = lst1.reduce(0) { result, string\
    \ in\n        result + string.count\n    }\n    let sumCharsOfLst2 = lst2.reduce(0)\
    \ { result, string in\n        result + string.count\n    }\n    return sumCharsOfLst1\
    \ <= sumCharsOfLst2 ? lst1 : lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820680
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n\tlet total1 = lst1.reduce(0) { $0 + $1.count }\n\t\
    let total2 = lst2.reduce(0) { $0 + $1.count }\n\treturn total1 < total2 ? lst1\
    \ : lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(total_match(lst1: []\
    \ as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmppfehs5ry/tmppfehs5ry.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa57fe1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa57cd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa57cd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa57cd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppfehs5ry                        0x00005626eff48577 <unavailable> + 9591

    5    libc.so.6                          0x00002baa581cd460 __libc_start_main +
    245

    6    tmppfehs5ry                        0x00005626eff47189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659820680
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var num1 = 0\n    var num2 = 0\n    for str in\
    \ lst1 {\n        num1 += str.count\n    }\n    for str in lst2 {\n        num2\
    \ += str.count\n    }\n    if num1 < num2 {\n        return lst1\n    } else {\n\
    \        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp4moiynl1/tmp4moiynl1.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7033e6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7033b66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7033b66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7033b657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4moiynl1                        0x000055dd44a86677 <unavailable> + 9847

    5    libc.so.6                          0x00002b703405b460 __libc_start_main +
    245

    6    tmp4moiynl1                        0x000055dd44a85289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820680
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var count1 = 0\n    var count2 = 0\n    for i in\
    \ lst1 {\n        count1 += i.count\n    }\n    for i in lst2 {\n        count2\
    \ += i.count\n    }\n    if count1 < count2 {\n        return lst1\n    } else\
    \ {\n        return lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpabt42j_t/tmpabt42j_t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adeb88afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adeb85a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adeb85a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adeb85a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpabt42j_t                        0x000055f9e9245677 <unavailable> + 9847

    5    libc.so.6                          0x00002adeb8a9b460 __libc_start_main +
    245

    6    tmpabt42j_t                        0x000055f9e9244289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820539
- exit_code: 0
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    //lst1.\n    var chars1 = 0\n    var chars2 = 0\n\
    \    for str in lst1 {\n        chars1 += str.count\n    }\n    for str in lst2\
    \ {\n        chars2 += str.count\n    }\n    if chars1 < chars2 {\n        return\
    \ lst1\n    } else if chars2 < chars1 {\n        return lst2\n    } else {\n \
    \       return lst1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820680
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var totalChar1 = 0\n    var totalChar2 = 0\n  \
    \  for i in lst1 {\n        totalChar1 += i.count\n    }\n    for i in lst2 {\n\
    \        totalChar2 += i.count\n    }\n    if totalChar1 < totalChar2 {\n    \
    \    return lst1\n    }\n    return lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(total_match(lst1: [] as [String], lst2: [] as [String]) == [] as [String])\n\
    assert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\"\
    , \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [\"\
    4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp2ljgv72i/tmp2ljgv72i.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0205484c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b020517bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b020517b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b020517a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ljgv72i                        0x000056245ec39677 <unavailable> + 9847

    5    libc.so.6                          0x00002b0205670460 __libc_start_main +
    245

    6    tmp2ljgv72i                        0x000056245ec38289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820680
- exit_code: 0
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var result = lst1\n    if lst1.reduce(0, {$0 +\
    \ $1.count}) > lst2.reduce(0, {$0 + $1.count}) {\n        result = lst2\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820680
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    return lst1.reduce(0, {$0 + $1.count}) < lst2.reduce(0,\
    \ {$0 + $1.count}) ? lst1 : lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmpy1tg9irk/tmpy1tg9irk.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b159bea1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b159bb98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b159bb98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b159bb977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy1tg9irk                        0x000055a634e17577 <unavailable> + 9591

    5    libc.so.6                          0x00002b159c08d460 __libc_start_main +
    245

    6    tmpy1tg9irk                        0x000055a634e16189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1659820680
- exit_code: 0
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var total1 = 0\n    var total2 = 0\n    for str\
    \ in lst1 {\n        total1 += str.count\n    }\n    for str in lst2 {\n     \
    \   total2 += str.count\n    }\n    if total1 == total2 {\n        return lst1\n\
    \    } else if total1 < total2 {\n        return lst1\n    } else {\n        return\
    \ lst2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820680
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    var matchCount = 0\n    var matchArr = [String]()\n\
    \    for a in lst1 {\n        for b in lst2 {\n            if b.count == a.count\
    \ {\n                matchCount += 1\n                matchArr.append(b)\n   \
    \         }\n        }\n    }\n    if matchCount == lst1.count {\n        return\
    \ matchArr\n    } else {\n        return lst1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(total_match(lst1: [] as [String], lst2: [] as [String]) ==\
    \ [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\"\
    , \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1:\
    \ [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"\
    hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"\
    hii\"]) == [\"hi\", \"admin\"])\nassert(total_match(lst1: [] as [String], lst2:\
    \ [\"this\"]) == [] as [String])\nassert(total_match(lst1: [\"this\"], lst2: []\
    \ as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp26pg1690/tmp26pg1690.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b80e3d0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b80e3a01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b80e3a01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b80e3a007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp26pg1690                        0x00005579b2c604bd <unavailable> + 9405

    5    libc.so.6                          0x00002b80e3ef6460 __libc_start_main +
    245

    6    tmp26pg1690                        0x00005579b2c5f389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820680
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n    return lst1.count < lst2.count ? lst1 : lst2\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp8suala7w/tmp8suala7w.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f37c90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f37987b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f37987988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f379867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8suala7w                        0x000055bc90a5425d <unavailable> + 8797

    5    libc.so.6                          0x00002b2f37e7c460 __libc_start_main +
    245

    6    tmp8suala7w                        0x000055bc90a53129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659820680
- exit_code: -4
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n\tvar lst1Sum = 0\n\tvar lst2Sum = 0\n\t\n\tfor item\
    \ in lst1 {\n\t\tlst1Sum += item.count\n\t}\n\t\n\tfor item in lst2 {\n\t\tlst2Sum\
    \ += item.count\n\t}\n\t\n\treturn lst1Sum < lst2Sum ? lst1 : lst2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(total_match(lst1: [] as [String], lst2: [] as\
    \ [String]) == [] as [String])\nassert(total_match(lst1: [\"hi\", \"admin\"],\
    \ lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1: [\"hi\"\
    , \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"\
    Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: Exception
  stderr: 'tmp_9hb4slw/tmp_9hb4slw.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bf7ce8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bf79dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bf79df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bf79de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9hb4slw                        0x0000562093799677 <unavailable> + 9847

    5    libc.so.6                          0x00002b7bf7ed4460 __libc_start_main +
    245

    6    tmp_9hb4slw                        0x0000562093798289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659820680
- exit_code: 0
  program: "\n/// Write a function that accepts two lists of strings and returns the\
    \ list that has \n/// total number of chars in the all strings of the list less\
    \ than the other list.\n/// if the two lists have the same number of chars, return\
    \ the first list.\n/// Examples\n/// total_match([], []) \u279E []\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n/// total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n/// total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n/// total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nfunc total_match(lst1: [String], lst2:\
    \ [String]) -> [String] {\n\tvar sum1 = 0\n\tvar sum2 = 0\n\tfor s in lst1 {\n\
    \t\tsum1 += s.count\n\t}\n\tfor s in lst2 {\n\t\tsum2 += s.count\n\t}\n\tif sum1\
    \ == sum2 {\n\t\treturn lst1\n\t} else if sum1 < sum2 {\n\t\treturn lst1\n\t}\
    \ else {\n\t\treturn lst2\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(total_match(lst1:\
    \ [] as [String], lst2: [] as [String]) == [] as [String])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"\
    hi\", \"admin\"])\nassert(total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\"\
    , \"4\", \"5\"]) == [\"4\"])\nassert(total_match(lst1: [\"hi\", \"admin\"], lst2:\
    \ [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\nassert(total_match(lst1: [\"hi\", \"\
    admin\"], lst2: [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\nassert(total_match(lst1:\
    \ [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"\
    ])\nassert(total_match(lst1: [] as [String], lst2: [\"this\"]) == [] as [String])\n\
    assert(total_match(lst1: [\"this\"], lst2: [] as [String]) == [] as [String])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820680
