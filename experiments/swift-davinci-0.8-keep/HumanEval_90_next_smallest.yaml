name: HumanEval_90_next_smallest
language: swift
prompt: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n/// Return None if there is\
  \ no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
  \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1]) ==\
  \ None\nfunc next_smallest(lst: [Int]) -> Int? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\n\
  assert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as\
  \ [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
  \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
  \ [-35, 34, 12, -45]) == -35)"
completions: ["    guard !lst.isEmpty else { return nil }\n    guard lst.count > 1\
    \ else { return nil }\n    let sorted = lst.sorted()\n    for (i, elem) in sorted.enumerated()\
    \ {\n        guard i < sorted.count - 1 else { return nil }\n        if sorted[i\
    \ + 1] > elem {\n            return sorted[i + 1]\n        }\n    }\n    return\
    \ nil", "  let sorted = lst.sorted()\n  if sorted.count < 2 {\n    return nil\n\
    \  }\n  return sorted[1]", "    var minValue = Int.max\n    var minValue2 = Int.max\n\
    \    for value in lst {\n        if value < minValue {\n            minValue2\
    \ = minValue\n            minValue = value\n        } else if value < minValue2\
    \ {\n            minValue2 = value\n        }\n    }\n    return minValue2 ==\
    \ Int.max ? nil : minValue2", "    if lst.count < 2 {\n        return nil\n  \
    \  }\n    var min = lst[0]\n    var min2 = lst[1]\n    if min > min2 {\n     \
    \   min = min2\n        min2 = lst[0]\n    }\n    for i in 2..<lst.count {\n \
    \       if lst[i] < min {\n            min2 = min\n            min = lst[i]\n\
    \        } else if lst[i] < min2 {\n            min2 = lst[i]\n        }\n   \
    \ }\n    return min2", "    guard lst.count > 2 else {\n        return nil\n \
    \   }\n    return lst.min()", '    return lst.count < 2 ? nil : lst.sorted()[1]',
  "    guard lst.count > 1 else {\n        return nil\n    }\n    var smallest = lst[0]\n\
    \    var secondSmallest = lst[1]\n    for num in lst[1...] {\n        if num <\
    \ smallest {\n            secondSmallest = smallest\n            smallest = num\n\
    \        } else if num < secondSmallest {\n            secondSmallest = num\n\
    \        }\n    }\n    return secondSmallest", "    if lst.count < 2 {\n     \
    \   return nil\n    }\n    var sorted = lst.sorted()\n    var count = 1\n    while\
    \ count < sorted.count && sorted[count - 1] == sorted[count] {\n        count\
    \ += 1\n    }\n    if count == sorted.count {\n        return nil\n    }\n   \
    \ return sorted[count]", "    guard lst.count > 2 else { return nil }\n    return\
    \ lst.sorted()[1]", "    if lst.count <= 1 {\n        return nil\n    }\n    let\
    \ s = lst.sorted()\n    var result = s[0]\n    for i in 1..<s.count {\n      \
    \  if s[i] != result {\n            result = s[i]\n            break\n       \
    \ }\n    }\n    return result", "    var min = Int.max\n    var second_min = Int.max\n\
    \    for num in lst {\n        if num < min {\n            second_min = min\n\
    \            min = num\n        } else if num < second_min {\n            second_min\
    \ = num\n        }\n    }\n    return second_min == Int.max ? nil : second_min",
  "    var min = lst[0]\n    var second = Int.max\n    for i in lst {\n        if\
    \ i < min {\n            second = min\n            min = i\n        } else if\
    \ i < second && i != min {\n            second = i\n        }\n    }\n    return\
    \ second == Int.max ? nil : second", "    if lst.count < 2 {\n        return nil\n\
    \    }\n    if lst.count == 2 {\n        if lst[0] == lst[1] {\n            return\
    \ nil\n        }\n    }\n    var sortedLst = lst.sorted()\n    var newLst = [Int]()\n\
    \    var current = -1\n    var counter = 0\n    while counter < sortedLst.count\
    \ {\n        let newValue = sortedLst[counter]\n        if newValue == current\
    \ {\n            counter += 1\n            continue\n        }\n        current\
    \ = newValue\n        newLst.append(newValue)\n        counter += 1\n    }\n \
    \   if newLst.count < 2 {\n        return nil\n    }\n    return newLst[1]", " \
    \   var a = lst, b = [Int]()\n    let n = a.count\n    if n < 2 {\n        return\
    \ nil\n    }\n    if n % 2 == 0 {\n        b = Array(a[0..<n/2])\n        a =\
    \ Array(a[n/2..<n])\n    } else {\n        b = Array(a[0..<n/2])\n        a =\
    \ Array(a[n/2+1..<n])\n    }\n    return next_smallest(a) ?? next_smallest(b)",
  "    guard lst.count > 1 else {\n        return nil\n    }\n    var (min_1, min_2)\
    \ = (lst[0], lst[1])\n    if min_1 > min_2 {\n        (min_1, min_2) = (min_2,\
    \ min_1)\n    }\n    for number in lst[2..<lst.count] {\n        if number < min_1\
    \ {\n            (min_1, min_2) = (number, min_1)\n        } else if number <\
    \ min_2 {\n            min_2 = number\n        }\n    }\n    return min_2", '    return
    nil', "    if lst.count == 0 {\n        return nil\n    }\n    if lst.count ==\
    \ 1 {\n        return nil\n    }\n    var array = lst\n    array.sort()\n    for\
    \ i in 1..<array.count {\n        if array[i] > array[0] {\n            return\
    \ array[i]\n        }\n    }\n    return nil", "    var min = Int.max\n    var\
    \ next = Int.max\n    for n in lst {\n        if n < min {\n            next =\
    \ min\n            min = n\n        } else if n < next {\n            next = n\n\
    \        }\n    }\n    return next < Int.max ? next : nil", '    return nil',
  "    var min1 = Int.max\n    var min2 = Int.max\n    for i in lst {\n        if\
    \ i < min1 {\n            min2 = min1\n            min1 = i\n        } else if\
    \ i < min2 {\n            min2 = i\n        }\n    }\n    return min2 != Int.max\
    \ ? min2 : nil"]
stop_tokens:
- "\n}"
