name: HumanEval_114_minSubArraySum
language: swift
prompt: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
  \ 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int]) ->\
  \ Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4])\
  \ == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
  \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
  \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) == 0)\n\
  assert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
  \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13, 8,\
  \ 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
  assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
  \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
completions: ["    guard nums.count > 0 else { return 0 }\n    var minSum = nums[0]\n\
    \    var currentSum = nums[0]\n    for i in 1..<nums.count {\n        currentSum\
    \ = Swift.max(nums[i], currentSum + nums[i])\n        minSum = Swift.min(minSum,\
    \ currentSum)\n    }\n    return minSum", "    guard nums.count > 0 else { return\
    \ 0 }\n    var sum = nums[0]\n    var min = sum\n    for i in 1..<nums.count {\n\
    \        sum = min(nums[i], sum + nums[i])\n        min = min(min, sum)\n    }\n\
    \    return min", "    guard nums.count > 0 else { return 0 }\n    var total =\
    \ 0\n    var runningTotal = 0\n    var min = Int.max\n    for n in nums {\n  \
    \      runningTotal += n\n        if runningTotal < min {\n            min = runningTotal\n\
    \        }\n        if runningTotal > 0 {\n            runningTotal = 0\n    \
    \    }\n        total += n\n    }\n    return min == Int.max ? total : min", " \
    \   var minSum = Int.max\n    var sum = 0\n    var start = 0\n    for (i, n) in\
    \ nums.enumerated() {\n        sum += n\n        while sum >= 0 {\n          \
    \  minSum = min(minSum, sum)\n            sum -= nums[start]\n            start\
    \ += 1\n        }\n    }\n    return minSum", "    guard nums.count > 0 else {\
    \ return 0 }\n    var globalMinSum = nums[0]\n    var currentMinSum = nums[0]\n\
    \    for index in 1..<nums.count {\n        currentMinSum = min(nums[index], currentMinSum\
    \ + nums[index])\n        globalMinSum = min(globalMinSum, currentMinSum)\n  \
    \  }\n    return globalMinSum", "    if nums.count == 0 {\n        return 0\n\
    \    }\n    var minSum = nums[0]\n    var sum = nums[0]\n    for i in 1..<nums.count\
    \ {\n        sum = min(nums[i], sum + nums[i])\n        minSum = min(minSum, sum)\n\
    \    }\n    return minSum", "    var result = nums[0]\n    var currentSum = 0\n\
    \    nums.forEach {\n        currentSum += $0\n        result = min(result, currentSum)\n\
    \        currentSum = max(currentSum, 0)\n    }\n    return result", "    var\
    \ sum = 0\n    var result = Int.max\n    for num in nums {\n        sum += num\n\
    \        result = min(result, sum)\n        if sum > 0 {\n            sum = 0\n\
    \        }\n    }\n    return result", "    var currMin = Int.max\n    var currSum\
    \ = 0\n    for n in nums {\n        currSum += n\n        currMin = min(currMin,\
    \ currSum)\n        currSum = max(currSum, 0)\n    }\n    return currMin", " \
    \   var min = nums[0]\n    var sum = nums[0]\n    for i in 1..<nums.count {\n\
    \        if sum > 0 {\n            sum = nums[i]\n        } else {\n         \
    \   sum += nums[i]\n        }\n        min = min > sum ? sum : min\n    }\n  \
    \  return min", "    var currentSum = 0\n    var currentSumMin = Int.max\n   \
    \ for number in nums {\n        currentSum += number\n        currentSumMin =\
    \ min(currentSumMin, currentSum)\n        currentSum = max(currentSum, 0)\n  \
    \  }\n    return currentSumMin", "    guard nums.count > 0 else { return 0 }\n\
    \    var minValue = nums[0]\n    var currentValue = 0\n    for value in nums {\n\
    \        currentValue += value\n        if currentValue < minValue {\n       \
    \     minValue = currentValue\n        }\n        if currentValue > 0 {\n    \
    \        currentValue = 0\n        }\n    }\n    return minValue", "    guard\
    \ !nums.isEmpty else { return 0 }\n    var smallestSum = nums[0]\n    var currentSum\
    \ = nums[0]\n    for index in 1..<nums.count {\n        let newSum = nums[index]\
    \ + currentSum\n        if newSum < smallestSum {\n            smallestSum = newSum\n\
    \        }\n        if newSum < 0 {\n            currentSum = 0\n        } else\
    \ {\n            currentSum = newSum\n        }\n    }\n    return smallestSum",
  "    // Sums of the prefix of the array\n    var sum = Array(repeating: 0, count:\
    \ nums.count + 1)\n    for i in 1...nums.count {\n        sum[i] = sum[i - 1]\
    \ + nums[i - 1]\n    }\n    // Sub-arrays can be limited to a single element\n\
    \    var minSum = sum[nums.count]\n    // For each sub-array of length 2 or more...\n\
    \    for i in 1..<sum.count {\n        // For each sub-array of length 2 or more...\n\
    \        for j in i..<sum.count {\n            // Find the minimum sub-array sum\n\
    \            minSum = min(minSum, sum[j] - sum[i - 1])\n        }\n    }\n   \
    \ return minSum", "    var minSum = Int.max\n    var sum = 0\n    var start =\
    \ 0\n    var end = 0\n    while end < nums.count {\n        sum += nums[end]\n\
    \        while sum >= 0 {\n            minSum = min(minSum, sum)\n           \
    \ sum -= nums[start]\n            start += 1\n        }\n        end += 1\n  \
    \  }\n    return minSum", "    // TODO: Complete Implementation\n    return 0",
  "    var min: Int = Int.max\n    var sum: Int = 0\n    for i in 0..<nums.count {\n\
    \        sum += nums[i]\n        if sum < min {\n            min = sum\n     \
    \   }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ min", "    var result = Int.max\n    var currentSum = 0\n    var start = 0\n\
    \    var end = 0\n    while end < nums.count {\n        currentSum += nums[end]\n\
    \        while currentSum >= 0 {\n            result = min(result, currentSum)\n\
    \            currentSum -= nums[start]\n            start += 1\n        }\n  \
    \      end += 1\n    }\n    return result", "    guard nums.count > 0 else { return\
    \ 0 }\n    var minSum = Int.max\n    var currentSum = 0\n    for n in nums {\n\
    \        currentSum += n\n        minSum = min(minSum, currentSum)\n        currentSum\
    \ = max(currentSum, 0)\n    }\n    return minSum", "    var minSum = Int.max\n\
    \    var sum = 0\n    for i in 0..<nums.count {\n        sum += nums[i]\n    \
    \    minSum = min(minSum, sum)\n        if sum > 0 {\n            sum = 0\n  \
    \      }\n    }\n    return minSum"]
stop_tokens:
- "\n}"
