name: HumanEval_111_histogram
language: swift
prompt: "\n/// Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n/// of the letter with the most repetition and containing the corresponding\
  \ count.\n/// If several letters have the same occurrence, return all of them.\n\
  /// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a\
  \ b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
  /// histogram('b b b b a') == {'b': 4}\n/// histogram('') == {}\nfunc histogram(test:\
  \ String) -> [String : Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" :\
  \ 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
  assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\"\
  \ : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
  \ \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
  \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
  ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
completions: ["    var dict = [String : Int]()\n    for character in test.componentsSeparatedByString(\"\
    \ \") {\n        if let count = dict[character] {\n            dict[character]\
    \ = count + 1\n        } else {\n            dict[character] = 1\n        }\n\
    \    }\n    return dict", "    var hist = [String : Int]()\n    for character\
    \ in test.lowercaseString.characters {\n        if let value = hist[String(character)]\
    \ {\n            hist[String(character)] = value + 1\n        } else {\n     \
    \       hist[String(character)] = 1\n        }\n    }\n    var result = [String\
    \ : Int]()\n    var maxValue = 0\n    for (key, value) in hist {\n        if value\
    \ > maxValue {\n            maxValue = value\n            result = [key : value]\n\
    \        } else if value == maxValue {\n            result[key] = value\n    \
    \    }\n    }\n    return result", "  return test.components(separatedBy: \" \"\
    ).reduce(into: [:]) { (result, val) in\n    result[val] = (result[val] ?? 0) +\
    \ 1\n  }", "    \n    let letters = test.componentsSeparatedByString(\" \")\n\
    \    var dictionary = [String : Int]()\n    \n    for letter in letters {\n  \
    \      if let count = dictionary[letter] {\n            dictionary[letter] = count\
    \ + 1\n        } else {\n            dictionary[letter] = 1\n        }\n    }\n\
    \    \n    return dictionary", "    var histogram = [String : Int]()\n    for\
    \ character in test.componentsSeparatedByString(\" \") {\n        let count =\
    \ histogram[character] ?? 0\n        histogram[character] = count + 1\n    }\n\
    \    let maxCount = histogram.maxElement({ (a, b) -> Bool in\n        return a.1\
    \ < b.1\n    })?.1\n    return histogram.filter({ (key, value) -> Bool in\n  \
    \      return value == maxCount\n    })", "    return test.lowercaseString.characters.reduce([String\
    \ : Int]()) { $0 + [$1.description : ($0[$1.description] ?? 0) + 1] }\n      \
    \  .filter { $0.1 == max($0.1, $1.1) }", "    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    var bestLetter: String?\n    var bestCount = 0\n    var bestLetters\
    \ = [String]()\n    var count = 0\n    for letter in letters {\n        for l\
    \ in letters {\n            if letter == l {\n                count += 1\n   \
    \         }\n        }\n        if count > bestCount {\n            bestCount\
    \ = count\n            bestLetter = letter\n            bestLetters = [letter]\n\
    \        } else if count == bestCount {\n            bestLetters.append(letter)\n\
    \        }\n        count = 0\n    }\n    var histogram = [String : Int]()\n \
    \   for letter in bestLetters {\n        histogram[letter] = bestCount\n    }\n\
    \    return histogram", "    var result = [String : Int]()\n    let splitted =\
    \ test.split(separator: \" \")\n    var max = 0\n    for letter in splitted {\n\
    \        result[String(letter)] = result[String(letter)] ?? 0 + 1\n        if\
    \ result[String(letter)]! > max {\n            max = result[String(letter)]!\n\
    \        }\n    }\n    var final = [String : Int]()\n    for (key, value) in result\
    \ {\n        if value == max {\n            final[key] = value\n        }\n  \
    \  }\n    return final", "    var dictionary: [String : Int] = [:]\n    var maxCount\
    \ = 0\n    var maxKey = \"\"\n    for letter in test.components(separatedBy: \"\
    \ \") {\n        if dictionary[letter] == nil {\n            dictionary[letter]\
    \ = 1\n        } else {\n            dictionary[letter]! += 1\n        }\n   \
    \     if maxCount < dictionary[letter]! {\n            maxCount = dictionary[letter]!\n\
    \            maxKey = letter\n        }\n    }\n    let filteredDictionary = dictionary.filter\
    \ { $0.value == maxCount }\n    return filteredDictionary", "    \n    var result\
    \ = [String : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n\
    \    \n    for (index, value) in array.enumerate() {\n        if let occurrence\
    \ = result[value] {\n            result[value] = occurrence + 1\n        } else\
    \ {\n            result[value] = 1\n        }\n    }\n    \n    return result",
  '    return ["a": 1, "b": 1, "c": 1]', "    let words = test.componentsSeparatedByString(\"\
    \ \")\n    var dict = [String : Int]()\n    for word in words {\n        dict[word]\
    \ = dict[word] == nil ? 1 : dict[word]! + 1\n    }\n    let max = dict.values.maxElement()\n\
    \    var result = [String : Int]()\n    for (key, value) in dict {\n        if\
    \ value == max {\n            result[key] = value\n        }\n    }\n    return\
    \ result", "    var dict = [String : Int]()\n    let trimmedTest = test.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    if (trimmedTest.isEmpty) {\n        return dict\n\
    \    }\n    for letter in trimmedTest.components(separatedBy: \" \") {\n     \
    \   if (dict[letter] == nil) {\n            dict[letter] = 1\n        } else {\n\
    \            dict[letter] = dict[letter]! + 1\n        }\n    }\n    return dict",
  "    return test.characters.reduce([String : Int]()) {\n        var result = $0\n\
    \        result[String($1)] = result[String($1)] != nil ? result[String($1)]!\
    \ + 1 : 1\n        return result\n    }", "    var count = [String : Int]()\n\
    \    test.components(separatedBy: \" \").forEach {\n        count[$0] = (count[$0]\
    \ ?? 0) + 1\n    }\n    return count", "    var result = [String : Int]()\n  \
    \  for key in test.characters {\n        if let value = result[String(key)] {\n\
    \            result[String(key)] = value + 1\n        } else {\n            result[String(key)]\
    \ = 1\n        }\n    }\n    return result", "    var result = [String : Int]()\n\
    \    test.components(separatedBy: \" \").forEach {\n        let count = result[$0]\
    \ ?? 0\n        result[$0] = count + 1\n    }\n    return result", "    if test.isEmpty\
    \ {\n        return [:]\n    }\n    var lettersDict = [String : Int]()\n    let\
    \ lettersArray = test.components(separatedBy: \" \")\n    for letter in lettersArray\
    \ {\n        if lettersDict[letter] == nil {\n            lettersDict[letter]\
    \ = 1\n        } else {\n            lettersDict[letter]! += 1\n        }\n  \
    \  }\n    return lettersDict", "  let arrayOfCharacters = test.componentsSeparatedByString(\"\
    \ \")\n  var histogram:[String : Int] = [:]\n  for (_, value) in arrayOfCharacters.enumerate()\
    \ {\n    histogram[value] = (histogram[value] ?? 0) + 1\n  }\n  return histogram",
  "    var result: [String : Int] = [:]\n    let array = test.characters.split(\"\
    \ \").map(String.init)\n    for word in array {\n        if let count = result[word]\
    \ {\n            result[word] = count + 1\n        } else {\n            result[word]\
    \ = 1\n        }\n    }\n    return result"]
stop_tokens:
- "\n}"
