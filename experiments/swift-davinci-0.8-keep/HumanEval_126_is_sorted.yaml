name: HumanEval_126_is_sorted
language: swift
prompt: "\n/// Given a list of numbers, return whether or not they are sorted\n///\
  \ in ascending order. If list has more than 1 duplicate of the same\n/// number,\
  \ return False. Assume no negative numbers and only integers.\n/// Examples\n///\
  \ is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n/// is_sorted([1,\
  \ 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n///\
  \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3, 2, 4, 5, 6,\
  \ 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n/// is_sorted([1,\
  \ 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
  \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
  assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2,\
  \ 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\n\
  assert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\n\
  assert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3,\
  \ 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst:\
  \ [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
completions: ["    for (index, num) in lst.enumerated() {\n        if index == 0 {\
    \ continue }\n        if num > lst[index - 1] { return false }\n    }\n    return\
    \ true", "    var tempList = lst\n    var counter = 1\n    while counter < tempList.count\
    \ {\n        if tempList[counter] < tempList[counter - 1] {\n            return\
    \ false\n        }\n        counter += 1\n    }\n    return true", "    var prev:\
    \ Int?\n    for num in lst {\n        if let unwrapped = prev {\n            if\
    \ num <= unwrapped {\n                return false\n            }\n        }\n\
    \        prev = num\n    }\n    return true", "\tvar lst2 = lst\n\tlst2.sort()\n\
    \treturn lst == lst2", "  return lst.reduce(Set<Int>()) { (res, i) in\n    if\
    \ res.contains(i) {\n      return res\n    } else {\n      return res.union([i])\n\
    \    }\n  }.sorted() == lst", "    for i in 1 ..< lst.count {\n        if lst[i]\
    \ <= lst[i - 1] {\n            return false\n        }\n    }\n    return true",
  "    var set = Set<Int>()\n    for number in lst {\n        set.insert(number)\n\
    \    }\n    if set.count == lst.count {\n        var c = lst.count - 1\n     \
    \   while c > 0 {\n            if lst[c] > lst[c - 1] {\n                c -=\
    \ 1\n            } else {\n                return false\n            }\n     \
    \   }\n        return true\n    } else {\n        return false\n    }", "    if\
    \ lst.count == 1 {\n        return true\n    }\n    var uniqueArray = [Int]()\n\
    \    var uniqueSet = Set<Int>()\n    for item in lst {\n        if !uniqueSet.contains(item)\
    \ {\n            uniqueSet.insert(item)\n            uniqueArray.append(item)\n\
    \        }\n    }\n    for i in 0..<uniqueArray.count-1 {\n        if uniqueArray[i]\
    \ > uniqueArray[i+1] {\n            return false\n        }\n    }\n    return\
    \ true", "    let sorted = lst.sorted()\n    return lst == sorted", "    let uniqueList\
    \ = Array(Set(lst))\n    if uniqueList.count != lst.count {\n        return false\n\
    \    }\n    for i in 0..<lst.count-1 {\n        if lst[i] > lst[i+1] {\n     \
    \       return false\n        }\n    }\n    return true", '    return lst.sorted()
    == lst', "    var sorted = true\n    for i in 0..<lst.count-1 {\n        if lst[i]\
    \ >= lst[i+1] {\n            sorted = false\n        }\n    }\n    return sorted",
  "    let uniqueSet = Set(lst)\n    if uniqueSet.count == lst.count {\n        for\
    \ (index, element) in lst.enumerated() {\n            if index > 0 {\n       \
    \         if element < lst[index - 1] {\n                    return false\n  \
    \              }\n            }\n        }\n        return true\n    }\n    return\
    \ false", "    for i in 0..<lst.count - 1 {\n        if lst[i] > lst[i + 1] {\n\
    \            return false\n        }\n    }\n    return true", "    var isSorted\
    \ = true\n    var _lastNumber = lst[0]\n    lst.forEach { element in\n       \
    \ if element < _lastNumber {\n            isSorted = false\n        }\n      \
    \  _lastNumber = element\n    }\n    return isSorted", "    let sorted = lst.sorted()\n\
    \    return lst == sorted", "    var arr = lst\n    arr.sort()\n    return lst\
    \ == arr", "    let sortedLst = lst.sorted()\n    return lst == sortedLst", " \
    \   var sortedList = lst.sorted()\n    for (index, item) in lst.enumerated() {\n\
    \        if item != sortedList[index] {\n            return false\n        }\n\
    \    }\n    return true", "    let noDuplicates = Set(lst)\n    let sorted = lst.sorted()\n\
    \    return lst == sorted && lst.count == noDuplicates.count"]
stop_tokens:
- "\n}"
