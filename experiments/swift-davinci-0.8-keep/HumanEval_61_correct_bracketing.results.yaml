language: swift
name: HumanEval_61_correct_bracketing
results:
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var brackets_stack = [Character]()\n    for bracket in\
    \ brackets {\n        if bracket == \"(\" {\n            brackets_stack.append(bracket)\n\
    \        } else if bracket == \")\" {\n            if brackets_stack.count ==\
    \ 0 {\n                return false\n            } else {\n                brackets_stack.removeLast()\n\
    \            }\n        }\n    }\n    return brackets_stack.count == 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824786
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n\tvar i = 0\n\tfor character in brackets {\n\t\tif character\
    \ == \"(\" {\n\t\t\ti += 1\n\t\t} else if character == \")\" {\n\t\t\ti -= 1\n\
    \t\t} else {\n\t\t\treturn false\n\t\t}\n\t\tif i < 0 {\n\t\t\treturn false\n\t\
    \t}\n\t}\n\treturn i == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824786
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = [String]()\n    for index in brackets.indices\
    \ {\n        let char = String(brackets[index])\n        if char == \"(\" {\n\
    \            stack.append(char)\n        } else if char == \")\" {\n         \
    \   if stack.isEmpty {\n                return false\n            } else {\n \
    \               stack.removeLast()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824786
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmp7npgok50/tmp7npgok50.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09c5b1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09c5814b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09c5814988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09c58137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7npgok50                        0x00005627b56dd25b <unavailable> + 4699

    5    libc.so.6                          0x00002b09c5d09460 __libc_start_main +
    245

    6    tmp7npgok50                        0x00005627b56dcee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824786
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let bracketChars = Array(brackets)\n    var acc = 0\n\
    \    for bracket in bracketChars {\n        if bracket == \"(\" {\n          \
    \  acc += 1\n        } else if bracket == \")\" {\n            acc -= 1\n    \
    \    }\n        if acc < 0 {\n            return false\n        }\n    }\n   \
    \ return acc == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824786
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var i = 0\n    for char in brackets {\n        if char\
    \ == \"(\" {\n            i += 1\n        } else if char == \")\" {\n        \
    \    i -= 1\n        }\n        if i < 0 {\n            return false\n       \
    \ }\n    }\n    return i == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824786
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    if brackets.count % 2 != 0 {\n        return false\n\
    \    }\n    var out = 0\n    for c in brackets {\n        if c == \"(\" {\n  \
    \          out += 1\n        } else {\n            out -= 1\n        }\n     \
    \   if out < 0 {\n            return false\n        }\n    }\n    return out ==\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824786
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var a: Int = 0\n    var b: Int = 0\n    for bracket in\
    \ brackets {\n        if bracket == \"(\" {\n            a += 1\n        } else\
    \ if bracket == \")\" {\n            b += 1\n        }\n    }\n    return a ==\
    \ b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpe5r9s8ps/tmpe5r9s8ps.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b324f9fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b324f6f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b324f6f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b324f6f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5r9s8ps                        0x000056388526275b <unavailable> + 5979

    5    libc.so.6                          0x00002b324fbe8460 __libc_start_main +
    245

    6    tmpe5r9s8ps                        0x0000563885262099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659824786
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for c in brackets\
    \ {\n        if c == \"(\" {\n            stack.push(c)\n        } else if c ==\
    \ \")\" {\n            if stack.is_empty() {\n                return false\n \
    \           }\n            stack.pop()\n        }\n    }\n    return stack.is_empty()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_9s3mggb.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824709
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmp7npgok50/tmp7npgok50.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09c5b1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09c5814b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09c5814988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09c58137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7npgok50                        0x00005627b56dd25b <unavailable> + 4699

    5    libc.so.6                          0x00002b09c5d09460 __libc_start_main +
    245

    6    tmp7npgok50                        0x00005627b56dcee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824786
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n  //\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: '/tmp/tmp6vpet2y9.swift:14:1: error: missing return in global function expected
    to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659824786
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var counter = 0\n    for (_, bracket) in brackets.enumerated()\
    \ {\n        switch bracket {\n        case \"(\":\n            counter += 1\n\
    \        case \")\":\n            counter -= 1\n        default:\n           \
    \ return false\n        }\n        if counter < 0 {\n            return false\n\
    \        }\n    }\n    return counter == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824786
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var brackets = brackets\n    while brackets.contains(\"\
    ()\") {\n        brackets = brackets.replacingOccurrences(of: \"()\", with: \"\
    \")\n    }\n    return brackets.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp20px_ii.swift:15:29: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n        brackets = brackets.replacingOccurrences(of:\
    \ \"()\", with: \"\")\n                   ~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824786
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var index: Int = 0\n    var stack: Stack<String> = Stack<String>()\n\
    \    while (index < brackets.count) {\n        let bracket = String(brackets[brackets.index(brackets.startIndex,\
    \ offsetBy: index)])\n        if bracket == \"(\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \")\" {\n            if stack.isEmpty() {\n    \
    \            return false\n            } else {\n                stack.pop()\n\
    \            }\n        }\n        index += 1\n    }\n    return stack.isEmpty()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk4ek582f.swift:14:16: error: cannot find type 'Stack' in scope\n\
    \    var stack: Stack<String> = Stack<String>()\n               ^~~~~\n"
  stdout: ''
  timestamp: 1659824786
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for bracket in brackets\
    \ {\n        if bracket == \"(\" {\n            stack.append(bracket)\n      \
    \  } else if bracket == \")\" {\n            if stack.last == \"(\" {\n      \
    \          stack.removeLast()\n            } else {\n                return false\n\
    \            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824786
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for ch in brackets\
    \ {\n        if ch == \"(\" {\n            stack.push(ch)\n        } else if ch\
    \ == \")\" {\n            if stack.is_empty() {\n                return false\n\
    \            }\n            stack.pop()\n        }\n    }\n    return stack.is_empty()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjw105mr1.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824786
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var count = 0\n    for bracket in brackets {\n      \
    \  if bracket == \"(\" {\n            count += 1\n        } else if bracket ==\
    \ \")\" {\n            count -= 1\n        }\n        if count < 0 {\n       \
    \     return false\n        }\n    }\n    return count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824709
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for character in\
    \ brackets {\n        if character == \"(\" {\n            stack.push(character)\n\
    \        } else if character == \")\" {\n            if stack.isEmpty() {\n  \
    \              return false\n            } else {\n                stack.pop()\n\
    \            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8v1_kn2m.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824786
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for c in brackets\
    \ {\n        if c == \"(\" {\n            stack.push(c)\n        } else if c ==\
    \ \")\" {\n            if stack.is_empty() {\n                return false\n \
    \           }\n            stack.pop()\n        }\n    }\n    return stack.is_empty()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_9s3mggb.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659824709
- exit_code: 0
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
    (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    // TODO: Implement\n    var stack: [Character] = []\n\
    \    for a in brackets {\n        if a == \"(\" {\n            stack.append(a)\n\
    \        } else if a == \")\" {\n            if stack.count > 0 {\n          \
    \      stack.removeLast()\n            } else {\n                return false\n\
    \            }\n        }\n    }\n    return stack.count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824786
