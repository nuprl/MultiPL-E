name: HumanEval_119_match_parens
language: swift
prompt: "\n/// You are given a list of two strings, both strings consist of open\n\
  /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
  \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
  \ string will be good.\n/// A string S is considered to be good if and only if all\
  \ parentheses in S\n/// are balanced. For example: the string '(())()' is good,\
  \ while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way to make\
  \ a good string, and return 'No' otherwise.\n/// Examples:\n/// match_parens(['()(',\
  \ ')']) == 'Yes'\n/// match_parens([')', ')']) == 'No'\nfunc match_parens(lst: [String])\
  \ -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(match_parens(lst: [\"()(\", \")\"]) == \"\
  Yes\")\nassert(match_parens(lst: [\")\", \")\"]) == \"No\")\nassert(match_parens(lst:\
  \ [\"(()(())\", \"())())\"]) == \"No\")\nassert(match_parens(lst: [\")())\", \"\
  (()()(\"]) == \"Yes\")\nassert(match_parens(lst: [\"(())))\", \"(()())((\"]) ==\
  \ \"Yes\")\nassert(match_parens(lst: [\"()\", \"())\"]) == \"No\")\nassert(match_parens(lst:\
  \ [\"(()(\", \"()))()\"]) == \"Yes\")\nassert(match_parens(lst: [\"((((\", \"((())\"\
  ]) == \"No\")\nassert(match_parens(lst: [\")(()\", \"(()(\"]) == \"No\")\nassert(match_parens(lst:\
  \ [\")(\", \")(\"]) == \"No\")\nassert(match_parens(lst: [\"(\", \")\"]) == \"Yes\"\
  )\nassert(match_parens(lst: [\")\", \"(\"]) == \"Yes\")"
completions: ["  if lst.count != 2 {\n    return \"No\"\n  }\n  let str1 = lst[0]\n\
    \  let str2 = lst[1]\n  if str1.contains(\"(\") && str2.contains(\")\") {\n  \
    \  return \"Yes\"\n  }\n  if str1.contains(\")\") && str2.contains(\"(\") {\n\
    \    return \"Yes\"\n  }\n  return \"No\"", "    var stack = [Character]()\n \
    \   var result = \"Yes\"\n    for item in lst.joined() {\n        if item == \"\
    (\" {\n            stack.append(item)\n        } else {\n            if stack.isEmpty\
    \ {\n                result = \"No\"\n                break\n            } else\
    \ {\n                stack.removeLast()\n            }\n        }\n    }\n   \
    \ if !stack.isEmpty {\n        result = \"No\"\n    }\n    return result", " \
    \   let s1 = lst[0]\n    let s2 = lst[1]\n    var idx = 0\n    var balance = 0\n\
    \    for c in s1 {\n        if c == \"(\" {\n            balance += 1\n      \
    \  } else {\n            balance -= 1\n        }\n        if balance < 0 {\n \
    \           break\n        }\n        idx += 1\n    }\n    if balance != 0 {\n\
    \        return \"No\"\n    }\n    for c in s2 {\n        if c == \"(\" {\n  \
    \          balance += 1\n        } else {\n            balance -= 1\n        }\n\
    \        if balance < 0 {\n            break\n        }\n    }\n    if balance\
    \ == 0 {\n        return \"Yes\"\n    }\n    return \"No\"", "    // your code\
    \ here\n    var open = lst[0].filter { $0 == \"(\" }\n    var close = lst[1].filter\
    \ { $0 == \")\" }\n    if open.count == close.count {\n        return \"Yes\"\n\
    \    }\n    return \"No\"", "    var open = 0\n    var close = 0\n    for i in\
    \ lst {\n        for j in i {\n            if j == \"(\" {\n                open\
    \ += 1\n            } else {\n                close += 1\n            }\n    \
    \    }\n    }\n    return open == close ? \"Yes\" : \"No\"", '    return ""',
  "    var stack = [Character]()\n    for char in lst[0] {\n        if char == \"\
    (\" {\n            stack.append(char)\n        } else {\n            if stack.isEmpty\
    \ {\n                return \"No\"\n            }\n            stack.removeLast()\n\
    \        }\n    }\n    for char in lst[1] {\n        if char == \"(\" {\n    \
    \        stack.append(char)\n        } else {\n            if stack.isEmpty {\n\
    \                return \"No\"\n            }\n            stack.removeLast()\n\
    \        }\n    }\n    return stack.isEmpty ? \"Yes\" : \"No\"", "    let first\
    \ = lst[0]\n    let second = lst[1]\n    var result = \"\"\n    var counter =\
    \ 0\n    for ltr in first {\n        result.append(ltr)\n        if ltr == \"\
    (\" {\n            counter += 1\n        } else {\n            counter -= 1\n\
    \        }\n    }\n    for ltr in second {\n        result.append(ltr)\n     \
    \   if ltr == \"(\" {\n            counter += 1\n        } else {\n          \
    \  counter -= 1\n        }\n    }\n    if counter == 0 {\n        return \"Yes\"\
    \n    } else {\n        return \"No\"\n    }", "    var result: String = \"Yes\"\
    \n    var count: Int = 0\n    for item in lst {\n        for char in item {\n\
    \            if char == \"(\" {\n                count += 1\n            } else\
    \ {\n                count -= 1\n            }\n            if count < 0 {\n \
    \               result = \"No\"\n                break\n            }\n      \
    \  }\n    }\n    if count != 0 {\n        result = \"No\"\n    }\n    return result",
  "\tvar stk: [String] = []\n\t\n\tfor ch in lst[0] {\n\t\tif ch == \"(\" {\n\t\t\t\
    stk.append(\"(\")\n\t\t} else {\n\t\t\tif stk.count > 0 {\n\t\t\t\tstk.removeLast()\n\
    \t\t\t} else {\n\t\t\t\tstk.append(\")\")\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor ch in\
    \ lst[1] {\n\t\tif ch == \"(\" {\n\t\t\tif stk.count > 0 && stk.last == \")\"\
    \ {\n\t\t\t\tstk.removeLast()\n\t\t\t} else {\n\t\t\t\tstk.append(\"(\")\n\t\t\
    \t}\n\t\t} else {\n\t\t\tstk.append(\")\")\n\t\t}\n\t}\n\t\n\treturn stk.count\
    \ == 0 ? \"Yes\" : \"No\"", "  let s = lst[0] + lst[1]\n  let good = balance_parens(s)\n\
    \  return good ? \"Yes\" : \"No\"", "  let left = lst[0]\n  let right = lst[1]\n\
    \  let left_parens = left.filter { $0 == \"(\" }\n  let right_parens = right.filter\
    \ { $0 == \")\" }\n  if left_parens.count == right_parens.count {\n    return\
    \ \"Yes\"\n  }\n  return \"No\"", '    return ""', "    var lst = lst\n    var\
    \ openCount = 0\n    var closeCount = 0\n    if lst[0].count > lst[1].count {\n\
    \        let tmp = lst[0]\n        lst[0] = lst[1]\n        lst[1] = tmp\n   \
    \ }\n    for c in lst[0] {\n        if c == \"(\" {\n            openCount +=\
    \ 1\n        } else {\n            closeCount += 1\n        }\n    }\n    for\
    \ c in lst[1] {\n        if c == \"(\" {\n            openCount += 1\n       \
    \ } else {\n            closeCount += 1\n        }\n    }\n    if openCount !=\
    \ closeCount {\n        return \"No\"\n    }\n    var openBalanced = 0\n    var\
    \ closeBalanced = 0\n    for c in lst[0] {\n        if c == \"(\" {\n        \
    \    openBalanced += 1\n        } else {\n            closeBalanced += 1\n   \
    \     }\n        if openBalanced < closeBalanced {\n            return \"No\"\n\
    \        }\n    }\n    var open = openBalanced\n    var close = closeBalanced\n\
    \    for c in lst[1] {\n        if c == \"(\" {\n            open += 1\n     \
    \   } else {\n            close += 1\n        }\n        if open < close {\n \
    \           return \"No\"\n        }\n    }\n    return \"Yes\"", "    var open\
    \ = lst[0].characters.filter({ $0 == \"(\" }).count\n    var close = lst[0].characters.filter({\
    \ $0 == \")\" }).count\n    for char in lst[1].characters {\n        if char ==\
    \ \"(\" {\n            open += 1\n        } else {\n            close += 1\n \
    \       }\n    }\n    if open != close {\n        return \"No\"\n    } else {\n\
    \        var open_cnt = 0\n        var close_cnt = 0\n        for char in lst[0].characters\
    \ {\n            if char == \"(\" {\n                open_cnt += 1\n         \
    \   } else {\n                close_cnt += 1\n            }\n            if close_cnt\
    \ > open_cnt {\n                return \"No\"\n            }\n        }\n    \
    \    open_cnt = 0\n        close_cnt = 0\n        for char in lst[1].characters\
    \ {\n            if char == \"(\" {\n                open_cnt += 1\n         \
    \   } else {\n                close_cnt += 1\n            }\n            if close_cnt\
    \ > open_cnt {\n                return \"No\"\n            }\n        }\n    \
    \    return \"Yes\"\n    }", "    // write your code in Swift 3.0 (Linux)\n  \
    \  let s1 = lst[0]\n    let s2 = lst[1]\n    let l1 = s1.characters.count\n  \
    \  let l2 = s2.characters.count\n    let l = l1 + l2\n    var result = true\n\
    \    var lst = [String]()\n    for var i in 0...l {\n        if i < l1 {\n   \
    \         lst.append(s1[i])\n        } else {\n            lst.append(s2[i - l1])\n\
    \        }\n    }\n    for var i in 0...l {\n        let current_elem = lst[i]\n\
    \        if current_elem == \"(\" {\n            for var j in i...l {\n      \
    \          if lst[j] == \")\" {\n                    lst.remove(at: j)\n     \
    \               lst.remove(at: i)\n                    break\n               \
    \ }\n            }\n        }\n    }\n    if lst.count != 0 {\n        result\
    \ = false\n    }\n    return result ? \"Yes\" : \"No\"", '    return ""', "  var\
    \ open, close: Int\n  open = 0\n  close = 0\n  var ans = \"Yes\"\n  for i in lst[0]\
    \ {\n    if i == \"(\" {\n      open += 1\n    } else {\n      close += 1\n  \
    \  }\n  }\n  for i in lst[1] {\n    if i == \"(\" {\n      open -= 1\n    } else\
    \ {\n      close -= 1\n    }\n  }\n  if open < 0 || close < 0 {\n    ans = \"\
    No\"\n  }\n  return ans", "    let tmp1 = lst[0].components(separatedBy: \"(\"\
    ).count - 1\n    let tmp2 = lst[0].components(separatedBy: \")\").count - 1\n\
    \    let tmp3 = lst[1].components(separatedBy: \"(\").count - 1\n    let tmp4\
    \ = lst[1].components(separatedBy: \")\").count - 1\n    if (tmp1 - tmp2) != (tmp3\
    \ - tmp4) {\n        return \"No\"\n    }\n    let str = lst[0] + lst[1]\n   \
    \ var stack = Stack<Character>()\n    for elem in str {\n        if elem == \"\
    (\" {\n            stack.push(value: elem)\n        } else {\n            if stack.count\
    \ > 0 {\n                stack.pop()\n            } else {\n                return\
    \ \"No\"\n            }\n        }\n    }\n    return \"Yes\"", "    guard lst.count\
    \ == 2 else {\n        return \"ERROR: List must have 2 strings.\"\n    }\n  \
    \  let str1 = lst[0]\n    let str2 = lst[1]\n    let arr1 = Array(str1)\n    let\
    \ arr2 = Array(str2)\n    let count1 = countParens(arr: arr1)\n    let count2\
    \ = countParens(arr: arr2)\n    if count1.left == count2.left && count1.right\
    \ == count2.right {\n        return \"Yes\"\n    }\n    return \"No\""]
stop_tokens:
- "\n}"
