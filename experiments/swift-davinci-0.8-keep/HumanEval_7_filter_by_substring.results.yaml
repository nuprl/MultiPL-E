language: swift
name: HumanEval_7_filter_by_substring
results:
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings:\
    \ [String], substring: String) -> [String] {\n    return strings.filter {\n  \
    \      $0.contains(substring)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013366
- exit_code: -4
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings:\
    \ [String], substring: String) -> [String] {\n    // your code here\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmp7a50mj1d/tmp7a50mj1d.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae41519fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae414e96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae414e96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae414e957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7a50mj1d                        0x0000555db7e23747 <unavailable> + 5959

    5    libc.so.6                          0x00002ae41538b460 __libc_start_main +
    245

    6    tmp7a50mj1d                        0x0000555db7e230c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013477
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings:\
    \ [String], substring: String) -> [String] {\n    return strings.filter {$0.contains(substring)}\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013477
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings:\
    \ [String], substring: String) -> [String] {\n    var out_strings: [String] =\
    \ []\n    for str in strings {\n        if str.contains(substring) {\n       \
    \     out_strings.append(str)\n        }\n    }\n    return out_strings\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013477
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings:\
    \ [String], substring: String) -> [String] {\n  return strings.filter({ (string:\
    \ String) -> Bool in\n    return string.rangeOfString(substring) != nil\n  })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp85jjy9ts.swift:9:19: error: value of type 'String' has no member\
    \ 'rangeOfString'\n    return string.rangeOfString(substring) != nil\n       \
    \    ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013477
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings:\
    \ [String], substring: String) -> [String] {\n    return strings.filter({ (x:\
    \ String) -> Bool in x.contains(substring) })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013477
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings:\
    \ [String], substring: String) -> [String] {\n  var result = [String]()\n  for\
    \ string in strings {\n    if string.contains(substring) {\n      result.append(string)\n\
    \    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013477
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings:\
    \ [String], substring: String) -> [String] {\n    var new_list: [String] = []\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      new_list.append(string)\n        }\n    }\n    return new_list\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013477
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings:\
    \ [String], substring: String) -> [String] {\n  return strings.filter { string\
    \ in\n    return string.contains(substring)\n  }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(filter_by_substring(strings: [] as [String], substring: \"\
    john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\"\
    , \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013477
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings:\
    \ [String], substring: String) -> [String] {\n    return strings.filter { $0.rangeOfString(substring)\
    \ != nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyfa_syhn.swift:8:32: error: value of type 'String' has no member\
    \ 'rangeOfString'\n    return strings.filter { $0.rangeOfString(substring) !=\
    \ nil }\n                            ~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013477
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings:\
    \ [String], substring: String) -> [String] {\n    var result: [String] = []\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      result.append(string)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013366
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings:\
    \ [String], substring: String) -> [String] {\n    return strings.filter({\n  \
    \      contains(substring, $0)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(filter_by_substring(strings: [] as [String], substring: \"john\") == []\
    \ as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"aaaxxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbfwou7n4.swift:9:9: error: cannot find 'contains' in scope\n  \
    \      contains(substring, $0)\n        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013477
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings:\
    \ [String], substring: String) -> [String] {\n    var filtered = [String]()\n\
    \    for string in strings {\n        if string.contains(substring) {\n      \
    \      filtered.append(string)\n        }\n    }\n    return filtered\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013366
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings:\
    \ [String], substring: String) -> [String] {\n    var output = [String]()\n  \
    \  for string in strings {\n        if string.rangeOfString(substring) != nil\
    \ {\n            output.append(string)\n        }\n    }\n    return output\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_t05u1wi.swift:10:19: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        if string.rangeOfString(substring) != nil {\n     \
    \      ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013477
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings:\
    \ [String], substring: String) -> [String] {\n    return strings.filter({ (input:\
    \ String) -> Bool in\n        return input.rangeOfString(substring) != nil\n \
    \   })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8plyd57p.swift:9:22: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        return input.rangeOfString(substring) != nil\n    \
    \           ~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013477
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings:\
    \ [String], substring: String) -> [String] {\n    return strings.filter {$0.contains(substring)}\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013477
- exit_code: -4
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings:\
    \ [String], substring: String) -> [String] {\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_by_substring(strings: [] as [String], substring:\
    \ \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\",\
    \ \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") ==\
    \ [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
    , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\")\
    \ == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmpoj1tebuj/tmpoj1tebuj.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebb28e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebb25dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebb25da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebb25d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoj1tebuj                        0x0000558136678747 <unavailable> + 5959

    5    libc.so.6                          0x00002aebb2acf460 __libc_start_main +
    245

    6    tmpoj1tebuj                        0x00005581366780c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013477
- exit_code: 1
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings:\
    \ [String], substring: String) -> [String] {\n    return strings.filter({$0.rangeOfString(substring)\
    \ != nil})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: SyntaxError
  stderr: "/tmp/tmpafk8roua.swift:8:31: error: value of type 'String' has no member\
    \ 'rangeOfString'\n    return strings.filter({$0.rangeOfString(substring) != nil})\n\
    \                           ~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013366
- exit_code: 0
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings:\
    \ [String], substring: String) -> [String] {\n    return strings.filter { string\
    \ in\n        string.contains(substring)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(filter_by_substring(strings: [] as [String], substring: \"john\"\
    ) == [] as [String])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\") == [\"xxx\", \"\
    xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\", \"asd\", \"\
    aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") == [\"xxx\",\
    \ \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"grunt\"\
    , \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"grunt\", \"\
    prune\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013477
- exit_code: -4
  program: "\n/// Filter an input list of strings only for ones that contain given\
    \ substring\n/// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings:\
    \ [String], substring: String) -> [String] {\n    // TODO: your solution here\n\
    \    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_by_substring(strings:\
    \ [] as [String], substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring:\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
    grunt\", \"prune\"])"
  status: Exception
  stderr: 'tmp3_ce57eg/tmp3_ce57eg.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91855c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91852beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91852be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91852bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_ce57eg                        0x000055be3e72e747 <unavailable> + 5959

    5    libc.so.6                          0x00002b91857b3460 __libc_start_main +
    245

    6    tmp3_ce57eg                        0x000055be3e72e0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013477
