name: HumanEval_61_correct_bracketing
language: swift
prompt: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
  \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
  (\")\n/// False\n/// >>> correct_bracketing(\"()\")\n/// True\n/// >>> correct_bracketing(\"\
  (()())\")\n/// True\n/// >>> correct_bracketing(\")(()\")\n/// False\nfunc correct_bracketing(brackets:\
  \ String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(correct_bracketing(brackets: \"()\") ==\
  \ true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
  \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
  ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
  \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
  \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\nassert(correct_bracketing(brackets:\
  \ \"(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())())(()\")\
  \ == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\") == false)"
completions: ["    var brackets_stack = [Character]()\n    for bracket in brackets\
    \ {\n        if bracket == \"(\" {\n            brackets_stack.append(bracket)\n\
    \        } else if bracket == \")\" {\n            if brackets_stack.count ==\
    \ 0 {\n                return false\n            } else {\n                brackets_stack.removeLast()\n\
    \            }\n        }\n    }\n    return brackets_stack.count == 0", "\tvar\
    \ i = 0\n\tfor character in brackets {\n\t\tif character == \"(\" {\n\t\t\ti +=\
    \ 1\n\t\t} else if character == \")\" {\n\t\t\ti -= 1\n\t\t} else {\n\t\t\treturn\
    \ false\n\t\t}\n\t\tif i < 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn i ==\
    \ 0", "    var stack = [String]()\n    for index in brackets.indices {\n     \
    \   let char = String(brackets[index])\n        if char == \"(\" {\n         \
    \   stack.append(char)\n        } else if char == \")\" {\n            if stack.isEmpty\
    \ {\n                return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty", "\treturn false",
  "    let bracketChars = Array(brackets)\n    var acc = 0\n    for bracket in bracketChars\
    \ {\n        if bracket == \"(\" {\n            acc += 1\n        } else if bracket\
    \ == \")\" {\n            acc -= 1\n        }\n        if acc < 0 {\n        \
    \    return false\n        }\n    }\n    return acc == 0", "    var i = 0\n  \
    \  for char in brackets {\n        if char == \"(\" {\n            i += 1\n  \
    \      } else if char == \")\" {\n            i -= 1\n        }\n        if i\
    \ < 0 {\n            return false\n        }\n    }\n    return i == 0", "   \
    \ if brackets.count % 2 != 0 {\n        return false\n    }\n    var out = 0\n\
    \    for c in brackets {\n        if c == \"(\" {\n            out += 1\n    \
    \    } else {\n            out -= 1\n        }\n        if out < 0 {\n       \
    \     return false\n        }\n    }\n    return out == 0", "    var a: Int =\
    \ 0\n    var b: Int = 0\n    for bracket in brackets {\n        if bracket ==\
    \ \"(\" {\n            a += 1\n        } else if bracket == \")\" {\n        \
    \    b += 1\n        }\n    }\n    return a == b", "    var stack = Stack<Character>()\n\
    \    for c in brackets {\n        if c == \"(\" {\n            stack.push(c)\n\
    \        } else if c == \")\" {\n            if stack.is_empty() {\n         \
    \       return false\n            }\n            stack.pop()\n        }\n    }\n\
    \    return stack.is_empty()", "\treturn false", '  //', "    var counter = 0\n\
    \    for (_, bracket) in brackets.enumerated() {\n        switch bracket {\n \
    \       case \"(\":\n            counter += 1\n        case \")\":\n         \
    \   counter -= 1\n        default:\n            return false\n        }\n    \
    \    if counter < 0 {\n            return false\n        }\n    }\n    return\
    \ counter == 0", "    var brackets = brackets\n    while brackets.contains(\"\
    ()\") {\n        brackets = brackets.replacingOccurrences(of: \"()\", with: \"\
    \")\n    }\n    return brackets.isEmpty", "    var index: Int = 0\n    var stack:\
    \ Stack<String> = Stack<String>()\n    while (index < brackets.count) {\n    \
    \    let bracket = String(brackets[brackets.index(brackets.startIndex, offsetBy:\
    \ index)])\n        if bracket == \"(\" {\n            stack.push(bracket)\n \
    \       } else if bracket == \")\" {\n            if stack.isEmpty() {\n     \
    \           return false\n            } else {\n                stack.pop()\n\
    \            }\n        }\n        index += 1\n    }\n    return stack.isEmpty()",
  "    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \")\" {\n            if stack.last == \"(\" {\n                stack.removeLast()\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n    for\
    \ ch in brackets {\n        if ch == \"(\" {\n            stack.push(ch)\n   \
    \     } else if ch == \")\" {\n            if stack.is_empty() {\n           \
    \     return false\n            }\n            stack.pop()\n        }\n    }\n\
    \    return stack.is_empty()", "    var count = 0\n    for bracket in brackets\
    \ {\n        if bracket == \"(\" {\n            count += 1\n        } else if\
    \ bracket == \")\" {\n            count -= 1\n        }\n        if count < 0\
    \ {\n            return false\n        }\n    }\n    return count == 0", "   \
    \ var stack = Stack<Character>()\n    for character in brackets {\n        if\
    \ character == \"(\" {\n            stack.push(character)\n        } else if character\
    \ == \")\" {\n            if stack.isEmpty() {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty()", "    var stack = Stack<Character>()\n   \
    \ for c in brackets {\n        if c == \"(\" {\n            stack.push(c)\n  \
    \      } else if c == \")\" {\n            if stack.is_empty() {\n           \
    \     return false\n            }\n            stack.pop()\n        }\n    }\n\
    \    return stack.is_empty()", "    // TODO: Implement\n    var stack: [Character]\
    \ = []\n    for a in brackets {\n        if a == \"(\" {\n            stack.append(a)\n\
    \        } else if a == \")\" {\n            if stack.count > 0 {\n          \
    \      stack.removeLast()\n            } else {\n                return false\n\
    \            }\n        }\n    }\n    return stack.count == 0"]
stop_tokens:
- "\n}"
