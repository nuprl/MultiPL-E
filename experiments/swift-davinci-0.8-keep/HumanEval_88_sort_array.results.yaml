language: swift
name: HumanEval_88_sort_array
results:
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var oddArray = [Int]()\n    var\
    \ evenArray = [Int]()\n    var result = [Int]()\n    \n    for element in array\
    \ {\n        if element % 2 == 0 {\n            evenArray.append(element)\n  \
    \      } else {\n            oddArray.append(element)\n        }\n    }\n    \n\
    \    if (array.first! + array.last!) % 2 == 0 {\n        evenArray.sort { (a,\
    \ b) -> Bool in\n            return a > b\n        }\n        oddArray.sort {\
    \ (a, b) -> Bool in\n            return a > b\n        }\n    } else {\n     \
    \   evenArray.sort { (a, b) -> Bool in\n            return a < b\n        }\n\
    \        oddArray.sort { (a, b) -> Bool in\n            return a < b\n       \
    \ }\n    }\n    \n    var index = 0\n    while (index < array.count) {\n     \
    \   if array[index] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n        index += 1\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmptx12bnyu/tmptx12bnyu.swift:25: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ab311d25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab311a1c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab311a1c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab311a1c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab311a1bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmptx12bnyu                        0x0000559b5bd2e430 <unavailable> + 9264

    6    tmptx12bnyu                        0x0000559b5bd2d82d <unavailable> + 6189

    7    libc.so.6                          0x00002ab311f11460 __libc_start_main +
    245

    8    tmptx12bnyu                        0x0000559b5bd2d539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660014357
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    let odd: Bool = array.count % 2\
    \ != 0\n    let sorted = array.sorted()\n    return odd ? sorted : sorted.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp5aftk9mx/tmp5aftk9mx.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8aacd8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8aa9cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8aa9cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8aa9ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5aftk9mx                        0x00005650aeea47d6 <unavailable> + 6102

    5    libc.so.6                          0x00002af8aaec4460 __libc_start_main +
    245

    6    tmp5aftk9mx                        0x00005650aeea41b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660014357
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    let key\
    \ = array.first ?? 0\n    let index = array.count - 1\n    let sum = key + array[index]\n\
    \    if sum % 2 == 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by:\
    \ <)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b10dc4a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10dc19a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b10dc19a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b10dc19a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b10dc199bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b10dbf99e83 <unavailable> + 188035

    6    tmpjt_yu695                        0x000056224e633f13 <unavailable> + 7955

    7    tmpjt_yu695                        0x000056224e63351d <unavailable> + 5405

    8    libc.so.6                          0x00002b10dc68f460 __libc_start_main +
    245

    9    tmpjt_yu695                        0x000056224e633229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014357
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 1 {\n        return\
    \ array\n    }\n    let swapped_array =  swap_first_and_last(array: array)\n \
    \   let sum_odd_even = swapped_array.first! + swapped_array.last!\n    if sum_odd_even\
    \ % 2 == 0 {\n        return swapped_array.sorted(by: >)\n    }\n    return swapped_array.sorted(by:\
    \ <)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(array: [] as [Int])\
    \ == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpcim9nokg.swift:16:26: error: cannot find 'swap_first_and_last'\
    \ in scope\n    let swapped_array =  swap_first_and_last(array: array)\n     \
    \                    ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014356
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.count < 3 ? array :\
    \ array.sorted(by: { $0 + $1 % 2 == 0 ? $0 > $1 : $0 < $1 })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp9y_6ygf9/tmp9y_6ygf9.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af93c009c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af93bd00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af93bd00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af93bcff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9y_6ygf9                        0x000055d47f9bf746 <unavailable> + 5958

    5    libc.so.6                          0x00002af93c1f5460 __libc_start_main +
    245

    6    tmp9y_6ygf9                        0x000055d47f9bf129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014357
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var a = array\n    let first = a.removeFirst()\n\
    \    let last = a.removeLast()\n    let sum = first + last\n    var isOdd = false\n\
    \    if sum % 2 == 1 {\n        isOdd = true\n    }\n    if isOdd {\n        a.sort()\n\
    \    } else {\n        a.sort(by: {$0 > $1})\n    }\n    return [first] + a +\
    \ [last]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:623: Fatal error: Can''t remove
    first element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002afab14b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afab11b0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afab11b0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afab11b013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afab11afbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002afab119fff0 RangeReplaceableCollection.removeFirst()
    + 272

    6    tmpsx7zgvqt                        0x000055bc68843020 <unavailable> + 8224

    7    tmpsx7zgvqt                        0x000055bc6884269d <unavailable> + 5789

    8    libc.so.6                          0x00002afab16a5460 __libc_start_main +
    245

    9    tmpsx7zgvqt                        0x000055bc688423a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660014357
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    if array.count\
    \ > 2 {\n        let sum = array[0] + array[array.count - 1]\n        if sum %\
    \ 2 == 0 {\n            return array.sorted { $0 > $1 }\n        } else {\n  \
    \          return array.sorted { $0 < $1 }\n        }\n    }\n    return []\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmprhb_nzu6/tmprhb_nzu6.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b0fa3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b0f731b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b0f731988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b0f7307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprhb_nzu6                        0x000055624e2b1a62 <unavailable> + 6754

    5    libc.so.6                          0x00002b9b0fc26460 __libc_start_main +
    245

    6    tmprhb_nzu6                        0x000055624e2b1179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014357
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpca0ltsqg/tmpca0ltsqg.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad51abc0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad51a8b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad51a8b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad51a8b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpca0ltsqg                        0x000055de3ca5547d <unavailable> + 5245

    5    libc.so.6                          0x00002ad51adac460 __libc_start_main +
    245

    6    tmpca0ltsqg                        0x000055de3ca54fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013863
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var mutableArray = array\n    if\
    \ array.isEmpty {\n        return []\n    }\n    if array.count == 1 {\n     \
    \   return array\n    }\n    for i in 0..<array.count - 1 {\n        for j in\
    \ i + 1..<array.count {\n            if array[i] > array[j] {\n              \
    \  mutableArray.swapAt(i, j)\n            }\n        }\n    }\n    if array.first!\
    \ + array.last! % 2 == 0 {\n        mutableArray.reverse()\n    }\n    return\
    \ mutableArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp5fngkmrj/tmp5fngkmrj.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b672552ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6725225b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6725225988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67252247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5fngkmrj                        0x0000563f6df16aa6 <unavailable> + 6822

    5    libc.so.6                          0x00002b672571a460 __libc_start_main +
    245

    6    tmp5fngkmrj                        0x0000563f6df16489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660014357
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    return array.sorted {\n        $0.isEven == $1.isEven ? $0 < $1\
    \ : $0 > $1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpmzibun9e.swift:15:12: error: value of type 'Int' has no member\
    \ 'isEven'\n        $0.isEven == $1.isEven ? $0 < $1 : $0 > $1\n        ~~ ^~~~~~\n\
    /tmp/tmpmzibun9e.swift:15:25: error: value of type 'Int' has no member 'isEven'\n\
    \        $0.isEven == $1.isEven ? $0 < $1 : $0 > $1\n                     ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014356
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sortedArray = array\n    if\
    \ let first = sortedArray.first, let last = sortedArray.last, (first + last) %\
    \ 2 == 0 {\n        sortedArray.sort(by: { $0 > $1 })\n    } else {\n        sortedArray.sort(by:\
    \ { $0 < $1 })\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014357
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result: [Int] = array.sorted()\n\
    \    if array.isEmpty || array.count == 1 {\n        return array\n    }\n   \
    \ if array[0] + array[array.count - 1] % 2 == 0 {\n        result = array.sorted().reversed()\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpkswd05ab/tmpkswd05ab.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab947e30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab947b27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab947b27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab947b267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkswd05ab                        0x000055b24112aa54 <unavailable> + 6740

    5    libc.so.6                          0x00002ab94801c460 __libc_start_main +
    245

    6    tmpkswd05ab                        0x000055b24112a2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014357
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    var result = array\n    let isEven: Bool = array.first! + array.last!\
    \ % 2 == 0\n    let range = 0..<result.count\n    result[range].sort {\n     \
    \   if isEven {\n            return $0 > $1\n        } else {\n            return\
    \ $0 < $1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_wi09kux/tmp_wi09kux.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ac918bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ac8e82b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ac8e82988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ac8e817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wi09kux                        0x000055a007128bb4 <unavailable> + 7092

    5    libc.so.6                          0x00002b6ac9377460 __libc_start_main +
    245

    6    tmp_wi09kux                        0x000055a007128409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660014357
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 0 else { return\
    \ [] }\n    var arr = array\n    let isEven = (array[0] + array[array.count -\
    \ 1]) % 2 == 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count\
    \ {\n            if isEven {\n                if arr[i] < arr[j] {\n         \
    \           arr.swapAt(i, j)\n                }\n            } else {\n      \
    \          if arr[i] > arr[j] {\n                    arr.swapAt(i, j)\n      \
    \          }\n            }\n        }\n    }\n    return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014357
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    let first = array.first ?? 0\n \
    \   let last = array.last ?? 0\n    let odd = (first + last) % 2 != 0\n    let\
    \ sorted = array.sorted(by: odd ? > : <)\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpx5m5oz6b.swift:16:41: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: odd ? > : <)\n         \
    \                               ^~\n                                         \n\
    /tmp/tmpx5m5oz6b.swift:16:43: error: expected expression after '?' in ternary\
    \ expression\n    let sorted = array.sorted(by: odd ? > : <)\n               \
    \                           ^\n/tmp/tmpx5m5oz6b.swift:15:9: warning: initialization\
    \ of immutable value 'odd' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    let odd = (first + last) % 2 != 0\n    ~~~~^~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660014356
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    if array.count\
    \ == 2 {\n        if array[0] + array[1] % 2 == 0 {\n            return [array[1],\
    \ array[0]]\n        } else {\n            return array\n        }\n    }\n  \
    \  var sum = array[0] + array[array.count - 1]\n    var result = array\n    if\
    \ sum % 2 == 0 {\n        result.sort { $0 > $1 }\n    } else {\n        result.sort\
    \ { $0 < $1 }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpnsmcd3sa/tmpnsmcd3sa.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae575fddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae575cd4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae575cd4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae575cd37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnsmcd3sa                        0x0000563611baca72 <unavailable> + 6770

    5    libc.so.6                          0x00002ae5761c9460 __libc_start_main +
    245

    6    tmpnsmcd3sa                        0x0000563611bac189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660014357
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    let nums = array.count\n    let\
    \ res = array.sorted(by: {\n        if nums % 2 == 0 {\n            return $0\
    \ > $1\n        } else {\n            return $0 < $1\n        }\n    })\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as\
    \ [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpn3mnwunq/tmpn3mnwunq.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d7efe8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d7ecdfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d7ecdf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d7ecde7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn3mnwunq                        0x0000562c8e0e7746 <unavailable> + 5958

    5    libc.so.6                          0x00002b6d7f1d4460 __libc_start_main +
    245

    6    tmpn3mnwunq                        0x0000562c8e0e7129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014357
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var copy = array\n    copy.sort\
    \ { (a, b) -> Bool in\n        return (array.first! + array.last!) % 2 == 0 ?\
    \ b < a : a < b\n    }\n    return copy\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014357
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    if array.count\
    \ % 2 == 0 {\n        var result = array\n        for index in 0..<array.count/2\
    \ {\n            result[index*2] = array[array.count-index-1]\n            result[index*2+1]\
    \ = array[index]\n        }\n        return result\n    } else {\n        var\
    \ result = array\n        for index in 0..<array.count/2 {\n            result[index*2]\
    \ = array[array.count-index-1]\n            result[index*2+1] = array[index]\n\
    \        }\n        result[array.count-1] = array[array.count/2]\n        return\
    \ result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpwogitvee/tmpwogitvee.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa25332c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa25029b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa25029988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa250287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwogitvee                        0x000055c778c28876 <unavailable> + 6262

    5    libc.so.6                          0x00002baa2551e460 __libc_start_main +
    245

    6    tmpwogitvee                        0x000055c778c28259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660014357
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n  let reverse = array.count > 0 && (array[0]\
    \ + array[array.count - 1]) % 2 == 0\n  return array.sorted(by: { $0 < $1 })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpgqw_ltzh/tmpgqw_ltzh.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b997e0d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b997ddcdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b997ddcd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b997ddcc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgqw_ltzh                        0x000055a7a2878924 <unavailable> + 6436

    5    libc.so.6                          0x00002b997e2c2460 __libc_start_main +
    245

    6    tmpgqw_ltzh                        0x000055a7a2878179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014357
