language: swift
name: HumanEval_85_add
results:
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    //let ans = lst.enumerated().filter {$0.0 % 2 != 0}.map\
    \ {$0.1}\n    let ans = lst.enumerated().filter {$0.0 % 2 != 0}.map {$0.1}.reduce(0,\
    \ +)\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmparcwgg6h/tmparcwgg6h.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acddf4acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acddf1a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acddf1a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acddf1a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmparcwgg6h                        0x000055af0927a707 <unavailable> + 5895

    5    libc.so.6                          0x00002acddf698460 __libc_start_main +
    245

    6    tmparcwgg6h                        0x000055af0927a299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013736
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.filter({$0 % 2 == 0}).reduce(0, +)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpjqzccavo/tmpjqzccavo.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1ec68ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1ec385b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1ec385988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1ec3847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjqzccavo                        0x000055c58d0c74ca <unavailable> + 5322

    5    libc.so.6                          0x00002ac1ec87a460 __libc_start_main +
    245

    6    tmpjqzccavo                        0x000055c58d0c7139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013736
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var total = 0\n    for (index, number) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && number % 2 == 0 {\n            total += number\n\
    \        }\n    }\n    return total\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013736
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    \n    var addSum = 0\n    \n    for index in lst.indices\
    \ where index % 2 != 0 {\n        addSum += (lst[index] % 2 == 0) ? lst[index]\
    \ : 0\n    }\n    \n    return addSum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013736
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    var counter = 0\n    for i in lst {\n\
    \        if counter % 2 != 0 && i % 2 == 0 {\n            sum += i\n        }\n\
    \        counter += 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013736
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, num) in lst.enumerated() {\n\
    \        if (index % 2 == 1) && (num % 2 == 0) {\n            sum += num\n   \
    \     }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013736
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({ $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }).map({ $0.element }).reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    // This can be done with a lot of map and filter but since\
    \ the order of execution of map and filter is not specified,\n    // I find using\
    \ a loop cleaner\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 == 1 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013736
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, item) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && item % 2 == 0 {\n            sum += item\n \
    \       }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013736
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n  var sum = 0\n  for (index, num) in lst.enumerated() {\n \
    \   if index % 2 != 0 && num % 2 == 0 {\n      sum += num\n    }\n  }\n  return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\n\
    assert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) ==\
    \ 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013736
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.filter{$0 % 2 == 0}.filter{lst.index(of: $0)!\
    \ % 2 != 0}.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpgkjg47wc/tmpgkjg47wc.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d50516c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d5020db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d5020d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d5020c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgkjg47wc                        0x000056384eee3802 <unavailable> + 6146

    5    libc.so.6                          0x00002b8d50702460 __libc_start_main +
    245

    6    tmpgkjg47wc                        0x000056384eee31e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013736
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for i in 1..<lst.count {\n        if lst[i]\
    \ % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpz1i2xnzu/tmpz1i2xnzu.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1c81d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1c7ec9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1c7ec9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1c7ec87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz1i2xnzu                        0x000055bc9baf3617 <unavailable> + 5655

    5    libc.so.6                          0x00002ab1c83be460 __libc_start_main +
    245

    6    tmpz1i2xnzu                        0x000055bc9baf31a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013736
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) {\n        (result, tuple)\
    \ in\n        let (index, element) = tuple\n        return index % 2 == 1 && element\
    \ % 2 == 0 ? result + element : result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013736
- exit_code: -4
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var num = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 {\n            num += value\n        }\n    }\n\
    \    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: Exception
  stderr: 'tmpxc27kh5w/tmpxc27kh5w.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b94563c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b9425ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b9425a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b942597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxc27kh5w                        0x000055eefb130687 <unavailable> + 5767

    5    libc.so.6                          0x00002b5b9474f460 __libc_start_main +
    245

    6    tmpxc27kh5w                        0x000055eefb130219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013736
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({$0.offset % 2 != 0}).filter({$0.element\
    \ % 2 == 0}).reduce(0, {$0 + $1.element})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var result = 0\n    for (i, val) in lst.enumerated() {\n\
    \        if i % 2 != 0 && val % 2 == 0 {\n            result += val\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013736
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    let result = lst.enumerated().filter { $0.0 % 2 != 0 }.filter\
    \ { $0.1 % 2 == 0 }.map { $0.1 }.reduce(0, +)\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013736
