language: swift
name: HumanEval_133_sum_squares
results:
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return Int(lst.map { pow(ceil($0), 2) }.reduce(0, +))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprstiiu75.swift:12:26: error: cannot find 'pow' in scope\n    return\
    \ Int(lst.map { pow(ceil($0), 2) }.reduce(0, +))\n                         ^~~\n\
    /tmp/tmprstiiu75.swift:12:30: error: cannot find 'ceil' in scope\n    return Int(lst.map\
    \ { pow(ceil($0), 2) }.reduce(0, +))\n                             ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: -4
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmpn8a2mi58/tmpn8a2mi58.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9bfbd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9bf8ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9bf8ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9bf8cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn8a2mi58                        0x000055c704925351 <unavailable> + 4945

    5    libc.so.6                          0x00002ab9bfdc3460 __libc_start_main +
    245

    6    tmpn8a2mi58                        0x000055c704924fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659820994
- exit_code: -4
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmpn8a2mi58/tmpn8a2mi58.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9bfbd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9bf8ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9bf8ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9bf8cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn8a2mi58                        0x000055c704925351 <unavailable> + 4945

    5    libc.so.6                          0x00002ab9bfdc3460 __libc_start_main +
    245

    6    tmpn8a2mi58                        0x000055c704924fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659820994
- exit_code: -4
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmpn8a2mi58/tmpn8a2mi58.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9bfbd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9bf8ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9bf8ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9bf8cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn8a2mi58                        0x000055c704925351 <unavailable> + 4945

    5    libc.so.6                          0x00002ab9bfdc3460 __libc_start_main +
    245

    6    tmpn8a2mi58                        0x000055c704924fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659820994
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map{Int(ceil($0))}.reduce(0){$0 + $1 * $1}\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpuj04e88u.swift:12:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.reduce(0){$0 + $1 * $1}\n                       ^~~~\n"
  stdout: ''
  timestamp: 1659820994
- exit_code: -4
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmpn8a2mi58/tmpn8a2mi58.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9bfbd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9bf8ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9bf8ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9bf8cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn8a2mi58                        0x000055c704925351 <unavailable> + 4945

    5    libc.so.6                          0x00002ab9bfdc3460 __libc_start_main +
    245

    6    tmpn8a2mi58                        0x000055c704924fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659820994
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n  return lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpkp_fet1r.swift:12:24: error: cannot find 'ceil' in scope\n  return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \  ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return Int(lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpg9sc5o5i.swift:12:26: error: cannot find 'ceil' in scope\n    return\
    \ Int(lst.map { ceil($0) }.map { $0 * $0 }.reduce(0, +))\n                   \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1659820994
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var result = 0\n    for n in lst {\n        result += Int(ceil(n))\
    \ * Int(ceil(n))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmprso_j4ld.swift:14:23: error: cannot find 'ceil' in scope\n    \
    \    result += Int(ceil(n)) * Int(ceil(n))\n                      ^~~~\n/tmp/tmprso_j4ld.swift:14:38:\
    \ error: cannot find 'ceil' in scope\n        result += Int(ceil(n)) * Int(ceil(n))\n\
    \                                     ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpvywwiyb4.swift:12:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1659820994
- exit_code: -4
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmpn8a2mi58/tmpn8a2mi58.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9bfbd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9bf8ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9bf8ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9bf8cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn8a2mi58                        0x000055c704925351 <unavailable> + 4945

    5    libc.so.6                          0x00002ab9bfdc3460 __libc_start_main +
    245

    6    tmpn8a2mi58                        0x000055c704924fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659820994
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var square_sum = 0\n    for num in lst {\n        square_sum +=\
    \ Int(ceil(num)) * Int(ceil(num))\n    }\n    return square_sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmppoi9oq2i.swift:14:27: error: cannot find 'ceil' in scope\n    \
    \    square_sum += Int(ceil(num)) * Int(ceil(num))\n                         \
    \ ^~~~\n/tmp/tmppoi9oq2i.swift:14:44: error: cannot find 'ceil' in scope\n   \
    \     square_sum += Int(ceil(num)) * Int(ceil(num))\n                        \
    \                   ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map {Int(ceil($0))}.reduce(0) { $0 + ($1 * $1) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3qed7ryu.swift:12:25: error: cannot find 'ceil' in scope\n    return\
    \ lst.map {Int(ceil($0))}.reduce(0) { $0 + ($1 * $1) }\n                     \
    \   ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map{Int(ceil($0))}.reduce(0, combine: {$0 + $1 * $1})\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpt46hy2xr.swift:12:24: error: cannot find 'ceil' in scope\n    return\
    \ lst.map{Int(ceil($0))}.reduce(0, combine: {$0 + $1 * $1})\n                \
    \       ^~~~\n"
  stdout: ''
  timestamp: 1659820994
- exit_code: -4
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return Int(lst.map {$0 * $0}.reduce(0, +))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: Exception
  stderr: 'tmpp617l2ok/tmpp617l2ok.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13ddeadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13ddba4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13ddba4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13ddba37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp617l2ok                        0x000055bbc457278b <unavailable> + 6027

    5    libc.so.6                          0x00002b13de099460 __libc_start_main +
    245

    6    tmpp617l2ok                        0x000055bbc4572159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for i in lst {\n        sum += Int(ceil(i * i))\n\
    \    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpvdpohfev.swift:14:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(i * i))\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659820994
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    return lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpvywwiyb4.swift:12:26: error: cannot find 'ceil' in scope\n    return\
    \ lst.map { Int(ceil($0)) }.reduce(0) { $0 + $1 * $1 }\n                     \
    \    ^~~~\n"
  stdout: ''
  timestamp: 1659820994
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var squares: [Int] = [Int]()\n    for item in lst {\n        squares.append(Int(ceil(item\
    \ * item)))\n    }\n    return squares.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 3.0, 5.0, 7.0]) == 84)\n\
    assert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\nassert(sum_squares(lst: [-2.4,\
    \ 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0, 1.0, 15.0, 2.0]) == 10230)\n\
    assert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\nassert(sum_squares(lst:\
    \ [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4, 17.9, 18.9, 19.9])\
    \ == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst: [-1.0])\
    \ == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp3klo6ewe.swift:14:28: error: cannot find 'ceil' in scope\n    \
    \    squares.append(Int(ceil(item * item)))\n                           ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    let result = lst.map({ Int(ceil($0)) }).reduce(0, { $0 + $1 *\
    \ $1 })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmpxx1iak39.swift:12:32: error: cannot find 'ceil' in scope\n    let\
    \ result = lst.map({ Int(ceil($0)) }).reduce(0, { $0 + $1 * $1 })\n          \
    \                     ^~~~\n"
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "\n/// You are given a list of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given list,\n/// round each element in the list to\
    \ the upper int(Ceiling) first.\n/// Examples:\n/// For lst = [1,2,3] the output\
    \ should be 14\n/// For lst = [1,4,9] the output should be 98\n/// For lst = [1,3,5,7]\
    \ the output should be 84\n/// For lst = [1.4,4.2,0] the output should be 29\n\
    /// For lst = [-2.4,1,1] the output should be 6\nfunc sum_squares(lst: [Double])\
    \ -> Int {\n    var sum = 0\n    for num in lst {\n        sum += Int(ceil(num\
    \ * num))\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sum_squares(lst:\
    \ [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst: [1.0, 2.0, 3.0]) == 14)\nassert(sum_squares(lst:\
    \ [1.0, 3.0, 5.0, 7.0]) == 84)\nassert(sum_squares(lst: [1.4, 4.2, 0.0]) == 29)\n\
    assert(sum_squares(lst: [-2.4, 1.0, 1.0]) == 6)\nassert(sum_squares(lst: [100.0,\
    \ 1.0, 15.0, 2.0]) == 10230)\nassert(sum_squares(lst: [10000.0, 10000.0]) == 200000000)\n\
    assert(sum_squares(lst: [-1.4, 4.6, 6.3]) == 75)\nassert(sum_squares(lst: [-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\nassert(sum_squares(lst: [0.0]) == 0)\nassert(sum_squares(lst:\
    \ [-1.0]) == 1)\nassert(sum_squares(lst: [-1.0, 1.0, 0.0]) == 2)"
  status: SyntaxError
  stderr: "/tmp/tmp0r2re7pe.swift:14:20: error: cannot find 'ceil' in scope\n    \
    \    sum += Int(ceil(num * num))\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659821062
