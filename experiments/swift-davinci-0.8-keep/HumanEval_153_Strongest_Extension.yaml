name: HumanEval_153_Strongest_Extension
language: swift
prompt: "\n/// You will be given the name of a class (a string) and a list of extensions.\n\
  /// The extensions are to be used to load additional classes to the class. The\n\
  /// strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  /// letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n/// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n/// You should find the strongest extension and return a string in this \n///\
  \ format: ClassName.StrongestExtensionName.\n/// If there are two or more extensions\
  \ with the same strength, you should\n/// choose the one that comes first in the\
  \ list.\n/// For example, if you are given \"Slices\" as the class and a list of\
  \ the\n/// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  /// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n/// (its strength is -1).\n/// Example:\n/// for Strongest_Extension('my_class',\
  \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name: String,\
  \ extensions: [String]) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(Strongest_Extension(class_name: \"Watashi\"\
  , extensions: [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\nassert(Strongest_Extension(class_name:\
  \ \"Boku123\", extensions: [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
  ]) == \"Boku123.YEs.WeCaNe\")\nassert(Strongest_Extension(class_name: \"__YESIMHERE\"\
  , extensions: [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
  ]) == \"__YESIMHERE.NuLl__\")\nassert(Strongest_Extension(class_name: \"K\", extensions:\
  \ [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\nassert(Strongest_Extension(class_name:\
  \ \"__HAHA\", extensions: [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\"\
  )\nassert(Strongest_Extension(class_name: \"YameRore\", extensions: [\"HhAas\",\
  \ \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\
  assert(Strongest_Extension(class_name: \"finNNalLLly\", extensions: [\"Die\", \"\
  NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\nassert(Strongest_Extension(class_name:\
  \ \"_\", extensions: [\"Bb\", \"91245\"]) == \"_.Bb\")\nassert(Strongest_Extension(class_name:\
  \ \"Sp\", extensions: [\"671235\", \"Bb\"]) == \"Sp.671235\")"
completions: ["\t// Your code here", "    // Find the strongest extension.\n    let\
    \ strongest = extensions.reduce(into: (extension: \"\", CAP: 0, SM: 0)) {\n  \
    \      if $1.uppercased() == $1 {\n            $0.CAP += 1\n        } else {\n\
    \            $0.SM += 1\n        }\n        let tmp = $0.CAP - $0.SM\n       \
    \ if tmp > $0.CAP - $0.SM {\n            $0.extension = $1\n        }\n    }\n\
    \    return class_name + \".\" + strongest.extension", "\tvar strongest_extension_strength\
    \ = 0.0\n\tvar strongest_extension_string = \"\"\n\tfor ext in extensions {\n\t\
    \tvar ext_strength = Double(get_number_of_caps(string: ext)) - Double(get_number_of_lower_case(string:\
    \ ext))\n\t\tif ext_strength > strongest_extension_strength {\n\t\t\tstrongest_extension_strength\
    \ = ext_strength\n\t\t\tstrongest_extension_string = ext\n\t\t}\n\t}\n\treturn\
    \ class_name + \".\" + strongest_extension_string", "    var class_name = class_name,\
    \ strongest_extension = extensions[0]\n    var strongest_strength = 0.0\n    for\
    \ var ext in extensions {\n        let upper_count = ext.uppercaseString.characters.count\n\
    \        let lower_count = ext.lowercaseString.characters.count\n        let strength\
    \ = Double(upper_count - lower_count)\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength\n            strongest_extension\
    \ = ext\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"",
  "\tlet strongest = extensions.map { (extension_name) -> Double in\n\t\tvar cap =\
    \ 0\n\t\tvar sm = 0\n\t\tfor char in extension_name {\n\t\t\tif char.isUppercase\
    \ {\n\t\t\t\tcap += 1\n\t\t\t} else {\n\t\t\t\tsm += 1\n\t\t\t}\n\t\t}\n\t\treturn\
    \ Double(cap - sm)\n\t}\n\treturn \"\\(class_name).\\(extensions[strongest.index(of:\
    \ strongest.max()!)!])\"", "    let class_name = class_name\n    let extensions\
    \ = extensions\n    var strongest = [\"name\": \"\", \"strength\": 0.0]\n    for\
    \ extension_name in extensions {\n        var small_letter_count = 0\n       \
    \ var capital_letter_count = 0\n        for letter in extension_name {\n     \
    \       if letter.isLowercase {\n                small_letter_count += 1\n   \
    \         } else {\n                capital_letter_count += 1\n            }\n\
    \        }\n        let strength = Double(capital_letter_count) - Double(small_letter_count)\n\
    \        if strength > strongest[\"strength\"] as! Double {\n            strongest[\"\
    name\"] = extension_name\n            strongest[\"strength\"] = strength\n   \
    \     }\n    }\n    return class_name + \".\" + (strongest[\"name\"] as! String)",
  "    var strongest: Double = 0\n    var strongest_extension = \"\"\n    for ext\
    \ in extensions {\n        var upper = 0\n        var lower = 0\n        for s\
    \ in ext {\n            if s.isLowercase {\n                lower += 1\n     \
    \       } else {\n                upper += 1\n            }\n        }\n     \
    \   let strength = Double(upper) - Double(lower)\n        if strength > strongest\
    \ {\n            strongest = strength\n            strongest_extension = ext\n\
    \        }\n    }\n    return \"\\(class_name).\\(strongest_extension)\"", "\t\
    var strongest_extension = \"\";\n\tvar strongest_extension_strength = 0;\n\t\n\
    \tfor ext in extensions {\n\t\tvar num_upper = 0;\n\t\tvar num_lower = 0;\n\t\t\
    for char in ext {\n\t\t\tif char.isUppercase {\n\t\t\t\tnum_upper += 1;\n\t\t\t\
    } else {\n\t\t\t\tnum_lower += 1;\n\t\t\t}\n\t\t}\n\t\tif (num_upper - num_lower)\
    \ > strongest_extension_strength {\n\t\t\tstrongest_extension = ext;\n\t\t\tstrongest_extension_strength\
    \ = num_upper - num_lower;\n\t\t}\n\t}\n\t\n\treturn class_name + \".\" + strongest_extension;",
  "    var strongestExtension = \"\"\n    var strongestExtensionStrength = 0.0\n \
    \   for extension in extensions {\n        let strength = Double(extension.filter({$0.isUppercase}).count)\
    \ - Double(extension.filter({$0.isLowercase}).count)\n        if (strength > strongestExtensionStrength)\
    \ {\n            strongestExtensionStrength = strength\n            strongestExtension\
    \ = extension\n        }\n    }\n    return \"\\(class_name).\\(strongestExtension)\"",
  "    var dict = [Int: String]()\n    for ext in extensions {\n        var cap =\
    \ 0\n        var sm = 0\n        for c in ext {\n            if c.isUppercase\
    \ {\n                cap += 1\n            } else {\n                sm += 1\n\
    \            }\n        }\n        dict[cap - sm] = ext\n    }\n    let max =\
    \ dict.keys.max()\n    return \"\\(class_name).\\(dict[max!]!)\"", "  var strength\
    \ = -Double.infinity\n  var highest: String = \"\"\n  for extension in extensions\
    \ {\n    let caps = extension.characters.filter { $0.isUppercase }.count\n   \
    \ let sml = extension.characters.filter { $0.isLowercase }.count\n    let curr_strength\
    \ = Double(caps - sml)\n    if curr_strength > strength {\n      strength = curr_strength\n\
    \      highest = extension\n    }\n  }\n  return \"\\(class_name).\\(highest)\"",
  "  var strongest = \"\"\n  var strongest_strength = 0\n  for ext in extensions {\n\
    \    let cap = ext.filter { $0.isUppercase }.count\n    let sm = ext.filter {\
    \ $0.isLowercase }.count\n    let strength = Float(cap - sm)\n    if strength\
    \ == Float(strongest_strength) {\n      continue\n    }\n    if strength > Float(strongest_strength)\
    \ {\n      strongest = ext\n      strongest_strength = cap - sm\n    }\n  }\n\
    \  return \"\\(class_name).\\(strongest)\"", "    var strongestExtension = \"\"\
    ;\n    var strongestStrength = 0;\n    for ext in extensions {\n        let letters\
    \ = ext.characters;\n        var strength = 0;\n        for letter in letters\
    \ {\n            if letter >= \"A\" && letter <= \"Z\" {\n                strength\
    \ += 1;\n            } else if letter >= \"a\" && letter <= \"z\" {\n        \
    \        strength -= 1;\n            }\n        }\n        if strength > strongestStrength\
    \ {\n            strongestStrength = strength;\n            strongestExtension\
    \ = ext;\n        }\n    }\n    return \"\\(class_name).\\(strongestExtension)\"\
    ;", "    // The strength of the extension is as follows:\n    // Let CAP be the\
    \ number of the uppercase letters in the extension's name,\n    // and let SM\
    \ be the number of lowercase letters in the extension's name,\n    // the strength\
    \ is given by the fraction CAP - SM.\n    func strength_of_extension(extension_name:\
    \ String) -> Float {\n        var CAP = 0, SM = 0\n        for letter in extension_name\
    \ {\n            if letter.isUppercase {\n                CAP += 1\n         \
    \   } else {\n                SM += 1\n            }\n        }\n        return\
    \ Float(CAP) - Float(SM)\n    }\n    // Strongest extension's name\n    var strongest_extension_name\
    \ = \"\"\n    // Strongest extension's strength\n    var strongest_extension_strength\
    \ = 0.0\n    for extension_name in extensions {\n        let strength = strength_of_extension(extension_name:\
    \ extension_name)\n        if strength > strongest_extension_strength {\n    \
    \        strongest_extension_name = extension_name\n            strongest_extension_strength\
    \ = strength\n        }\n    }\n    return \"\\(class_name).\\(strongest_extension_name)\"",
  '    return ""', "\tvar strongest_extension_name = \"\"\n\tvar strongest_extension_strength\
    \ = 0.0\n\tfor (index,extension_name) in extensions.enumerated() {\n\t\tvar upper_letters\
    \ = 0\n\t\tvar lower_letters = 0\n\t\tfor letter in extension_name {\n\t\t\tif\
    \ letter.isUppercase {\n\t\t\t\tupper_letters += 1\n\t\t\t} else {\n\t\t\t\tlower_letters\
    \ += 1\n\t\t\t}\n\t\t}\n\t\tlet strength = Double(upper_letters) - Double(lower_letters)\n\
    \t\tif strength > strongest_extension_strength {\n\t\t\tstrongest_extension_strength\
    \ = strength\n\t\t\tstrongest_extension_name = extension_name\n\t\t} else if strength\
    \ == strongest_extension_strength {\n\t\t\tif index < extensions.index(of: strongest_extension_name)!\
    \ {\n\t\t\t\tstrongest_extension_name = extension_name\n\t\t\t}\n\t\t}\n\t}\n\t\
    return \"\\(class_name).\\(strongest_extension_name)\"", '    return ""', "\t\
    return \"my_class.AA\"", "\tvar strongestExt = \"\";\n\tvar strongestExtStrength\
    \ = 0;\n\tfor ext in extensions {\n\t\tlet cap = [Character](ext.uppercaseString);\n\
    \t\tlet sm = [Character](ext.lowercaseString);\n\t\tvar extStrength = 0;\n\t\t\
    for ch in cap {\n\t\t\tif let ascii = ch.asciiValue {\n\t\t\t\textStrength +=\
    \ Int(ascii);\n\t\t\t}\n\t\t}\n\t\tfor ch in sm {\n\t\t\tif let ascii = ch.asciiValue\
    \ {\n\t\t\t\textStrength -= Int(ascii);\n\t\t\t}\n\t\t}\n\t\tif extStrength >\
    \ strongestExtStrength {\n\t\t\tstrongestExtStrength = extStrength;\n\t\t\tstrongestExt\
    \ = ext;\n\t\t}\n\t}\n\treturn class_name + \".\" + strongestExt;", "    var str\
    \ = \"\"\n    var strongest = 0\n    for i in 0..<extensions.count {\n       \
    \ var cap = 0\n        var sm = 0\n        for j in 0..<extensions[i].count {\n\
    \            if extensions[i][extensions[i].index(extensions[i].startIndex, offsetBy:\
    \ j)].isUppercase {\n                cap += 1\n            } else {\n        \
    \        sm += 1\n            }\n        }\n        if cap - sm > strongest {\n\
    \            strongest = cap - sm\n            str = extensions[i]\n        }\n\
    \    }\n    return class_name + \".\" + str"]
stop_tokens:
- "\n}"
