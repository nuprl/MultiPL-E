name: HumanEval_56_correct_bracketing
language: swift
prompt: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
  \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
  <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
  <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
  \ String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") ==\
  \ true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
  \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
  ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
  \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
  \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\nassert(correct_bracketing(brackets:\
  \ \"<<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>><<>\")\
  \ == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)"
completions: ["    var stack = Stack<Character>()\n    var open = false\n    for c\
    \ in brackets {\n        if c == \"<\" {\n            stack.push(c)\n        \
    \    open = true\n        } else if c == \">\" {\n            if stack.isEmpty()\
    \ {\n                return false\n            }\n            stack.pop()\n  \
    \      }\n    }\n    return stack.isEmpty() && open", "    var brackets = brackets\n\
    \    while let range = brackets.range(of: \"<>\") {\n        brackets.replaceSubrange(range,\
    \ with: \"\")\n    }\n    return brackets.isEmpty", "  var left = 0\n  for bracket\
    \ in brackets {\n    if bracket == \"<\" {\n      left += 1\n    } else if bracket\
    \ == \">\" {\n      left -= 1\n    }\n    if left < 0 {\n      return false\n\
    \    }\n  }\n  return left == 0", "    var bracketStack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            bracketStack.push(element:\
    \ bracket)\n        } else if bracket == \">\" {\n            if let elem = bracketStack.pop()\
    \ {\n                if elem != \"<\" {\n                    return false\n  \
    \              }\n            } else {\n                return false\n       \
    \     }\n        }\n    }\n    return bracketStack.isEmpty()", "    let left:\
    \ Character = \"<\"\n    let right: Character = \">\"\n    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == left {\n            stack.push(bracket)\n\
    \        } else if bracket == right {\n            if stack.isEmpty() {\n    \
    \            return false\n            } else {\n                stack.pop()\n\
    \            }\n        }\n    }\n    return stack.isEmpty()", "    let count\
    \ = brackets.count\n    if count % 2 != 0 {\n        return false\n    }\n   \
    \ var _brackets = Array(brackets)\n    var open = [Character]()\n    for i in\
    \ 0..<count {\n        if _brackets[i] == \"<\" {\n            open.append(\"\
    <\")\n        } else {\n            if open.count == 0 {\n                return\
    \ false\n            }\n            open.removeLast()\n        }\n    }\n    return\
    \ open.count == 0", '    return true', "    var stack = Stack<String>()\n    for\
    \ char in brackets {\n        if char == \"<\" {\n            stack.push(\">\"\
    )\n        } else if stack.isEmpty() {\n            return false\n        } else\
    \ {\n            _ = stack.pop()\n        }\n    }\n    return stack.isEmpty()",
  "    var stack = Stack<Character>()\n    for bracket in brackets {\n        if bracket\
    \ == \"<\" {\n            stack.push(bracket)\n        } else if stack.isEmpty()\
    \ {\n            return false\n        } else {\n            stack.pop()\n   \
    \     }\n    }\n    return stack.isEmpty()", "    var stack: [Character] = []\n\
    \    for c in brackets {\n        if c == \"<\" {\n            stack.append(c)\n\
    \        } else if c == \">\" {\n            if stack.popLast() == nil {\n   \
    \             return false\n            }\n        }\n    }\n    return stack.isEmpty",
  "    var stack = [Character]()\n    for bracket in brackets {\n        if bracket\
    \ == \"<\" {\n            stack.append(bracket)\n        } else if bracket ==\
    \ \">\" {\n            if stack.isEmpty {\n                return false\n    \
    \        } else {\n                stack.removeLast()\n            }\n       \
    \ }\n    }\n    return stack.isEmpty", "    // TODO\n    return false", "    var\
    \ opener: Int = 0\n    for char in brackets {\n        if char == \"<\" {\n  \
    \          opener = opener + 1\n        } else if char == \">\" {\n          \
    \  opener = opener - 1\n        }\n        if opener < 0 {\n            return\
    \ false\n        }\n    }\n    return opener == 0", "    var open: Int = 0\n \
    \   var close: Int = 0\n    for bracket in brackets {\n        if bracket == \"\
    <\" {\n            open += 1\n        } else if bracket == \">\" {\n         \
    \   close += 1\n        }\n    }\n    return open == close", "    var stack: Stack<String>\
    \ = Stack<String>()\n    for character in brackets {\n        switch character\
    \ {\n        case \"<\":\n            stack.push(\"<\")\n        case \">\":\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                _ = stack.pop()\n            }\n        default:\n      \
    \      return false\n        }\n    }\n    return stack.isEmpty", "  var openBrackets\
    \ = 0\n  for char in brackets {\n    if char == \"<\" {\n      openBrackets++\n\
    \    } else if char == \">\" {\n      openBrackets--\n    }\n    if openBrackets\
    \ < 0 {\n      return false\n    }\n  }\n  return openBrackets == 0", "    var\
    \ count = 0\n    for bracket in brackets {\n        if bracket == \"<\" {\n  \
    \          count += 1\n        } else if bracket == \">\" {\n            count\
    \ -= 1\n        }\n        if count < 0 {\n            return false\n        }\n\
    \    }\n    return count == 0", "    var stack = Stack<Character>()\n    for char\
    \ in brackets {\n        if char == \"<\" {\n            stack.push(char)\n  \
    \      } else if char == \">\" {\n            if stack.isEmpty {\n           \
    \     return false\n            } else {\n                stack.pop()\n      \
    \      }\n        }\n    }\n    return stack.isEmpty", "    var counter = 0\n\
    \    for c in brackets {\n        switch c {\n        case \"<\":\n          \
    \  counter += 1\n        case \">\":\n            counter -= 1\n        default:\n\
    \            print(\"Error!\")\n        }\n        if counter < 0 {\n        \
    \    return false\n        }\n    }\n    return counter == 0", "    var stack:\
    \ [String] = []\n    for bracket in brackets {\n        if stack.isEmpty {\n \
    \           stack.append(String(bracket))\n        } else {\n            if String(bracket)\
    \ == \">\" && stack.last == \"<\" {\n                stack.removeLast()\n    \
    \        } else {\n                stack.append(String(bracket))\n           \
    \ }\n        }\n    }\n    return stack.isEmpty"]
stop_tokens:
- "\n}"
