name: HumanEval_158_find_max
language: swift
prompt: "\n/// Write a function that accepts a list of strings.\n/// The list contains\
  \ different words. Return the word with maximum number\n/// of unique characters.\
  \ If multiple strings have maximum number of unique\n/// characters, return the\
  \ one which comes first in lexicographical order.\n/// find_max([\"name\", \"of\"\
  , \"string\"]) == \"string\"\n/// find_max([\"name\", \"enam\", \"game\"]) == \"\
  enam\"\n/// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nfunc find_max(words:\
  \ [String]) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(find_max(words: [\"name\", \"of\", \"string\"\
  ]) == \"string\")\nassert(find_max(words: [\"name\", \"enam\", \"game\"]) == \"\
  enam\")\nassert(find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\")\n\
  assert(find_max(words: [\"abc\", \"cba\"]) == \"abc\")\nassert(find_max(words: [\"\
  play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\nassert(find_max(words:\
  \ [\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\nassert(find_max(words:\
  \ [\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\nassert(find_max(words:\
  \ [\"this\", \"is\", \"a\", \"prrk\"]) == \"this\")\nassert(find_max(words: [\"\
  b\"]) == \"b\")\nassert(find_max(words: [\"play\", \"play\", \"play\"]) == \"play\"\
  )"
completions: ["    var lexicographical = \"\"\n    var maximum = 0\n    for word in\
    \ words {\n        if Set(word).count > maximum {\n            maximum = Set(word).count\n\
    \            lexicographical = word\n        }\n    }\n    return lexicographical",
  "    var maxWord = \"\"\n    var maxUnique = 0\n    for word in words {\n      \
    \  let unique = Set(word.map { $0 }).count\n        if unique > maxUnique {\n\
    \            maxUnique = unique\n            maxWord = word\n        }\n    }\n\
    \    return maxWord", "    var dict: [String: Int] = [:]\n    words.forEach {\
    \ word in\n        dict[word] = Set(word).count\n    }\n    dict = dict.filter\
    \ { $0.value == dict.values.max() }\n    return dict.sorted { $0.key < $1.key\
    \ }.first!.key", '    return ""', "    guard words.count > 0 else {\n        return\
    \ \"\"\n    }\n    var max = words[0]\n    var max_set = Set(words[0])\n    var\
    \ max_count = max_set.count\n    for word in words {\n        let set = Set(word)\n\
    \        if set.count > max_count {\n            max = word\n            max_set\
    \ = set\n            max_count = max_set.count\n        } else if set.count ==\
    \ max_count {\n            if word < max {\n                max = word\n     \
    \           max_set = set\n                max_count = max_set.count\n       \
    \     }\n        }\n    }\n    return max", "    var max = (word: \"\", count:\
    \ 0)\n    for word in words {\n        let count = Set(word).count\n        if\
    \ count > max.count {\n            max = (word, count)\n        } else if count\
    \ == max.count {\n            if word < max.word {\n                max = (word,\
    \ count)\n            }\n        }\n    }\n    return max.word", "    guard !words.isEmpty\
    \ else { return \"\" }\n    let set = words.map { $0.utf8.unique() }\n    let\
    \ max = set.max { $0.count < $1.count }\n    guard let index = set.firstIndex(of:\
    \ max ?? []) else { return \"\" }\n    return words[index]", "    var count =\
    \ 0\n    var uniqueWord = \"\"\n    for element in words {\n        let uniqueCount\
    \ = Set(element).count\n        if uniqueCount > count {\n            count =\
    \ uniqueCount\n            uniqueWord = element\n        }\n    }\n    return\
    \ uniqueWord", "    let wordsWithUniqueChars: [(String, Set<Character>)] = words.map\
    \ { (word) -> (String, Set<Character>) in\n        let chars = Set(word)\n   \
    \     return (word, chars)\n    }\n    let sortedWords = wordsWithUniqueChars.sorted\
    \ { (lhs, rhs) -> Bool in\n        if lhs.1.count > rhs.1.count {\n          \
    \  return true\n        } else if lhs.1.count == rhs.1.count {\n            return\
    \ lhs.0 < rhs.0\n        } else {\n            return false\n        }\n    }\n\
    \    return sortedWords.last!.0", "    if words.count == 0 {\n        return \"\
    \"\n    }\n    if words.count == 1 {\n        return words[0]\n    }\n    var\
    \ set = [String: Set<Character>]()\n    words.forEach { set[$0] = Set($0.characters)\
    \ }\n    let sorted = set.sorted(by: { $0.value.count < $1.value.count })\n  \
    \  let max = sorted.last!.value.count\n    var res = [String]()\n    for (k, v)\
    \ in sorted {\n        if v.count == max {\n            res.append(k)\n      \
    \  }\n    }\n    let sortedByLex = res.sorted(by: { $0 < $1 })\n    return sortedByLex.first!",
  "    var resultWord = words[0]\n    var resultCount = 0\n    for word in words {\n\
    \        let wordSet = Set(word)\n        if wordSet.count > resultCount {\n \
    \           resultCount = wordSet.count\n            resultWord = word\n     \
    \   }\n    }\n    return resultWord", "    var max: String = \"\"\n    var maxLength:\
    \ Int = 0\n    var index: Int = 0\n    var count: Int = 0\n    for word in words\
    \ {\n        count = 0\n        for index in 0..<word.count {\n            if\
    \ word.index(of: word[index]) == word.endIndex {\n                count += 1\n\
    \            }\n        }\n        if count > maxLength {\n            maxLength\
    \ = count\n            max = word\n        }\n    }\n    return max", "    \n\
    \    var maxUniqueCharCount: Int = 0\n    var maxUniqueChar: String = \"\"\n \
    \   \n    for word in words {\n        let wordArray = Array(word)\n        var\
    \ tempWord = wordArray\n        var uniqueCharCount = 0\n        \n        for\
    \ (index, letter) in wordArray.enumerated() {\n            let result = tempWord.removeFirst(index)\n\
    \            if !result.contains(letter) {\n                uniqueCharCount +=\
    \ 1\n            }\n        }\n        \n        if uniqueCharCount > maxUniqueCharCount\
    \ {\n            maxUniqueCharCount = uniqueCharCount\n            maxUniqueChar\
    \ = word\n        }\n    }\n    \n    return maxUniqueChar", "    // Convert array\
    \ to a tuple for easier handling\n    let wordsTuple = words.enumerated().sorted{($0.1\
    \ < $1.1)}\n    var max = 0\n    var letterSet: Set<Character> = []\n    var maxIdx\
    \ = 0\n    for (i, word) in wordsTuple {\n        letterSet = Set(word)\n    \
    \    if letterSet.count > max {\n            max = letterSet.count\n         \
    \   maxIdx = i\n        }\n    }\n    return wordsTuple[maxIdx].1", "    var unique_chars_counts\
    \ = [String: Int]()\n    for word in words {\n        unique_chars_counts[word]\
    \ = word.countUniqueCharacters()\n    }\n    let max_count = unique_chars_counts.values.max()\n\
    \    var unique_words = [String]()\n    for word in unique_chars_counts.keys {\n\
    \        if unique_chars_counts[word] == max_count {\n            unique_words.append(word)\n\
    \        }\n    }\n    return unique_words.sorted()[0]", "    let uniqueCount\
    \ = words.map {\n        return ($0, $0.unicodeScalars.count)\n    }\n    let\
    \ maxCount = uniqueCount.map {\n        return $0.1\n    }.max() ?? 0\n    let\
    \ result = uniqueCount.filter {\n        return $0.1 == maxCount\n    }.map {\n\
    \        return $0.0\n    }.sorted().first ?? \"\"\n    return result", "  let\
    \ map = words.map({(word: String) -> (String, Int) in\n    let set = Set(word.characters)\n\
    \    return (word, set.count)\n  })\n  let sorted = map.sort({(a, b) -> Bool in\n\
    \    if a.1 == b.1 {\n      return a.0 < b.0\n    }\n    return a.1 > b.1\n  })\n\
    \  return sorted[0].0", "    guard words.count > 0 else { return \"\" }\n    var\
    \ result = words[0]\n    var largestSize = Set(result).count\n    for word in\
    \ words[1...] {\n        let wordSize = Set(word).count\n        if wordSize >\
    \ largestSize {\n            largestSize = wordSize\n            result = word\n\
    \        }\n    }\n    return result", "    return words.max(by: {\n        $0.count\
    \ < $1.count\n    })!", "    var maxStr = \"\"\n    var maxLen = 0\n    var alphabets\
    \ = [String:Int]()\n    for str in words {\n        for c in str.characters {\n\
    \            alphabets[String(c)] = 1\n        }\n        if alphabets.count >\
    \ maxLen {\n            maxLen = alphabets.count\n            maxStr = str\n \
    \       }\n        alphabets.removeAll()\n    }\n    return maxStr"]
stop_tokens:
- "\n}"
