language: swift
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    var vowels = \"aeiou\"\n    var consonants = \"bcdfghjklmnpqrstvwxyz\"\n\
    \    var word = \"\"\n    var consonantCounter = 0\n    for i in s.characters\
    \ {\n        if vowels.containsString(String(i)) || (i == \" \") {\n         \
    \   if word != \"\" {\n                if consonantCounter == n {\n          \
    \          words.append(word)\n                }\n                word = \"\"\n\
    \                consonantCounter = 0\n            }\n        } else if consonants.containsString(String(i))\
    \ {\n            word += String(i)\n            consonantCounter += 1\n      \
    \  }\n    }\n    if word != \"\" {\n        if consonantCounter == n {\n     \
    \       words.append(word)\n        }\n    }\n    return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc8149o3k.swift:19:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpc8149o3k.swift:20:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(i))\
    \ || (i == \" \") {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpc8149o3k.swift:28:30:\
    \ error: value of type 'String' has no member 'containsString'\n        } else\
    \ if consonants.containsString(String(i)) {\n                  ~~~~~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014332
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    let vowels = \"aeiou\"\n    let word = s.components(separatedBy: \" \")\n\
    \    var result = [String]()\n    for i in word {\n        var consonant = 0\n\
    \        var vowel = 0\n        for j in i {\n            if vowels.contains(j)\
    \ {\n                vowel += 1\n            } else if consonants.contains(j)\
    \ {\n                consonant += 1\n            }\n        }\n        if consonant\
    \ == n {\n            result.append(i)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzdocekjb.swift:16:18: error: value of type 'String' has no member\
    \ 'components'\n    let word = s.components(separatedBy: \" \")\n            \
    \   ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014332
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = Set([\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"])\n    return s.components(separatedBy: \" \").filter\
    \ { word in\n        word.filter { !vowels.contains($0) }.count == n\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdhbd29kl.swift:15:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { word in\n\
    \           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014332
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return [String]()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp5y4qtw1f/tmp5y4qtw1f.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8966504c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b89661fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b89661fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89661fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5y4qtw1f                        0x000055bd34594514 <unavailable> + 5396

    5    libc.so.6                          0x00002b89666f0460 __libc_start_main +
    245

    6    tmp5y4qtw1f                        0x000055bd34594119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660014332
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let array = s.split(separator: \" \")\n    var results = [String]()\n   \
    \ for word in array {\n        var con = 0\n        for c in word {\n        \
    \    if !vowels.contains(c) {\n                con += 1\n            }\n     \
    \   }\n        if con == n {\n            results.append(String(word))\n     \
    \   }\n    }\n    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpl42nhohm/tmpl42nhohm.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba338315c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba33800cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba33800c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba33800b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl42nhohm                        0x0000555d3688af1b <unavailable> + 7963

    5    libc.so.6                          0x00002ba338501460 __libc_start_main +
    245

    6    tmpl42nhohm                        0x0000555d3688a609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014332
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.filter { !$0.isVowel }.count == n }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfva8j0vy.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.filter\
    \ { !$0.isVowel }.count == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n  let vowels = \"aeiou\"\n  return\
    \ s.split(separator: \" \").filter { word in\n    word.filter { c in\n      !vowels.contains(c)\n\
    \    }.count == n\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmppb_pugzn.swift:15:34: error: cannot convert return expression of\
    \ type '[String.SubSequence]' (aka 'Array<Substring>') to return type '[String]'\n\
    \  return s.split(separator: \" \").filter { word in\n                       \
    \          ^\n/tmp/tmppb_pugzn.swift:15:34: note: arguments to generic parameter\
    \ 'Element' ('String.SubSequence' (aka 'Substring') and 'String') are expected\
    \ to be equal\n  return s.split(separator: \" \").filter { word in\n         \
    \                        ^\n"
  stdout: ''
  timestamp: 1660014332
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.countOfVowels() + $0.countOfConsonants() == n }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3mdes1qj.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countOfVowels()\
    \ + $0.countOfConsonants() == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014332
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    if s.isEmpty {\n        return\
    \ []\n    }\n    let consonants = Set(\"bcdfghjklmnpqrstvwxyz\")\n    let str\
    \ = s.lowercased()\n    let words = str.components(separatedBy: \" \")\n    var\
    \ result = [String]()\n    for word in words {\n        if word.filter({ consonants.contains($0)\
    \ }).count == n {\n            result.append(word)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmph4ubp52n.swift:19:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = str.components(separatedBy: \" \")\n         \
    \       ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014332
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n  return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmphfl2_32t/tmphfl2_32t.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af943e54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af943b4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af943b4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af943b4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphfl2_32t                        0x000056124e9634c4 <unavailable> + 5316

    5    libc.so.6                          0x00002af944040460 __libc_start_main +
    245

    6    tmphfl2_32t                        0x000056124e9630c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660014332
- exit_code: 0
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    let words = s.split(separator: \" \")\n    var result = [String]()\n   \
    \ for word in words {\n        var counter = 0\n        for ch in word {\n   \
    \         if consonants.contains(ch) {\n                counter += 1\n       \
    \     }\n        }\n        if counter == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014332
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.split(separator:\
    \ \" \").filter{$0.replacingOccurrences(of: \"a|e|i|o|u\", with: \"\", options:\
    \ .regularExpression).count == n}.map{String($0)}\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0fnw3qbd.swift:14:46: error: reference to member 'replacingOccurrences'\
    \ cannot be resolved without a contextual type\n    return s.split(separator:\
    \ \" \").filter{$0.replacingOccurrences(of: \"a|e|i|o|u\", with: \"\", options:\
    \ .regularExpression).count == n}.map{String($0)}\n                          \
    \                   ^\n/tmp/tmp0fnw3qbd.swift:14:104: error: cannot infer contextual\
    \ base in reference to member 'regularExpression'\n    return s.split(separator:\
    \ \" \").filter{$0.replacingOccurrences(of: \"a|e|i|o|u\", with: \"\", options:\
    \ .regularExpression).count == n}.map{String($0)}\n                          \
    \                                                                            ~^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014332
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n\treturn s.components(separatedBy:\
    \ \" \").filter { $0.rangeOfCharacter(from: CharacterSet(charactersIn: \"aeiou\"\
    )) == nil && $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0rw1u_e4.swift:14:75: error: cannot find 'CharacterSet' in scope\n\
    \        return s.components(separatedBy: \" \").filter { $0.rangeOfCharacter(from:\
    \ CharacterSet(charactersIn: \"aeiou\")) == nil && $0.count == n }\n         \
    \                                                                        ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014332
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var consonants = 0\n    var\
    \ words = [String]()\n    for letter in s {\n        switch letter {\n       \
    \ case \"a\", \"e\", \"i\", \"o\", \"u\", \" \":\n            break\n        default:\n\
    \            consonants += 1\n        }\n    }\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpypci88u_/tmpypci88u_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b590f5ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b590f2d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b590f2d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b590f2d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpypci88u_                        0x000055c5f82ad6c4 <unavailable> + 5828

    5    libc.so.6                          0x00002b590f7c9460 __libc_start_main +
    245

    6    tmpypci88u_                        0x000055c5f82ad2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014332
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.split(\" \").filter\
    \ {\n        $0.filter(\"aeiou\".contains).count == n\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp63fe5nb3.swift:14:14: error: no exact matches in call to instance\
    \ method 'split'\n    return s.split(\" \").filter {\n             ^\n/tmp/tmp63fe5nb3.swift:14:14:\
    \ note: found candidate with type '(String.Element, Int, Bool) -> [ArraySlice<String.Element>]'\
    \ (aka '(Character, Int, Bool) -> Array<ArraySlice<Character>>')\n    return s.split(\"\
    \ \").filter {\n             ^\n/tmp/tmp63fe5nb3.swift:14:14: note: found candidate\
    \ with type '(String.Element, Int, Bool) -> [String.SubSequence]' (aka '(Character,\
    \ Int, Bool) -> Array<Substring>')\n    return s.split(\" \").filter {\n     \
    \        ^\n"
  stdout: ''
  timestamp: 1660014332
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ .whitespaces).filter({ $0.numConsonants() == n })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbpnp_rcr.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: .whitespaces).filter({ $0.numConsonants()\
    \ == n })\n           ~ ^~~~~~~~~~\n/tmp/tmpbpnp_rcr.swift:14:39: error: cannot\
    \ infer contextual base in reference to member 'whitespaces'\n    return s.components(separatedBy:\
    \ .whitespaces).filter({ $0.numConsonants() == n })\n                        \
    \             ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014332
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiouAEIOU\"\
    \n    let words = s.components(separatedBy: \" \")\n    return words.filter {\
    \ $0.filter { !vowels.contains($0) }.count == n }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfrx8f8vh.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014332
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var r = [String]()\n    for\
    \ word in s.split(separator: \" \") {\n        var c = 0\n        for letter in\
    \ word {\n            if is_consonant(letter) {\n                c += 1\n    \
    \        }\n        }\n        if c == n {\n            r.append(String(word))\n\
    \        }\n    }\n    return r\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpb5css7xc.swift:18:16: error: cannot find 'is_consonant' in scope\n\
    \            if is_consonant(letter) {\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014332
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    var word = \"\"\n    var consonants = 0\n    for ch in s {\n        if ch\
    \ == \" \" {\n            if consonants == n {\n                words.append(word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            switch ch {\n            case \"a\", \"e\", \"i\", \"o\"\
    , \"u\", \"y\":\n                continue\n            default:\n            \
    \    consonants += 1\n            }\n            word.append(ch)\n        }\n\
    \    }\n    if consonants == n {\n        words.append(word)\n    }\n    return\
    \ words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpt2lz_ja2/tmpt2lz_ja2.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d9f235c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d9ef2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d9ef2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d9ef2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt2lz_ja2                        0x000055991d2e4774 <unavailable> + 6004

    5    libc.so.6                          0x00002b6d9f421460 __libc_start_main +
    245

    6    tmpt2lz_ja2                        0x000055991d2e4379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014332
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var ret: [String] = []\n\
    \    let words = s.split(separator: \" \")\n    for word in words {\n        if\
    \ isTargetWord(word: word, targetLength: n) {\n            ret.append(String(word))\n\
    \        }\n    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpajtvguqb.swift:17:12: error: cannot find 'isTargetWord' in scope\n\
    \        if isTargetWord(word: word, targetLength: n) {\n           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014332
