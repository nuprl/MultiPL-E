name: HumanEval_161_solve
language: swift
prompt: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the\
  \ string contains no letters, reverse the string.\n/// The function should return\
  \ the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n/// solve(\"\
  ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String) -> String\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
  \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"\
  #a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
  \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
  \ \"#ccc\") == \"#CCC\")"
completions: ['  return s.map { $0.isLetter ? ($0.isUppercase ? $0.lowercased() :
    $0.uppercased()) : $0 }.joined()', "    guard s.contains(\"[a-zA-Z]\") else {\
    \ return String(s.reversed()) }\n    return s.map {\n        switch $0 {\n   \
    \     case \"a\"...\"z\": return String($0).uppercased()\n        case \"A\"...\"\
    Z\": return String($0).lowercased()\n        default: return String($0)\n    \
    \    }\n    }.joined()", "    if s.isEmpty {\n        return \"\"\n    }\n   \
    \ var newString = \"\"\n    let lowerCharSet = CharacterSet.lowercaseLetters\n\
    \    let upperCharSet = CharacterSet.uppercaseLetters\n    for char in s.characters\
    \ {\n        if lowerCharSet.contains(UnicodeScalar(String(char))!) {\n      \
    \      newString.append(String(char).uppercased())\n        } else if upperCharSet.contains(UnicodeScalar(String(char))!)\
    \ {\n            newString.append(String(char).lowercased())\n        } else {\n\
    \            newString.append(char)\n        }\n    }\n    if newString.isEmpty\
    \ {\n        return String(s.characters.reversed())\n    }\n    return newString",
  "    guard s.contains(\"a\") || s.contains(\"A\") else { return String(s.reversed())\
    \ }\n    var result = \"\"\n    for letter in s {\n        if letter.isLetter\
    \ {\n            if letter.isUppercase {\n                result.append(letter.lowercased())\n\
    \            } else {\n                result.append(letter.uppercased())\n  \
    \          }\n        } else {\n            result.append(letter)\n        }\n\
    \    }\n    return result", "    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var result = \"\"\n    for char in s {\n        if letters.contains(char)\
    \ {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    if s == result {\n        return String(s.reversed())\n    }\n    return\
    \ result", '    return ""', '    return ""', "    if s.isEmpty {\n        return\
    \ s\n    }\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    var arr = Array(s)\n    for\
    \ i in 0..<arr.count {\n        if arr[i].isLetter {\n            arr[i] = arr[i].isUppercase\
    \ ? arr[i].lowercased() : arr[i].uppercased()\n        }\n    }\n    return String(arr)",
  "    let s = s.filter { $0.isLetter }\n    let letters = s.map {\n        let c\
    \ = $0.lowercased()\n        if c == $0 {\n            return c.uppercased()\n\
    \        } else {\n            return c\n        }\n    }\n    if letters.count\
    \ == 0 {\n        return String(s.reversed())\n    }\n    return String(letters)",
  "    let a = Array(s)\n    let notLetter = CharacterSet.letters.inverted\n    var\
    \ res = [Character]()\n    for c in a {\n        res.append(contains(c, notLetter)\
    \ ? c : c.lowercased() == c ? c.uppercased() : c.lowercased())\n    }\n    return\
    \ String(res)", "    let letters = s.characters.filter { $0.isLetter }\n    if\
    \ letters.isEmpty {\n        return String(s.characters.reversed())\n    }\n \
    \   return String(s.characters.map {\n        if $0.isLetter {\n            return\
    \ String($0).lowercased() == String($0) ? String($0).uppercased() : String($0).lowercased()\n\
    \        }\n        return $0\n    })", "    var result = \"\"\n    for char in\
    \ s {\n        if char.isLetter {\n            if char.isUppercase {\n       \
    \         result.append(char.lowercased())\n            } else {\n           \
    \     result.append(char.uppercased())\n            }\n        } else {\n    \
    \        result.append(char)\n        }\n    }\n    return s.containsLetters ?\
    \ result : String(result.reversed())", "    if s.isEmpty {\n        return s\n\
    \    }\n    var string = \"\"\n    for char in s {\n        if \"a\"...\"z\" ~=\
    \ char {\n            string.append(char.uppercased())\n        } else if \"A\"\
    ...\"Z\" ~= char {\n            string.append(char.lowercased())\n        } else\
    \ {\n            string.append(char)\n        }\n    }\n    return string", " \
    \   var letters = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  letters += String(c.isUppercase ? c.lowercased() : c.uppercased())\n      \
    \  } else {\n            letters += String(c)\n        }\n    }\n    return letters.isEmpty\
    \ ? String(s.reversed()) : letters", "    let letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    var res = \"\"\n    for letter in s {\n        if letters.contains(letter)\
    \ {\n            res += String(letter).lowercased() == String(letter) ? String(letter).uppercased()\
    \ : String(letter).lowercased()\n        } else {\n            res += String(letter)\n\
    \        }\n    }\n    return res == \"\" ? String(s.reversed()) : res", "   \
    \ var result = \"\"\n    var hasLetter = false\n    for char in s {\n        if\
    \ char.isLetter {\n            result.append(char.isUppercase ? char.lowercased()\
    \ : char.uppercased())\n            hasLetter = true\n        } else {\n     \
    \       result.append(char)\n        }\n    }\n    return hasLetter ? result :\
    \ String(result.reversed())", "    let strs = s.characters.map{ $0 }\n    var\
    \ res = \"\"\n    var unLetters: Bool = true\n    for c in strs {\n        if\
    \ c.isLetter {\n            if c.isUpper {\n                res.append(c.lowercased())\n\
    \            } else {\n                res.append(c.uppercased())\n          \
    \  }\n            unLetters = false\n        } else {\n            res.append(c)\n\
    \        }\n    }\n    if unLetters {\n        return String(res.characters.reversed())\n\
    \    }\n    return res", "    var s = s\n    if s.isEmpty {\n        return s\n\
    \    }\n    var reversed = \"\"\n    let s = s.reversed()\n    for item in s {\n\
    \        if item.isLetter {\n            if item.isUppercase {\n             \
    \   reversed.append(item.lowercased())\n            } else {\n               \
    \ reversed.append(item.uppercased())\n            }\n        } else {\n      \
    \      reversed.append(item)\n        }\n    }\n    return reversed", "    let\
    \ letters = Set<Character>(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n    let characters = s.characters.map { (e) -> Character in\n        if letters.contains(e)\
    \ {\n            if e.isUppercase {\n                return e.lowercased()\n \
    \           } else {\n                return e.uppercased()\n            }\n \
    \       } else {\n            return e\n        }\n    }\n    return String(characters)",
  "    let letters = s.characters.filter { $0.isLetter }\n    let number = s.characters.filter\
    \ { !$0.isLetter }\n    if letters.count == 0 {\n        return String(number.reversed())\n\
    \    }\n    var result = String()\n    for c in s.characters {\n        if c.isUppercase\
    \ {\n            result.append(c.lowercased())\n        } else if c.isLowercase\
    \ {\n            result.append(c.uppercased())\n        } else {\n           \
    \ result.append(c)\n        }\n    }\n    return result"]
stop_tokens:
- "\n}"
