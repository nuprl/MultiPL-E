name: HumanEval_121_solution
language: swift
prompt: "\n/// Given a non-empty list of integers, return the sum of all of the odd\
  \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
  \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321]) ==>0\n\
  func solution(lst: [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
  \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
  \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
  \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
completions: ["    // write your code in Swift 3.0 (Linux)\n    var sum = 0\n    var\
    \ count = 0\n    for a in lst {\n        if a % 2 == 1 && count % 2 == 0 {\n \
    \           sum += a\n        }\n        count += 1\n    }\n    return sum", " \
    \   var oddSum = 0\n    for (i, item) in lst.enumerated() {\n        if i % 2\
    \ == 0 && item % 2 != 0 {\n            oddSum += item\n        }\n    }\n    return\
    \ oddSum", "    var result = 0\n    for (index, item) in lst.enumerated() {\n\
    \        if index % 2 == 0 && item % 2 != 0 {\n            result += item\n  \
    \      }\n    }\n    return result", "    var oddTotal = 0\n    for (index, value)\
    \ in lst.enumerated() {\n        if index % 2 == 0 && value % 2 != 0 {\n     \
    \       oddTotal += value\n        }\n    }\n    return oddTotal", "    let evens\
    \ = lst.enumerated().filter { $0.offset % 2 == 0 }\n    let odds = evens.filter\
    \ { $0.element % 2 != 0 }\n    return odds.reduce(0) { $0 + $1.element }", " \
    \   let answer = lst.enumerated().filter({ (index, element) -> Bool in\n     \
    \   return index % 2 == 0 && element % 2 != 0\n    }).reduce(0, { (result, value)\
    \ -> Int in\n        return result + value.element\n    })\n    return answer",
  "    var result = 0\n    for i in 0..<lst.count {\n        if i % 2 == 0 {\n   \
    \         if lst[i] % 2 != 0 {\n                result += lst[i]\n           \
    \ }\n        }\n    }\n    return result", "    let res = lst.enumerated().reduce(0)\
    \ { (acc, num) in\n        return (num.offset % 2 == 0 && num.element % 2 != 0)\
    \ ? acc + num.element : acc\n    }\n    return res", "  var sum = 0\n  for (index,\
    \ element) in lst.enumerated() {\n    if index % 2 == 0 {\n      sum += element\n\
    \    }\n  }\n  return sum", "  return lst.enumerated().reduce(0) {\n    $0 + (($1.offset\
    \ + 1) % 2 == 0 && $1.element % 2 != 0 ? $1.element : 0)\n  }", '    return lst.enumerated().reduce(0)
    { $0 + ($1.offset % 2 == 0 && $1.element % 2 != 0 ? $1.element : 0) }', "    var\
    \ lst = lst\n    var sum = 0\n    while !lst.isEmpty {\n        let num = lst.removeFirst()\n\
    \        if num % 2 == 0 {\n            if !lst.isEmpty {\n                sum\
    \ += lst.removeFirst()\n            }\n        }\n    }\n    return sum", "  \
    \  var sum = 0\n    for index in 0..<lst.count {\n        if (index + 1) % 2 ==\
    \ 0 {\n            sum += lst[index] % 2 == 0 ? 0 : lst[index]\n        }\n  \
    \  }\n    return sum", "    var result = 0\n    for i in stride(from: 1, to: lst.count,\
    \ by: 2) {\n        if i % 2 == 0 {\n            result += lst[i]\n        }\n\
    \    }\n    return result", '    return 0', "    // Code here\n    return 0",
  "  var sum = 0\n  for (index, element) in lst.enumerated() {\n    if index % 2 ==\
    \ 0 {\n      sum += element\n    }\n  }\n  return sum", "    let lst = lst.enumerated().filter\
    \ { $0.offset % 2 == 1 && $0.element % 2 == 1 }\n    return lst.reduce(0) { $0\
    \ + $1.element }", "    let oddIndices = lst.indices.filter { $0 % 2 == 1 }\n\
    \    return oddIndices.reduce(0) { $0 + lst[$1] }", "    var sum = 0\n    for\
    \ (i, num) in lst.enumerated() {\n        if i % 2 == 0 {\n            sum +=\
    \ num % 2 == 0 ? 0 : num\n        }\n    }\n    return sum"]
stop_tokens:
- "\n}"
