name: HumanEval_29_filter_by_prefix
language: swift
prompt: "\n/// Filter an input list of strings only for ones that start with a given\
  \ prefix.\n/// >>> filter_by_prefix([], 'a')\n/// []\n/// >>> filter_by_prefix(['abc',\
  \ 'bcd', 'cde', 'array'], 'a')\n/// ['abc', 'array']\nfunc filter_by_prefix(strings:\
  \ [String], prefix: String) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(filter_by_prefix(strings: [] as [String],\
  \ prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\"\
  , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"\
  xxx\", \"xxxAAA\", \"xxx\"])"
completions: ["    let predicate = NSPredicate(format: \"SELF BEGINSWITH %@\", prefix)\n\
    \    return strings.filter { predicate.evaluateWithObject($0) }", '    return
    strings.filter { $0.hasPrefix(prefix) }', "    return strings.filter { s in\n\
    \        s.hasPrefix(prefix)\n    }", "    let filtered = strings.filter { $0.hasPrefix(prefix)\
    \ }\n    return filtered", '    return strings.filter { $0.hasPrefix(prefix) }',
  '    return strings.filter { $0.hasPrefix(prefix) }', '    return strings.filter
    { $0.hasPrefix(prefix) }', '    return strings.filter({ $0.hasPrefix(prefix) })',
  '    return strings.filter { $0.hasPrefix(prefix) }', '    return strings.filter
    { str in str.hasPrefix(prefix) }', '    return strings.filter { $0.hasPrefix(prefix)
    }', '    return strings.filter { $0.hasPrefix(prefix) }', '    return strings.filter
    { $0.hasPrefix(prefix) }', '    return strings.filter { $0.hasPrefix(prefix) }',
  '    return strings.filter { $0.startsWith(prefix) }', "    let len = prefix.lengthOfBytesUsingEncoding(NSUTF8StringEncoding)\n\
    \    return strings.filter {\n        $0.substringToIndex($0.startIndex.advancedBy(len))\
    \ == prefix\n    }", '    return strings.filter {$0.hasPrefix(prefix)}', "   \
    \ let filtered = strings.filter({$0.hasPrefix(prefix)})\n    return filtered",
  '    return strings.filter { $0.hasPrefix(prefix) }', '    return strings.filter({prefix.hasPrefix($0)})']
stop_tokens:
- "\n}"
