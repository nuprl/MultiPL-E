language: swift
name: HumanEval_100_make_a_pile
results:
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var ans = [n]\n    var next = n%2 == 0 ? n+2 : n+1\n    while\
    \ next < n*2 {\n        ans.append(next)\n        next += next%2 == 0 ? 2 : 1\n\
    \    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpiskz_ixw/tmpiskz_ixw.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2596f5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2596c53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2596c53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2596c527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiskz_ixw                        0x000055f39f035472 <unavailable> + 5234

    5    libc.so.6                          0x00002b2597148460 __libc_start_main +
    245

    6    tmpiskz_ixw                        0x000055f39f0350b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var last = n\n    while last > 0 {\n\
    \        result.append(last)\n        last = last % 2 == 0 ? last - 1 : last +\
    \ 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var l = [Int]()\n    l.append(n)\n    for i in 1...n {\n   \
    \     if l[i-1] % 2 == 0 {\n            l.append(l[i-1] + 2)\n        } else {\n\
    \            l.append(l[i-1] + 1)\n        }\n    }\n    return l\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpylt7wcxa/tmpylt7wcxa.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8f0d7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8f0a73b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8f0a73988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8f0a727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpylt7wcxa                        0x000055c9be495612 <unavailable> + 5650

    5    libc.so.6                          0x00002ab8f0f68460 __libc_start_main +
    245

    6    tmpylt7wcxa                        0x000055c9be495259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return [Int]((n...3*n).step(n%2==0 ? 2 : 1).filter{ $0 % 2 !=\
    \ 0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpintuldwr.swift:13:28: error: value of type 'ClosedRange<Int>' has\
    \ no member 'step'\n    return [Int]((n...3*n).step(n%2==0 ? 2 : 1).filter{ $0\
    \ % 2 != 0 })\n                 ~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [n]\n    var i = n\n    while i > 1 {\n        i\
    \ = (i % 2 == 0) ? i - 1 : i - 2\n        pile.append(i)\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpi43i2lrx/tmpi43i2lrx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6aaadec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6aa7d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6aa7d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6aa7d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi43i2lrx                        0x000056104469b472 <unavailable> + 5234

    5    libc.so.6                          0x00002ad6aacca460 __libc_start_main +
    245

    6    tmpi43i2lrx                        0x000056104469b0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [Int]()\n    var layer = n\n    while layer !=\
    \ 0 {\n        result.append(layer)\n        if layer % 2 == 0 {\n           \
    \ layer -= 1\n        } else {\n            layer -= 2\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824540
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var result = [n]\n    var i = n\n    while i > 0 {\n       \
    \ if i % 2 == 0 {\n            i = i + 1\n        } else {\n            i = i\
    \ + 2\n        }\n        result.append(i)\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  return (0..<n).map { max(n, $0.isEven ? n + 1 : n - 1) }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpwwx0fpwh.swift:13:34: error: value of type 'Int' has no member\
    \ 'isEven'\n  return (0..<n).map { max(n, $0.isEven ? n + 1 : n - 1) }\n     \
    \                         ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  var list = [n]\n  while n != 1 {\n    n = n % 2 == 0 ? n / 2 :\
    \ n * 3 + 1\n    list.append(n)\n  }\n  return list\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp2h8gt4d0.swift:15:5: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n    n = n % 2 == 0 ? n / 2 : n * 3 + 1\n    ^\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return Array(1...n).map { n in\n        if n % 2 == 0 {\n  \
    \          return n + 1\n        } else {\n            return n + 2\n        }\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpuhrt1hvk/tmpuhrt1hvk.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a1616dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a15e64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a15e64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a15e637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuhrt1hvk                        0x000055a067f8d602 <unavailable> + 5634

    5    libc.so.6                          0x00002b8a16359460 __libc_start_main +
    245

    6    tmpuhrt1hvk                        0x000055a067f8d249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmprkeuggro/tmprkeuggro.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45e5b60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45e5857b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45e5857988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45e58567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprkeuggro                        0x00005613e9dbe382 <unavailable> + 4994

    5    libc.so.6                          0x00002b45e5d4c460 __libc_start_main +
    245

    6    tmprkeuggro                        0x00005613e9dbdfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  assert(n > 0)\n  var res = [Int]()\n  var x = n\n  while x > 0\
    \ {\n    res.append(x)\n    if x.isMultiple(of: 2) {\n      x += 1\n    } else\
    \ {\n      x += 2\n    }\n  }\n  return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let max_level = n + (n-1) / 2\n    var levels = [Int](repeating:\
    \ 0, count: max_level)\n    var i = 0\n    var j = 0\n    while i < n {\n    \
    \    levels[j] = j*2 + 1\n        j += 1\n        i += 1\n    }\n    i = n\n \
    \   while i < max_level {\n        levels[i] = levels[i-1] + 2\n        i += 1\n\
    \    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpw30jg61c/tmpw30jg61c.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b503de4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b503db42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b503db42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b503db417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw30jg61c                        0x0000555a67919532 <unavailable> + 5426

    5    libc.so.6                          0x00002b503e037460 __libc_start_main +
    245

    6    tmpw30jg61c                        0x0000555a67919179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var stones = [Int]()\n    stones.append(n)\n    var next_stone\
    \ = 0\n    while next_stone <= n {\n        if n % 2 == 0 {\n            next_stone\
    \ = n + 2\n        } else {\n            next_stone = n + 1\n        }\n     \
    \   n = next_stone\n        stones.append(n)\n    }\n    return stones\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpjc_5_jm9.swift:22:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = next_stone\n        ^\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    guard n > 0 else {\n        return []\n    }\n    return (1...n).map\
    \ { x in\n        if x % 2 == 0 {\n            return 2 * x\n        } else {\n\
    \            return 2 * x - 1\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpwg7gqn63/tmpwg7gqn63.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9679356c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b967904db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b967904d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b967904c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwg7gqn63                        0x00005651d595b552 <unavailable> + 5458

    5    libc.so.6                          0x00002b9679542460 __libc_start_main +
    245

    6    tmpwg7gqn63                        0x00005651d595b199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  var level = n\n  var result = [n]\n  while true {\n    level =\
    \ (level.isEven ? level + 1 : level + 2)\n    result.append(level)\n    if level\
    \ >= n * 2 {\n      break\n    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpfbjlg59k.swift:16:20: error: value of type 'Int' has no member\
    \ 'isEven'\n    level = (level.isEven ? level + 1 : level + 2)\n             ~~~~~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824534
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n  let base: (Int) -> Int = { n in n * 2 + 1 }\n  return Array(1...n).map\
    \ { base($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmp9h31u6b4/tmp9h31u6b4.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca1d7f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca1d4eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca1d4ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca1d4ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9h31u6b4                        0x00005605f8b9b6ef <unavailable> + 5871

    5    libc.so.6                          0x00002aca1d9e3460 __libc_start_main +
    245

    6    tmp9h31u6b4                        0x00005605f8b9b249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    var pile = [n]\n    var current_level = n\n    while current_level\
    \ > 1 {\n        if current_level % 2 == 0 {\n            current_level -= 1\n\
    \        } else {\n            current_level -= 2\n        }\n        pile.append(current_level)\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpow75yk8h/tmpow75yk8h.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbb13b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbb10afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbb10af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbb10ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpow75yk8h                        0x0000562f7ac86472 <unavailable> + 5234

    5    libc.so.6                          0x00002afbb15a4460 __libc_start_main +
    245

    6    tmpow75yk8h                        0x0000562f7ac860b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    let result = [n]\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpz1paoxy9/tmpz1paoxy9.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5365d59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5365a50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5365a50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5365a4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz1paoxy9                        0x00005575116de382 <unavailable> + 4994

    5    libc.so.6                          0x00002b5365f45460 __libc_start_main +
    245

    6    tmpz1paoxy9                        0x00005575116ddfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824535
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\n/// >>> make_a_pile(3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int)\
    \ -> [Int] {\n    return (0..<n).map { $0 + n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpv3liko0l/tmpv3liko0l.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f216cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f213c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f213c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f213c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv3liko0l                        0x000055cc727d1552 <unavailable> + 5458

    5    libc.so.6                          0x00002b1f218b6460 __libc_start_main +
    245

    6    tmpv3liko0l                        0x000055cc727d1199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824535
