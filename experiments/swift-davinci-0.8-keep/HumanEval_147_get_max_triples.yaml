name: HumanEval_147_get_max_triples
language: swift
prompt: "\n/// You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
  \ i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where i <\
  \ j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n/// Input:\
  \ n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only\
  \ valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
  \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
  \ == 53361)"
completions: ["    var valid_triples = 0\n    let array = get_integer_array(n: n)\n\
    \    for i in 0..<array.count {\n        for j in i+1..<array.count {\n      \
    \      for k in j+1..<array.count {\n                if (array[i] + array[j] +\
    \ array[k]) % 3 == 0 {\n                    valid_triples += 1\n             \
    \   }\n            }\n        }\n    }\n    return valid_triples", "    var result\
    \ = 0\n    var array = [Int]()\n    for i in 1...n {\n        array.append(i *\
    \ i - i + 1)\n    }\n    for i in 0..<array.count {\n        for j in (i + 1)..<array.count\
    \ {\n            for k in (j + 1)..<array.count {\n                if array[i]\
    \ + array[j] + array[k] % 3 == 0 {\n                    result += 1\n        \
    \        }\n            }\n        }\n    }\n    return result", "    if n <=\
    \ 2 {\n        return 0\n    }\n    var count = 0\n    var arr = [Int]()\n   \
    \ for i in 1...n {\n        arr.append(i * i - i + 1)\n    }\n    for i in 0..<arr.count\
    \ - 2 {\n        for j in i + 1..<arr.count - 1 {\n            if (arr[i] + arr[j])\
    \ % 3 == 0 {\n                for k in j + 1..<arr.count {\n                 \
    \   if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n                        count +=\
    \ 1\n                    }\n                }\n            }\n        }\n    }\n\
    \    return count", "    var output = 0;\n    for i in 1..<n {\n        for j\
    \ in i..<n {\n            for k in j..<n {\n                if( i + j + k) % 3\
    \ == 0 {\n                    output += 1;\n                }\n            }\n\
    \        }\n    }\n    return output;", "    var count = 0\n    for i in 0..<n\
    \ {\n        for j in i+1..<n {\n            for k in j+1..<n {\n            \
    \    if is_multiple_of_3(num: i*i-i+1 + j*j-j+1 + k*k-k+1) {\n               \
    \     count += 1\n                }\n            }\n        }\n    }\n    return\
    \ count", '    return 0', "    //greddy\n    var res = 0\n    var i = 0\n    var\
    \ j = 1\n    var k = 2\n    var nums = [Int]()\n    for a in 1...n {\n       \
    \ nums.append(a * a - a + 1)\n    }\n    while i < n - 2 {\n        while j <\
    \ n - 1 {\n            while k < n {\n                if nums[i] + nums[j] + nums[k]\
    \ % 3 == 0 {\n                    res += 1\n                }\n              \
    \  k += 1\n            }\n            j += 1\n            k = j + 1\n        }\n\
    \        i += 1\n        j = i + 1\n        k = j + 1\n    }\n    return res",
  "    var res = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n {\n       \
    \     for k in (j + 1)..<n {\n                if ((i * i - i + 1) + (j * j - j\
    \ + 1) + (k * k - k + 1)) % 3 == 0 {\n                    res += 1\n         \
    \       }\n            }\n        }\n    }\n    return res", "    var triples\
    \ = 0\n    for i in 1...n-2 {\n        for j in i+1...n-1 {\n            for k\
    \ in j+1...n {\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k\
    \ + 1) % 3 == 0 {\n                    triples += 1\n                }\n     \
    \       }\n        }\n    }\n    return triples", "    // We can try to find a\
    \ pattern in a. \n    // For example, if we take a[1] = 1 * 1 - 1 + 1 = 1. \n\
    \    // How does a[2] change relative to a[1]? What about a[3]? a[4]? a[5]? \n\
    \    // If we plot a[i] for i = 1, 2, 3, 4, 5, we get the following:\n    // a[i]\
    \ = | 1,   2,   4,   7,   11,\n    // And the differences between each point are:\n\
    \    // a[i] = | 1,   2,   3,   4,   5,\n    // Let's plot the differences:\n\
    \    // a[i] = | 1,   2,   3,   4,   5,\n    // Can you see a pattern now?\n \
    \   // a[i] = | 2,   3,   4,   5,   6,\n    // a[i] = | 1,   1,   1,   1,   1,\n\
    \    // That's right! The nth item in the array has the value n.\n    // The array\
    \ would look like this:\n    // a[i] = | 1,   2,   3,   4,   5,   6,   7,   8,\
    \   9,   10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,\
    \  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38, \
    \ 39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,\
    \  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69, \
    \ 70,  71,  72,  73,  74,  75,  76,", "    // write your code in Swift 3.0 (Linux)\n\
    \    return 0", "    // The code here\n    return 0", "    if n < 3 {\n      \
    \  return 0\n    }\n    var a = [Int](repeating: 0, count: n)\n    for i in 1..<n\
    \ {\n        a[i] = i * i - i + 1\n    }\n    var result = 0\n    for i in 0..<n\
    \ {\n        for j in i+1..<n {\n            for k in j+1..<n {\n            \
    \    if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result += 1\n   \
    \             }\n            }\n        }\n    }\n    return result", "    let\
    \ a = Array(1...n).map {$0 * $0 - $0 + 1}\n    var count = 0\n    for i in 0..<a.count\
    \ - 2 {\n        for j in i + 1..<a.count - 1 {\n            for k in j + 1..<a.count\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count\
    \ += 1\n                }\n            }\n        }\n    }\n    return count",
  "    if n < 3 {\n        return 0\n    }\n    var a = [Int](repeating: 0, count:\
    \ n)\n    for i in 1...n {\n        a[i - 1] = i * i - i + 1\n    }\n    var ret\
    \ = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n          \
    \  for k in j + 1..<n {\n                if a[i] + a[j] + a[k] % 3 == 0 {\n  \
    \                  ret += 1\n                }\n            }\n        }\n   \
    \ }\n    return ret", "\t// We need to check if the sum of 3 elements is divisible\
    \ by 3\n\t// Since the 3 elements are consecutive, their sum is 3x + y, where\
    \ x and y are 2\n\t// consecutive numbers. So, y must be 2 or 1.\n\tvar max_triples\
    \ = 0\n\tfor i in 1..<n-1 {\n\t\tlet y = i * i - i + 1\n\t\tif y % 3 == 0 {\n\t\
    \t\tmax_triples += 1\n\t\t}\n\t}\n\treturn max_triples", "    var dp = Array(repeating:\
    \ 0, count: n + 1)\n    for i in 2...n {\n        dp[i] = dp[i - 1] + i * i -\
    \ i + 1\n    }\n    var res = 0\n    for i in 1..<n - 1 {\n        let cur = dp[i]\n\
    \        var left = i + 1\n        var right = n\n        while left < right {\n\
    \            let sum = cur + dp[right] + dp[left]\n            if sum == n * n\
    \ {\n                res += 1\n                left += 1\n                right\
    \ -= 1\n            } else if sum < n * n {\n                left += 1\n     \
    \       } else {\n                right -= 1\n            }\n        }\n    }\n\
    \    return res", "    var result = 0\n    for i in 0..<n {\n        for j in\
    \ (i + 1)..<n {\n            for k in (j + 1)..<n {\n                let sum =\
    \ (i + 1) * (i + 1) - (i + 1) + 1 + (j + 1) * (j + 1) - (j + 1) + 1 + (k + 1)\
    \ * (k + 1) - (k + 1) + 1\n                if sum % 3 == 0 {\n               \
    \     result += 1\n                }\n            }\n        }\n    }\n    return\
    \ result", "\tvar res = 0\n\tvar arr = [Int]()\n\tfor i in 1...n {\n\t\tarr.append(i\
    \ * i - i + 1)\n\t}\n\tfor i in 0..<n {\n\t\tfor j in i+1..<n {\n\t\t\tfor k in\
    \ j+1..<n {\n\t\t\t\tif (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n\t\t\t\t\tres +=\
    \ 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn res", "    var res = 0\n    let\
    \ end = n - 2\n    for i in 0...end {\n        for j in (i + 1)...end {\n    \
    \        for k in (j + 1)...end {\n                if is_triple(num1: i, num2:\
    \ j, num3: k) {\n                    res += 1\n                }\n           \
    \ }\n        }\n    }\n    return res"]
stop_tokens:
- "\n}"
