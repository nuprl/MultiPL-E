language: swift
name: HumanEval_120_maximum
results:
- exit_code: 0
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Input: arr = [-3, -4, 5], k = 3\n/// Output: [-4, -3, 5]\n/// Example\
    \ 2:\n/// Input: arr = [4, -4, 4], k = 2\n/// Output: [4, 4]\n/// Example 3:\n\
    /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n/// Output: [2]\n/// Note:\n\
    /// 1. The length of the array will be in the range of [1, 1000].\n/// 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k\
    \ <= len(arr)\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n    guard arr.count\
    \ > 0, k > 0 else {\n        return []\n    }\n    var result = [Int]()\n    for\
    \ i in 0..<k {\n        result.append(arr[i])\n    }\n    result.sort()\n    for\
    \ i in k..<arr.count {\n        if arr[i] > result[0] {\n            result.removeFirst()\n\
    \            result.append(arr[i])\n            result.sort()\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824537
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Input: arr = [-3, -4, 5], k = 3\n/// Output: [-4, -3, 5]\n/// Example\
    \ 2:\n/// Input: arr = [4, -4, 4], k = 2\n/// Output: [4, 4]\n/// Example 3:\n\
    /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n/// Output: [2]\n/// Note:\n\
    /// 1. The length of the array will be in the range of [1, 1000].\n/// 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k\
    \ <= len(arr)\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n    var stack = [Int]()\n\
    \    var i = 0\n    while i < arr.count {\n        while stack.count > 0 && stack.count\
    \ + arr.count - i > k && arr[i] > stack.last! {\n            stack.removeLast()\n\
    \        }\n        if stack.count < k {\n            stack.append(arr[i])\n \
    \       }\n        i += 1\n    }\n    return stack\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp41g7oxiz/tmp41g7oxiz.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f6e07bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f6dd72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f6dd72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f6dd717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp41g7oxiz                        0x0000558b9be2b6f9 <unavailable> + 5881

    5    libc.so.6                          0x00002b7f6e267460 __libc_start_main +
    245

    6    tmp41g7oxiz                        0x0000558b9be2b2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824537
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Input: arr = [-3, -4, 5], k = 3\n/// Output: [-4, -3, 5]\n/// Example\
    \ 2:\n/// Input: arr = [4, -4, 4], k = 2\n/// Output: [4, 4]\n/// Example 3:\n\
    /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n/// Output: [2]\n/// Note:\n\
    /// 1. The length of the array will be in the range of [1, 1000].\n/// 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k\
    \ <= len(arr)\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n    return [1]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp9n2dj1ts/tmp9n2dj1ts.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba05b08fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba05ad86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba05ad86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba05ad857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9n2dj1ts                        0x000056020b8373c9 <unavailable> + 5065

    5    libc.so.6                          0x00002ba05b27b460 __libc_start_main +
    245

    6    tmp9n2dj1ts                        0x000056020b836fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824537
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Input: arr = [-3, -4, 5], k = 3\n/// Output: [-4, -3, 5]\n/// Example\
    \ 2:\n/// Input: arr = [4, -4, 4], k = 2\n/// Output: [4, 4]\n/// Example 3:\n\
    /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n/// Output: [2]\n/// Note:\n\
    /// 1. The length of the array will be in the range of [1, 1000].\n/// 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k\
    \ <= len(arr)\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n    var stack = [Int]()\n\
    \    for i in 0..<arr.count {\n        while stack.count > 0 && arr[i] > stack.last!\
    \ && (stack.count + arr.count - i) > k {\n            stack.removeLast()\n   \
    \     }\n        if stack.count < k {\n            stack.append(arr[i])\n    \
    \    }\n    }\n    return stack\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp4ohn7m42/tmp4ohn7m42.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1e7986c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1e767db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1e767d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1e767c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4ohn7m42                        0x000055a541d567f9 <unavailable> + 6137

    5    libc.so.6                          0x00002ad1e7b72460 __libc_start_main +
    245

    6    tmp4ohn7m42                        0x000055a541d563f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824537
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Input: arr = [-3, -4, 5], k = 3\n/// Output: [-4, -3, 5]\n/// Example\
    \ 2:\n/// Input: arr = [4, -4, 4], k = 2\n/// Output: [4, 4]\n/// Example 3:\n\
    /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n/// Output: [2]\n/// Note:\n\
    /// 1. The length of the array will be in the range of [1, 1000].\n/// 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k\
    \ <= len(arr)\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var min = 0\n    for number in arr {\n        if result.count < k {\n   \
    \         result.append(number)\n            if result.count == k {\n        \
    \        min = result.index(of: result.min()!)!\n            }\n        } else\
    \ {\n            if number > result[min] {\n                result[min] = number\n\
    \                min = result.index(of: result.min()!)!\n            }\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpoan836sh/tmpoan836sh.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc333e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc330d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc330d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc330d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoan836sh                        0x00005643727e9889 <unavailable> + 6281

    5    libc.so.6                          0x00002abc335ce460 __libc_start_main +
    245

    6    tmpoan836sh                        0x00005643727e9489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659824537
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Input: arr = [-3, -4, 5], k = 3\n/// Output: [-4, -3, 5]\n/// Example\
    \ 2:\n/// Input: arr = [4, -4, 4], k = 2\n/// Output: [4, 4]\n/// Example 3:\n\
    /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n/// Output: [2]\n/// Note:\n\
    /// 1. The length of the array will be in the range of [1, 1000].\n/// 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k\
    \ <= len(arr)\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n    var result = [Int]()\n\
    \    let count = arr.count\n    if count == 0 || k == 0 {\n        return result\n\
    \    }\n    for index in 0..<count {\n        while result.count > 0 && result.count\
    \ + count - index > k && result.last! < arr[index] {\n            result.removeLast()\n\
    \        }\n        if result.count < k {\n            result.append(arr[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpwylc7_al/tmpwylc7_al.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f30721c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f30418b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f30418988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f304177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwylc7_al                        0x00005647206477f9 <unavailable> + 6137

    5    libc.so.6                          0x00002b8f3090d460 __libc_start_main +
    245

    6    tmpwylc7_al                        0x00005647206473f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824537
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Input: arr = [-3, -4, 5], k = 3\n/// Output: [-4, -3, 5]\n/// Example\
    \ 2:\n/// Input: arr = [4, -4, 4], k = 2\n/// Output: [4, 4]\n/// Example 3:\n\
    /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n/// Output: [2]\n/// Note:\n\
    /// 1. The length of the array will be in the range of [1, 1000].\n/// 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k\
    \ <= len(arr)\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n    guard arr.count\
    \ > k else {\n        return arr\n    }\n    var stack = [Int]()\n    for number\
    \ in arr {\n        while !stack.isEmpty && stack.count + arr.count - number >=\
    \ k && stack.last! < number {\n            stack.removeLast()\n        }\n   \
    \     stack.append(number)\n    }\n    return Array(stack.prefix(k))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp8b904ms3/tmp8b904ms3.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc6b846c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc6b53db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc6b53d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc6b53c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8b904ms3                        0x00005652af3ff9c9 <unavailable> + 6601

    5    libc.so.6                          0x00002afc6ba32460 __libc_start_main +
    245

    6    tmp8b904ms3                        0x00005652af3ff5c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1659824537
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Input: arr = [-3, -4, 5], k = 3\n/// Output: [-4, -3, 5]\n/// Example\
    \ 2:\n/// Input: arr = [4, -4, 4], k = 2\n/// Output: [4, 4]\n/// Example 3:\n\
    /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n/// Output: [2]\n/// Note:\n\
    /// 1. The length of the array will be in the range of [1, 1000].\n/// 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k\
    \ <= len(arr)\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n    var heap = Heap(arr:\
    \ arr, sort: <, shouldRemove: {\n        $0.count > k\n    })\n    return heap.arr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp9zlapjr_.swift:18:16: error: cannot find 'Heap' in scope\n    var\
    \ heap = Heap(arr: arr, sort: <, shouldRemove: {\n               ^~~~\n"
  stdout: ''
  timestamp: 1659824537
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Input: arr = [-3, -4, 5], k = 3\n/// Output: [-4, -3, 5]\n/// Example\
    \ 2:\n/// Input: arr = [4, -4, 4], k = 2\n/// Output: [4, 4]\n/// Example 3:\n\
    /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n/// Output: [2]\n/// Note:\n\
    /// 1. The length of the array will be in the range of [1, 1000].\n/// 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k\
    \ <= len(arr)\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if arr.count < k {\n        return result\n    }\n    for i in 0..<k {\n\
    \        let max = findMax(arr: arr, start: i)\n        result.append(max)\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmptlmkfva7.swift:23:19: error: cannot find 'findMax' in scope\n \
    \       let max = findMax(arr: arr, start: i)\n                  ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824537
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Input: arr = [-3, -4, 5], k = 3\n/// Output: [-4, -3, 5]\n/// Example\
    \ 2:\n/// Input: arr = [4, -4, 4], k = 2\n/// Output: [4, 4]\n/// Example 3:\n\
    /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n/// Output: [2]\n/// Note:\n\
    /// 1. The length of the array will be in the range of [1, 1000].\n/// 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k\
    \ <= len(arr)\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n    var result = [Int]()\n\
    \    guard arr.count > 0 else {\n        return result\n    }\n    guard arr.count\
    \ > k else {\n        return arr\n    }\n    var heap = PriorityQueue<Int>(sort:\
    \ {$0 > $1})\n    arr.forEach { heap.enqueue($0) }\n    for _ in 0..<k {\n   \
    \     result.append(heap.dequeue()!)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp2p9rilbc.swift:25:16: error: cannot find 'PriorityQueue' in scope\n\
    \    var heap = PriorityQueue<Int>(sort: {$0 > $1})\n               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824537
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Input: arr = [-3, -4, 5], k = 3\n/// Output: [-4, -3, 5]\n/// Example\
    \ 2:\n/// Input: arr = [4, -4, 4], k = 2\n/// Output: [4, 4]\n/// Example 3:\n\
    /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n/// Output: [2]\n/// Note:\n\
    /// 1. The length of the array will be in the range of [1, 1000].\n/// 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k\
    \ <= len(arr)\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n    return []\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmp2f5p026p/tmp2f5p026p.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79be39bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79be092b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79be092988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79be0917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2f5p026p                        0x000055d69f67c3c9 <unavailable> + 5065

    5    libc.so.6                          0x00002b79be587460 __libc_start_main +
    245

    6    tmp2f5p026p                        0x000055d69f67bfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824537
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Input: arr = [-3, -4, 5], k = 3\n/// Output: [-4, -3, 5]\n/// Example\
    \ 2:\n/// Input: arr = [4, -4, 4], k = 2\n/// Output: [4, 4]\n/// Example 3:\n\
    /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n/// Output: [2]\n/// Note:\n\
    /// 1. The length of the array will be in the range of [1, 1000].\n/// 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k\
    \ <= len(arr)\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n    var result = [Int]()\n\
    \    for i in 0..<k {\n        var maxNum = Int.min\n        var maxIndex = -1\n\
    \        for j in i..<arr.count {\n            if arr[j] > maxNum {\n        \
    \        maxNum = arr[j]\n                maxIndex = j\n            }\n      \
    \  }\n        result.append(maxNum)\n        if maxIndex != i {\n            (arr[i],\
    \ arr[maxIndex]) = (arr[maxIndex], arr[i])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpgnfecvwl.swift:30:17: error: cannot assign through subscript: 'arr'\
    \ is a 'let' constant\n            (arr[i], arr[maxIndex]) = (arr[maxIndex], arr[i])\n\
    \             ~~~^\n/tmp/tmpgnfecvwl.swift:30:25: error: cannot assign through\
    \ subscript: 'arr' is a 'let' constant\n            (arr[i], arr[maxIndex]) =\
    \ (arr[maxIndex], arr[i])\n                     ~~~^\n"
  stdout: ''
  timestamp: 1659824537
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Input: arr = [-3, -4, 5], k = 3\n/// Output: [-4, -3, 5]\n/// Example\
    \ 2:\n/// Input: arr = [4, -4, 4], k = 2\n/// Output: [4, 4]\n/// Example 3:\n\
    /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n/// Output: [2]\n/// Note:\n\
    /// 1. The length of the array will be in the range of [1, 1000].\n/// 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k\
    \ <= len(arr)\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n    var result = [Int]()\n\
    \    guard arr.count > 0 else {\n        return result\n    }\n    guard arr.count\
    \ > k else {\n        return arr\n    }\n    var start = 0\n    var end = k -\
    \ 1\n    while end < arr.count {\n        result.append(arr[start..<end].max()!)\n\
    \        start += 1\n        end += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpx45aw_u6/tmpx45aw_u6.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba077f72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba077c69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba077c69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba077c687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx45aw_u6                        0x000055e20e1e96f9 <unavailable> + 5881

    5    libc.so.6                          0x00002ba07815e460 __libc_start_main +
    245

    6    tmpx45aw_u6                        0x000055e20e1e92f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824537
- exit_code: 0
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Input: arr = [-3, -4, 5], k = 3\n/// Output: [-4, -3, 5]\n/// Example\
    \ 2:\n/// Input: arr = [4, -4, 4], k = 2\n/// Output: [4, 4]\n/// Example 3:\n\
    /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n/// Output: [2]\n/// Note:\n\
    /// 1. The length of the array will be in the range of [1, 1000].\n/// 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k\
    \ <= len(arr)\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n    let sorted = arr.sorted()\n\
    \    return Array(sorted.suffix(k))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824537
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Input: arr = [-3, -4, 5], k = 3\n/// Output: [-4, -3, 5]\n/// Example\
    \ 2:\n/// Input: arr = [4, -4, 4], k = 2\n/// Output: [4, 4]\n/// Example 3:\n\
    /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n/// Output: [2]\n/// Note:\n\
    /// 1. The length of the array will be in the range of [1, 1000].\n/// 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k\
    \ <= len(arr)\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n    var res = [Int]()\n\
    \    for n in arr {\n        insert(&res, n, k)\n    }\n    return res\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\n\
    assert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2,\
    \ 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2,\
    \ -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k:\
    \ 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) ==\
    \ [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
    \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
    \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
    assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp8ck6061h.swift:20:9: error: cannot find 'insert' in scope\n   \
    \     insert(&res, n, k)\n        ^~~~~~\n"
  stdout: ''
  timestamp: 1659824537
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Input: arr = [-3, -4, 5], k = 3\n/// Output: [-4, -3, 5]\n/// Example\
    \ 2:\n/// Input: arr = [4, -4, 4], k = 2\n/// Output: [4, 4]\n/// Example 3:\n\
    /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n/// Output: [2]\n/// Note:\n\
    /// 1. The length of the array will be in the range of [1, 1000].\n/// 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k\
    \ <= len(arr)\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n    guard k > 0 else\
    \ {\n        return []\n    }\n    var result = [Int]()\n    var maxHeap = Heap(array:\
    \ arr, sort: >)\n    while !maxHeap.isEmpty && result.count < k {\n        result.append(maxHeap.remove()!)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmps8e3apam.swift:22:19: error: cannot find 'Heap' in scope\n    var\
    \ maxHeap = Heap(array: arr, sort: >)\n                  ^~~~\n"
  stdout: ''
  timestamp: 1659824537
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Input: arr = [-3, -4, 5], k = 3\n/// Output: [-4, -3, 5]\n/// Example\
    \ 2:\n/// Input: arr = [4, -4, 4], k = 2\n/// Output: [4, 4]\n/// Example 3:\n\
    /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n/// Output: [2]\n/// Note:\n\
    /// 1. The length of the array will be in the range of [1, 1000].\n/// 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k\
    \ <= len(arr)\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var arr = arr\n    var i = 0\n    while i < k {\n        var max = arr[0]\n\
    \        var maxIndex = 0\n        for j in 1..<arr.count {\n            if arr[j]\
    \ > max {\n                max = arr[j]\n                maxIndex = j\n      \
    \      }\n        }\n        arr.remove(at: maxIndex)\n        result.append(max)\n\
    \        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpuyigh517/tmpuyigh517.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad450b7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad450871b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad450871988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad4508707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuyigh517                        0x00005598fcdfb709 <unavailable> + 5897

    5    libc.so.6                          0x00002ad450d66460 __libc_start_main +
    245

    6    tmpuyigh517                        0x00005598fcdfb309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659824537
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Input: arr = [-3, -4, 5], k = 3\n/// Output: [-4, -3, 5]\n/// Example\
    \ 2:\n/// Input: arr = [4, -4, 4], k = 2\n/// Output: [4, 4]\n/// Example 3:\n\
    /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n/// Output: [2]\n/// Note:\n\
    /// 1. The length of the array will be in the range of [1, 1000].\n/// 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k\
    \ <= len(arr)\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n    guard arr.count\
    \ > 0 else {\n        return []\n    }\n    var result = [Int]()\n    for i in\
    \ 0..<k {\n        var maxIdx = i\n        for j in i+1..<arr.count {\n      \
    \      if arr[j] > arr[maxIdx] {\n                maxIdx = j\n            }\n\
    \        }\n        result.append(arr[maxIdx])\n        arr.swapAt(i, maxIdx)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(maximum(arr:\
    \ [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) ==\
    \ [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr:\
    \ [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123,\
    \ 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3,\
    \ -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0,\
    \ 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) ==\
    \ [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10,\
    \ 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2, 3, -23, 243, -400, 0],\
    \ k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpd2ptl8my.swift:30:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, maxIdx)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659824537
- exit_code: -4
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Input: arr = [-3, -4, 5], k = 3\n/// Output: [-4, -3, 5]\n/// Example\
    \ 2:\n/// Input: arr = [4, -4, 4], k = 2\n/// Output: [4, 4]\n/// Example 3:\n\
    /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n/// Output: [2]\n/// Note:\n\
    /// 1. The length of the array will be in the range of [1, 1000].\n/// 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k\
    \ <= len(arr)\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n    var result = [Int]()\n\
    \    for i in 0..<k {\n        result.append(arr[i])\n    }\n    result.sort()\n\
    \    for i in k..<arr.count {\n        var index = 0\n        while index < k\
    \ && arr[i] < result[index] {\n            index += 1\n        }\n        if index\
    \ < k {\n            result.insert(arr[i], at: index)\n            result.removeLast()\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr: [4,\
    \ -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\
    \ == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2, 20,\
    \ 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: Exception
  stderr: 'tmpb3c620na/tmpb3c620na.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bdc702c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bdc3f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bdc3f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bdc3f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb3c620na                        0x000055eeab466a3d <unavailable> + 6717

    5    libc.so.6                          0x00002b5bdc8ee460 __libc_start_main +
    245

    6    tmpb3c620na                        0x000055eeab466519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1659824537
- exit_code: 1
  program: "\n/// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// Input: arr = [-3, -4, 5], k = 3\n/// Output: [-4, -3, 5]\n/// Example\
    \ 2:\n/// Input: arr = [4, -4, 4], k = 2\n/// Output: [4, 4]\n/// Example 3:\n\
    /// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n/// Output: [2]\n/// Note:\n\
    /// 1. The length of the array will be in the range of [1, 1000].\n/// 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k\
    \ <= len(arr)\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n    var result = [Int]()\n\
    \    var num = 0\n    var index = -1\n    var i = 0\n    while i < k {\n     \
    \   num = arr[i]\n        index = i\n        for j in i+1..<arr.count {\n    \
    \        if num < arr[j] {\n                num = arr[j]\n                index\
    \ = j\n            }\n        }\n        result.append(num)\n        arr.swapAt(i,\
    \ index)\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4, -3, 5])\nassert(maximum(arr:\
    \ [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr: [-3, 2, 1, 2, -1, -2, 1],\
    \ k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0, 1, 2, -3], k: 3) == [2,\
    \ 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3], k: 4) == [0, 1, 2, 20])\n\
    assert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7) == [-13, -8, 0, 0, 3, 5,\
    \ 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2) == [3, 5])\nassert(maximum(arr:\
    \ [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr: [4, -4], k: 2) == [-4, 4])\n\
    assert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\nassert(maximum(arr: [1, 2,\
    \ 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpsshmha45.swift:32:13: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n        arr.swapAt(i, index)\n        ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659824537
