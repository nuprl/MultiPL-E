name: HumanEval_27_flip_case
language: swift
prompt: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
  \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
  \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
completions: ["    var flipped_string = \"\"\n    for char in string {\n        if\
    \ char.isLetter {\n            if char.isUppercase {\n                flipped_string.append(char.lowercased())\n\
    \            } else {\n                flipped_string.append(char.uppercased())\n\
    \            }\n        } else {\n            flipped_string.append(char)\n  \
    \      }\n    }\n    return flipped_string", "    return string.characters.map\
    \ { char in\n        if char.isUppercase {\n            return Character(String(char).lowercased())\n\
    \        } else {\n            return Character(String(char).uppercased())\n \
    \       }\n    }.reduce(\"\", +)", "    var flipped_string = \"\"\n    for c in\
    \ string.characters {\n        let upper_c = String(c).uppercaseString\n     \
    \   let lower_c = String(c).lowercaseString\n        if upper_c == String(c) {\n\
    \            flipped_string.append(lower_c)\n        } else {\n            flipped_string.append(upper_c)\n\
    \        }\n    }\n    return flipped_string", "    var result = \"\"\n    for\
    \ character in string {\n        if character.isUppercase {\n            result.append(character.lowercased())\n\
    \        } else {\n            result.append(character.uppercased())\n       \
    \ }\n    }\n    return result", "    var result = string\n    for i in 0..<string.characters.count\
    \ {\n        let index = string.index(string.startIndex, offsetBy: i)\n      \
    \  if isUpperCase(string[index]) {\n            result.replaceSubrange(index...index,\
    \ with: String(describing: string[index]).lowercased())\n        } else {\n  \
    \          result.replaceSubrange(index...index, with: String(describing: string[index]).uppercased())\n\
    \        }\n    }\n    return result", '    return ""', "    var newString = \"\
    \"\n    for character in string {\n        let stringCharacter = String(character)\n\
    \        if stringCharacter == stringCharacter.uppercaseString {\n           \
    \ newString += stringCharacter.lowercaseString\n        } else {\n           \
    \ newString += stringCharacter.uppercaseString\n        }\n    }\n    return newString",
  "    return string.characters.map {\n        $0.isUppercase ? $0.lowercase() : $0.uppercase()\n\
    \    }.reduce(\"\", combine: +)", "    return flip_case(string, { char in\n  \
    \      return char\n    })", "    return string.map { char in\n        if char.isUppercase\
    \ {\n            return char.lowercased()\n        } else {\n            return\
    \ char.uppercased()\n        }\n    }", '    return String(string.characters.map
    { $0.isUpperCase() ? $0.lowercaseString : $0.uppercaseString })', "    return\
    \ String(string.characters.map {\n        char in return char.isUppercase ? char.lowercase\
    \ : char.uppercase\n    })", '    return string.uppercased()', "    var flippedString\
    \ = \"\"\n    for character in string {\n        var flippedCharacter = character\n\
    \        if character.isLowercase {\n            flippedCharacter = character.uppercased()\n\
    \        } else if character.isUppercase {\n            flippedCharacter = character.lowercased()\n\
    \        }\n        flippedString.append(flippedCharacter)\n    }\n    return\
    \ flippedString", "    return string.map {\n        switch $0 {\n        case\
    \ \"a\"...\"z\":\n            return Character($0.uppercased())\n        case\
    \ \"A\"...\"Z\":\n            return Character($0.lowercased())\n        default:\n\
    \            return $0\n        }\n    }", "    var flipped_string = \"\"\n  \
    \  for character in string {\n        if character.isUppercase {\n           \
    \ flipped_string.append(character.lowercased())\n        } else {\n          \
    \  flipped_string.append(character.uppercased())\n        }\n    }\n    return\
    \ flipped_string", "    var flipped: String = \"\"\n    for c in string.characters\
    \ {\n        if c.isUppercase {\n            flipped.append(c.lowercaseString)\n\
    \        } else {\n            flipped.append(c.uppercaseString)\n        }\n\
    \    }\n    return flipped", "    return string.characters.reduce(\"\") { (result,\
    \ character) in\n        let characterString = String(character)\n        if characterString.lowercaseString\
    \ == characterString {\n            return result + characterString.uppercaseString\n\
    \        } else {\n            return result + characterString.lowercaseString\n\
    \        }\n    }", "    var output = \"\"\n    for character in string {\n  \
    \      if character.lowercaseString == character {\n            output += character.uppercaseString\n\
    \        } else {\n            output += character.lowercaseString\n        }\n\
    \    }\n    return output", "    var flipped_string = \"\"\n    for letter in\
    \ string {\n        if letter.isUppercase {\n            flipped_string.append(letter.lowercased())\n\
    \        } else {\n            flipped_string.append(letter.uppercased())\n  \
    \      }\n    }\n    return flipped_string"]
stop_tokens:
- "\n}"
