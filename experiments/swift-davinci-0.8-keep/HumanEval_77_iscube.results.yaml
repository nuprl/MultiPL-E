language: swift
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n  if a < 0 {\n\
    \    return false\n  }\n  let cube = Int(pow(Double(a), 1.0/3.0))\n  return Int(pow(Double(cube),\
    \ 3)) == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp03ccfa_v.swift:16:18: error: cannot find 'pow' in scope\n  let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                 ^~~\n/tmp/tmp03ccfa_v.swift:17:14:\
    \ error: cannot find 'pow' in scope\n  return Int(pow(Double(cube), 3)) == a\n\
    \             ^~~\n"
  stdout: ''
  timestamp: 1659824749
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n\tlet b = Int(pow(Double(a),\
    \ 1.0/3.0))\n\treturn b * b * b == a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl999j7_o.swift:13:14: error: cannot find 'pow' in scope\n     \
    \   let b = Int(pow(Double(a), 1.0/3.0))\n                    ^~~\n"
  stdout: ''
  timestamp: 1659824749
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return Double(a).squareRoot().truncatingRemainder(dividingBy:\
    \ 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.XtC0nX/tmpor6_42q0-1.o:tmpor6_42q0-1.o:function $s11tmpor6_42q06iscube1aSbSi_tF:
    error: undefined reference to ''sqrt''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ < 0 ? a == -1 : pow(Double(a), 1.0/3.0) - Double(Int(pow(Double(a), 1.0/3.0)))\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2vrizk5q.swift:13:30: error: cannot find 'pow' in scope\n    return\
    \ a < 0 ? a == -1 : pow(Double(a), 1.0/3.0) - Double(Int(pow(Double(a), 1.0/3.0)))\
    \ == 0\n                             ^~~\n/tmp/tmp2vrizk5q.swift:13:67: error:\
    \ cannot find 'pow' in scope\n    return a < 0 ? a == -1 : pow(Double(a), 1.0/3.0)\
    \ - Double(Int(pow(Double(a), 1.0/3.0))) == 0\n                              \
    \                                    ^~~\n"
  stdout: ''
  timestamp: 1659824749
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == a * a * a / a / a / a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpm56oogpf/tmpm56oogpf.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d37596c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d3728db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d3728d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d3728c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm56oogpf                        0x00005628eeb2832d <unavailable> + 4909

    5    libc.so.6                          0x00002b2d37782460 __libc_start_main +
    245

    6    tmpm56oogpf                        0x00005628eeb27ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824749
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ > 0 && (Double(a).squareRoot() * Double(a).squareRoot() * Double(a).squareRoot()).truncatingRemainder(dividingBy:\
    \ 1) == 0 || a == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.dj9iR3/tmpegyzss3o-1.o:tmpegyzss3o-1.o:function $s11tmpegyzss3o6iscube1aSbSi_tF:
    error: undefined reference to ''sqrt''

    /tmp/TemporaryDirectory.dj9iR3/tmpegyzss3o-1.o:tmpegyzss3o-1.o:function $s11tmpegyzss3o6iscube1aSbSi_tF:
    error: undefined reference to ''sqrt''

    /tmp/TemporaryDirectory.dj9iR3/tmpegyzss3o-1.o:tmpegyzss3o-1.o:function $s11tmpegyzss3o6iscube1aSbSi_tF:
    error: undefined reference to ''sqrt''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1659824749
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    var temp\
    \ = 0\n    var cube = 0\n    while cube < a {\n        temp += 1\n        cube\
    \ = temp * temp * temp\n    }\n    return cube == a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpdkiwdyvy/tmpdkiwdyvy.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15ab38cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15ab083b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15ab083988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15ab0827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdkiwdyvy                        0x000055606015d29d <unavailable> + 4765

    5    libc.so.6                          0x00002b15ab578460 __libc_start_main +
    245

    6    tmpdkiwdyvy                        0x000055606015ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824749
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == pow(floor(sqrt(Double(a))), 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcn66n4c4.swift:13:17: error: cannot find 'pow' in scope\n    return\
    \ a == pow(floor(sqrt(Double(a))), 3)\n                ^~~\n/tmp/tmpcn66n4c4.swift:13:21:\
    \ error: cannot find 'floor' in scope\n    return a == pow(floor(sqrt(Double(a))),\
    \ 3)\n                    ^~~~~\n/tmp/tmpcn66n4c4.swift:13:27: error: cannot find\
    \ 'sqrt' in scope\n    return a == pow(floor(sqrt(Double(a))), 3)\n          \
    \                ^~~~\n"
  stdout: ''
  timestamp: 1659824749
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n\tvar i = 0\n\
    \twhile i < a {\n\t\tif i * i * i == a {\n\t\t\treturn true\n\t\t}\n\t\ti += 1\n\
    \t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpk50uuyya/tmpk50uuyya.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b001dc01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b001d8f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b001d8f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b001d8f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk50uuyya                        0x00005641c99971b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b001dded460 __libc_start_main +
    245

    6    tmpk50uuyya                        0x00005641c9996e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824749
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return pow(Double(a),\
    \ 1.0/3.0).truncatingRemainder(dividingBy: 1) == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9zclc2kk.swift:13:12: error: cannot find 'pow' in scope\n    return\
    \ pow(Double(a), 1.0/3.0).truncatingRemainder(dividingBy: 1) == 0\n          \
    \ ^~~\n"
  stdout: ''
  timestamp: 1659824749
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    let cube\
    \ = a * a * a\n    if (cube >= 0 && cube == a) {\n        return true\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmphwc6fe8z/tmphwc6fe8z.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec227bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec224b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec224b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec224b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphwc6fe8z                        0x00005564ca5b929d <unavailable> + 4765

    5    libc.so.6                          0x00002aec229a8460 __libc_start_main +
    245

    6    tmphwc6fe8z                        0x00005564ca5b8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824749
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a ==\
    \ 0 { return true }\n    if a < 0 { a = -a }\n    for i in 1...a {\n        if\
    \ i * i * i == a { return true }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsc7t0azi.swift:14:16: error: cannot assign to value: 'a' is a 'let'\
    \ constant\n    if a < 0 { a = -a }\n               ^\n"
  stdout: ''
  timestamp: 1659824749
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeqhzv2jd.swift:13:16: error: cannot find 'pow' in scope\n    return\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n               ^~~\n/tmp/tmpeqhzv2jd.swift:13:47: error: cannot\
    \ find 'pow' in scope\n    return Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpeqhzv2jd.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) == a\n                                      \
    \                                       ^~~\n"
  stdout: ''
  timestamp: 1659824749
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 0 && Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a),\
    \ 1.0/3.0))) == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp07cbw8j2.swift:13:26: error: cannot find 'round' in scope\n   \
    \ return a >= 0 && Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a),\
    \ 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0))) == a\n                      \
    \   ^~~~~\n/tmp/tmp07cbw8j2.swift:13:32: error: cannot find 'pow' in scope\n \
    \   return a >= 0 && Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a),\
    \ 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0))) == a\n                      \
    \         ^~~\n/tmp/tmp07cbw8j2.swift:13:62: error: cannot find 'round' in scope\n\
    \    return a >= 0 && Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a),\
    \ 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0))) == a\n                      \
    \                                       ^~~~~\n/tmp/tmp07cbw8j2.swift:13:68: error:\
    \ cannot find 'pow' in scope\n    return a >= 0 && Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a),\
    \ 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0))) == a\n                      \
    \                                             ^~~\n/tmp/tmp07cbw8j2.swift:13:98:\
    \ error: cannot find 'round' in scope\n    return a >= 0 && Int(round(pow(Double(a),\
    \ 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0)))\
    \ == a\n                                                                     \
    \                            ^~~~~\n/tmp/tmp07cbw8j2.swift:13:104: error: cannot\
    \ find 'pow' in scope\n    return a >= 0 && Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a),\
    \ 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0))) == a\n                      \
    \                                                                            \
    \     ^~~\n"
  stdout: ''
  timestamp: 1659824749
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzcgt1q6v.swift:13:26: error: cannot find 'pow' in scope\n    return\
    \ a >= 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                         ^~~\n/tmp/tmpzcgt1q6v.swift:13:57:\
    \ error: cannot find 'pow' in scope\n    return a >= 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                 ^~~\n/tmp/tmpzcgt1q6v.swift:13:88:\
    \ error: cannot find 'pow' in scope\n    return a >= 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                            \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659824672
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a > 0 && sqrt(Double(a)) == Double(Int(sqrt(Double(a))))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph45g_yoz.swift:13:52: error: cannot find 'sqrt' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || a > 0 && sqrt(Double(a)) == Double(Int(sqrt(Double(a))))\n\
    \                                                   ^~~~\n/tmp/tmph45g_yoz.swift:13:82:\
    \ error: cannot find 'sqrt' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ a > 0 && sqrt(Double(a)) == Double(Int(sqrt(Double(a))))\n                 \
    \                                                                ^~~~\n"
  stdout: ''
  timestamp: 1659824749
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || Int(round(pow(Double(a.magnitude), 1.0/3.0)))**3 == a.magnitude\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw2m1c9hv.swift:13:26: error: cannot find 'round' in scope\n   \
    \ return a == 0 || Int(round(pow(Double(a.magnitude), 1.0/3.0)))**3 == a.magnitude\n\
    \                         ^~~~~\n/tmp/tmpw2m1c9hv.swift:13:32: error: cannot find\
    \ 'pow' in scope\n    return a == 0 || Int(round(pow(Double(a.magnitude), 1.0/3.0)))**3\
    \ == a.magnitude\n                               ^~~\n/tmp/tmpw2m1c9hv.swift:13:67:\
    \ error: cannot find operator '**' in scope\n    return a == 0 || Int(round(pow(Double(a.magnitude),\
    \ 1.0/3.0)))**3 == a.magnitude\n                                             \
    \                     ^~\n"
  stdout: ''
  timestamp: 1659824749
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    let b =\
    \ a > 0 ? a : a * -1\n    let d = Int(pow(Double(b), 1/3))\n    return d * d *\
    \ d == b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5mexkss0.swift:14:17: error: cannot find 'pow' in scope\n    let\
    \ d = Int(pow(Double(b), 1/3))\n                ^~~\n"
  stdout: ''
  timestamp: 1659824749
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return (a\
    \ % 2 == 0) ? false : Int(pow(Double(a), 1/3.0)) * Int(pow(Double(a), 1/3.0))\
    \ * Int(pow(Double(a), 1/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppj4zz_4i.swift:13:39: error: cannot find 'pow' in scope\n    return\
    \ (a % 2 == 0) ? false : Int(pow(Double(a), 1/3.0)) * Int(pow(Double(a), 1/3.0))\
    \ * Int(pow(Double(a), 1/3.0)) == a\n                                      ^~~\n\
    /tmp/tmppj4zz_4i.swift:13:68: error: cannot find 'pow' in scope\n    return (a\
    \ % 2 == 0) ? false : Int(pow(Double(a), 1/3.0)) * Int(pow(Double(a), 1/3.0))\
    \ * Int(pow(Double(a), 1/3.0)) == a\n                                        \
    \                           ^~~\n/tmp/tmppj4zz_4i.swift:13:97: error: cannot find\
    \ 'pow' in scope\n    return (a % 2 == 0) ? false : Int(pow(Double(a), 1/3.0))\
    \ * Int(pow(Double(a), 1/3.0)) * Int(pow(Double(a), 1/3.0)) == a\n           \
    \                                                                            \
    \         ^~~\n"
  stdout: ''
  timestamp: 1659824749
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n\tif a == 0\
    \ {\n\t\treturn true\n\t}\n\treturn a > 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_ljjs6d2.swift:16:22: error: cannot find 'pow' in scope\n     \
    \   return a > 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) == a\n                            ^~~\n/tmp/tmp_ljjs6d2.swift:16:53:\
    \ error: cannot find 'pow' in scope\n        return a > 0 && Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n\
    \                                                           ^~~\n/tmp/tmp_ljjs6d2.swift:16:84:\
    \ error: cannot find 'pow' in scope\n        return a > 0 && Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n\
    \                                                                            \
    \              ^~~\n"
  stdout: ''
  timestamp: 1659824749
