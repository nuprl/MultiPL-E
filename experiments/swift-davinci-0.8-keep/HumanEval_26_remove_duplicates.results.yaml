language: swift
name: HumanEval_26_remove_duplicates
results:
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var results: [Int] = []\n    var unique: [Int: Bool] = [:]\n    for number\
    \ in numbers {\n        if let _ = unique[number] {\n            continue\n  \
    \      }\n        results.append(number)\n        unique[number] = true\n    }\n\
    \    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmpde13bzbz/tmpde13bzbz.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb8ac6dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb8a964b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb8a964988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb8a9637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpde13bzbz                        0x000055712e873961 <unavailable> + 6497

    5    libc.so.6                          0x00002afb8ae59460 __libc_start_main +
    245

    6    tmpde13bzbz                        0x000055712e873319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824702
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var retArr: [Int] = []\n    var tempDict: [Int:Int] = [:]\n    for n\
    \ in numbers {\n        if tempDict[n] == nil {\n            tempDict[n] = 1\n\
    \            retArr.append(n)\n        }\n    }\n    return retArr\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmptyy30y79/tmptyy30y79.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b772f670c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b772f367b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b772f367988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b772f3667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptyy30y79                        0x00005599feca6921 <unavailable> + 6433

    5    libc.so.6                          0x00002b772f85c460 __libc_start_main +
    245

    6    tmptyy30y79                        0x00005599feca62d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824702
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    var hashMap: [Int: Bool] = [:]\n    for number\
    \ in numbers {\n        if hashMap[number] == nil {\n            hashMap[number]\
    \ = true\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp_nos_vjg/tmp_nos_vjg.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9feffa4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fefc9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fefc9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fefc9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_nos_vjg                        0x000056216cbe6961 <unavailable> + 6497

    5    libc.so.6                          0x00002b9ff0190460 __libc_start_main +
    245

    6    tmp_nos_vjg                        0x000056216cbe6319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824702
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var newNumbers = [Int]()\n    for number in numbers {\n        if !newNumbers.contains(number)\
    \ {\n            newNumbers.append(number)\n        }\n    }\n    return newNumbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpu8u0rk4j/tmpu8u0rk4j.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23c8858c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23c854fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23c854f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23c854e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8u0rk4j                        0x000055a83310f891 <unavailable> + 6289

    5    libc.so.6                          0x00002b23c8a44460 __libc_start_main +
    245

    6    tmpu8u0rk4j                        0x000055a83310f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824702
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var filteredNumbers: [Int] = []\n    for number in numbers {\n      \
    \  if(!filteredNumbers.contains(number)) {\n            filteredNumbers.append(number)\n\
    \        }\n    }\n    return filteredNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp7sm75eim/tmp7sm75eim.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac25a0a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac259d9cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac259d9c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac259d9b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7sm75eim                        0x0000561b4ea3e841 <unavailable> + 6209

    5    libc.so.6                          0x00002ac25a291460 __libc_start_main +
    245

    6    tmp7sm75eim                        0x0000561b4ea3e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824702
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var elements = Set<Int>()\n    var result = [Int]()\n    for number in\
    \ numbers {\n        if elements.contains(number) {\n            continue\n  \
    \      }\n        elements.insert(number)\n        result.append(number)\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmppi9s6tpx/tmppi9s6tpx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b838779cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8387493b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8387493988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83874927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppi9s6tpx                        0x000055a559346981 <unavailable> + 6529

    5    libc.so.6                          0x00002b8387988460 __libc_start_main +
    245

    6    tmppi9s6tpx                        0x000055a559346339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824702
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers = [Int]()\n    for num in numbers {\n        if !uniqueNumbers.contains(num)\
    \ {\n            uniqueNumbers.append(num)\n        }\n    }\n    return uniqueNumbers\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpbq4lwho6/tmpbq4lwho6.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17a26c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17a23bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17a23bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17a23be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbq4lwho6                        0x00005624b69da891 <unavailable> + 6289

    5    libc.so.6                          0x00002b17a28b4460 __libc_start_main +
    245

    6    tmpbq4lwho6                        0x00005624b69da249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824702
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var output: [Int] = []\n    var seen: [Int] = []\n    for number in numbers\
    \ {\n        if !seen.contains(number) {\n            output.append(number)\n\
    \            seen.append(number)\n        }\n    }\n    return output\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmps4ooiwmp/tmps4ooiwmp.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2dce52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2dcb49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2dcb49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2dcb487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps4ooiwmp                        0x000055a8f2394841 <unavailable> + 6209

    5    libc.so.6                          0x00002ba2dd03e460 __libc_start_main +
    245

    6    tmps4ooiwmp                        0x000055a8f23941f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824702
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var list = [Int]()\n    for element in numbers {\n        if list.contains(element)\
    \ {\n            continue\n        }\n        list.append(element)\n    }\n  \
    \  return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: Exception
  stderr: 'tmp3xf2wyen/tmp3xf2wyen.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b152ed0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b152ea05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b152ea05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b152ea047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xf2wyen                        0x0000556378934891 <unavailable> + 6289

    5    libc.so.6                          0x00002b152eefa460 __libc_start_main +
    245

    6    tmp3xf2wyen                        0x0000556378934249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824702
- exit_code: 0
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return numbers.filter { (n) -> Bool in\n        return numbers.filter({\
    \ $0 == n }).count == 1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_duplicates(numbers:\
    \ [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4])\
    \ == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) ==\
    \ [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824702
- exit_code: 0
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers: [Int] = []\n    var uniqueNumbersCount: [Int: Int]\
    \ = [:]\n    \n    for num in numbers {\n        if (uniqueNumbersCount[num] !=\
    \ nil) {\n            uniqueNumbersCount[num]! += 1\n        } else {\n      \
    \      uniqueNumbersCount[num] = 1\n        }\n    }\n    \n    for num in numbers\
    \ {\n        if (uniqueNumbersCount[num] == 1) {\n            uniqueNumbers.append(num)\n\
    \        }\n    }\n    \n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824702
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n  var final: [Int] = []\n  var set: Set<Int> = []\n  for num in numbers {\n\
    \    if set.contains(num) {\n      continue\n    }\n    final.append(num)\n  \
    \  set.insert(num)\n  }\n  return final\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpz5kt1bdi/tmpz5kt1bdi.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53e7cacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53e79a3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53e79a3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53e79a27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz5kt1bdi                        0x000055bd70fda941 <unavailable> + 6465

    5    libc.so.6                          0x00002b53e7e98460 __libc_start_main +
    245

    6    tmpz5kt1bdi                        0x000055bd70fda2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824702
- exit_code: 1
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    return numbers.reduce([]) {\n        if contains($0, $1) {\n        \
    \    return $0\n        } else {\n            return $0 + [$1]\n        }\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(remove_duplicates(numbers: []\
    \ as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) ==\
    \ [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1,\
    \ 4, 5])"
  status: SyntaxError
  stderr: "/tmp/tmprafqex9a.swift:8:12: error: cannot find 'contains' in scope\n \
    \       if contains($0, $1) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824702
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var unique_numbers = Set<Int>()\n    var unique_numbers_ordered = [Int]()\n\
    \    for number in numbers {\n        if !unique_numbers.contains(number) {\n\
    \            unique_numbers.insert(number)\n            unique_numbers_ordered.append(number)\n\
    \        }\n    }\n    return unique_numbers_ordered\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpn9ggpcyw/tmpn9ggpcyw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54c0713c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54c040ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54c040a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54c04097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn9ggpcyw                        0x00005560a40b7981 <unavailable> + 6529

    5    libc.so.6                          0x00002b54c08ff460 __libc_start_main +
    245

    6    tmpn9ggpcyw                        0x00005560a40b7339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824702
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for n in numbers {\n        if !result.contains(n)\
    \ {\n            result.append(n)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpaum4cxq2/tmpaum4cxq2.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7b1466c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7b115db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7b115d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7b115c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaum4cxq2                        0x0000558380444841 <unavailable> + 6209

    5    libc.so.6                          0x00002af7b1652460 __libc_start_main +
    245

    6    tmpaum4cxq2                        0x00005583804441f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824702
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpg6aesnnh/tmpg6aesnnh.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba287293c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba286f8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba286f8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba286f897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg6aesnnh                        0x000056365ebac891 <unavailable> + 6289

    5    libc.so.6                          0x00002ba28747f460 __libc_start_main +
    245

    6    tmpg6aesnnh                        0x000056365ebac249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    let numSet = Set(numbers)\n    return Array(numSet)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmp6vwbzmg2/tmp6vwbzmg2.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b321fe6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b321fb62b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b321fb62988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b321fb617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vwbzmg2                        0x000055fc9ca4760d <unavailable> + 5645

    5    libc.so.6                          0x00002b3220057460 __libc_start_main +
    245

    6    tmp6vwbzmg2                        0x000055fc9ca47129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824702
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var uniqueNumbers: [Int] = []\n    for number in numbers {\n        if\
    \ !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_duplicates(numbers: [] as [Int]) == [] as [Int])\nassert(remove_duplicates(numbers:\
    \ [1, 2, 3, 4]) == [1, 2, 3, 4])\nassert(remove_duplicates(numbers: [1, 2, 3,\
    \ 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpqj7b01p_/tmpqj7b01p_.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b266f58cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b266f283b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b266f283988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b266f2827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqj7b01p_                        0x00005602b6f8e841 <unavailable> + 6209

    5    libc.so.6                          0x00002b266f778460 __libc_start_main +
    245

    6    tmpqj7b01p_                        0x00005602b6f8e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824631
- exit_code: 0
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    let counts = numbers.reduce(into: [:]) { counts, number in counts[number,\
    \ default: 0] += 1 }\n    return numbers.filter { counts[$0] == 1 }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824702
- exit_code: -4
  program: "\n/// From a list of integers, remove all elements that occur more than\
    \ once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int]) == []\
    \ as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3, 4])\n\
    assert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
  status: Exception
  stderr: 'tmpngjam0o2/tmpngjam0o2.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b101c702c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b101c3f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b101c3f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b101c3f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpngjam0o2                        0x000055f923edc841 <unavailable> + 6209

    5    libc.so.6                          0x00002b101c8ee460 __libc_start_main +
    245

    6    tmpngjam0o2                        0x000055f923edc1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824631
