language: swift
name: HumanEval_103_rounded_avg
results:
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(avg.binary)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmplpz9nyo5.swift:16:25: error: value of type 'Int' has no member\
    \ 'binary'\n    return .success(avg.binary)\n                    ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824938
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let average = Int(round(Double(n + m) / 2))\n    return .success(String(average,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpbp5sxype.swift:17:23: error: cannot find 'round' in scope\n   \
    \ let average = Int(round(Double(n + m) / 2))\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1659824938
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    return .success(\n        String(String(Int(Double(n + m) / 2).rounded(),\
    \ radix: 2).suffix(Int.bitWidth))\n    )\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmp1opq1i9x.swift:16:46: error: value of type 'Int' has no member\
    \ 'rounded'\n        String(String(Int(Double(n + m) / 2).rounded(), radix: 2).suffix(Int.bitWidth))\n\
    \                      ~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824938
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let average = ((n + m) / 2)\n    let binary = String(average, radix:\
    \ 2)\n    return .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpsfcv7p_d/tmpsfcv7p_d.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0203d7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0203a71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0203a71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0203a707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsfcv7p_d                        0x000055b77162deb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b0203f66460 __libc_start_main +
    245

    6    tmpsfcv7p_d                        0x000055b77162d649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824938
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    var sum = 0\n    for i in n...m {\n        sum += i\n    }\n    let average\
    \ = sum / (m - n + 1)\n    let binaryString = String(average, radix: 2)\n    return\
    \ .success(\"0b\\(binaryString)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpo4nlkpj1/tmpo4nlkpj1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace565a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace5629cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace5629c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace5629b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo4nlkpj1                        0x0000561085e06fa8 <unavailable> + 8104

    5    libc.so.6                          0x00002ace56791460 __libc_start_main +
    245

    6    tmpo4nlkpj1                        0x0000561085e06739 <unavailable> + 5945

    '
  stdout: ''
  timestamp: 1659824938
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = Int(round(Double(sum) /\
    \ Double(m - n + 1)))\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmp96n4_hc2.swift:16:19: error: cannot find 'round' in scope\n   \
    \ let avg = Int(round(Double(sum) / Double(m - n + 1)))\n                  ^~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let rounded = sum / (m - n + 1)\n\
    \    return .success(String(rounded, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp9bmqyh0a/tmp9bmqyh0a.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec583cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec580c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec580c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec580c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9bmqyh0a                        0x00005558a7ace8b5 <unavailable> + 6325

    5    libc.so.6                          0x00002aec585ba460 __libc_start_main +
    245

    6    tmp9bmqyh0a                        0x00005558a7ace4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824938
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = Array(n...m).reduce(0, +)\n    let avg = (sum + (m - n + 1)\
    \ / 2) / (m - n + 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpa4liytqf/tmpa4liytqf.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05514d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05511cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05511ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05511c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa4liytqf                        0x00005644174bc925 <unavailable> + 6437

    5    libc.so.6                          0x00002b05516bf460 __libc_start_main +
    245

    6    tmpa4liytqf                        0x00005644174bc529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1659824938
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    return .success(String(Int(Double(n + m)/2).toBinary()))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpep0uo1kd.swift:15:49: error: value of type 'Int' has no member\
    \ 'toBinary'\n    return .success(String(Int(Double(n + m)/2).toBinary()))\n \
    \                          ~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824938
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let result = Int(Double(n + m) / 2)\n    return .success(String(result,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpudrsajgb/tmpudrsajgb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8c30eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8c2de1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8c2de1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8c2de07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpudrsajgb                        0x000055e999591775 <unavailable> + 6005

    5    libc.so.6                          0x00002ac8c32d6460 __libc_start_main +
    245

    6    tmpudrsajgb                        0x000055e999591379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824938
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let average = round(((Double(n) + Double(m)) / 2))\n    return .success(String(format:\
    \ \"0b%04o\", Int(average)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpt3m7wj73.swift:17:19: error: cannot find 'round' in scope\n   \
    \ let average = round(((Double(n) + Double(m)) / 2))\n                  ^~~~~\n\
    /tmp/tmpt3m7wj73.swift:18:27: error: incorrect argument labels in call (have 'format:_:',\
    \ expected 'repeating:count:')\n    return .success(String(format: \"0b%04o\"\
    , Int(average)))\n                          ^~~~~~~\n                        \
    \   repeating         count: \n"
  stdout: ''
  timestamp: 1659824938
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n...m).reduce(0, +) / (m - n + 1)\n    return .success(avg.binaryString)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpzx3os768.swift:16:25: error: value of type 'Int' has no member\
    \ 'binaryString'\n    return .success(avg.binaryString)\n                    ~~~\
    \ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824938
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = n + m\n    let avg = sum / 2\n    let bit = (avg % 2 == 0)\
    \ ? 0 : 1\n    let binary: String = String(bit) + String(binary)\n    return rounded_avg(n:\
    \ 0, m: avg / 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpmp5zz6au.swift:18:47: error: use of local variable 'binary' before\
    \ its declaration\n    let binary: String = String(bit) + String(binary)\n   \
    \                                           ^\n/tmp/tmpmp5zz6au.swift:18:9: note:\
    \ 'binary' declared here\n    let binary: String = String(bit) + String(binary)\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659824938
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    return .success(String(Int(Double(n + m) / 2.0).bin))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: SyntaxError
  stderr: "/tmp/tmp30vqt4xa.swift:15:53: error: value of type 'Int' has no member\
    \ 'bin'\n    return .success(String(Int(Double(n + m) / 2.0).bin))\n         \
    \                  ~~~~~~~~~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1659824938
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg = sum / (m - n + 1)\n\
    \    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmplo7tgga6/tmplo7tgga6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a388c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a385c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a385c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a385bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplo7tgga6                        0x000055c3e082b775 <unavailable> + 6005

    5    libc.so.6                          0x00002b8a38ab5460 __libc_start_main +
    245

    6    tmplo7tgga6                        0x000055c3e082b379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    } else {\n        let sum = (n...m).reduce(0, +)\n        let avg = (sum\
    \ + n) / (m - n + 1)\n        return .success(avg.binary)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmp90afodmx.swift:19:29: error: value of type 'Int' has no member\
    \ 'binary'\n        return .success(avg.binary)\n                        ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824938
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    var sum = 0\n    if n > m {\n   \
    \     return .failure(-1)\n    }\n    for i in n...m {\n        sum += i\n   \
    \ }\n    let average = sum / (m - n + 1)\n    return .success(String(average,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp23btv1nb/tmp23btv1nb.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad435fa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad435c9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad435c9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad435c9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp23btv1nb                        0x00005604c1bf7865 <unavailable> + 6245

    5    libc.so.6                          0x00002ad436194460 __libc_start_main +
    245

    6    tmp23btv1nb                        0x00005604c1bf7469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824938
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    return .success(\"0b\\(String(format: \"%b\", (n+m)/2))\")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmp2f59mpva.swift:15:32: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n    return .success(\"0b\\\
    (String(format: \"%b\", (n+m)/2))\")\n                               ^~~~~~~\n\
    \                                repeating     count: \n"
  stdout: ''
  timestamp: 1659824939
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let sum = m + n\n    let quotient = sum / 2\n    let remainder = sum\
    \ % 2\n    let binary = String(quotient, radix: 2)\n    let result = \"0b\" +\
    \ (remainder > 0 ? binary + \"1\" : binary)\n    return .success(result)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmptmnb8stc/tmptmnb8stc.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3a4b71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3a4868b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3a4868988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3a48677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptmnb8stc                        0x000056034b2599e8 <unavailable> + 6632

    5    libc.so.6                          0x00002ae3a4d5d460 __libc_start_main +
    245

    6    tmptmnb8stc                        0x000056034b2593c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824938
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    var sum = 0\n    for i in n...m {\n        sum += i\n    }\n    return\
    \ .success(String(sum / (m - n + 1), radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpam032w1t/tmpam032w1t.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b613f791c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b613f488b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b613f488988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b613f4877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpam032w1t                        0x00005574b7481865 <unavailable> + 6245

    5    libc.so.6                          0x00002b613f97d460 __libc_start_main +
    245

    6    tmpam032w1t                        0x00005574b7481469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824938
