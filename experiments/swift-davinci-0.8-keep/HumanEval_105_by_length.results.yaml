language: swift
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var sorted_arr = [Int]()\n    for number\
    \ in arr {\n        if number < 1 || number > 9 {\n            continue\n    \
    \    }\n        sorted_arr.append(number)\n    }\n    sorted_arr.sortInPlace()\n\
    \    sorted_arr.reverse()\n    var ans = [String]()\n    for number in sorted_arr\
    \ {\n        switch number {\n        case 1:\n            ans.append(\"One\"\
    )\n        case 2:\n            ans.append(\"Two\")\n        case 3:\n       \
    \     ans.append(\"Three\")\n        case 4:\n            ans.append(\"Four\"\
    )\n        case 5:\n            ans.append(\"Five\")\n        case 6:\n      \
    \      ans.append(\"Six\")\n        case 7:\n            ans.append(\"Seven\"\
    )\n        case 8:\n            ans.append(\"Eight\")\n        case 9:\n     \
    \       ans.append(\"Nine\")\n        default:\n            continue\n       \
    \ }\n    }\n    return ans\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxygpec4m.swift:26:16: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    sorted_arr.sortInPlace()\n    ~~~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014114
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let dictionary = [1: \"One\", 2: \"\
    Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"\
    Eight\", 9: \"Nine\"]\n    let sorted = arr.sorted { $0 < $1 }\n    let reversed\
    \ = sorted.reversed()\n    let filtered = reversed.filter { $0 >= 1 && $0 <= 9\
    \ }\n    let array = filtered.map { dictionary[$0] ?? \"\" }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014114
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let new_arr = arr.filter({ $0 >= 1\
    \ && $0 <= 9 }).sorted().reversed()\n    let str_arr = new_arr.map({\n       \
    \ switch $0 {\n        case 1:\n            return \"One\"\n        case 2:\n\
    \            return \"Two\"\n        case 3:\n            return \"Three\"\n \
    \       case 4:\n            return \"Four\"\n        case 5:\n            return\
    \ \"Five\"\n        case 6:\n            return \"Six\"\n        case 7:\n   \
    \         return \"Seven\"\n        case 8:\n            return \"Eight\"\n  \
    \      case 9:\n            return \"Nine\"\n        default:\n            return\
    \ \"\"\n        }\n    })\n    return str_arr\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014114
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    for item in reversed\
    \ {\n        switch item {\n        case 1:\n            result.append(\"One\"\
    )\n        case 2:\n            result.append(\"Two\")\n        case 3:\n    \
    \        result.append(\"Three\")\n        case 4:\n            result.append(\"\
    Four\")\n        case 5:\n            result.append(\"Five\")\n        case 6:\n\
    \            result.append(\"Six\")\n        case 7:\n            result.append(\"\
    Seven\")\n        case 8:\n            result.append(\"Eight\")\n        case\
    \ 9:\n            result.append(\"Nine\")\n        default:\n            continue\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014114
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var new_arr = Array(repeating: \"\"\
    , count: arr.count)\n    let num_words = [\"\", \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    var str = \"\"\
    \n    for i in stride(from: arr.count - 1, through: 0, by: -1) {\n        if arr[i]\
    \ >= 1 && arr[i] <= 9 {\n            new_arr[arr.count - 1 - i] = num_words[arr[i]]\n\
    \        }\n    }\n    return new_arr\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmptquezihw/tmptquezihw.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b71e5ff9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b71e5cf0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b71e5cf0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71e5cef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptquezihw                        0x000055f797852a11 <unavailable> + 6673

    5    libc.so.6                          0x00002b71e61e5460 __libc_start_main +
    245

    6    tmptquezihw                        0x000055f7978524b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660014114
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    if arr.count == 0 {\n        return\
    \ []\n    }\n    let valid = arr.filter { $0 >= 1 && $0 <= 9 }\n    let sorted\
    \ = valid.sorted()\n    let reversed = sorted.reversed()\n    return reversed.map\
    \ { \"\\($0)\" }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpl2nc_96m/tmpl2nc_96m.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b362b415c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b362b10cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b362b10c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b362b10b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2nc_96m                        0x0000563a32a5abc1 <unavailable> + 7105

    5    libc.so.6                          0x00002b362b601460 __libc_start_main +
    245

    6    tmpl2nc_96m                        0x0000563a32a5a669 <unavailable> + 5737

    '
  stdout: ''
  timestamp: 1660014114
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    // Your code here\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: '/tmp/tmpl1gwcma2.swift:20:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014114
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let str = [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    var result\
    \ = [String]()\n    let set = Set(arr)\n    for i in set {\n        if i >= 1\
    \ && i <= 9 {\n            result.append(str[i - 1])\n        }\n    }\n    return\
    \ result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmphe_ew9fe/tmphe_ew9fe.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b25c99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b25990b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b25990988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b2598f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphe_ew9fe                        0x000056428616b991 <unavailable> + 6545

    5    libc.so.6                          0x00002b1b25e85460 __libc_start_main +
    245

    6    tmphe_ew9fe                        0x000056428616b439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660014114
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let result = arr.sorted(by: <).filter\
    \ {$0 >= 1 && $0 <= 9}.reversed().map { number -> String in\n        switch number\
    \ {\n        case 1:\n            return \"One\"\n        case 2:\n          \
    \  return \"Two\"\n        case 3:\n            return \"Three\"\n        case\
    \ 4:\n            return \"Four\"\n        case 5:\n            return \"Five\"\
    \n        case 6:\n            return \"Six\"\n        case 7:\n            return\
    \ \"Seven\"\n        case 8:\n            return \"Eight\"\n        case 9:\n\
    \            return \"Nine\"\n        default:\n            return \"\"\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014114
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var numbers : [Int] = []\n    var result\
    \ : [String] = []\n    for item in arr {\n        if (1 ... 9).contains(item)\
    \ {\n            numbers.append(item)\n        }\n    }\n    numbers.sort()\n\
    \    numbers.reverse()\n    for item in numbers {\n        switch item {\n   \
    \     case 1:\n            result.append(\"One\")\n        case 2:\n         \
    \   result.append(\"Two\")\n        case 3:\n            result.append(\"Three\"\
    )\n        case 4:\n            result.append(\"Four\")\n        case 5:\n   \
    \         result.append(\"Five\")\n        case 6:\n            result.append(\"\
    Six\")\n        case 7:\n            result.append(\"Seven\")\n        case 8:\n\
    \            result.append(\"Eight\")\n        case 9:\n            result.append(\"\
    Nine\")\n        default:\n            continue\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014114
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = Array(Set(arr)).sorted(by:\
    \ <)\n    let map = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"]\n    return sorted.reversed().filter {$0 > 0\
    \ && $0 < 10}.map {map[$0 - 1]}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpktdhyfkq/tmpktdhyfkq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43e42fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43e3ff1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43e3ff1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43e3ff07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpktdhyfkq                        0x000055a9b20f1a61 <unavailable> + 6753

    5    libc.so.6                          0x00002b43e44e6460 __libc_start_main +
    245

    6    tmpktdhyfkq                        0x000055a9b20f1509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660014114
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter({ $0 > 0 &&\
    \ $0 < 10 }).sorted()\n    let reversed = sorted.reversed()\n    let names = reversed.map({\
    \ num in\n        switch num {\n        case 1: return \"One\"\n        case 2:\
    \ return \"Two\"\n        case 3: return \"Three\"\n        case 4: return \"\
    Four\"\n        case 5: return \"Five\"\n        case 6: return \"Six\"\n    \
    \    case 7: return \"Seven\"\n        case 8: return \"Eight\"\n        case\
    \ 9: return \"Nine\"\n        default: return \"\"\n        }\n    })\n    return\
    \ names\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014114
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n  let sorted = arr.filter({$0 > 0 && $0\
    \ < 10}).sorted()\n  let reversed = sorted.reversed()\n  let mapped = reversed.map({String($0)})\n\
    \  return mapped\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpxki8nvzb/tmpxki8nvzb.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e1c041c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e1bd38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e1bd38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e1bd377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxki8nvzb                        0x00005581e96419d1 <unavailable> + 6609

    5    libc.so.6                          0x00002b6e1c22d460 __libc_start_main +
    245

    6    tmpxki8nvzb                        0x00005581e9641479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1660014114
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let arr = arr.filter { $0 >= 1 && $0\
    \ <= 9 }.sorted(by: <).reversed()\n    let dic = [1:\"One\", 2:\"Two\", 3:\"Three\"\
    , 4:\"Four\", 5:\"Five\", 6:\"Six\", 7:\"Seven\", 8:\"Eight\", 9:\"Nine\"]\n \
    \   var output: [String] = []\n    for num in arr {\n        output.append(dic[num]!)\n\
    \    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014114
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var arr = arr.filter({ $0 > 0 && $0\
    \ < 10 }).sorted().reversed()\n    var dic: [Int: String] = [1: \"One\", 2: \"\
    Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"\
    Eight\", 9: \"Nine\"]\n    for i in 0..<arr.count {\n        arr[i] = dic[arr[i]]!\n\
    \    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0xgq7xza.swift:22:12: error: no exact matches in call to subscript\
    \ \n        arr[i] = dic[arr[i]]!\n           ^\n/tmp/tmp0xgq7xza.swift:22:12:\
    \ note: found candidate with type '(ReversedCollection<[Int]>.Index) -> Int'\n\
    \        arr[i] = dic[arr[i]]!\n           ^\n/tmp/tmp0xgq7xza.swift:22:12: note:\
    \ found candidate with type '(Range<ReversedCollection<[Int]>.Index>) -> Slice<ReversedCollection<[Int]>>'\n\
    \        arr[i] = dic[arr[i]]!\n           ^\n/tmp/tmp0xgq7xza.swift:22:12: note:\
    \ found candidate with type '((UnboundedRange_) -> ()) -> Slice<ReversedCollection<[Int]>>'\n\
    \        arr[i] = dic[arr[i]]!\n           ^\n/tmp/tmp0xgq7xza.swift:22:26: error:\
    \ cannot convert value of type 'Int' to expected argument type 'ReversedCollection<[Int]>.Index'\n\
    \        arr[i] = dic[arr[i]]!\n                         ^\n/tmp/tmp0xgq7xza.swift:24:12:\
    \ error: cannot convert return expression of type 'ReversedCollection<[Int]>'\
    \ to return type '[String]'\n    return arr\n           ^~~\n"
  stdout: ''
  timestamp: 1660014114
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    let sorted\
    \ = arr.sorted()\n    let reversed = sorted.reversed()\n    let filtered = reversed.filter\
    \ { $0 >= 1 && $0 <= 9 }\n    for item in filtered {\n        result.append(convert(item:\
    \ item))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpovjeat07.swift:24:23: error: cannot find 'convert' in scope\n \
    \       result.append(convert(item: item))\n                      ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014114
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    // your code\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: '/tmp/tmphh40zxwi.swift:20:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014114
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let sorted = arr.filter { $0 >= 1 &&\
    \ $0 <= 9 }.sorted()\n    let reversed = sorted.reversed()\n    let result = reversed.map\
    \ { (num) -> String in\n        switch num {\n        case 1:\n            return\
    \ \"One\"\n        case 2:\n            return \"Two\"\n        case 3:\n    \
    \        return \"Three\"\n        case 4:\n            return \"Four\"\n    \
    \    case 5:\n            return \"Five\"\n        case 6:\n            return\
    \ \"Six\"\n        case 7:\n            return \"Seven\"\n        case 8:\n  \
    \          return \"Eight\"\n        case 9:\n            return \"Nine\"\n  \
    \      default:\n            return \"\"\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014114
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    let words = [1: \"One\", 2: \"Two\"\
    , 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\"\
    , 9: \"Nine\"]\n    var result = [String]()\n    var sorted = arr.filter({$0 >=\
    \ 1 && $0 <= 9}).sorted(by: <)\n    sorted.reverse()\n    sorted.forEach({ result.append(words[$0]!)\
    \ })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014114
- exit_code: 0
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3]   \n/// -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\
    /// -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n/// return [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is\
    \ empty, return an empty array:\n/// arr = []\n/// return []\n/// If the array\
    \ has any strange number ignore it:\n/// arr = [1, -1 , 55] \n/// -> sort arr\
    \ -> [-1, 1, 55]\n/// -> reverse arr -> [55, 1, -1]\n/// return = ['One']\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n    var arr_str = [String]()\n    var arr_int\
    \ = [Int]()\n    for i in arr {\n        if i >= 1 && i <= 9 {\n            arr_int.append(i)\n\
    \        }\n    }\n    arr_int.sort(by: <)\n    arr_int.reverse()\n    for i in\
    \ arr_int {\n        switch i {\n        case 1:\n            arr_str.append(\"\
    One\")\n        case 2:\n            arr_str.append(\"Two\")\n        case 3:\n\
    \            arr_str.append(\"Three\")\n        case 4:\n            arr_str.append(\"\
    Four\")\n        case 5:\n            arr_str.append(\"Five\")\n        case 6:\n\
    \            arr_str.append(\"Six\")\n        case 7:\n            arr_str.append(\"\
    Seven\")\n        case 8:\n            arr_str.append(\"Eight\")\n        case\
    \ 9:\n            arr_str.append(\"Nine\")\n        default:\n            break\n\
    \        }\n    }\n    return arr_str\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014114
