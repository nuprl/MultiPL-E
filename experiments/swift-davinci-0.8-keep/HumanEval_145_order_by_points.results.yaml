language: swift
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    return nums.sorted(by: { (first,\
    \ second) -> Bool in\n        let firstSum = first > 0 ? first : -first\n    \
    \    let secondSum = second > 0 ? second : -second\n        return getSumOfDigits(n:\
    \ firstSum) < getSumOfDigits(n: secondSum)\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9erkf704.swift:13:16: error: cannot find 'getSumOfDigits' in scope\n\
    \        return getSumOfDigits(n: firstSum) < getSumOfDigits(n: secondSum)\n \
    \              ^~~~~~~~~~~~~~\n/tmp/tmp9erkf704.swift:13:46: error: cannot find\
    \ 'getSumOfDigits' in scope\n        return getSumOfDigits(n: firstSum) < getSumOfDigits(n:\
    \ secondSum)\n                                             ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824916
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result: [Int] = []\n    var\
    \ array: [(Int, Int)] = []\n    for (index, num) in nums.enumerated() {\n    \
    \    var sum = 0\n        for i in String(num) {\n            sum += Int(String(i))!\n\
    \        }\n        array.append((index, sum))\n    }\n    array.sort { $0.1 <\
    \ $1.1 }\n    for (index, _) in array {\n        result.append(nums[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpa6c007lf/tmpa6c007lf.swift:15: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ad001e5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad001b53561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad001b53286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad001b5313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad001b52bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpa6c007lf                        0x000055bd8ec0986b <unavailable> + 10347

    6    tmpa6c007lf                        0x000055bd8ec08b84 <unavailable> + 7044

    7    libc.so.6                          0x00002ad002048460 __libc_start_main +
    245

    8    tmpa6c007lf                        0x000055bd8ec08859 <unavailable> + 6233

    '
  stdout: ''
  timestamp: 1659824917
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var sumArray = [Int]()\n    for\
    \ i in nums {\n        var sum = 0\n        var num = i\n        while num !=\
    \ 0 {\n            sum += num % 10\n            num /= 10\n        }\n       \
    \ sumArray.append(sum)\n    }\n    return insertionsort(nums, sumArray)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpkf6hbxg1.swift:20:12: error: cannot find 'insertionsort' in scope\n\
    \    return insertionsort(nums, sumArray)\n           ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824916
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result: [Int] = []\n    var\
    \ sorted: [(Int, Int)] = []\n    for (index, value) in nums.enumerated() {\n \
    \       let value: Int = abs(value)\n        var sum: Int = 0\n        for char\
    \ in String(value) {\n            sum += Int(String(char))!\n        }\n     \
    \   sorted.append((sum, index))\n    }\n    sorted.sort(by: {$0.0 < $1.0})\n \
    \   for item in sorted {\n        result.append(nums[item.1])\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpp3kea_ye/tmpp3kea_ye.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc76f4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc76c41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc76c41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc76c407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3kea_ye                        0x000055ad6f899d54 <unavailable> + 7508

    5    libc.so.6                          0x00002acc77136460 __libc_start_main +
    245

    6    tmpp3kea_ye                        0x000055ad6f899939 <unavailable> + 6457

    '
  stdout: ''
  timestamp: 1659824917
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result: [Int] = []\n    var\
    \ points: [Int] = []\n    var ids: [Int] = []\n    for i in 0..<nums.count {\n\
    \        var sum = 0\n        for j in String(nums[i]).characters {\n        \
    \    sum += Int(String(j))!\n        }\n        points.append(sum)\n        ids.append(i)\n\
    \    }\n    for i in 0..<nums.count {\n        var min = points[i]\n        var\
    \ min_id = i\n        for j in i+1..<nums.count {\n            if points[j] <\
    \ min {\n                min = points[j]\n                min_id = j\n       \
    \     }\n        }\n        points[min_id] = points[i]\n        points[i] = min\n\
    \        let temp = ids[i]\n        ids[i] = ids[min_id]\n        ids[min_id]\
    \ = temp\n    }\n    for i in 0..<nums.count {\n        result.append(nums[ids[i]])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpwq8wwy2a.swift:15:34: error: 'characters' is unavailable: Please\
    \ use String directly\n        for j in String(nums[i]).characters {\n       \
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1659824916
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n  return nums.sorted { (a, b) -> Bool\
    \ in\n    let sumA = sum_of_digits(a)\n    let sumB = sum_of_digits(b)\n    if\
    \ sumA != sumB {\n      return sumA < sumB\n    }\n    return nums.index(of: a)!\
    \ < nums.index(of: b)!\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpq9g6apq2.swift:11:16: error: cannot find 'sum_of_digits' in scope\n\
    \    let sumA = sum_of_digits(a)\n               ^~~~~~~~~~~~~\n/tmp/tmpq9g6apq2.swift:12:16:\
    \ error: cannot find 'sum_of_digits' in scope\n    let sumB = sum_of_digits(b)\n\
    \               ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824916
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    return nums.sorted { (a, b) ->\
    \ Bool in\n        a.digitsSum == b.digitsSum ? a < b : a.digitsSum < b.digitsSum\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(order_by_points(nums: [1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpncw6ckum.swift:11:11: error: value of type 'Int' has no member\
    \ 'digitsSum'\n        a.digitsSum == b.digitsSum ? a < b : a.digitsSum < b.digitsSum\n\
    \        ~ ^~~~~~~~~\n/tmp/tmpncw6ckum.swift:11:26: error: value of type 'Int'\
    \ has no member 'digitsSum'\n        a.digitsSum == b.digitsSum ? a < b : a.digitsSum\
    \ < b.digitsSum\n                       ~ ^~~~~~~~~\n/tmp/tmpncw6ckum.swift:11:48:\
    \ error: value of type 'Int' has no member 'digitsSum'\n        a.digitsSum ==\
    \ b.digitsSum ? a < b : a.digitsSum < b.digitsSum\n                          \
    \                   ~ ^~~~~~~~~\n/tmp/tmpncw6ckum.swift:11:62: error: value of\
    \ type 'Int' has no member 'digitsSum'\n        a.digitsSum == b.digitsSum ? a\
    \ < b : a.digitsSum < b.digitsSum\n                                          \
    \                 ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824916
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict\
    \ = [Int: Int]()\n    for number in nums {\n        var sum = 0\n        let stringNum\
    \ = String(number)\n        for ch in stringNum {\n            sum += Int(String(ch))!\n\
    \        }\n        dict[number] = sum\n    }\n    let arr = dict.sorted { (t1,\
    \ t2) -> Bool in\n        if t1.value < t2.value {\n            return true\n\
    \        } else if t1.value == t2.value {\n            return t1.key < t2.key\n\
    \        } else {\n            return false\n        }\n    }\n    for element\
    \ in arr {\n        result.append(element.key)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpfx14n55m/tmpfx14n55m.swift:16: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9f355ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9f3255561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac9f3255286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac9f325513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac9f3254bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpfx14n55m                        0x0000561f8e45e672 <unavailable> + 9842

    6    tmpfx14n55m                        0x0000561f8e45d9b4 <unavailable> + 6580

    7    libc.so.6                          0x00002ac9f374a460 __libc_start_main +
    245

    8    tmpfx14n55m                        0x0000561f8e45d689 <unavailable> + 5769

    '
  stdout: ''
  timestamp: 1659824917
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    return nums.sorted(by: {\n    \
    \    return $0.sumDigits() < $1.sumDigits()\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp3h6y82lh.swift:11:19: error: value of type 'Int' has no member\
    \ 'sumDigits'\n        return $0.sumDigits() < $1.sumDigits()\n              \
    \ ~~ ^~~~~~~~~\n/tmp/tmp3h6y82lh.swift:11:36: error: value of type 'Int' has no\
    \ member 'sumDigits'\n        return $0.sumDigits() < $1.sumDigits()\n       \
    \                         ~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824916
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    // your code here!\n    return\
    \ []\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(order_by_points(nums: [1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmphqm387cp/tmphqm387cp.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fe111fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fe0e16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fe0e16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fe0e157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphqm387cp                        0x000055c68bec23e4 <unavailable> + 5092

    5    libc.so.6                          0x00002b7fe130b460 __libc_start_main +
    245

    6    tmphqm387cp                        0x000055c68bec1fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824917
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var arr = nums\n    arr.sort {\
    \ (a, b) -> Bool in\n        let aString = String(a)\n        let bString = String(b)\n\
    \        let aSum = aString.reduce(0) { (res, char) -> Int in\n            let\
    \ val = Int(String(char)) ?? 0\n            return res + val\n        }\n    \
    \    let bSum = bString.reduce(0) { (res, char) -> Int in\n            let val\
    \ = Int(String(char)) ?? 0\n            return res + val\n        }\n        if\
    \ aSum == bSum {\n            return nums.firstIndex(of: a)! < nums.firstIndex(of:\
    \ b)!\n        }\n        return aSum < bSum\n    }\n    return arr\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmphjfjgls0/tmphjfjgls0.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab171067c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab170d5eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab170d5e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab170d5d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphjfjgls0                        0x000055d2e02fc854 <unavailable> + 6228

    5    libc.so.6                          0x00002ab171253460 __libc_start_main +
    245

    6    tmphjfjgls0                        0x000055d2e02fc439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1659824917
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    return nums.sorted { (left, right)\
    \ -> Bool in\n        let leftSum = left.digits.reduce(0, +)\n        let rightSum\
    \ = right.digits.reduce(0, +)\n        return leftSum == rightSum ? left < right\
    \ : leftSum < rightSum\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp0z2xyl68.swift:11:28: error: value of type 'Int' has no member\
    \ 'digits'\n        let leftSum = left.digits.reduce(0, +)\n                 \
    \     ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824916
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    var nums = nums\n    func sum(_\
    \ num: Int) -> Int {\n        return String(num).reduce(0) { $0 + $1.wholeNumberValue!\
    \ }\n    }\n    nums.sort { sum($0) == sum($1) ? $0 < $1 : sum($0) < sum($1) }\n\
    \    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpdnu25ya1/tmpdnu25ya1.swift:12: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ad853456c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad85314d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad85314d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad85314d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad85314cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpdnu25ya1                        0x000056155ea67105 <unavailable> + 8453

    6    libswiftCore.so                    0x00002ad85325c410 Sequence.reduce<A>(_:_:)
    + 530

    7    tmpdnu25ya1                        0x000056155ea67009 <unavailable> + 8201

    8    tmpdnu25ya1                        0x000056155ea67197 <unavailable> + 8599

    9    libswiftSwiftOnoneSupport.so       0x00002ad852f39020 specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)
    + 152

    10   libswiftSwiftOnoneSupport.so       0x00002ad852f4004d <unavailable> + 135245

    11   libswiftSwiftOnoneSupport.so       0x00002ad852f3b0d2 <unavailable> + 114898

    12   libswiftSwiftOnoneSupport.so       0x00002ad852f3a7b0 specialized MutableCollection<>.sort(by:)
    + 27

    13   tmpdnu25ya1                        0x000056155ea66f59 <unavailable> + 8025

    14   tmpdnu25ya1                        0x000056155ea66614 <unavailable> + 5652

    15   libc.so.6                          0x00002ad853642460 __libc_start_main +
    245

    16   tmpdnu25ya1                        0x000056155ea662e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824917
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    return nums.sorted { (left, right)\
    \ -> Bool in\n        let left_sum = left.digits.reduce(0, +)\n        let right_sum\
    \ = right.digits.reduce(0, +)\n        return left_sum < right_sum\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpthkz41_y.swift:11:29: error: value of type 'Int' has no member\
    \ 'digits'\n        let left_sum = left.digits.reduce(0, +)\n                \
    \       ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824916
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    return nums.sorted(by: {\n    \
    \    sumOfDigits(num: $0) < sumOfDigits(num: $1)\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpfbbnp03a.swift:11:9: error: cannot find 'sumOfDigits' in scope\n\
    \        sumOfDigits(num: $0) < sumOfDigits(num: $1)\n        ^~~~~~~~~~~\n/tmp/tmpfbbnp03a.swift:11:32:\
    \ error: cannot find 'sumOfDigits' in scope\n        sumOfDigits(num: $0) < sumOfDigits(num:\
    \ $1)\n                               ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824916
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    return nums.sorted { return get_sum(num:\
    \ $0) < get_sum(num: $1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp_46p0x3u.swift:10:33: error: cannot find 'get_sum' in scope\n \
    \   return nums.sorted { return get_sum(num: $0) < get_sum(num: $1) }\n      \
    \                          ^~~~~~~\n/tmp/tmp_46p0x3u.swift:10:52: error: cannot\
    \ find 'get_sum' in scope\n    return nums.sorted { return get_sum(num: $0) <\
    \ get_sum(num: $1) }\n                                                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824916
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    return nums.sorted(by: {\n    \
    \    var a = abs($0)\n        var b = abs($1)\n        var acum = 0\n        var\
    \ bcum = 0\n        while a > 0 {\n            acum += a % 10\n            a /=\
    \ 10\n        }\n        while b > 0 {\n            bcum += b % 10\n         \
    \   b /= 10\n        }\n        return acum < bcum\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp92txp11b/tmp92txp11b.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d8952ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d89221b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d89221988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d892207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp92txp11b                        0x000055e7ec3bc5d4 <unavailable> + 5588

    5    libc.so.6                          0x00002b8d89716460 __libc_start_main +
    245

    6    tmp92txp11b                        0x000055e7ec3bc1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659824917
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    let sumOfDigits = nums.map { $0.sumOfDigits()\
    \ }\n    let points = Array(zip(sumOfDigits, nums))\n    let sorted = points.sorted\
    \ { (tuple1, tuple2) -> Bool in\n        if tuple1.0 == tuple2.0 {\n         \
    \   return tuple1.1 < tuple2.1\n        }\n        return tuple1.0 < tuple2.0\n\
    \    }\n    return sorted.map { $0.1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpqckw5h4k.swift:10:37: error: value of type 'Int' has no member\
    \ 'sumOfDigits'\n    let sumOfDigits = nums.map { $0.sumOfDigits() }\n       \
    \                          ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824916
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    guard nums.count > 0 else { return\
    \ [] }\n    return nums.sorted(by: {\n        guard let aSum = sumOfDigits(nums:\
    \ $0), let bSum = sumOfDigits(nums: $1) else { return false }\n        if aSum\
    \ == bSum {\n            return nums.firstIndex(of: $0)! < nums.firstIndex(of:\
    \ $1)!\n        }\n        return aSum < bSum\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp5hs45awx.swift:12:26: error: cannot find 'sumOfDigits' in scope\n\
    \        guard let aSum = sumOfDigits(nums: $0), let bSum = sumOfDigits(nums:\
    \ $1) else { return false }\n                         ^~~~~~~~~~~\n/tmp/tmp5hs45awx.swift:12:60:\
    \ error: cannot find 'sumOfDigits' in scope\n        guard let aSum = sumOfDigits(nums:\
    \ $0), let bSum = sumOfDigits(nums: $1) else { return false }\n              \
    \                                             ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824916
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\n/// >>> order_by_points([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc\
    \ order_by_points(nums: [Int]) -> [Int] {\n    if nums.isEmpty {\n        return\
    \ []\n    }\n    return nums.sorted(by: {(item1: Int, item2: Int) -> Bool in\n\
    \        var item1Sum = 0\n        var item2Sum = 0\n        var item1 = item1\n\
    \        var item2 = item2\n        while item1 != 0 {\n            item1Sum +=\
    \ item1 % 10\n            item1 /= 10\n        }\n        while item2 != 0 {\n\
    \            item2Sum += item2 % 10\n            item2 /= 10\n        }\n    \
    \    return item1Sum < item2Sum\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmp2ml0y9ds/tmp2ml0y9ds.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b653cdabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b653caa2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b653caa2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b653caa17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ml0y9ds                        0x000055e1715eb584 <unavailable> + 5508

    5    libc.so.6                          0x00002b653cf97460 __libc_start_main +
    245

    6    tmp2ml0y9ds                        0x000055e1715eb169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824917
