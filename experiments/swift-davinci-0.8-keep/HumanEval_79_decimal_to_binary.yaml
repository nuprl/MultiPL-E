name: HumanEval_79_decimal_to_binary
language: swift
prompt: "\n/// You will be given a number in decimal form and your task is to convert\
  \ it to\n/// binary format. The function should return a string, with each character\
  \ representing a binary\n/// number. Each character in the string will be '0' or\
  \ '1'.\n/// There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n/// The extra characters are there to help with the\
  \ format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\n///\
  \ decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
  \ Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\"\
  )\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
  \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
  )"
completions: ["  let binary = String(decimal, radix: 2)\n  return \"db\\(binary)db\"",
  '    return "db" + String(decimal, radix: 2) + "db"', "    let binary = String(decimal,\
    \ radix: 2)\n    return \"db\\(binary)db\"", "    if decimal == 0 {\n        return\
    \ \"db0db\"\n    }\n    var decimal = decimal\n    var binary = \"\"\n    while\
    \ decimal > 0 {\n        let power = Int(log2(Double(decimal)))\n        binary\
    \ += \"1\"\n        decimal -= Int(pow(2.0, Double(power)))\n        for i in\
    \ power.stride(through: 0, by: -1) {\n            if i == 0 {\n              \
    \  continue\n            }\n            if decimal >= Int(pow(2.0, Double(i)))\
    \ {\n                binary += \"1\"\n                decimal -= Int(pow(2.0,\
    \ Double(i)))\n            } else {\n                binary += \"0\"\n       \
    \     }\n        }\n    }\n    return \"db\\(binary)db\"", '    return String(decimal,
    radix: 2)', "  let bin = String(decimal, radix: 2)\n  return \"db\\(bin)db\"",
  "    var binary = \"\"\n    var number = decimal\n    var digit = 0\n    while number\
    \ > 0 {\n        digit = number % 2\n        number /= 2\n        binary.append(digit\
    \ == 0 ? \"0\" : \"1\")\n    }\n    return \"db\" + String(binary.reversed())\
    \ + \"db\"", "    let binary = String(decimal, radix: 2)\n    let length = binary.characters.count\n\
    \    let diff = 8 - length\n    let prefix = String(repeating: \"0\", count: diff)\n\
    \    return \"db\\(prefix)\\(binary)db\"", "    var result = \"\"\n    var temp\
    \ = decimal\n    while temp > 0 {\n        result = \"\\(temp % 2)\" + result\n\
    \        temp /= 2\n    }\n    return \"db\" + result + \"db\"", "    var binary\
    \ = \"db\"\n    var remainder = 0\n    var quotient = decimal\n    while quotient\
    \ > 0 {\n        remainder = quotient % 2\n        quotient = quotient / 2\n \
    \       binary = \"\\(remainder)\\(binary)\"\n    }\n    return \"\\(binary)db\"",
  "    var str = \"\"\n    let power = Int(floor(log2(Double(decimal))+1))\n    var\
    \ value = decimal\n    for _ in 1...power {\n        str = (value % 2 == 0 ? \"\
    0\" : \"1\") + str\n        value /= 2\n    }\n    return \"db\" + str + \"db\"",
  '    return "db" + String(decimal, radix: 2) + "db"', '    return "db" + String(decimal,
    radix: 2) + "db"', "    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    if binary.count == 0 {\n        binary = \"0\"\n    }\n    return\
    \ \"db\" + binary + \"db\"", '    return "db" + String(decimal, radix: 2) + "db"',
  '    return String(decimal, radix: 2, uppercase: false)', "    var decimal = decimal\n\
    \    var binaryString = \"db\"\n    while decimal != 0 {\n        binaryString.append(String(decimal\
    \ % 2))\n        decimal /= 2\n    }\n    return binaryString.reversed() + \"\
    db\"", '    return "db" + String(decimal, radix: 2) + "db"', "    var i = decimal\n\
    \    var tmp = \"\"\n    while i != 0 {\n        tmp = String(i % 2) + tmp\n \
    \       i /= 2\n    }\n    return \"db\" + tmp + \"db\"", "    var binary = \"\
    \"\n    var n = decimal\n    while n > 0 {\n        binary = String(n % 2) + binary\n\
    \        n /= 2\n    }\n    return \"db\" + binary + \"db\""]
stop_tokens:
- "\n}"
