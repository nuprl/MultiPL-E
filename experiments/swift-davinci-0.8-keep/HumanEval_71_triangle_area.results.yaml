language: swift
name: HumanEval_71_triangle_area
results:
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if (a + b > c) && (a + c > b) && (b +\
    \ c > a) {\n        let s = Double((a + b + c)) / 2\n        let area = sqrt(s\
    \ * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n        return Double(round(100\
    \ * area) / 100)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpmfmrjpke.swift:13:20: error: cannot find 'sqrt' in scope\n    \
    \    let area = sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n\
    \                   ^~~~\n/tmp/tmpmfmrjpke.swift:14:23: error: cannot find 'round'\
    \ in scope\n        return Double(round(100 * area) / 100)\n                 \
    \     ^~~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n  // your code here\n  \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: '/tmp/tmpq7vnlv2_.swift:13:1: error: missing return in global function expected
    to return ''Double''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a + b > c && a + c > b && b + c > a\
    \ {\n        let p = Double(a + b + c) / 2\n        return (p * (p - Double(a))\
    \ * (p - Double(b)) * (p - Double(c))).squareRoot()\n    }\n    return -1\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.y9Bjau/tmpdy1pafv7-1.o:tmpdy1pafv7-1.o:function $s11tmpdy1pafv713triangle_area1a1b1cSdSi_S2itF:
    error: undefined reference to ''sqrt''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = [a, b, c].sorted(by: <)\n\
    \    if sides[0] + sides[1] > sides[2] {\n        let p = Double(a + b + c) /\
    \ 2\n        return (p * (p - Double(a)) * (p - Double(b)) * (p - Double(c))).squareRoot()\n\
    \    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.1RlVgu/tmplmxsgpk_-1.o:tmplmxsgpk_-1.o:function $s11tmplmxsgpk_13triangle_area1a1b1cSdSi_S2itF:
    error: undefined reference to ''sqrt''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    // Code here\n    let s: Double = Double((a\
    \ + b + c)) / 2\n    var area: Double = 0\n    if Double(a) < s && Double(b) <\
    \ s && Double(c) < s {\n        area = sqrt(s * (s - Double(a)) * (s - Double(b))\
    \ * (s - Double(c)))\n    } else {\n        area = -1\n    }\n    return Double(area.rounded(toPlaces:\
    \ 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpxei20joi.swift:15:16: error: cannot find 'sqrt' in scope\n    \
    \    area = sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n  \
    \             ^~~~\n/tmp/tmpxei20joi.swift:19:24: error: no exact matches in call\
    \ to instance method 'rounded'\n    return Double(area.rounded(toPlaces: 2))\n\
    \                       ^\n/tmp/tmpxei20joi.swift:19:24: note: candidate expects\
    \ value of type 'FloatingPointRoundingRule' for parameter #1 (got 'Int')\n   \
    \ return Double(area.rounded(toPlaces: 2))\n                       ^\nSwift.FloatingPoint:4:17:\
    \ note: candidate '() -> Double' requires 0 arguments, but 1 was provided\n  \
    \  public func rounded() -> Self\n                ^\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let sides = [a, b, c].sorted()\n    if\
    \ sides[0] + sides[1] <= sides[2] {\n        return -1\n    }\n    let p = Double(a\
    \ + b + c) / 2\n    return round(sqrt(p * (p - Double(a)) * (p - Double(b)) *\
    \ (p - Double(c))) * 100) / 100\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp2syn5any.swift:16:12: error: cannot find 'round' in scope\n   \
    \ return round(sqrt(p * (p - Double(a)) * (p - Double(b)) * (p - Double(c))) *\
    \ 100) / 100\n           ^~~~~\n/tmp/tmp2syn5any.swift:16:18: error: cannot find\
    \ 'sqrt' in scope\n    return round(sqrt(p * (p - Double(a)) * (p - Double(b))\
    \ * (p - Double(c))) * 100) / 100\n                 ^~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    return 0.0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpghhp8ojx/tmpghhp8ojx.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8b505cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8b4d53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8b4d53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8b4d527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpghhp8ojx                        0x0000563504efc1cf <unavailable> + 4559

    5    libc.so.6                          0x00002ac8b5248460 __libc_start_main +
    245

    6    tmpghhp8ojx                        0x0000563504efbe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n  // your code here\n  let dd = [Double(a),\
    \ Double(b), Double(c)]\n  let long = dd.max()!\n  if dd.reduce(0, +) - long >\
    \ long {\n    let p = (long + dd.min()! + dd[2 - dd.index(of: long)! - dd.index(of:\
    \ dd.min()!)!] ) / 2\n    return sqrt(p * (p - long) * (p - dd.min()!) * (p -\
    \ dd[2 - dd.index(of: long)! - dd.index(of: dd.min()!)!]))\n  }\n  return -1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp411sk0qj.swift:15:43: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n    let p = (long + dd.min()! + dd[2 - dd.index(of: long)!\
    \ - dd.index(of: dd.min()!)!] ) / 2\n                                        \
    \  ^\n/tmp/tmp411sk0qj.swift:15:43: note: use 'firstIndex(of:)' instead\n    let\
    \ p = (long + dd.min()! + dd[2 - dd.index(of: long)! - dd.index(of: dd.min()!)!]\
    \ ) / 2\n                                          ^~~~~\n                   \
    \                       firstIndex\n/tmp/tmp411sk0qj.swift:15:65: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n    let p = (long + dd.min()! +\
    \ dd[2 - dd.index(of: long)! - dd.index(of: dd.min()!)!] ) / 2\n             \
    \                                                   ^\n/tmp/tmp411sk0qj.swift:15:65:\
    \ note: use 'firstIndex(of:)' instead\n    let p = (long + dd.min()! + dd[2 -\
    \ dd.index(of: long)! - dd.index(of: dd.min()!)!] ) / 2\n                    \
    \                                            ^~~~~\n                         \
    \                                       firstIndex\n/tmp/tmp411sk0qj.swift:16:12:\
    \ error: cannot find 'sqrt' in scope\n    return sqrt(p * (p - long) * (p - dd.min()!)\
    \ * (p - dd[2 - dd.index(of: long)! - dd.index(of: dd.min()!)!]))\n          \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    return a\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmplpa_gqw_.swift:11:12: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a\n           ^\n           Double(\
    \ )\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp76dbczt9/tmp76dbczt9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaab8210c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaab7f07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaab7f07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaab7f067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp76dbczt9                        0x0000557682c0b1cf <unavailable> + 4559

    5    libc.so.6                          0x00002aaab83fc460 __libc_start_main +
    245

    6    tmp76dbczt9                        0x0000557682c0ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014124
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let s = Double(a + b + c) / 2\n    let\
    \ area = sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n    return\
    \ area >= 0 ? area : -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp1heubxn3.swift:12:16: error: cannot find 'sqrt' in scope\n    let\
    \ area = sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n     \
    \          ^~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp76dbczt9/tmp76dbczt9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaab8210c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaab7f07b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaab7f07988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaab7f067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp76dbczt9                        0x0000557682c0b1cf <unavailable> + 4559

    5    libc.so.6                          0x00002aaab83fc460 __libc_start_main +
    245

    6    tmp76dbczt9                        0x0000557682c0ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660014124
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if isTriangle(a: a, b: b, c: c) {\n  \
    \      let p = Double(a + b + c) / 2\n        return sqrt(p * (p - Double(a))\
    \ * (p - Double(b)) * (p - Double(c)))\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpoo_sot5k.swift:11:8: error: cannot find 'isTriangle' in scope\n\
    \    if isTriangle(a: a, b: b, c: c) {\n       ^~~~~~~~~~\n/tmp/tmpoo_sot5k.swift:13:16:\
    \ error: cannot find 'sqrt' in scope\n        return sqrt(p * (p - Double(a))\
    \ * (p - Double(b)) * (p - Double(c)))\n               ^~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if (a + b > c) && (a + c > b) && (b +\
    \ c > a) {\n        let p = Double(a + b + c) / 2\n        return Double(p * (p\
    \ - Double(a)) * (p - Double(b)) * (p - Double(c)))\n    }\n    return -1\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp71kt75nm/tmp71kt75nm.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabce6b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabce3aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabce3aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabce3a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp71kt75nm                        0x000055ab29e0521f <unavailable> + 4639

    5    libc.so.6                          0x00002aabce89f460 __libc_start_main +
    245

    6    tmp71kt75nm                        0x000055ab29e04eb9 <unavailable> + 3769

    '
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a + b > c && a + c > b && b + c > a\
    \ {\n        let s = Double(a + b + c) / 2\n        return (s * (s - Double(a))\
    \ * (s - Double(b)) * (s - Double(c))).squareRoot()\n    }\n    return -1\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.Uznlgu/tmpf5atp_fj-1.o:tmpf5atp_fj-1.o:function $s11tmpf5atp_fj13triangle_area1a1b1cSdSi_S2itF:
    error: undefined reference to ''sqrt''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n  let s = Double(a + b + c) / 2\n  let t =\
    \ s * (s - Double(a)) * (s - Double(b)) * (s - Double(c))\n  if t < 0 {\n    return\
    \ -1\n  }\n  return sqrt(t)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp56cz10za.swift:16:10: error: cannot find 'sqrt' in scope\n  return\
    \ sqrt(t)\n         ^~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    if a + b > c && a + c > b && b + c > a\
    \ {\n        let s = Double(a + b + c) / 2\n        return sqrt(s * (s - Double(a))\
    \ * (s - Double(b)) * (s - Double(c)))\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpk4of5y1n.swift:13:16: error: cannot find 'sqrt' in scope\n    \
    \    return sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n  \
    \             ^~~~\n"
  stdout: ''
  timestamp: 1660014124
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    var result = 0.0\n    if (a + b > c) &&\
    \ (a + c > b) && (b + c > a) {\n        let p = Double((a + b + c) / 2)\n    \
    \    result = (p * (p - Double(a)) * (p - Double(b)) * (p - Double(c)))\n    \
    \    result = Double(result.squareRoot())\n    } else {\n        result = -1\n\
    \    }\n    return result.rounded(toPlaces: 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpaos1zc8x.swift:19:19: error: no exact matches in call to instance\
    \ method 'rounded'\n    return result.rounded(toPlaces: 2)\n                 \
    \ ^\n/tmp/tmpaos1zc8x.swift:19:19: note: candidate expects value of type 'FloatingPointRoundingRule'\
    \ for parameter #1 (got 'Int')\n    return result.rounded(toPlaces: 2)\n     \
    \             ^\nSwift.FloatingPoint:4:17: note: candidate '() -> Double' requires\
    \ 0 arguments, but 1 was provided\n    public func rounded() -> Self\n       \
    \         ^\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    // Implement this function\n    var result:\
    \ Double = -1.0\n    var arr: [Int] = [a, b, c]\n    arr.sort()\n    if arr[0]\
    \ + arr[1] > arr[2] {\n        let s = Double(arr[0] + arr[1] + arr[2])/2\n  \
    \      result = sqrt(s * (s - Double(arr[0])) * (s - Double(arr[1])) * (s - Double(arr[2])))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpm8odsuxg.swift:17:18: error: cannot find 'sqrt' in scope\n    \
    \    result = sqrt(s * (s - Double(arr[0])) * (s - Double(arr[1])) * (s - Double(arr[2])))\n\
    \                 ^~~~\n"
  stdout: ''
  timestamp: 1660014378
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
    \ Int, b: Int, c: Int) -> Double {\n    let s = Double(a + b + c) / 2\n    if\
    \ a + b > c && a + c > b && b + c > a {\n        return sqrt(s * (s - Double(a))\
    \ * (s - Double(b)) * (s - Double(c)))\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpkxsew48m.swift:13:16: error: cannot find 'sqrt' in scope\n    \
    \    return sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n  \
    \             ^~~~\n"
  stdout: ''
  timestamp: 1660014124
