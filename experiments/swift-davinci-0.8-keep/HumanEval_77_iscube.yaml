name: HumanEval_77_iscube
language: swift
prompt: "\n/// Write a function that takes an integer a and returns True \n/// if\
  \ this ingeger is a cube of some integer number.\n/// Note: you may assume the input\
  \ is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2) ==> False\n\
  /// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==> True\n/// iscube(180)\
  \ ==> False\nfunc iscube(a: Int) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
  \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
  \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
  assert(iscube(a: 1729) == false)"
completions: ["  if a < 0 {\n    return false\n  }\n  let cube = Int(pow(Double(a),\
    \ 1.0/3.0))\n  return Int(pow(Double(cube), 3)) == a", "\tlet b = Int(pow(Double(a),\
    \ 1.0/3.0))\n\treturn b * b * b == a", '    return Double(a).squareRoot().truncatingRemainder(dividingBy:
    1) == 0', '    return a < 0 ? a == -1 : pow(Double(a), 1.0/3.0) - Double(Int(pow(Double(a),
    1.0/3.0))) == 0', '    return a == a * a * a / a / a / a', '    return a > 0 &&
    (Double(a).squareRoot() * Double(a).squareRoot() * Double(a).squareRoot()).truncatingRemainder(dividingBy:
    1) == 0 || a == 0', "    var temp = 0\n    var cube = 0\n    while cube < a {\n\
    \        temp += 1\n        cube = temp * temp * temp\n    }\n    return cube\
    \ == a", '    return a == pow(floor(sqrt(Double(a))), 3)', "\tvar i = 0\n\twhile\
    \ i < a {\n\t\tif i * i * i == a {\n\t\t\treturn true\n\t\t}\n\t\ti += 1\n\t}\n\
    \treturn false", '    return pow(Double(a), 1.0/3.0).truncatingRemainder(dividingBy:
    1) == 0', "    let cube = a * a * a\n    if (cube >= 0 && cube == a) {\n     \
    \   return true\n    }\n    return false", "    if a == 0 { return true }\n  \
    \  if a < 0 { a = -a }\n    for i in 1...a {\n        if i * i * i == a { return\
    \ true }\n    }\n    return false", '    return Int(pow(Double(a), 1.0/3.0)) *
    Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a', '    return
    a >= 0 && Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a), 1.0/3.0)))*Int(round(pow(Double(a),
    1.0/3.0))) == a', '    return a >= 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),
    1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a', '    return a == 0 || a == 1 ||
    a == -1 || a > 0 && sqrt(Double(a)) == Double(Int(sqrt(Double(a))))', '    return
    a == 0 || Int(round(pow(Double(a.magnitude), 1.0/3.0)))**3 == a.magnitude', " \
    \   let b = a > 0 ? a : a * -1\n    let d = Int(pow(Double(b), 1/3))\n    return\
    \ d * d * d == b", '    return (a % 2 == 0) ? false : Int(pow(Double(a), 1/3.0))
    * Int(pow(Double(a), 1/3.0)) * Int(pow(Double(a), 1/3.0)) == a', "\tif a == 0\
    \ {\n\t\treturn true\n\t}\n\treturn a > 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a"]
stop_tokens:
- "\n}"
