language: swift
name: HumanEval_40_triples_sum_to_zero
results:
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    for\
    \ i in 0..<l.count {\n        for j in i + 1..<l.count {\n            for k in\
    \ j + 1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n          \
    \          return true\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820852
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // check every element of the list\n    for i in 0..<l.count\
    \ {\n        // check every other element of the list\n        for j in i+1..<l.count\
    \ {\n            // check every other element of the list\n            for k in\
    \ j+1..<l.count {\n                // if the sum of the list, you have found a\
    \ triple that sums to zero\n                if l[i] + l[j] + l[k] == 0 {\n   \
    \                 return true\n                }\n            }\n        }\n \
    \   }\n    // if we made it here, we didn't find a triple that summed to zero\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820852
- exit_code: 1
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    var\
    \ i = 0\n    while i < l.count {\n        var j = i + 1\n        while j < l.count\
    \ {\n            if sum_to_zero(l, i, j) {\n                return true\n    \
    \        }\n            j = j + 1\n        }\n        i = i + 1\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpv7rorf_w.swift:23:16: error: cannot find 'sum_to_zero' in scope\n\
    \            if sum_to_zero(l, i, j) {\n               ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820852
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for i in 0...l.count-3 {\n        for j in i+1...l.count-2\
    \ {\n            for k in j+1...l.count-1 {\n                if l[i] + l[j] +\
    \ l[k] == 0 {\n                    return true\n                }\n          \
    \  }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abfe93eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfe90e1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abfe90e1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abfe90e113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abfe90e0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7q9iais1                        0x00005561bfe08d8b <unavailable> + 7563

    6    tmp7q9iais1                        0x00005561bfe089ce <unavailable> + 6606

    7    libc.so.6                          0x00002abfe95d6460 __libc_start_main +
    245

    8    tmp7q9iais1                        0x00005561bfe081a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820852
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpvi85jrri/tmpvi85jrri.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab10b511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab10b208b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab10b208988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab10b2077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvi85jrri                        0x0000557db84f2490 <unavailable> + 5264

    5    libc.so.6                          0x00002ab10b6fd460 __libc_start_main +
    245

    6    tmpvi85jrri                        0x0000557db84f1f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820852
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmpvaxdhrrc/tmpvaxdhrrc.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32966d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32963c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32963c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32963c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvaxdhrrc                        0x000055ab15237490 <unavailable> + 5264

    5    libc.so.6                          0x00002b32968bc460 __libc_start_main +
    245

    6    tmpvaxdhrrc                        0x000055ab15236f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820852
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp4p3udljg/tmp4p3udljg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac450991c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac450688b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac450688988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4506877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4p3udljg                        0x000055f2c6cef490 <unavailable> + 5264

    5    libc.so.6                          0x00002ac450b7d460 __libc_start_main +
    245

    6    tmp4p3udljg                        0x000055f2c6ceef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820776
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp4p3udljg/tmp4p3udljg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac450991c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac450688b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac450688988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4506877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4p3udljg                        0x000055f2c6cef490 <unavailable> + 5264

    5    libc.so.6                          0x00002ac450b7d460 __libc_start_main +
    245

    6    tmp4p3udljg                        0x000055f2c6ceef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820776
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    let length = l.count\n    if length < 3 {\n        return\
    \ false\n    }\n    else {\n        for i in 0..<length-2 {\n            for j\
    \ in i+1..<length-1 {\n                for k in j+1..<length {\n             \
    \       if l[i] + l[j] + l[k] == 0 {\n                        return true\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820852
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp4p3udljg/tmp4p3udljg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac450991c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac450688b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac450688988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4506877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4p3udljg                        0x000055f2c6cef490 <unavailable> + 5264

    5    libc.so.6                          0x00002ac450b7d460 __libc_start_main +
    245

    6    tmp4p3udljg                        0x000055f2c6ceef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820776
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n  for i in 0..<l.count {\n    for j in (i+1)..<l.count {\n\
    \      for k in (j+1)..<l.count {\n        if l[i] + l[j] + l[k] == 0 {\n    \
    \      return true\n        }\n      }\n    }\n  }\n  return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820852
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // Check if any unique triplets in list add to zero\n\
    \    var t = Set<Int>()\n    for (i, v) in l.enumerated() {\n        for v2 in\
    \ l[i+1..<l.count] {\n            if t.contains(-v-v2) {\n                return\
    \ true\n            }\n        }\n        t.insert(v)\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820852
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    guard l.count >= 3 else {\n        return false\n    }\n\
    \    let sorted: [Int] = l.sorted(by: {$0 < $1})\n    for i in 0..<sorted.count\
    \ {\n        for j in (i+1)..<sorted.count {\n            if sorted[i] + sorted[j]\
    \ == -sorted[j+1] {\n                return true\n            }\n        }\n \
    \   }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1753278c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1752f6f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1752f6f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1752f6f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1752f6ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1752d6ee83 <unavailable> + 188035

    6    tmpaewygkt9                        0x000055dda90a20a3 <unavailable> + 8355

    7    tmpaewygkt9                        0x000055dda90a152d <unavailable> + 5421

    8    libc.so.6                          0x00002b1753464460 __libc_start_main +
    245

    9    tmpaewygkt9                        0x000055dda90a1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659820852
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp4p3udljg/tmp4p3udljg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac450991c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac450688b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac450688988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4506877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4p3udljg                        0x000055f2c6cef490 <unavailable> + 5264

    5    libc.so.6                          0x00002ac450b7d460 __libc_start_main +
    245

    6    tmp4p3udljg                        0x000055f2c6ceef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820776
- exit_code: 1
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    var l = l\n    l.sortInPlace()\n    var left = 0\n   \
    \ var right = 0\n    var count = 0\n    var sum = 0\n    while (left < l.count\
    \ - 2) {\n        right = left + 1\n        count = l.count - 1\n        while\
    \ (right < count) {\n            sum = l[left] + l[right] + l[count]\n       \
    \     if (sum == 0) {\n                return true\n            } else if (sum\
    \ > 0) {\n                count -= 1\n            } else {\n                right\
    \ += 1\n            }\n        }\n        left += 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l: [1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpen8oa64n.swift:17:7: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    l.sortInPlace()\n    ~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820852
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp4p3udljg/tmp4p3udljg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac450991c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac450688b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac450688988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4506877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4p3udljg                        0x000055f2c6cef490 <unavailable> + 5264

    5    libc.so.6                          0x00002ac450b7d460 __libc_start_main +
    245

    6    tmp4p3udljg                        0x000055f2c6ceef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820776
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmp4p3udljg/tmp4p3udljg.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac450991c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac450688b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac450688988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4506877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4p3udljg                        0x000055f2c6cef490 <unavailable> + 5264

    5    libc.so.6                          0x00002ac450b7d460 __libc_start_main +
    245

    6    tmp4p3udljg                        0x000055f2c6ceef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820776
- exit_code: -4
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    // note that this function is just a placeholder\n   \
    \ // and the tests above might not work!\n    // you'll need to provide a real\
    \ implementation.\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triples_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\n\
    assert(triples_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 5, 7]) == false)\nassert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\
    \ == true)\nassert(triples_sum_to_zero(l: [1]) == false)\nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l: [100, 3, 5, -100])\
    \ == false)"
  status: Exception
  stderr: 'tmptotrvxdq/tmptotrvxdq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ae999bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ae9692b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ae9692988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ae96917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptotrvxdq                        0x000055e7a60a3490 <unavailable> + 5264

    5    libc.so.6                          0x00002b5ae9b87460 __libc_start_main +
    245

    6    tmptotrvxdq                        0x000055e7a60a2f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820852
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    for (index, i) in l.enumerated() {\n        for (index2,\
    \ j) in l.enumerated() {\n            if index != index2 {\n                let\
    \ new_array = l[index2..<l.count]\n                if new_array.contains(-i-j)\
    \ {\n                    return true\n                }\n            }\n     \
    \   }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820852
- exit_code: 0
  program: "\n/// triples_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are three distinct elements in the list that\n/// sum\
    \ to zero, and False otherwise.\n/// >>> triples_sum_to_zero([1, 3, 5, 0])\n///\
    \ False\n/// >>> triples_sum_to_zero([1, 3, -2, 1])\n/// True\n/// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n///\
    \ True\n/// >>> triples_sum_to_zero([1])\n/// False\nfunc triples_sum_to_zero(l:\
    \ [Int]) -> Bool {\n    if l.count < 3 {\n        return false\n    }\n    if\
    \ l.count == 3 {\n        return l[0] + l[1] + l[2] == 0\n    }\n    for i in\
    \ 0..<l.count - 2 {\n        for j in i + 1..<l.count - 1 {\n            for k\
    \ in j + 1..<l.count {\n                if l[i] + l[j] + l[k] == 0 {\n       \
    \             return true\n                }\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triples_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -1]) == false)\n\
    assert(triples_sum_to_zero(l: [1, 3, -2, 1]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(triples_sum_to_zero(l: [1, 2, 5, 7]) == false)\n\
    assert(triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7]) == true)\nassert(triples_sum_to_zero(l:\
    \ [1]) == false)\nassert(triples_sum_to_zero(l: [1, 3, 5, -100]) == false)\nassert(triples_sum_to_zero(l:\
    \ [100, 3, 5, -100]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820852
