name: HumanEval_43_pairs_sum_to_zero
language: swift
prompt: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it returns\
  \ True if there are two distinct elements in the list that\n/// sum to zero, and\
  \ False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n/// >>>\
  \ pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1, 2,\
  \ 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
  /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) -> Bool\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
  assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
  \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\n\
  assert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9,\
  \ -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) ==\
  \ true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l:\
  \ [-3, 9, -1, 4, 2, 31]) == false)"
completions: ["\tfor i in 0..<l.count {\n\t\tfor j in i+1..<l.count {\n\t\t\tif l[i]\
    \ + l[j] == 0 {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false", '    return
    false', "\treturn false", "    var list = l\n    if list.count == 0 {\n      \
    \  return false\n    }\n    if list.count == 1 {\n        return false\n    }\n\
    \    if list.count == 2 {\n        return list[0] + list[1] == 0\n    }\n    for\
    \ i in 0...list.count - 1 {\n        var list_without_i = list[0...i] + list[i\
    \ + 1...list.count - 1]\n        if list_without_i.contains(-list[i]) {\n    \
    \        return true\n        }\n    }\n    return false", "\tif l.count < 2 {\n\
    \t\treturn false\n\t}\n\tvar dict = [Int: Bool]()\n\tfor i in l {\n\t\tif let\
    \ _ = dict[i] {\n\t\t\treturn true\n\t\t}\n\t\tdict[-i] = true\n\t}\n\treturn\
    \ false", '    return false', "  let l2 = l.sorted()\n  var lo = 0\n  var hi =\
    \ l2.count - 1\n  while lo < hi {\n    let s = l2[lo] + l2[hi]\n    if s == 0\
    \ {\n      return true\n    } else if s < 0 {\n      lo += 1\n    } else {\n \
    \     hi -= 1\n    }\n  }\n  return false", "    for number in l {\n        for\
    \ number2 in l {\n            if number + number2 == 0 {\n                return\
    \ true\n            }\n        }\n    }\n    return false", "    var i = 0\n \
    \   var j = l.count - 1\n    while(i != j) {\n        if (l[i] + l[j] == 0) {\n\
    \            return true\n        }\n        else if (l[i] + l[j] > 0) {\n   \
    \         j -= 1\n        }\n        else {\n            i += 1\n        }\n \
    \   }\n    return false", '    return false', "    for i in 0..<l.count {\n  \
    \      for j in i+1..<l.count {\n            if l[i] + l[j] == 0 {\n         \
    \       return true\n            }\n        }\n    }\n    return false", "   \
    \ // TODO: Implement me!\n    for number in l {\n        for number2 in l {\n\
    \            if number != number2 && number + number2 == 0 {\n               \
    \ return true\n            }\n        }\n    }\n    return false", '    return
    true', "    /// The solution code goes here\n    /// You should remove the following\
    \ line\n    return false", '    return false', "    if l.count < 2 {\n       \
    \ return false\n    }\n    for i in 0..<l.count {\n        for j in 0..<l.count\
    \ {\n            if i != j && l[i] + l[j] == 0 {\n                return true\n\
    \            }\n        }\n    }\n    return false", "    var sum = 0\n    var\
    \ x = 0\n    while x < l.count {\n        if x == (l.count - 1) {\n          \
    \  return false\n        }\n        sum = l[x] + l[x + 1]\n        if sum == 0\
    \ {\n            return true\n        }\n        x += 1\n    }\n    return false",
  "    var a = [Int]()\n    for i in l {\n        a.append(i)\n    }\n    a.sort()\n\
    \    var i = 0\n    var j = a.count - 1\n    while i < j {\n        let sum =\
    \ a[i] + a[j]\n        if sum < 0 {\n            i += 1\n        } else if sum\
    \ > 0 {\n            j -= 1\n        } else {\n            return true\n     \
    \   }\n    }\n    return false", "    if l.count < 2 {\n        return false\n\
    \    }\n    if l.count == 2 {\n        return l[0] + l[1] == 0\n    }\n    var\
    \ arr: [Int] = []\n    var i = 0\n    while i < l.count {\n        var j = i +\
    \ 1\n        while j < l.count {\n            if l[i] + l[j] == 0 {\n        \
    \        arr.append(l[i])\n                arr.append(l[j])\n            }\n \
    \           j += 1\n        }\n        i += 1\n    }\n    return arr.count > 0",
  "    for i in 0..<l.count {\n        for j in 0..<l.count {\n            if i !=\
    \ j && l[i] + l[j] == 0 {\n                return true\n            }\n      \
    \  }\n    }\n    return false"]
stop_tokens:
- "\n}"
