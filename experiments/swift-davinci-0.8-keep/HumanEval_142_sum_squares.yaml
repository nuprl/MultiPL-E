name: HumanEval_142_sum_squares
language: swift
prompt: "\n/// \"\n/// This function will take a list of integers. For all entries\
  \ in the list, the function shall square the integer entry if its index is a \n\
  /// multiple of 3 and will cube the integer entry if its index is a multiple of\
  \ 4 and not a multiple of 3. The function will not \n/// change the entries in the\
  \ list whose indexes are not a multiple of 3 or 4. The function shall then return\
  \ the sum of all entries. \n/// Examples:\n/// For lst = [1,2,3] the output should\
  \ be 6\n/// For lst = []  the output should be 0\n/// For lst = [-1,-5,2,-1,-5]\
  \  the output should be -126\nfunc sum_squares(lst: [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(sum_squares(lst: [1, 2, 3]) == 6)\nassert(sum_squares(lst:\
  \ [1, 4, 9]) == 14)\nassert(sum_squares(lst: [] as [Int]) == 0)\nassert(sum_squares(lst:\
  \ [1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9)\nassert(sum_squares(lst: [-1, -1, -1, -1, -1,\
  \ -1, -1, -1, -1]) == -3)\nassert(sum_squares(lst: [0]) == 0)\nassert(sum_squares(lst:\
  \ [-1, -5, 2, -1, -5]) == -126)\nassert(sum_squares(lst: [-56, -99, 1, 0, -2]) ==\
  \ 3030)\nassert(sum_squares(lst: [-1, 0, 0, 0, 0, 0, 0, 0, -1]) == 0)\nassert(sum_squares(lst:\
  \ [-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196)\n\
  assert(sum_squares(lst: [-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14,\
  \ 6, 13, 11, 16, 16, 4, 10]) == -1448)"
completions: ["    return lst.enumerated().reduce(0) { sum, item in\n        var (_,\
    \ item_value) = item\n        if item.offset % 3 == 0 {\n            item_value\
    \ = item_value * item_value\n        }\n        if item.offset % 4 == 0 && item.offset\
    \ % 3 != 0 {\n            item_value = item_value * item_value * item_value\n\
    \        }\n        return sum + item_value\n    }", "    var out = 0\n    for\
    \ i in 0..<lst.count {\n        if i % 3 == 0 {\n            out += lst[i] * lst[i]\n\
    \        } else if i % 4 == 0 {\n            out += lst[i] * lst[i] * lst[i]\n\
    \        } else {\n            out += lst[i]\n        }\n    }\n    return out",
  "    let square = lst.enumerated().map { $0.offset % 3 == 0 ? $0.element * $0.element\
    \ : $0.element }\n    let cube = square.enumerated().map { $0.offset % 4 == 0\
    \ && $0.offset % 3 != 0 ? $0.element * $0.element * $0.element : $0.element }\n\
    \    return cube.reduce(0, +)", "    var sum_squares: Int = 0\n    for i in 0..<lst.count\
    \ {\n        if (i + 1) % 3 == 0 && (i + 1) % 4 != 0 {\n            sum_squares\
    \ += lst[i] * lst[i]\n        } else if (i + 1) % 4 == 0 {\n            sum_squares\
    \ += lst[i] * lst[i] * lst[i]\n        } else {\n            sum_squares += lst[i]\n\
    \        }\n    }\n    return sum_squares", "    if lst.count == 0 {\n       \
    \ return 0\n    }\n    var index = 0\n    var sum = 0\n    for number in lst {\n\
    \        if index % 3 == 0 {\n            sum += number * number\n        } else\
    \ if index % 4 == 0 {\n            sum += number * number * number\n        }\
    \ else {\n            sum += number\n        }\n        index += 1\n    }\n  \
    \  return sum", '    return 0', "    var sum = 0\n    for (index, num) in lst.enumerated()\
    \ {\n        if index % 3 == 0 {\n            sum += num * num\n        } else\
    \ if index % 4 == 0 {\n            sum += num * num * num\n        } else {\n\
    \            sum += num\n        }\n    }\n    return sum", "    var sum = 0\n\
    \    for (index, value) in lst.enumerated() {\n        switch index {\n      \
    \  case _ where index % 3 == 0:\n            sum += value * value\n        case\
    \ _ where index % 4 == 0:\n            sum += value * value * value\n        default:\n\
    \            sum += value\n        }\n    }\n    return sum", "    var lst = lst\n\
    \    var sum = 0\n    for i in 0..<lst.count {\n        if i % 3 == 0 {\n    \
    \        lst[i] = lst[i] * lst[i]\n        } else if i % 4 == 0 && i % 3 != 0\
    \ {\n            lst[i] = lst[i] * lst[i] * lst[i]\n        }\n        sum +=\
    \ lst[i]\n    }\n    return sum", "    var sum = 0\n    for i in 0..<lst.count\
    \ {\n        if i % 3 == 0 {\n            sum += lst[i] * lst[i]\n        } else\
    \ if i % 4 == 0 {\n            sum += lst[i] * lst[i] * lst[i]\n        } else\
    \ {\n            sum += lst[i]\n        }\n    }\n    return sum", '    return
    lst.enumerated().reduce(0, {$0 + ($1.offset % 3 == 0 ? $1.element * $1.element
    : $1.offset % 4 == 0 ? $1.element * $1.element * $1.element : $1.element)})',
  "    var index = 0\n    var res:Int = 0\n    for i in lst {\n        if (index %\
    \ 3 == 0) {\n            res += i * i\n        } else if (index % 4 == 0 && index\
    \ % 3 != 0) {\n            res += i * i * i\n        } else {\n            res\
    \ += i\n        }\n        index += 1\n    }\n    return res", "    let mult3\
    \ = 3\n    let mult4 = 4\n    var sum: Int = 0\n    for i in lst.indices {\n \
    \       if i % mult3 == 0 && i % mult4 != 0 {\n            sum += lst[i] * lst[i]\n\
    \        } else if i % mult4 == 0 {\n            sum += lst[i] * lst[i] * lst[i]\n\
    \        } else {\n            sum += lst[i]\n        }\n    }\n    return sum",
  "    var sum = 0\n    var count = 0\n    for item in lst {\n        if (count %\
    \ 3 == 0 && count % 4 != 0) {\n            sum += item * item\n        } else\
    \ if (count % 4 == 0 && count % 3 != 0) {\n            sum += item * item * item\n\
    \        } else {\n            sum += item\n        }\n        count += 1\n  \
    \  }\n    return sum", '    return 0', "    var sum = 0\n    for (i, n) in lst.enumerated()\
    \ {\n        if i % 3 == 0 {\n            sum += n * n\n        } else if i %\
    \ 4 == 0 {\n            sum += n * n * n\n        } else {\n            sum +=\
    \ n\n        }\n    }\n    return sum", "    var sum: Int = 0\n    for (i, n)\
    \ in lst.enumerated() {\n        if i % 3 == 0 {\n            sum += n * n\n \
    \       } else if i % 4 == 0 {\n            sum += n * n * n\n        } else {\n\
    \            sum += n\n        }\n    }\n    return sum", "    var sum = 0\n \
    \   for i in 0..<lst.count {\n        var val = lst[i]\n        if i % 3 == 0\
    \ {\n            val = val * val\n        }\n        if i % 4 == 0 && i % 3 !=\
    \ 0 {\n            val = val * val * val\n        }\n        sum += val\n    }\n\
    \    return sum", "    var sum = 0;\n    for (idx, val) in lst.enumerated() {\n\
    \        if idx % 3 == 0 {\n            sum += val * val\n        } else if idx\
    \ % 4 == 0 {\n            sum += val * val * val\n        } else {\n         \
    \   sum += val\n        }\n    }\n    return sum", "    return lst.enumerated().reduce(0,\
    \ { (result, index) -> Int in\n        switch index.offset % 12 {\n        case\
    \ 0, 3, 6, 9:\n            return result + index.element * index.element * index.element\n\
    \        case 4, 8:\n            return result + index.element * index.element\n\
    \        default:\n            return result + index.element\n        }\n    })"]
stop_tokens:
- "\n}"
