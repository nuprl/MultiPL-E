name: HumanEval_13_greatest_common_divisor
language: swift
prompt: "\n/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(3,\
  \ 5)\n/// 1\n/// >>> greatest_common_divisor(25, 15)\n/// 5\nfunc greatest_common_divisor(a:\
  \ Int, b: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(greatest_common_divisor(a: 3, b: 7) == 1)\n\
  assert(greatest_common_divisor(a: 10, b: 15) == 5)\nassert(greatest_common_divisor(a:\
  \ 49, b: 14) == 7)\nassert(greatest_common_divisor(a: 144, b: 60) == 12)"
completions: ["    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == b {\n\
    \        return a\n    }\n    if a == 1 || b == 1 {\n        return 1\n    }\n\
    \    if a < b {\n        return greatest_common_divisor(a: a, b: b % a)\n    }\
    \ else {\n        return greatest_common_divisor(a: a % b, b: b)\n    }", "  \
    \  if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(b,\
    \ b: a % b)\n    }", "    if b == 0 {\n        return a\n    } else {\n      \
    \  return greatest_common_divisor(b, b: a % b)\n    }", "    assert(a > 0)\n \
    \   assert(b > 0)\n    var a = a\n    var b = b\n    while a != b {\n        if\
    \ a > b {\n            a -= b\n        } else {\n            b -= a\n        }\n\
    \    }\n    return a", "    if b == 0 {\n        return a\n    } else {\n    \
    \    return greatest_common_divisor(b, b: a % b)\n    }", "    if a == 0 {\n \
    \       return b\n    }\n    return greatest_common_divisor(b % a, b: a)", " \
    \   if b == 0 {\n        return a\n    } else {\n        return greatest_common_divisor(b,\
    \ b: a % b)\n    }", "    guard a != 0 else {\n        return b\n    }\n    guard\
    \ b != 0 else {\n        return a\n    }\n    return greatest_common_divisor(a:\
    \ b, b: a % b)", "    if b == 0 {\n        return a\n    } else {\n        return\
    \ greatest_common_divisor(b, b: a % b)\n    }", '    return b == 0 ? a : greatest_common_divisor(b,
    a % b)', "    if a < b {\n        return greatest_common_divisor(b, b: a)\n  \
    \  }\n    else if b == 0 {\n        return a\n    }\n    else {\n        return\
    \ greatest_common_divisor(b, b: a % b)\n    }", '    return 0', "    let big =\
    \ max(a, b)\n    let small = min(a, b)\n    if big % small == 0 {\n        return\
    \ small\n    } else {\n        return greatest_common_divisor(big % small, b:\
    \ small)\n    }", '    return gcd(a, b)', "    if b == 0 {\n        return a\n\
    \    } else {\n        return greatest_common_divisor(b, b: a % b)\n    }", " \
    \   let a = abs(a)\n    let b = abs(b)\n    if a < b {\n        return greatest_common_divisor(b,\
    \ b: a)\n    }\n    if b == 0 {\n        return a\n    }\n    return greatest_common_divisor(b,\
    \ b: a % b)", "    if a == 0 || b == 0 {\n        return 0\n    }\n    return\
    \ b == 0 ? a : greatest_common_divisor(b, b: a % b)", '  return a % b == 0 ? b
    : greatest_common_divisor(b, b: a % b)', "    var a = a\n    var b = b\n    if\
    \ a < b {\n        (a, b) = (b, a)\n    }\n    while b != 0 {\n        (a, b)\
    \ = (b, a % b)\n    }\n    return a", "    let remain = a % b\n    if remain ==\
    \ 0 {\n        return b\n    } else {\n        return greatest_common_divisor(b,\
    \ b: remain)\n    }"]
stop_tokens:
- "\n}"
