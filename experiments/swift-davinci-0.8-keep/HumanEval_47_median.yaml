name: HumanEval_47_median
language: swift
prompt: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
  \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l:\
  \ [Int]) -> Double {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
  \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
  \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
completions: ["    // Check if the list is empty or not\n    guard !l.isEmpty else\
    \ { return 0 }\n    \n    // Sort the list\n    let l = l.sorted()\n    \n   \
    \ // Return median\n    if l.count % 2 == 0 {\n        return Double(l[l.count\
    \ / 2] + l[l.count / 2 - 1]) / 2\n    } else {\n        return Double(l[l.count\
    \ / 2])\n    }", "    let n = l.count\n    let s = l.sorted()\n    if n % 2 ==\
    \ 0 {\n        return Double(s[n / 2] + s[n / 2 - 1]) / 2\n    } else {\n    \
    \    return Double(s[n / 2])\n    }", "    let n = l.count\n    if n == 0 {\n\
    \        return 0\n    }\n    let s = l.sorted()\n    if n % 2 == 0 {\n      \
    \  return Double(s[n / 2] + s[n / 2 - 1]) / 2\n    } else {\n        return Double(s[n\
    \ / 2])\n    }", "    precondition(l.count > 0)\n    if l.count % 2 == 0 {\n \
    \       let mid = l.count / 2\n        return (Double(l[mid - 1]) + Double(l[mid]))\
    \ / 2\n    } else {\n        return Double(l[l.count / 2])\n    }", "    let s\
    \ = l.sorted()\n    if s.count % 2 == 0 {\n        let i = s.count / 2\n     \
    \   return Double(s[i - 1] + s[i]) / 2\n    } else {\n        return Double(s[s.count\
    \ / 2])\n    }", '    return -1', "  // START SOLUTION\n  let half = l.count /\
    \ 2\n  if l.count % 2 == 0 {\n    // even: return average of two middle elements\n\
    \    return (Double(l[half-1]) + Double(l[half])) / 2\n  } else {\n    // odd:\
    \ return middle element\n    return Double(l[half])\n  }\n  // END SOLUTION",
  "    let sorted = insertionSort(l)\n    return average(sorted[l.count / 2], sorted[(l.count\
    \ - 1) / 2])", "    let l = sort(l)\n    let half = l.count / 2\n    if l.count\
    \ % 2 == 0 {\n        return Double(l[half - 1] + l[half]) / 2\n    } else {\n\
    \        return Double(l[half])\n    }", '    return 0.0', "    if l.count ==\
    \ 0 {\n        return 0\n    } else {\n        let sorted = l.sorted()\n     \
    \   let middle = sorted.count / 2\n        if sorted.count % 2 == 0 {\n      \
    \      return Double(sorted[middle - 1] + sorted[middle]) / 2\n        } else\
    \ {\n            return Double(sorted[middle])\n        }\n    }", "    let n\
    \ = l.count\n    let m = n / 2\n    let l = l.sorted()\n    if n == 0 {\n    \
    \    return 0\n    } else if n % 2 == 0 {\n        return Double(l[m - 1] + l[m])\
    \ / 2\n    } else {\n        return Double(l[m])\n    }", '    return 0.0', " \
    \   // BEGIN TODO (median)\n    let l_sorted = l.sorted()\n    let length = l_sorted.count\n\
    \    if length % 2 == 0 {\n        return Double(l_sorted[length / 2] + l_sorted[length\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(l_sorted[length / 2])\n \
    \   }\n    // END TODO (median)", "    let n = l.count\n    if n % 2 == 0 {\n\
    \        return Double(l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n        return\
    \ Double(l[n / 2])\n    }", "    let sorted = l.sorted()\n    let len = sorted.count\n\
    \    if len % 2 == 0 {\n        return Double(sorted[len / 2] + sorted[len / 2\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[len / 2])\n    }", '    return
    sorted(l)[(l.count - 1) / 2] as Double', "    assert(l.count > 0)\n    let sorted\
    \ = l.sorted(by: <)\n    let n = sorted.count\n    if n % 2 == 0 {\n        return\
    \ Double(sorted[n / 2] + sorted[n / 2 - 1]) / 2\n    } else {\n        return\
    \ Double(sorted[n / 2])\n    }", "\treturn 0.0", "    let sorted = l.sorted()\n\
    \    let len = sorted.count\n    if len % 2 == 0 {\n        let median1 = sorted[len\
    \ / 2]\n        let median2 = sorted[len / 2 - 1]\n        return Double(median1\
    \ + median2) / 2\n    } else {\n        return Double(sorted[len / 2])\n    }"]
stop_tokens:
- "\n}"
