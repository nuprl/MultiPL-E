language: swift
name: HumanEval_47_median
results:
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    // Check if the list is empty or not\n   \
    \ guard !l.isEmpty else { return 0 }\n    \n    // Sort the list\n    let l =\
    \ l.sorted()\n    \n    // Return median\n    if l.count % 2 == 0 {\n        return\
    \ Double(l[l.count / 2] + l[l.count / 2 - 1]) / 2\n    } else {\n        return\
    \ Double(l[l.count / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824380
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    let s = l.sorted()\n\
    \    if n % 2 == 0 {\n        return Double(s[n / 2] + s[n / 2 - 1]) / 2\n   \
    \ } else {\n        return Double(s[n / 2])\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824379
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    if n == 0 {\n       \
    \ return 0\n    }\n    let s = l.sorted()\n    if n % 2 == 0 {\n        return\
    \ Double(s[n / 2] + s[n / 2 - 1]) / 2\n    } else {\n        return Double(s[n\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824379
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    precondition(l.count > 0)\n    if l.count\
    \ % 2 == 0 {\n        let mid = l.count / 2\n        return (Double(l[mid - 1])\
    \ + Double(l[mid])) / 2\n    } else {\n        return Double(l[l.count / 2])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpddzgd1wr/tmpddzgd1wr.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75893c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75890c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75890c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75890bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpddzgd1wr                        0x0000560fec44a471 <unavailable> + 5233

    5    libc.so.6                          0x00002b75895b5460 __libc_start_main +
    245

    6    tmpddzgd1wr                        0x0000560fec44a0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824380
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let s = l.sorted()\n    if s.count % 2 ==\
    \ 0 {\n        let i = s.count / 2\n        return Double(s[i - 1] + s[i]) / 2\n\
    \    } else {\n        return Double(s[s.count / 2])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824380
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpszc5m143/tmpszc5m143.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b167630ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1676005b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1676005988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16760047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpszc5m143                        0x00005616846cd321 <unavailable> + 4897

    5    libc.so.6                          0x00002b16764fa460 __libc_start_main +
    245

    6    tmpszc5m143                        0x00005616846ccf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824379
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n  // START SOLUTION\n  let half = l.count / 2\n\
    \  if l.count % 2 == 0 {\n    // even: return average of two middle elements\n\
    \    return (Double(l[half-1]) + Double(l[half])) / 2\n  } else {\n    // odd:\
    \ return middle element\n    return Double(l[half])\n  }\n  // END SOLUTION\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpeutqudcu/tmpeutqudcu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70ec402c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70ec0f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70ec0f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70ec0f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeutqudcu                        0x00005633b19a7471 <unavailable> + 5233

    5    libc.so.6                          0x00002b70ec5ee460 __libc_start_main +
    245

    6    tmpeutqudcu                        0x00005633b19a70b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824380
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = insertionSort(l)\n    return\
    \ average(sorted[l.count / 2], sorted[(l.count - 1) / 2])\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpuezwiuon.swift:8:18: error: cannot find 'insertionSort' in scope\n\
    \    let sorted = insertionSort(l)\n                 ^~~~~~~~~~~~~\n/tmp/tmpuezwiuon.swift:9:12:\
    \ error: cannot find 'average' in scope\n    return average(sorted[l.count / 2],\
    \ sorted[(l.count - 1) / 2])\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824379
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let l = sort(l)\n    let half = l.count /\
    \ 2\n    if l.count % 2 == 0 {\n        return Double(l[half - 1] + l[half]) /\
    \ 2\n    } else {\n        return Double(l[half])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp8vjaes0e.swift:8:13: error: cannot find 'sort' in scope\n    let\
    \ l = sort(l)\n            ^~~~\n"
  stdout: ''
  timestamp: 1659824380
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpgam5g_hj/tmpgam5g_hj.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3edf2a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3edef9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3edef9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3edef9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgam5g_hj                        0x00005585b0026321 <unavailable> + 4897

    5    libc.so.6                          0x00002b3edf494460 __libc_start_main +
    245

    6    tmpgam5g_hj                        0x00005585b0025f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    if l.count == 0 {\n        return 0\n    }\
    \ else {\n        let sorted = l.sorted()\n        let middle = sorted.count /\
    \ 2\n        if sorted.count % 2 == 0 {\n            return Double(sorted[middle\
    \ - 1] + sorted[middle]) / 2\n        } else {\n            return Double(sorted[middle])\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824380
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    let m = n / 2\n    let\
    \ l = l.sorted()\n    if n == 0 {\n        return 0\n    } else if n % 2 == 0\
    \ {\n        return Double(l[m - 1] + l[m]) / 2\n    } else {\n        return\
    \ Double(l[m])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824380
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpgam5g_hj/tmpgam5g_hj.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3edf2a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3edef9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3edef9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3edef9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgam5g_hj                        0x00005585b0026321 <unavailable> + 4897

    5    libc.so.6                          0x00002b3edf494460 __libc_start_main +
    245

    6    tmpgam5g_hj                        0x00005585b0025f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    // BEGIN TODO (median)\n    let l_sorted =\
    \ l.sorted()\n    let length = l_sorted.count\n    if length % 2 == 0 {\n    \
    \    return Double(l_sorted[length / 2] + l_sorted[length / 2 - 1]) / 2\n    }\
    \ else {\n        return Double(l_sorted[length / 2])\n    }\n    // END TODO\
    \ (median)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824380
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let n = l.count\n    if n % 2 == 0 {\n   \
    \     return Double(l[n / 2] + l[n / 2 - 1]) / 2\n    } else {\n        return\
    \ Double(l[n / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(median(l:\
    \ [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\n\
    assert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l:\
    \ [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpq3b_8238/tmpq3b_8238.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff15483c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff1517ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff1517a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff151797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3b_8238                        0x000056215ee94471 <unavailable> + 5233

    5    libc.so.6                          0x00002aff1566f460 __libc_start_main +
    245

    6    tmpq3b_8238                        0x000056215ee940b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824380
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let len = sorted.count\n\
    \    if len % 2 == 0 {\n        return Double(sorted[len / 2] + sorted[len / 2\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[len / 2])\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824379
- exit_code: 1
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    return sorted(l)[(l.count - 1) / 2] as Double\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpalbsb4gt.swift:8:12: error: cannot find 'sorted' in scope\n   \
    \ return sorted(l)[(l.count - 1) / 2] as Double\n           ^~~~~~\n"
  stdout: ''
  timestamp: 1659824379
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    assert(l.count > 0)\n    let sorted = l.sorted(by:\
    \ <)\n    let n = sorted.count\n    if n % 2 == 0 {\n        return Double(sorted[n\
    \ / 2] + sorted[n / 2 - 1]) / 2\n    } else {\n        return Double(sorted[n\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824380
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n\treturn 0.0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpeydmqca9/tmpeydmqca9.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad65411cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad653e13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad653e13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad653e127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeydmqca9                        0x000055a464dbb321 <unavailable> + 4897

    5    libc.so.6                          0x00002ad654308460 __libc_start_main +
    245

    6    tmpeydmqca9                        0x000055a464dbaf69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824379
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let len = sorted.count\n\
    \    if len % 2 == 0 {\n        let median1 = sorted[len / 2]\n        let median2\
    \ = sorted[len / 2 - 1]\n        return Double(median1 + median2) / 2\n    } else\
    \ {\n        return Double(sorted[len / 2])\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824379
