name: HumanEval_148_bf
language: swift
prompt: "\n/// There are eight planets in our solar system: the closerst to the Sun\
  \ \n/// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
  /// Uranus, Neptune.\n/// Write a function that takes two planet names as strings\
  \ planet1 and planet2. \n/// The function should return a tuple containing all planets\
  \ whose orbits are \n/// located between the orbit of planet1 and the orbit of planet2,\
  \ sorted by \n/// the proximity to the sun. \n/// The function should return an\
  \ empty tuple if planet1 or planet2\n/// are not correct planet names. \n/// Examples\n\
  /// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n/// bf(\"Earth\"\
  , \"Mercury\") ==> (\"Venus\")\n/// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\",\
  \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunc bf(planet1: String, planet2:\
  \ String) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(bf(planet1: \"Jupiter\", planet2: \"Neptune\"\
  ) == [\"Saturn\", \"Uranus\"])\nassert(bf(planet1: \"Earth\", planet2: \"Mercury\"\
  ) == [\"Venus\"])\nassert(bf(planet1: \"Mercury\", planet2: \"Uranus\") == [\"Venus\"\
  , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"])\nassert(bf(planet1: \"Neptune\"\
  , planet2: \"Venus\") == [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
  ])\nassert(bf(planet1: \"Earth\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1:\
  \ \"Mars\", planet2: \"Earth\") == [] as [String])\nassert(bf(planet1: \"Jupiter\"\
  , planet2: \"Makemake\") == [] as [String])"
completions: []
stop_tokens:
- "\n}"
