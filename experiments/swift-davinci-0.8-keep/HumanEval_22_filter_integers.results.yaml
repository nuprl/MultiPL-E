language: swift
name: HumanEval_22_filter_integers
results:
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return filter_values(values: values, filter_func: is_int)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpaarwxh5i.swift:8:12: error: cannot find 'filter_values' in scope\n\
    \    return filter_values(values: values, filter_func: is_int)\n           ^~~~~~~~~~~~~\n\
    /tmp/tmpaarwxh5i.swift:8:55: error: cannot find 'is_int' in scope\n    return\
    \ filter_values(values: values, filter_func: is_int)\n                       \
    \                               ^~~~~~\n"
  stdout: ''
  timestamp: 1659824779
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let v = value as? Int {\n            result.append(v)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    values.filter {\n        if let i = $0 as? Int {\n         \
    \   return true\n        }\n        return false\n    }.map { $0 as! Int }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for x in values {\n        if let\
    \ x_int = x as? Int {\n            result.append(x_int)\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.filter { (elem) -> Bool in\n        if let number\
    \ = elem as? Int {\n            return true\n        }\n        return false\n\
    \    } as! [Int]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { (value) -> Int? in\n        if let\
    \ value = value as? Int {\n            return value\n        }\n        return\
    \ nil\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    let intergers = values.filter { v in\n        if let v = v as?\
    \ Int {\n            return true\n        }\n        return false\n    }\n   \
    \ return intergers as! [Int]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap({ $0 as? Int })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return filter_any(values, type: Int.self) as! [Int]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpd7ftpr86.swift:8:12: error: cannot find 'filter_any' in scope\n\
    \    return filter_any(values, type: Int.self) as! [Int]\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824779
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var res = [Int]()\n    for v in values {\n        if let v =\
    \ v as? Int {\n            res.append(v)\n        }\n    }\n    return res\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return filter_integers(arr: values.map { $0 as! AnyHashable\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(filter_integers(values: [] as\
    \ [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable\
    \ : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmptegd4j5q.swift:8:27: error: incorrect argument label in call (have\
    \ 'arr:', expected 'values:')\n    return filter_integers(arr: values.map { $0\
    \ as! AnyHashable })\n                          ^~~~\n                       \
    \    values\n/tmp/tmptegd4j5q.swift:8:49: warning: forced cast of 'AnyHashable'\
    \ to same type has no effect\n    return filter_integers(arr: values.map { $0\
    \ as! AnyHashable })\n                                                ^~~~~~~~~~~~~~~~\n\
    \                                                \n"
  stdout: ''
  timestamp: 1659824779
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap({ (value) -> Int? in\n        guard\
    \ let i = value as? Int else { return nil }\n        return i\n    })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.filter({ $0 is Int }).map({ $0 as! Int })\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var integers = [Int]()\n    for value in values {\n        if\
    \ let int = value as? Int {\n            integers.append(int)\n        }\n   \
    \ }\n    return integers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return filter_by_types(values: values, types: [Int.self])\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpa_aopchi.swift:8:12: error: cannot find 'filter_by_types' in scope\n\
    \    return filter_by_types(values: values, types: [Int.self])\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824779
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let integer = value as? Int {\n            result.append(integer)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var filtered = [Int]()\n    for value in values {\n        if\
    \ let integer = value as? Int {\n            filtered.append(integer)\n      \
    \  }\n    }\n    return filtered\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824780
- exit_code: -4
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return [3]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: Exception
  stderr: 'tmpzrb6oy4p/tmpzrb6oy4p.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d2e5a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d2e299b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d2e299988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d2e2987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzrb6oy4p                        0x000055a583e1f77d <unavailable> + 6013

    5    libc.so.6                          0x00002b0d2e78e460 __libc_start_main +
    245

    6    tmpzrb6oy4p                        0x000055a583e1f3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824780
