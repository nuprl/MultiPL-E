name: HumanEval_14_all_prefixes
language: swift
prompt: "\n/// Return list of all prefixes from shortest to longest of the input string\n\
  /// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string: String)\
  \ -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
  assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
  asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"\
  WWW\"])"
completions: ["    var prefs = [String]()\n    for i in 0..<string.count {\n     \
    \   prefs.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefs", "    let length = string.characters.count\n\
    \    return (0..<length).map { string.substringToIndex(string.startIndex.advancedBy($0))\
    \ }", '  return (1..<count(string)).map {string[string.startIndex..<advance(string.startIndex,
    $0)]}', "    var prefixes: [String] = []\n    for length in 0..<string.count {\n\
    \        prefixes.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: length + 1)))\n    }\n    return prefixes", "    var res: [String]\
    \ = []\n    for i in 0..<string.count {\n        res.append(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)])\n    }\n    return res", "    let chars = Array(string.characters)\n\
    \    var output = [String]()\n    for i in 0..<chars.count {\n        output.append(String(chars[0...i]))\n\
    \    }\n    return output", "    var result = [String]()\n    let count = string.count\n\
    \    for i in 0..<count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result", "  var result: [String] = []\n\
    \  let characters = Array(string.characters)\n  for i in 0..<characters.count\
    \ {\n    result.append(String(characters[0...i]))\n  }\n  return result", "  \
    \  var result: [String] = []\n    for i in 0..<string.characters.count {\n   \
    \     result.append(string.substringToIndex(string.startIndex.advancedBy(i + 1)))\n\
    \    }\n    return result", '    return (1...string.characters.count).map({ string.substringToIndex(string.startIndex.advancedBy($0))
    })', "    var list = [String]()\n    let length = string.characters.count\n  \
    \  for i in 0...length {\n        list.append(string.substringToIndex(string.startIndex.advancedBy(i)))\n\
    \    }\n    return list", "    let n = string.characters.count\n    return (0..<n).map\
    \ { string.startIndex.advancedBy($0)..<string.startIndex.advancedBy($0+1) }.map\
    \ { String(string[$0]) }", "    var result: [String] = []\n    for index in 1...string.characters.count\
    \ {\n        result.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: index)))\n    }\n    return result", "  let count = string.characters.count\n\
    \  var result = [String]()\n  for i in 0..<count {\n    result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \  }\n  return result", '  return string.characters.indices.map { string.substringToIndex($0)
    }', "    let len = string.length\n    var ret = [String]()\n    for i in 1...len\
    \ {\n        ret.append(string[0..<i])\n    }\n    return ret", "    var result:\
    \ [String] = []\n    for index in 0..<string.count {\n        result.append(string[0..<index+1])\n\
    \    }\n    return result", "    var result = [String]()\n    for index in string.indices\
    \ {\n        result.append(String(string[..<index]))\n    }\n    return result",
  "    var result: [String] = []\n    for i in 0..<string.count {\n        result.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result", "    var prefixes = [String]()\n\
    \    for i in 0..<string.count {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes"]
stop_tokens:
- "\n}"
