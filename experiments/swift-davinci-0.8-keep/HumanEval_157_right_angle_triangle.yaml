name: HumanEval_157_right_angle_triangle
language: swift
prompt: "\n/// Given the lengths of the three sides of a triangle. Return True if\
  \ the three\n/// sides form a right-angled triangle, False otherwise.\n/// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
  /// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
  \ 2, 3) == False\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) ==\
  \ true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
  \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
  assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
  \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
  \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
  \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\n\
  assert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
completions: ["  if a == 0 || b == 0 || c == 0 {\n    return false\n  }\n  let triangle\
    \ = [a, b, c].sorted()\n  let a2 = triangle[0] * triangle[0]\n  let b2 = triangle[1]\
    \ * triangle[1]\n  let c2 = triangle[2] * triangle[2]\n  if a2 + b2 == c2 {\n\
    \    return true\n  }\n  return false", '    return true', "    let l = [a, b,\
    \ c].sorted()\n    return (l[0] * l[0] + l[1] * l[1]) == l[2] * l[2]", "\tlet\
    \ sides = [a, b, c].sorted(by: <)\n\treturn sides[0] * sides[0] + sides[1] * sides[1]\
    \ == sides[2] * sides[2]", "  let a2 = a * a\n  let b2 = b * b\n  let c2 = c *\
    \ c\n  if (a2 + b2 == c2) || (a2 + c2 == b2) || (b2 + c2 == a2) {\n    return\
    \ true\n  }\n  return false", "    let sorted = [a, b, c].sorted()\n    return\
    \ sorted[0] * sorted[0] + sorted[1] * sorted[1] == sorted[2] * sorted[2]", " \
    \   if (a == b && b == c) {\n        return false\n    }\n    let max = max_of_three(a,\
    \ b, c)\n    let mid = mid_of_three(a, b, c)\n    let min = min_of_three(a, b,\
    \ c)\n    if (max == min) {\n        return false\n    }\n    if (mid * mid +\
    \ min * min == max * max) {\n        return true\n    }\n    return false", " \
    \ let squares = [a * a, b * b, c * c]\n  let maxIndex = squares.indexOf(squares.maxElement()!)!\n\
    \  return (squares[(maxIndex + 1) % 3] + squares[(maxIndex + 2) % 3]) == squares[maxIndex]",
  "    let r = sorted([a, b, c])\n    let (hypotenuse, adjacent, opposite) = (r[2],\
    \ r[1], r[0])\n    return hypotenuse * hypotenuse == adjacent * adjacent + opposite\
    \ * opposite", '    return a * a + b * b == c * c || a * a + c * c == b * b ||
    b * b + c * c == a * a', "    // FIXME: Implement me\n    var answer: Bool = false\n\
    \    let check: (Int, Int, Int) -> Bool = { n1, n2, n3 in\n        if n1 == n2\
    \ && n2 == n3 {\n            return false\n        }\n        let toSort = [n1,\
    \ n2, n3]\n        let sorted = toSort.sorted { $0 < $1 }\n        let a = sorted[0]\n\
    \        let b = sorted[1]\n        let c = sorted[2]\n        if a * a + b *\
    \ b == c * c {\n            return true\n        }\n        return false\n   \
    \ }\n    answer = check(a, b, c)\n    return answer", "    var aSq: Int = a *\
    \ a\n    var bSq: Int = b * b\n    var cSq: Int = c * c\n    var max: Int = max(max(aSq,\
    \ bSq), cSq)\n    if max == aSq {\n        return max == bSq + cSq\n    } else\
    \ if max == bSq {\n        return max == aSq + cSq\n    } else {\n        return\
    \ max == aSq + bSq\n    }", "    // Your code here!\n    if a * a + b * b == c\
    \ * c {\n        return true\n    }\n    if a * a + c * c == b * b {\n       \
    \ return true\n    }\n    if b * b + c * c == a * a {\n        return true\n \
    \   }\n    return false", "  let longestSide = max(a, max(b, c))\n  let sumOfShorterSides\
    \ = a + b + c - longestSide\n  return longestSide * longestSide == sumOfShorterSides\
    \ * sumOfShorterSides", '    fatalError("Unimplemented")', "    if (a*a + b*b\
    \ == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a) {\n        return true\n\
    \    }\n    return false", "    let sides = [a, b, c].sorted()\n    return sides[0]\
    \ * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]", '    return a*a +
    b*b == c*c', "    let sides = [a, b, c].sorted(by: >)\n    return sides[0] * sides[0]\
    \ == sides[1] * sides[1] + sides[2] * sides[2]", "    // Write your code here\n\
    \    return false"]
stop_tokens:
- "\n}"
