language: swift
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0\
    \ >= \"a\" && $0 <= \"z\" }.enumerated().reduce(0) { return $1.offset % 2 == 0\
    \ ? $0 : $0 + 1 })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmplb8n4csj.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmplb8n4csj.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821539
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    let spaces = txt.components(separatedBy: \"\
    \ \")\n    let commas = txt.components(separatedBy: \",\")\n    if spaces.count\
    \ == 1 {\n        if commas.count == 1 {\n            return .failure(txt.lowercased().filter\
    \ {$0.asciiValue! % 2 == 1}.count)\n        } else {\n            return .success(commas)\n\
    \        }\n    } else {\n        return .success(spaces)\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp36twp5lx.swift:12:22: error: value of type 'String' has no member\
    \ 'components'\n    let spaces = txt.components(separatedBy: \" \")\n        \
    \         ~~~ ^~~~~~~~~~\n/tmp/tmp36twp5lx.swift:13:22: error: value of type 'String'\
    \ has no member 'components'\n    let commas = txt.components(separatedBy: \"\
    ,\")\n                 ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821539
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpdpagq0p1.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpdpagq0p1.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n\treturn .success(txt.split{ $0.isWhitespace ||\
    \ $0 == \",\" }.map{ String($0) })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpghn8iv5n/tmpghn8iv5n.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fd5ca2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fd5999b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fd5999988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fd59987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpghn8iv5n                        0x00005613ed54cee0 <unavailable> + 7904

    5    libc.so.6                          0x00002b5fd5e8e460 __libc_start_main +
    245

    6    tmpghn8iv5n                        0x00005613ed54c6b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1659821539
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if let list = txt.split(separator: \" \").first\
    \ {\n        return .success(Array(list))\n    } else if let list = txt.split(separator:\
    \ \",\").first {\n        return .success(Array(list))\n    } else {\n       \
    \ var count = 0\n        for char in txt {\n            if char.lowercased() ==\
    \ char, char.asciiValue! % 2 == 1 {\n                count += 1\n            }\n\
    \        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp5q6mq7aw.swift:13:25: error: cannot convert value of type 'Array<Character>'\
    \ to expected argument type '[String]'\n        return .success(Array(list))\n\
    \                        ^\n/tmp/tmp5q6mq7aw.swift:13:25: note: arguments to generic\
    \ parameter 'Element' ('Character' and 'String') are expected to be equal\n  \
    \      return .success(Array(list))\n                        ^\n/tmp/tmp5q6mq7aw.swift:15:25:\
    \ error: cannot convert value of type 'Array<Character>' to expected argument\
    \ type '[String]'\n        return .success(Array(list))\n                    \
    \    ^\n/tmp/tmp5q6mq7aw.swift:15:25: note: arguments to generic parameter 'Element'\
    \ ('Character' and 'String') are expected to be equal\n        return .success(Array(list))\n\
    \                        ^\n/tmp/tmp5q6mq7aw.swift:19:34: error: binary operator\
    \ '==' cannot be applied to operands of type 'String' and 'Character'\n      \
    \      if char.lowercased() == char, char.asciiValue! % 2 == 1 {\n           \
    \    ~~~~~~~~~~~~~~~~~ ^  ~~~~\n/tmp/tmp5q6mq7aw.swift:19:34: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n            if char.lowercased() == char, char.asciiValue!\
    \ % 2 == 1 {\n                                 ^\n"
  stdout: ''
  timestamp: 1659821539
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n\tif txt.contains(\" \") {\n\t\treturn .success(txt.components(separatedBy:\
    \ \" \"))\n\t} else if txt.contains(\",\") {\n\t\treturn .success(txt.components(separatedBy:\
    \ \",\"))\n\t} else {\n\t\treturn .failure(txt.lowercased().filter {\n\t\t\tlet\
    \ index = \"abcdefghijklmnopqrstuvwxyz\".firstIndex(of: $0)!\n\t\t\treturn index\
    \ % 2 == 1\n\t\t}.count)\n\t}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmphhw71d3t.swift:13:23: error: value of type 'String' has no member\
    \ 'components'\n                return .success(txt.components(separatedBy: \"\
    \ \"))\n                                ~~~ ^~~~~~~~~~\n/tmp/tmphhw71d3t.swift:15:23:\
    \ error: value of type 'String' has no member 'components'\n                return\
    \ .success(txt.components(separatedBy: \",\"))\n                             \
    \   ~~~ ^~~~~~~~~~\n/tmp/tmphhw71d3t.swift:19:11: error: cannot convert value\
    \ of type 'String.Index' to expected argument type 'Int'\n                   \
    \     return index % 2 == 1\n                               ^\n"
  stdout: ''
  timestamp: 1659821539
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    var numOdd = 0\n    let splitArray = txt.components(separatedBy:\
    \ \" \")\n    if splitArray.count > 1 {\n        return .ok(splitArray)\n    }\
    \ else {\n        let splitArrayComma = txt.components(separatedBy: \",\")\n \
    \       if splitArrayComma.count > 1 {\n            return .ok(splitArrayComma)\n\
    \        } else {\n            for (index, char) in txt.enumerated() {\n     \
    \           if index % 2 == 0 {\n                    if char.lowercased() == char\
    \ {\n                        numOdd += 1\n                    }\n            \
    \    }\n            }\n            return .error(numOdd)\n        }\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpam7kx12j.swift:13:26: error: value of type 'String' has no member\
    \ 'components'\n    let splitArray = txt.components(separatedBy: \" \")\n    \
    \                 ~~~ ^~~~~~~~~~\n/tmp/tmpam7kx12j.swift:15:17: error: type 'Result<[String],\
    \ Int>' has no member 'ok'\n        return .ok(splitArray)\n               ~^~\n\
    /tmp/tmpam7kx12j.swift:17:35: error: value of type 'String' has no member 'components'\n\
    \        let splitArrayComma = txt.components(separatedBy: \",\")\n          \
    \                    ~~~ ^~~~~~~~~~\n/tmp/tmpam7kx12j.swift:19:21: error: type\
    \ 'Result<[String], Int>' has no member 'ok'\n            return .ok(splitArrayComma)\n\
    \                   ~^~\n/tmp/tmpam7kx12j.swift:23:42: error: binary operator\
    \ '==' cannot be applied to operands of type 'String' and 'String.Element' (aka\
    \ 'Character')\n                    if char.lowercased() == char {\n         \
    \              ~~~~~~~~~~~~~~~~~ ^  ~~~~\n/tmp/tmpam7kx12j.swift:23:42: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n                    if char.lowercased() == char\
    \ {\n                                         ^\n/tmp/tmpam7kx12j.swift:28:21:\
    \ error: type 'Result<[String], Int>' has no member 'error'\n            return\
    \ .error(numOdd)\n                   ~^~~~~\n"
  stdout: ''
  timestamp: 1659821539
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if let _ = txt.firstIndex(of: \" \") {\n   \
    \     return .success(txt.split(separator: \" \").map(String.init))\n    } else\
    \ if let _ = txt.firstIndex(of: \",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        let lower = txt.lowercased()\n\
    \        let odds = (0..<26).filter { (idx) -> Bool in\n            let chr =\
    \ Character(UnicodeScalar(idx + 97)!)\n            return lower.filter { $0 ==\
    \ chr }.count % 2 == 1\n        }\n        return .failure(odds.count)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmprgscmt6m/tmprgscmt6m.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00c1efdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00c1bf4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00c1bf4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00c1bf37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprgscmt6m                        0x0000563105e41643 <unavailable> + 9795

    5    libc.so.6                          0x00002b00c20e9460 __libc_start_main +
    245

    6    tmprgscmt6m                        0x0000563105e40b29 <unavailable> + 6953

    '
  stdout: ''
  timestamp: 1659821539
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter {Character(UnicodeScalar($0.asciiValue!)!).isLowercase}.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp2xwuu8qb.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp2xwuu8qb.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n/tmp/tmp2xwuu8qb.swift:17:76:\
    \ error: cannot force unwrap value of non-optional type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \        return .failure(txt.filter {Character(UnicodeScalar($0.asciiValue!)!).isLowercase}.count)\n\
    \                                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                           \n"
  stdout: ''
  timestamp: 1659821539
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    guard txt.contains(\" \") else {\n        guard\
    \ txt.contains(\",\") else {\n            var n = 0\n            for (i, ch) in\
    \ txt.lowercased().enumerated() {\n                if (i + 1) % 2 == 1 {\n   \
    \                 n += Int(ch.asciiValue!) - 97\n                }\n         \
    \   }\n            return .failure(n)\n        }\n        return .success(txt.split(separator:\
    \ \",\").map { String($0) })\n    }\n    return .success(txt.split(separator:\
    \ \" \").map { String($0) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmpsqim56ro/tmpsqim56ro.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc677a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc6749bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc6749b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc6749a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsqim56ro                        0x000055a92c6a66d3 <unavailable> + 9939

    5    libc.so.6                          0x00002acc67990460 __libc_start_main +
    245

    6    tmpsqim56ro                        0x000055a92c6a5bb9 <unavailable> + 7097

    '
  stdout: ''
  timestamp: 1659821539
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    let a = txt.components(separatedBy: \" \")\n\
    \    let b = txt.components(separatedBy: \",\")\n    let c = txt.filter{(\"a\"\
    ...\"z\").contains($0)}.compactMap{String($0)}.map{$0.unicodeScalars.first?.value}.filter{$0!\
    \ % 2 == 1}.count\n    return a.count > 1 ? .success(a) : b.count > 1 ? .success(b)\
    \ : .failure(c)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpbijv2jll.swift:12:17: error: value of type 'String' has no member\
    \ 'components'\n    let a = txt.components(separatedBy: \" \")\n            ~~~\
    \ ^~~~~~~~~~\n/tmp/tmpbijv2jll.swift:13:17: error: value of type 'String' has\
    \ no member 'components'\n    let b = txt.components(separatedBy: \",\")\n   \
    \         ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821539
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    let words = txt.split(separator: \" \")\n  \
    \  if words.count > 1 {\n        return .success(words.map(String.init))\n   \
    \ }\n    let words2 = txt.split(separator: \",\")\n    if words2.count > 1 {\n\
    \        return .success(words2.map(String.init))\n    }\n    return .failure(txt.filter{$0.isLowercase\
    \ && $0.wholeNumberValue!.isOdd}.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpx9_da4z4.swift:20:71: error: value of type 'Int' has no member\
    \ 'isOdd'\n    return .failure(txt.filter{$0.isLowercase && $0.wholeNumberValue!.isOdd}.count)\n\
    \                                                 ~~~~~~~~~~~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659821539
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.reduce(0) { (num, char) ->\
    \ Int in\n            char < \"a\" || char > \"z\" ? num : (num + (Int(String(char))!\
    \ - 97) % 2)\n        })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpvllafcdt.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpvllafcdt.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821539
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    return txt.contains(\" \") ? .ok(txt.split(separator:\
    \ \" \").map(String.init)) :\n        txt.contains(\",\") ? .ok(txt.split(separator:\
    \ \",\").map(String.init)) :\n        txt.lowercased().filter { \"abcdefghijklmnopqrstuvwxyz\"\
    .contains($0) }.reduce(0) { $1.wholeNumberValue! % 2 == 1 ? $0 + 1 : $0 }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6x3dd427.swift:12:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return txt.contains(\" \") ? .ok(txt.split(separator: \"\
    \ \").map(String.init)) :\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821624
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    return .failure(0)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmph5tvd3w0/tmph5tvd3w0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af482180c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af481e77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af481e77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af481e767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph5tvd3w0                        0x00005610a8acb84c <unavailable> + 6220

    5    libc.so.6                          0x00002af48236c460 __libc_start_main +
    245

    6    tmph5tvd3w0                        0x00005610a8acb389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659821539
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    guard txt.contains(\" \") else {\n        guard\
    \ txt.contains(\",\") else {\n            var acc = 0\n            for c in txt.lowercased()\
    \ {\n                if c.asciiValue! % 2 == 1 {\n                    acc += 1\n\
    \                }\n            }\n            return .success(acc)\n        }\n\
    \        return .success(txt.split(separator: \",\").map { String($0) })\n   \
    \ }\n    return .success(txt.split(separator: \" \").map { String($0) })\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6jmcp4a7.swift:20:29: error: cannot convert value of type 'Int'\
    \ to expected argument type '[String]'\n            return .success(acc)\n   \
    \                         ^\n"
  stdout: ''
  timestamp: 1659821539
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        var count = 0\n        txt.forEach {\n      \
    \      let index = UnicodeScalar($0.lowercased())?.value ?? 0\n            if\
    \ index % 2 == 1 {\n                count += 1\n            }\n        }\n   \
    \     return .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpd8usd70c.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpd8usd70c.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821539
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { Int((\"a\" as UnicodeScalar).value)\
    \ ... Int((\"z\" as UnicodeScalar).value) ~= Int($0.unicodeScalars.first!.value)\
    \ }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp1g2uc66z.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp1g2uc66z.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659821539
