name: HumanEval_146_specialFilter
language: swift
prompt: "\n/// Write a function that takes an array of numbers as input and returns\
  \ \n/// the number of elements in the array that are greater than 10 and both \n\
  /// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n\
  /// specialFilter([15, -73, 14, -15]) => 1 \n/// specialFilter([33, -2, -3, 45,\
  \ 21, 109]) => 2\nfunc specialFilter(nums: [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(specialFilter(nums: [5, -2, 1, -5]) == 0)\n\
  assert(specialFilter(nums: [15, -73, 14, -15]) == 1)\nassert(specialFilter(nums:\
  \ [33, -2, -3, 45, 21, 109]) == 2)\nassert(specialFilter(nums: [43, -12, 93, 125,\
  \ 121, 109]) == 4)\nassert(specialFilter(nums: [71, -2, -33, 75, 21, 19]) == 3)\n\
  assert(specialFilter(nums: [1]) == 0)\nassert(specialFilter(nums: [] as [Int]) ==\
  \ 0)"
completions: ['    return 0', '    return 0', "    var count = 0\n    for num in nums\
    \ {\n        if num > 10 {\n            var temp = num\n            while temp\
    \ > 10 {\n                temp /= 10\n            }\n            if temp % 2 !=\
    \ 0 {\n                temp = num\n                temp %= 10\n              \
    \  if temp % 2 != 0 {\n                    count += 1\n                }\n   \
    \         }\n        }\n    }\n    return count", '    return 0', '    return
    0', "    \n    // code here\n    ", "    return nums.filter({ \n            firstDigit(num:\
    \ $0) != secondDigit(num: $0) && \n            firstDigit(num: $0) % 2 != 0 &&\
    \ \n            secondDigit(num: $0) % 2 != 0 && \n            $0 > 10\n     \
    \   }).count", "    \n    var result = 0\n    \n    for num in nums {\n      \
    \  if num > 10 && (num % 10 == 1 || num % 10 == 3 || num % 10 == 5 || num % 10\
    \ == 7 || num % 10 == 9) && (num / 10 == 1 || num / 10 == 3 || num / 10 == 5 ||\
    \ num / 10 == 7 || num / 10 == 9) {\n            result += 1\n        }\n    }\n\
    \    \n    return result", '    return nums.filter({$0 > 10 && ($0 % 10) % 2 !=
    0 && $0 / 10 % 2 != 0}).count', '  return 0', "    var specialCount = 0\n    for\
    \ n in nums {\n        let firstNumber = String(n).characters.first!\n       \
    \ let lastNumber = String(n).characters.last!\n        if (firstNumber.isOdd()\
    \ && lastNumber.isOdd() && n > 10) {\n            specialCount += 1\n        }\n\
    \    }\n    return specialCount", '    return nums.filter { $0.firstDigit % 2
    != 0 && $0.lastDigit % 2 != 0 && $0 > 10 }.count', "    var output = 0\n    for\
    \ num in nums {\n        var digits = num\n        let firstDigit = num / 10\n\
    \        let lastDigit = num % 10\n        if firstDigit > 10 && lastDigit > 10\
    \ && firstDigit % 2 != 0 && lastDigit % 2 != 0 {\n            output += 1\n  \
    \      }\n    }\n    return output", '    return 0', "    let count = nums.filter({$0\
    \ > 10 && String($0)[0] % 2 != 0 && String($0)[String($0).count - 1] % 2 != 0}).count\n\
    \    return count", "    var filterCount = 0\n    for num in nums {\n        let\
    \ strNum = String(num)\n        if (Int(strNum.first!)! % 2 != 0 && Int(strNum.last!)!\
    \ % 2 != 0 && num > 10) {\n            filterCount += 1\n        }\n    }\n  \
    \  return filterCount", "  var count = 0\n  for num in nums {\n    let int = abs(num)\n\
    \    let first = int % 10\n    let last = int / 10\n    if int > 10 && first %\
    \ 2 != 0 && last % 2 != 0 {\n      count += 1\n    }\n  }\n  return count", " \
    \   var count = 0\n    for num in nums {\n        if num > 10 && num % 2 != 0\
    \ && num % 10 != 0 {\n            count += 1\n        }\n    }\n    return count",
  "    var filterOut = [Int]()\n    for num in nums {\n        if num > 10 && (num\
    \ % 10) % 2 != 0 && num / 10 != 0 && num / 10 % 2 != 0 {\n            filterOut.append(num)\n\
    \        }\n    }\n    return filterOut.count", '    return 0']
stop_tokens:
- "\n}"
