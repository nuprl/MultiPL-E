name: HumanEval_19_sort_numbers
language: swift
prompt: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to\
  \ largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc sort_numbers(numbers:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
  \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") ==\
  \ \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine\
  \ eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
  \ \"six five four three two one zero\") == \"zero one two three four five six\")"
completions: ["    let numberals = [\"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\"]\n    var num_int = [Int]()\n\
    \    for item in numbers.split(separator: \" \") {\n        num_int.append(numberals.firstIndex(of:\
    \ String(item))!)\n    }\n    let sorted_int = num_int.sorted()\n    var sorted_numberals\
    \ = [String]()\n    for item in sorted_int {\n        sorted_numberals.append(numberals[item])\n\
    \    }\n    let sorted_string = sorted_numberals.joined(separator: \" \")\n  \
    \  return sorted_string", "    let splitNumbers = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNumbers = splitNumbers.sorted(by: <)\n    let stringNumbers\
    \ = sortedNumbers.joined(separator: \" \")\n    return stringNumbers", "    let\
    \ options = [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n\
    \        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"\
    six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n\
    \    ]\n    let values = numbers.components(separatedBy: \" \").map { options[$0]\
    \ }\n    let sorted_values = values.sorted()\n    return sorted_values.map { options.key(for:\
    \ $0)! }.joined(separator: \" \")", "    let arrayOfStrings = numbers.split {\
    \ $0 == \" \" }.map(String.init)\n    let arrayOfNumbers = arrayOfStrings.map\
    \ { Int(getDigitFromWord(word: $0)) }\n    let sortedNumbers = arrayOfNumbers.sorted()\n\
    \    let sortedWords = sortedNumbers.map { getWordFromDigit(digit: $0) }\n   \
    \ return sortedWords.joined(separator: \" \")", "    \n    let numbers = numbers.split(separator:\
    \ \" \")\n    var strNumbers: [String] = []\n    var numNumbers: [Int] = []\n\
    \    \n    for number in numbers {\n        switch number {\n        case \"zero\"\
    :\n            strNumbers.append(\"zero\")\n            numNumbers.append(0)\n\
    \        case \"one\":\n            strNumbers.append(\"one\")\n            numNumbers.append(1)\n\
    \        case \"two\":\n            strNumbers.append(\"two\")\n            numNumbers.append(2)\n\
    \        case \"three\":\n            strNumbers.append(\"three\")\n         \
    \   numNumbers.append(3)\n        case \"four\":\n            strNumbers.append(\"\
    four\")\n            numNumbers.append(4)\n        case \"five\":\n          \
    \  strNumbers.append(\"five\")\n            numNumbers.append(5)\n        case\
    \ \"six\":\n            strNumbers.append(\"six\")\n            numNumbers.append(6)\n\
    \        case \"seven\":\n            strNumbers.append(\"seven\")\n         \
    \   numNumbers.append(7)\n        case \"eight\":\n            strNumbers.append(\"\
    eight\")\n            numNumbers.append(8)\n        case \"nine\":\n         \
    \   strNumbers.append(\"nine\")\n            numNumbers.append(9)\n        default:\n\
    \            print(\"Invalid\")\n        }\n    }\n    \n    numNumbers.sort()\n\
    \    var output = \"\"\n    \n    for number in numNumbers {\n        switch number\
    \ {\n        case 0:\n            output += \"zero \"\n        case 1:\n     \
    \       output += \"one \"\n        case 2:\n            output += \"two \"\n\
    \        case 3:\n            output += \"three \"\n        case 4:\n        \
    \    output += \"four \"\n        case 5:\n            output += \"five \"\n \
    \       case 6:\n            output += \"six \"\n        case 7:\n           \
    \ output += \"seven \"\n        case 8:\n            output += \"eight \"\n  \
    \      case 9:\n            output += \"nine \"\n        default:\n          \
    \  print(\"Invalid\")\n        }\n    }\n    \n    return output", "    let nums\
    \ = numbers.split(separator: \" \")\n    var numbers = nums.map { Int(number_to_numeral($0))\
    \ }\n    numbers.sort()\n    let result = numbers.map { numeral_to_number(String(format:\
    \ \"%d\", $0)) }\n    return result.joined(separator: \" \")", "    let number_dict\
    \ = [\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n      \
    \  \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\"\
    : 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    ]\n\
    \    var string_list = numbers.components(separatedBy: \" \")\n    var num_list\
    \ = [Int]()\n    for string in string_list {\n        num_list.append(number_dict[string]!)\n\
    \    }\n    num_list.sort()\n    var new_string_list = [String]()\n    for num\
    \ in num_list {\n        let found = number_dict.first(where: { $0.value == num\
    \ })!\n        new_string_list.append(found.key)\n    }\n    return new_string_list.joined(separator:\
    \ \" \")", "    // Your code here\n    let numberArray = numbers.split(separator:\
    \ \" \")\n    let numberArrayInt: [Int] = numberArray.map {return convertStringToInt(string:\
    \ String($0))}\n    let sortedNumberArrayInt = numberArrayInt.sorted()\n    let\
    \ sortedNumberArray = sortedNumberArrayInt.map {return convertIntToString(number:\
    \ $0)}\n    let result = sortedNumberArray.joined(separator: \" \")\n    return\
    \ result", "    var numberStrings = numbers.components(separatedBy: \" \")\n \
    \   var numbers = [Int]()\n    for s in numberStrings {\n        numbers.append(number_to_number(s))\n\
    \    }\n    numbers.sort()\n    for i in 0..<numbers.count {\n        numberStrings[i]\
    \ = number_to_string(numbers[i])\n    }\n    return numberStrings.joined(separator:\
    \ \" \")", "    let numberDict = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\"\
    : 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\"\
    : 9]\n    var numbersSet = numbers.components(separatedBy: \" \")\n    numbersSet.sort\
    \ { (str1, str2) -> Bool in\n        let num1 = numberDict[str1]\n        let\
    \ num2 = numberDict[str2]\n        return num1! < num2!\n    }\n    return numbersSet.joined(separator:\
    \ \" \")", "    var numbers = numbers.split(separator: \" \")\n    numbers.sort()\n\
    \    return numbers.joined(separator: \" \")", "    let sorted = numbers.components(separatedBy:\
    \ \" \").sorted {\n        a, b in\n        switch a {\n        case \"zero\"\
    :\n            return true\n        case \"one\":\n            return b != \"\
    zero\"\n        case \"two\":\n            return b != \"zero\" && b != \"one\"\
    \n        case \"three\":\n            return b != \"zero\" && b != \"one\" &&\
    \ b != \"two\"\n        case \"four\":\n            return b != \"zero\" && b\
    \ != \"one\" && b != \"two\" && b != \"three\"\n        case \"five\":\n     \
    \       return b != \"zero\" && b != \"one\" && b != \"two\" && b != \"three\"\
    \ && b != \"four\"\n        case \"six\":\n            return b != \"zero\" &&\
    \ b != \"one\" && b != \"two\" && b != \"three\" && b != \"four\" && b != \"five\"\
    \n        case \"seven\":\n            return b != \"zero\" && b != \"one\" &&\
    \ b != \"two\" && b != \"three\" && b != \"four\" && b != \"five\" && b != \"\
    six\"\n        case \"eight\":\n            return b != \"zero\" && b != \"one\"\
    \ && b != \"two\" && b != \"three\" && b != \"four\" && b != \"five\" && b !=\
    \ \"six\" && b != \"seven\"\n        case \"nine\":\n            return b != \"\
    zero\" && b != \"one\" && b != \"two\" && b != \"three\" && b != \"four\" && b\
    \ != \"five\" && b != \"six\" && b != \"seven\" && b != \"eight\"\n        default:\n\
    \            return false\n        }\n    }\n    return sorted.joined(separator:\
    \ \" \")", "    let num_dict: [String: Int] = [\"zero\": 0, \"one\": 1, \"two\"\
    : 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\"\
    : 8, \"nine\": 9]\n    let numbersArray = numbers.components(separatedBy: \" \"\
    )\n    let numbersInt = numbersArray.map { num_dict[$0] }\n    let sorted = numbersInt.sorted()\n\
    \    let sortedString = sorted.map { num_dict.first(where: { $0.value == $1 })?.key\
    \ }\n    return sortedString.joined(separator: \" \")", "    // parse the string\
    \ into an array of numbers\n    let numArray = numbers.components(separatedBy:\
    \ \" \")\n    // create a dictionary mapping string names to integer values\n\
    \    let mapping = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\"\
    : 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    //\
    \ sort the parsed array of numbers\n    let sortedArray = numArray.sorted(by:\
    \ {mapping[$0]! < mapping[$1]!})\n    // return the string of sorted numbers\n\
    \    return sortedArray.joined(separator: \" \")", "    let numWords = [\"zero\"\
    , \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"\
    , \"nine\"]\n    let wordToNum = [String: Int]()\n    let array = numbers.split(separator:\
    \ \" \")\n    let sortedArray = numbers.split(separator: \" \").sorted(by: { numWords.firstIndex(of:\
    \ String($0))! < numWords.firstIndex(of: String($1))!})\n    var result = \"\"\
    \n    for word in sortedArray {\n        result += \" \\(word)\"\n    }\n    return\
    \ result", "    let numbersByString = [\n        \"zero\":0,\n        \"one\"\
    :1,\n        \"two\":2,\n        \"three\":3,\n        \"four\":4,\n        \"\
    five\":5,\n        \"six\":6,\n        \"seven\":7,\n        \"eight\":8,\n  \
    \      \"nine\":9,\n    ]\n    let numbersString = numbers.split(separator: \"\
    \ \")\n    let numbersInt = numbersString.map{Int(numbersByString[String($0)]!)}\n\
    \    let sortNumbersInt = numbersInt.sorted()\n    let sortNumbersString = sortNumbersInt.map{numbersByString.first{$0.value\
    \ == $1}!.key}\n    return sortNumbersString.joined(separator: \" \")", "    let\
    \ mapped: [String] = numbers.components(separatedBy: \" \").map({map_number($0)})\n\
    \    let sorted: [String] = mapped.sorted(by: {$0 < $1})\n    return sorted.joined(separator:\
    \ \" \")", "    let numbersDict = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\"\
    : 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\"\
    : 9]\n    let numbersArray = numbers.split(separator: \" \")\n    let sortedArray\
    \ = numbersArray.sorted {\n        numbersDict[String($0)]! < numbersDict[String($1)]!\n\
    \    }\n    let result = sortedArray.joined(separator: \" \")\n    return result",
  "    var numbersArray = numbers.components(separatedBy: \" \")\n    var dictionary\
    \ = [String: Int]()\n    dictionary[\"zero\"] = 0\n    dictionary[\"one\"] = 1\n\
    \    dictionary[\"two\"] = 2\n    dictionary[\"three\"] = 3\n    dictionary[\"\
    four\"] = 4\n    dictionary[\"five\"] = 5\n    dictionary[\"six\"] = 6\n    dictionary[\"\
    seven\"] = 7\n    dictionary[\"eight\"] = 8\n    dictionary[\"nine\"] = 9\n  \
    \  var newNumbers = [Int]()\n    for number in numbersArray {\n        newNumbers.append(dictionary[number]!)\n\
    \    }\n    newNumbers.sort()\n    for (index, element) in newNumbers.enumerated()\
    \ {\n        newNumbers[index] = element\n    }\n    var output = \"\"\n    for\
    \ number in newNumbers {\n        output += \"\\(dictionary.first(where: { $0.value\
    \ == number })?.key ?? \"\") \"\n    }\n    return output", "    var numList =\
    \ numbers.components(separatedBy: \" \")\n    numList.sort(by: {(a: String, b:\
    \ String) -> Bool in\n        let aInt = str_to_int(str: a)\n        let bInt\
    \ = str_to_int(str: b)\n        return aInt < bInt\n    })\n    return numList.joined(separator:\
    \ \" \")"]
stop_tokens:
- "\n}"
