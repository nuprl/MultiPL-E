language: swift
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n\tfor i in 0..<l.count {\n\t\tfor j in i+1..<l.count {\n\t\t\tif l[i]\
    \ + l[j] == 0 {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820614
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpa6dflffx/tmpa6dflffx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3353b0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3353804b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3353804988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33538037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa6dflffx                        0x0000562bbbff7585 <unavailable> + 5509

    5    libc.so.6                          0x00002b3353cf9460 __libc_start_main +
    245

    6    tmpa6dflffx                        0x0000562bbbff6f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820521
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmplkmdg8om/tmplkmdg8om.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90f04e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90f01d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90f01d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90f01d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplkmdg8om                        0x00005578a388e585 <unavailable> + 5509

    5    libc.so.6                          0x00002b90f06cd460 __libc_start_main +
    245

    6    tmplkmdg8om                        0x00005578a388df69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820614
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var list = l\n    if list.count == 0 {\n        return false\n \
    \   }\n    if list.count == 1 {\n        return false\n    }\n    if list.count\
    \ == 2 {\n        return list[0] + list[1] == 0\n    }\n    for i in 0...list.count\
    \ - 1 {\n        var list_without_i = list[0...i] + list[i + 1...list.count -\
    \ 1]\n        if list_without_i.contains(-list[i]) {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b39e00cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39dfdc4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b39dfdc4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b39dfdc413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b39dfdc3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpchw5breg                        0x000055a2b93998df <unavailable> + 10463

    6    tmpchw5breg                        0x000055a2b939876d <unavailable> + 5997

    7    libc.so.6                          0x00002b39e02b9460 __libc_start_main +
    245

    8    tmpchw5breg                        0x000055a2b9398449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659820614
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n\tif l.count < 2 {\n\t\treturn false\n\t}\n\tvar dict = [Int: Bool]()\n\
    \tfor i in l {\n\t\tif let _ = dict[i] {\n\t\t\treturn true\n\t\t}\n\t\tdict[-i]\
    \ = true\n\t}\n\treturn false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820614
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpa6dflffx/tmpa6dflffx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3353b0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3353804b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3353804988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33538037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa6dflffx                        0x0000562bbbff7585 <unavailable> + 5509

    5    libc.so.6                          0x00002b3353cf9460 __libc_start_main +
    245

    6    tmpa6dflffx                        0x0000562bbbff6f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820521
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n  let l2 = l.sorted()\n  var lo = 0\n  var hi = l2.count - 1\n  while\
    \ lo < hi {\n    let s = l2[lo] + l2[hi]\n    if s == 0 {\n      return true\n\
    \    } else if s < 0 {\n      lo += 1\n    } else {\n      hi -= 1\n    }\n  }\n\
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820614
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    for number in l {\n        for number2 in l {\n            if number\
    \ + number2 == 0 {\n                return true\n            }\n        }\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmp23gkz3eo/tmp23gkz3eo.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82ed4d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82ed1c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82ed1c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82ed1c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp23gkz3eo                        0x000056510257f474 <unavailable> + 5236

    5    libc.so.6                          0x00002b82ed6bc460 __libc_start_main +
    245

    6    tmp23gkz3eo                        0x000056510257f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659820614
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var i = 0\n    var j = l.count - 1\n    while(i != j) {\n      \
    \  if (l[i] + l[j] == 0) {\n            return true\n        }\n        else if\
    \ (l[i] + l[j] > 0) {\n            j -= 1\n        }\n        else {\n       \
    \     i += 1\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpruytu87_/tmpruytu87_.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96b4edec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96b4bd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96b4bd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96b4bd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpruytu87_                        0x000056454ae01635 <unavailable> + 5685

    5    libc.so.6                          0x00002b96b50ca460 __libc_start_main +
    245

    6    tmpruytu87_                        0x000056454ae01019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820614
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpa6dflffx/tmpa6dflffx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3353b0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3353804b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3353804988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33538037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa6dflffx                        0x0000562bbbff7585 <unavailable> + 5509

    5    libc.so.6                          0x00002b3353cf9460 __libc_start_main +
    245

    6    tmpa6dflffx                        0x0000562bbbff6f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820521
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    for i in 0..<l.count {\n        for j in i+1..<l.count {\n     \
    \       if l[i] + l[j] == 0 {\n                return true\n            }\n  \
    \      }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820521
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    // TODO: Implement me!\n    for number in l {\n        for number2\
    \ in l {\n            if number != number2 && number + number2 == 0 {\n      \
    \          return true\n            }\n        }\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) ==\
    \ true)\nassert(pairs_sum_to_zero(l: [1]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3,\
    \ 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 30]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820614
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpa6l8rvvl/tmpa6l8rvvl.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af693b77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af69386eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af69386e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af69386d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa6l8rvvl                        0x000055facbe32304 <unavailable> + 4868

    5    libc.so.6                          0x00002af693d63460 __libc_start_main +
    245

    6    tmpa6l8rvvl                        0x000055facbe31f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820614
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    /// The solution code goes here\n    /// You should remove the following\
    \ line\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpv52g4b7c/tmpv52g4b7c.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72c363bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72c3332b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72c3332988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72c33317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv52g4b7c                        0x00005570d6366585 <unavailable> + 5509

    5    libc.so.6                          0x00002b72c3827460 __libc_start_main +
    245

    6    tmpv52g4b7c                        0x00005570d6365f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820614
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l:\
    \ [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: Exception
  stderr: 'tmpa6dflffx/tmpa6dflffx.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3353b0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3353804b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3353804988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33538037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa6dflffx                        0x0000562bbbff7585 <unavailable> + 5509

    5    libc.so.6                          0x00002b3353cf9460 __libc_start_main +
    245

    6    tmpa6dflffx                        0x0000562bbbff6f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659820521
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    if l.count < 2 {\n        return false\n    }\n    for i in 0..<l.count\
    \ {\n        for j in 0..<l.count {\n            if i != j && l[i] + l[j] == 0\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(pairs_sum_to_zero(l: [1,\
    \ 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l: [1, 3, -2, 1]) == false)\n\
    assert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l: [1]) == false)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4, 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820614
- exit_code: -4
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var sum = 0\n    var x = 0\n    while x < l.count {\n        if\
    \ x == (l.count - 1) {\n            return false\n        }\n        sum = l[x]\
    \ + l[x + 1]\n        if sum == 0 {\n            return true\n        }\n    \
    \    x += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: Exception
  stderr: 'tmpjf3nrqb6/tmpjf3nrqb6.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad1b217c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad1af0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad1af0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad1af0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjf3nrqb6                        0x0000557af03d1635 <unavailable> + 5685

    5    libc.so.6                          0x00002aad1b403460 __libc_start_main +
    245

    6    tmpjf3nrqb6                        0x0000557af03d1019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1659820614
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    var a = [Int]()\n    for i in l {\n        a.append(i)\n    }\n\
    \    a.sort()\n    var i = 0\n    var j = a.count - 1\n    while i < j {\n   \
    \     let sum = a[i] + a[j]\n        if sum < 0 {\n            i += 1\n      \
    \  } else if sum > 0 {\n            j -= 1\n        } else {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820614
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    if l.count < 2 {\n        return false\n    }\n    if l.count ==\
    \ 2 {\n        return l[0] + l[1] == 0\n    }\n    var arr: [Int] = []\n    var\
    \ i = 0\n    while i < l.count {\n        var j = i + 1\n        while j < l.count\
    \ {\n            if l[i] + l[j] == 0 {\n                arr.append(l[i])\n   \
    \             arr.append(l[j])\n            }\n            j += 1\n        }\n\
    \        i += 1\n    }\n    return arr.count > 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820614
- exit_code: 0
  program: "\n/// pairs_sum_to_zero takes a list of integers as an input.\n/// it\
    \ returns True if there are two distinct elements in the list that\n/// sum to\
    \ zero, and False otherwise.\n/// >>> pairs_sum_to_zero([1, 3, 5, 0])\n/// False\n\
    /// >>> pairs_sum_to_zero([1, 3, -2, 1])\n/// False\n/// >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n/// False\n/// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n/// True\n\
    /// >>> pairs_sum_to_zero([1])\n/// False\nfunc pairs_sum_to_zero(l: [Int]) ->\
    \ Bool {\n    for i in 0..<l.count {\n        for j in 0..<l.count {\n       \
    \     if i != j && l[i] + l[j] == 0 {\n                return true\n         \
    \   }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pairs_sum_to_zero(l: [1, 3, 5, 0]) == false)\nassert(pairs_sum_to_zero(l:\
    \ [1, 3, -2, 1]) == false)\nassert(pairs_sum_to_zero(l: [1, 2, 3, 7]) == false)\n\
    assert(pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [1]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 30]) == true)\n\
    assert(pairs_sum_to_zero(l: [-3, 9, -1, 3, 2, 31]) == true)\nassert(pairs_sum_to_zero(l:\
    \ [-3, 9, -1, 4, 2, 30]) == false)\nassert(pairs_sum_to_zero(l: [-3, 9, -1, 4,\
    \ 2, 31]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820521
