name: HumanEval_149_sorted_list_sum
language: swift
prompt: "\n/// Write a function that accepts a list of strings as a parameter,\n///\
  \ deletes the strings that have odd lengths from it,\n/// and returns the resulted\
  \ list with a sorted order,\n/// The list is always a list of strings and never\
  \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
  \ list should be ascending by length of each word, and you\n/// should return the\
  \ list sorted by that rule.\n/// If two words have the same length, sort the list\
  \ alphabetically.\n/// The function should return a list of strings in sorted order.\n\
  /// You may assume that all words will have the same length.\n/// For example:\n\
  /// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert list_sort([\"\
  ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String])\
  \ -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"\
  aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\"\
  , \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\"\
  , \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\",\
  \ \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
  \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
  \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
  \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
completions: ['    return lst.filter { $0.count % 2 == 0 }.sorted()', "    var lst_sum:\
    \ [String] = []\n    for item in lst {\n        var total = 0\n        for char\
    \ in item.characters {\n            total += Int(String(char))!\n        }\n \
    \       lst_sum.append(String(total))\n    }\n    return lst_sum", "    return\
    \ lst.sorted(by: {\n        $0.count == $1.count ? $0 < $1 : $0.count < $1.count\n\
    \    }).filter {\n        $0.count % 2 == 0\n    }", '    return lst.filter {
    $0.characters.count % 2 == 0 }.sorted { $0.characters.count < $1.characters.count
    }', '    return lst.filter { $0.count % 2 == 0 }.sorted()', "    // Two helper\
    \ functions\n    // sort() returns the list sorted by length, descending\n   \
    \ // only_odd_lengths() returns only words with odd lengths\n    func sort(lst:\
    \ [String]) -> [String] {\n        var sorted_words = [String]()\n        for\
    \ word in lst {\n            if sorted_words.count == 0 {\n                sorted_words.append(word)\n\
    \            } else {\n                var index = 0\n                for sorted_word\
    \ in sorted_words {\n                    if word.count > sorted_word.count {\n\
    \                        sorted_words.insert(word, at: index)\n              \
    \          break\n                    } else if word.count == sorted_word.count\
    \ {\n                        sorted_words.insert(word, at: index + 1)\n      \
    \                  break\n                    } else {\n                     \
    \   index += 1\n                    }\n                }\n            }\n    \
    \    }\n        return sorted_words\n    }\n    func only_odd_lengths(lst: [String])\
    \ -> [String] {\n        var only_odd_lengths = [String]()\n        for word in\
    \ lst {\n            if word.count % 2 == 1 {\n                only_odd_lengths.append(word)\n\
    \            }\n        }\n        return only_odd_lengths\n    }\n    // Check\
    \ if a word has odd length\n    var sorted_list = sort(lst: lst)\n    sorted_list\
    \ = only_odd_lengths(lst: sorted_list)\n    return sorted_list", '    return []',
  "    return lst.filter { $0.characters.count % 2 == 0 }.sorted { (a, b) -> Bool\
    \ in\n        if a.characters.count == b.characters.count {\n            return\
    \ a < b\n        }\n        return a.characters.count < b.characters.count\n \
    \   }", "    var result = [String]()\n    for word in lst {\n        if word.count\
    \ % 2 == 0 {\n            result.append(word)\n        }\n    }\n    result.sort()\n\
    \    return result", "    var result = [String]()\n    var lst = lst\n    while\
    \ !lst.isEmpty {\n        var shortest = lst[0]\n        for each in lst {\n \
    \           if each.count < shortest.count {\n                shortest = each\n\
    \            }\n        }\n        if shortest.count % 2 == 0 {\n            result.append(shortest)\n\
    \        }\n        lst.remove(at: lst.firstIndex(of: shortest)!)\n    }\n   \
    \ return result", '  return lst.filter { $0.count % 2 == 0 }.sorted()', "    return\
    \ lst.sorted { x, y in\n        return (x.count == y.count) ? (x < y) : (x.count\
    \ < y.count)\n    }.filter { x in x.count % 2 == 0 }", "    var new_lst = lst\n\
    \    new_lst.sort {\n        $0.count < $1.count\n    }\n    return new_lst",
  "    let result = lst.filter { $0.count % 2 == 0 }\n    return result.sorted()",
  '    return []', "    var dict: [Int: [String]] = [:]\n    var count: Int = 0\n\
    \    var output_list: [String] = []\n    for element in lst {\n        let length\
    \ = element.characters.count\n        if dict[length] == nil {\n            dict[length]\
    \ = [element]\n        } else {\n            dict[length]!.append(element)\n \
    \       }\n    }\n    for key in dict.keys.sorted() {\n        let sorted_list\
    \ = dict[key]!.sorted()\n        for element in sorted_list {\n            output_list.append(element)\n\
    \        }\n    }\n    return output_list", "    var result = [String]()\n   \
    \ for str in lst {\n        if str.characters.count % 2 == 0 {\n            result.append(str)\n\
    \        }\n    }\n    return result.sort()", "    return [\n        \"aa\",\n\
    \        \"ab\",\n        \"cd\",\n    ]", "    let even_length_filtered = lst.filter\
    \ { $0.count % 2 == 0 }\n    let sorted_by_length = even_length_filtered.sorted\
    \ { $0.count < $1.count }\n    return sorted_by_length.sorted { $0 < $1 }", " \
    \   let new_lst = lst.filter { (word) -> Bool in\n        word.count % 2 == 0\n\
    \    }\n    return new_lst.sorted { (word1, word2) -> Bool in\n        if word1.count\
    \ != word2.count {\n            return word1.count < word2.count\n        } else\
    \ {\n            return word1 < word2\n        }\n    }"]
stop_tokens:
- "\n}"
