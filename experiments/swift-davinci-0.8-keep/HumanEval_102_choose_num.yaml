name: HumanEval_102_choose_num
language: swift
prompt: "\n/// This function takes two positive numbers x and y and returns the\n\
  /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
  \ there's no such number, then the function should return -1.\n/// For example:\n\
  /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
  \ y: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
  \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
  \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
  \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
  \ 546, y: 546) == 546)"
completions: ['    // TODO', '    return -1', "    if x % 2 == 0 {\n        return\
    \ y % 2 == 0 ? y : y - 1\n    } else {\n        return y % 2 == 0 ? y - 1 : y\
    \ - 2\n    }", "    // Enter your code here.\n    var the_range = [Int]()\n  \
    \  var index = 0\n    for i in x...y {\n        the_range.append(i)\n    }\n \
    \   for j in the_range{\n        if j % 2 == 0{\n            index = j\n     \
    \   }\n    }\n    if index == 0{\n        return -1\n    }\n    else{\n      \
    \  return index\n    }", "\treturn 0", "    var a: Int = 0\n    if x % 2 == 0\
    \ {\n        a = x\n    } else {\n        a = x + 1\n    }\n    for i in stride(from:\
    \ a, through: y, by: 2) {\n        if a <= y {\n            return a\n       \
    \ }\n    }\n    return -1", '    return -1', "    if y < x {\n        return -1\n\
    \    } else if x % 2 == 0 {\n        return x\n    } else {\n        return x\
    \ + 1\n    }", "    // TODO: implement this function and change the return value\n\
    \    return -1", "    var result = x % 2 == 0 ? x : x+1\n    if result <= y {\n\
    \        return result\n    }\n    return -1", "    if x % 2 == 0 {\n        if\
    \ x >= y {\n            return x\n        } else {\n            return y\n   \
    \     }\n    } else {\n        if x == y - 1 {\n            return x\n       \
    \ } else if x + 1 == y {\n            return y\n        } else {\n           \
    \ return -1\n        }\n    }", "    var a = x\n    while a <= y {\n        if\
    \ a % 2 == 0 {\n            return a\n        }\n        a += 1\n    }\n    return\
    \ -1", "    var result = -1\n    if x == y {\n        if y % 2 == 0 {\n      \
    \      result = y\n        }\n    } else if x < y {\n        var i = y\n     \
    \   while i >= x {\n            if i % 2 == 0 {\n                result = i\n\
    \                break\n            }\n            i -= 1\n        }\n    } else\
    \ {\n        var i = x\n        while i >= y {\n            if i % 2 == 0 {\n\
    \                result = i\n                break\n            }\n          \
    \  i -= 1\n        }\n    }\n    return result", "    // Insert your code here:\n\
    \    let smallest = x\n    let largest = y\n    var num = smallest\n    for i\
    \ in stride(from: smallest, to: largest, by: 2) {\n        num = i\n    }\n  \
    \  if num > largest {\n        return -1\n    }\n    return num", "    var bigEven\
    \ = -1\n    for i in x...y {\n        if i % 2 == 0 {\n            bigEven = i\n\
    \        }\n    }\n    return bigEven", "    if x > y {\n        return -1\n \
    \   }\n    var current: Int = -1\n    if x % 2 == 0 {\n        current = x\n \
    \   } else {\n        current = x + 1\n    }\n    while current <= y {\n     \
    \   if current > y {\n            return -1\n        }\n        if current % 2\
    \ == 0 {\n            return current\n        }\n        current += 1\n    }\n\
    \    return -1", "    let result = x % 2 == 0 ? x : x + 1\n    if result > y {\n\
    \        return -1\n    }\n    return result", "    guard x <= y else { return\
    \ -1 }\n    let remainder = x % 2\n    let min = x + remainder\n    let max =\
    \ y - remainder\n    return (min + max) / 2", "\tif (x < y) {\n\t\tif (x % 2 ==\
    \ 0) {\n\t\t\treturn x\n\t\t} else {\n\t\t\treturn x + 1\n\t\t}\n\t} else if (x\
    \ > y) {\n\t\tif (y % 2 == 0) {\n\t\t\treturn y\n\t\t} else {\n\t\t\treturn y\
    \ + 1\n\t\t}\n\t} else {\n\t\tif (x % 2 == 0) {\n\t\t\treturn x\n\t\t} else {\n\
    \t\t\treturn -1\n\t\t}\n\t}", "    let even_numbers = [Int](x...y).filter({$0\
    \ % 2 == 0})\n    if even_numbers.count > 0 {\n        return even_numbers.last!\n\
    \    } else {\n        return -1\n    }"]
stop_tokens:
- "\n}"
