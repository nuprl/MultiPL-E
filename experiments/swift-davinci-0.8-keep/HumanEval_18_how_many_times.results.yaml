language: swift
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ how_many = 0\n    var string = string\n    while string.contains(substring)\
    \ {\n        let range = string.range(of: substring)!\n        string.removeSubrange(range)\n\
    \        how_many += 1\n    }\n    return how_many\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmppqxxq53c.swift:13:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring)!\n                \
    \    ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824881
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ result = 0\n    var start = string.startIndex\n    var end = string.index(start,\
    \ offsetBy: substring.count - 1)\n    while end < string.endIndex {\n        let\
    \ mySubstring = string[start...end]\n        if mySubstring == substring {\n \
    \           result += 1\n        }\n        start = string.index(after: start)\n\
    \        end = string.index(after: end)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824881
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    let\
    \ characterSet = CharacterSet(charactersIn: string)\n    let sub = CharacterSet(charactersIn:\
    \ substring)\n    let characterIntersection = characterSet.intersection(sub)\n\
    \    let characters = CharacterSet(charactersIn: String(characterIntersection))\n\
    \    return string.components(separatedBy: characters).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmptphnnbix.swift:10:24: error: cannot find 'CharacterSet' in scope\n\
    \    let characterSet = CharacterSet(charactersIn: string)\n                 \
    \      ^~~~~~~~~~~~\n/tmp/tmptphnnbix.swift:11:15: error: cannot find 'CharacterSet'\
    \ in scope\n    let sub = CharacterSet(charactersIn: substring)\n            \
    \  ^~~~~~~~~~~~\n/tmp/tmptphnnbix.swift:13:22: error: cannot find 'CharacterSet'\
    \ in scope\n    let characters = CharacterSet(charactersIn: String(characterIntersection))\n\
    \                     ^~~~~~~~~~~~\n/tmp/tmptphnnbix.swift:14:19: error: value\
    \ of type 'String' has no member 'components'\n    return string.components(separatedBy:\
    \ characters).count\n           ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824881
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    let\
    \ parentString = string\n    let substring = substring\n    let searchString =\
    \ substring\n    let searchLength = searchString.count\n    let parentLength =\
    \ parentString.count\n    var count = 0\n    var searchRange = parentString.startIndex..<parentString.endIndex\n\
    \    while let range = parentString.range(of: searchString, options: [], range:\
    \ searchRange) {\n        searchRange = range.upperBound..<parentString.endIndex\n\
    \        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp6b1hozpo.swift:17:36: error: value of type 'String' has no member\
    \ 'range'\n    while let range = parentString.range(of: searchString, options:\
    \ [], range: searchRange) {\n                      ~~~~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824881
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ result = 0\n    var last_found = -1\n    while last_found != nil {\n       \
    \ if let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: (last_found + 1)..<string.endIndex) {\n            last_found = distance(string.startIndex,\
    \ range.startIndex)\n            result += 1\n        } else {\n            last_found\
    \ = nil\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp72pmmowe.swift:12:22: warning: comparing non-optional value of\
    \ type 'Int' to 'nil' always returns true\n    while last_found != nil {\n   \
    \       ~~~~~~~~~~ ^  ~~~\n/tmp/tmp72pmmowe.swift:13:65: error: cannot find 'NSStringCompareOptions'\
    \ in scope\n        if let range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: (last_found + 1)..<string.endIndex) {\n                             \
    \                                   ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp72pmmowe.swift:13:31:\
    \ error: value of type 'String' has no member 'rangeOfString'\n        if let\
    \ range = string.rangeOfString(substring, options: NSStringCompareOptions.LiteralSearch,\
    \ range: (last_found + 1)..<string.endIndex) {\n                       ~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmp72pmmowe.swift:14:26: error: cannot find 'distance' in\
    \ scope\n            last_found = distance(string.startIndex, range.startIndex)\n\
    \                         ^~~~~~~~\n/tmp/tmp72pmmowe.swift:17:26: error: 'nil'\
    \ cannot be assigned to type 'Int'\n            last_found = nil\n           \
    \              ^\n"
  stdout: ''
  timestamp: 1659824881
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var last_index = string.startIndex\n    while let range = string.range(of:\
    \ substring, options: .literal, range: last_index..<string.endIndex, locale: nil)\
    \ {\n        count += 1\n        last_index = range.upperBound\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpxglbnmrg.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: .literal,\
    \ range: last_index..<string.endIndex, locale: nil) {\n                      ~~~~~~\
    \ ^~~~~\n/tmp/tmpxglbnmrg.swift:12:61: error: cannot infer contextual base in\
    \ reference to member 'literal'\n    while let range = string.range(of: substring,\
    \ options: .literal, range: last_index..<string.endIndex, locale: nil) {\n   \
    \                                                        ~^~~~~~~\n/tmp/tmpxglbnmrg.swift:12:115:\
    \ error: 'nil' requires a contextual type\n    while let range = string.range(of:\
    \ substring, options: .literal, range: last_index..<string.endIndex, locale: nil)\
    \ {\n                                                                        \
    \                                          ^\n"
  stdout: ''
  timestamp: 1659824881
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n  var\
    \ count = 0\n  var left = 0\n  let right = string.count - substring.count\n  for\
    \ _ in left...right {\n    if substring == string[left..<left+substring.count]\
    \ {\n      count += 1\n    }\n    left += 1\n  }\n  return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2237t22o.swift:14:21: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \    if substring == string[left..<left+substring.count] {\n                 \
    \   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript<R>(bounds:\
    \ R) -> String where R : RangeExpression, R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1659824881
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    for _ in 1...string.count\
    \ {\n        let range = index..<string.index(index, offsetBy: substring.count)\n\
    \        if string[range] == substring {\n            count += 1\n        }\n\
    \        index = string.index(after: index)\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b767a2a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7679f98561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7679f98286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7679f9813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7679f97bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpgv0a0m5q                        0x000055e2eb1e8bb9 <unavailable> + 7097

    6    tmpgv0a0m5q                        0x000055e2eb1e86b0 <unavailable> + 5808

    7    libc.so.6                          0x00002b767a48d460 __libc_start_main +
    245

    8    tmpgv0a0m5q                        0x000055e2eb1e8389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659824881
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ counter = 0\n    var target = string\n    let lenght = substring.characters.count\n\
    \    var startIndex = string.startIndex\n    while let index = target.rangeOfString(substring)?.startIndex\
    \ {\n        counter += 1\n        startIndex = startIndex.advancedBy(index +\
    \ lenght)\n        target = target.substringFromIndex(startIndex)\n    }\n   \
    \ return counter\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpof6xyq88.swift:12:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    let lenght = substring.characters.count\n         \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpof6xyq88.swift:14:30: error: value of type 'String' has no member\
    \ 'rangeOfString'\n    while let index = target.rangeOfString(substring)?.startIndex\
    \ {\n                      ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpof6xyq88.swift:16:33:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        startIndex\
    \ = startIndex.advancedBy(index + lenght)\n                     ~~~~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpof6xyq88.swift:17:25: error: value of type 'String' has no member 'substringFromIndex'\n\
    \        target = target.substringFromIndex(startIndex)\n                 ~~~~~~\
    \ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824881
- exit_code: 0
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    for i in 0 ..< string.count - substring.count + 1 {\n       \
    \ let range = string.index(string.startIndex, offsetBy: i) ..< string.index(string.startIndex,\
    \ offsetBy: i + substring.count)\n        if string[range] == substring {\n  \
    \          count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824881
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n  // TODO\n\
    \  return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmpbt6mg3bh/tmpbt6mg3bh.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b99782c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b99479b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b99479988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b994787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbt6mg3bh                        0x000056340f6a0372 <unavailable> + 4978

    5    libc.so.6                          0x00002b6b9996e460 __libc_start_main +
    245

    6    tmpbt6mg3bh                        0x000056340f69fee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824881
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(how_many_times(string: \"\",\
    \ substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmp4njvubad/tmp4njvubad.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b189fd6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b189fa63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b189fa63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b189fa627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4njvubad                        0x000056149b1cc372 <unavailable> + 4978

    5    libc.so.6                          0x00002b189ff58460 __libc_start_main +
    245

    6    tmp4njvubad                        0x000056149b1cbee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824881
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n  precondition(string.characters.count\
    \ >= substring.characters.count)\n  if string.characters.count == 0 {\n    return\
    \ 0\n  }\n  var times = 0\n  var offset = 0\n  while let range = string.rangeOfString(substring,\
    \ options: [], range: offset..<string.endIndex, locale: nil) {\n    offset = range.endIndex\n\
    \    times += 1\n  }\n  return times\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0lmmbrpb.swift:10:23: error: 'characters' is unavailable: Please\
    \ use String directly\n  precondition(string.characters.count >= substring.characters.count)\n\
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp0lmmbrpb.swift:10:53: error: 'characters' is unavailable: Please\
    \ use String directly\n  precondition(string.characters.count >= substring.characters.count)\n\
    \                                                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp0lmmbrpb.swift:11:13: error: 'characters'\
    \ is unavailable: Please use String directly\n  if string.characters.count ==\
    \ 0 {\n            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp0lmmbrpb.swift:16:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n  while let range = string.rangeOfString(substring, options:\
    \ [], range: offset..<string.endIndex, locale: nil) {\n                    ~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmp0lmmbrpb.swift:16:107: error: 'nil' requires a contextual\
    \ type\n  while let range = string.rangeOfString(substring, options: [], range:\
    \ offset..<string.endIndex, locale: nil) {\n                                 \
    \                                                                         ^\n"
  stdout: ''
  timestamp: 1659824881
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    for (i, _) in string.characters.enumerated() {\n        if string.substring(with:\
    \ string.characters.index(string.startIndex, offsetBy: i)..<string.characters.index(string.startIndex,\
    \ offsetBy: i + substring.characters.count)) == substring {\n            count\
    \ += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpiabvi_j1.swift:11:26: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (i, _) in string.characters.enumerated() {\n  \
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpiabvi_j1.swift:12:19: error: value of type 'String' has\
    \ no member 'substring'\n        if string.substring(with: string.characters.index(string.startIndex,\
    \ offsetBy: i)..<string.characters.index(string.startIndex, offsetBy: i + substring.characters.count))\
    \ == substring {\n           ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824881
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    guard\
    \ !string.isEmpty else { return 0 }\n    guard !substring.isEmpty else { return\
    \ 0 }\n    guard substring.count <= string.count else { return 0 }\n    \n   \
    \ var count = 0\n    for index in 0..<string.count where string.startIndex.distance(to:\
    \ string.index(string.startIndex, offsetBy: index)) < (string.count - substring.count\
    \ + 1) {\n        let subString = string[string.index(string.startIndex, offsetBy:\
    \ index)..<string.index(string.startIndex, offsetBy: index + substring.count)]\n\
    \        if subString == substring {\n            count += 1\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdw3uzti5.swift:15:59: error: value of type 'String.Index' has no\
    \ member 'distance'\n    for index in 0..<string.count where string.startIndex.distance(to:\
    \ string.index(string.startIndex, offsetBy: index)) < (string.count - substring.count\
    \ + 1) {\n                                        ~~~~~~~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824883
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    let range = Range(start: string.startIndex, end: string.endIndex)\n\
    \    string.enumerateSubstringsInRange(range, options: NSStringEnumerationOptions.ByComposedCharacterSequences)\
    \ { (substring, substringRange, enclosingRange, stop) -> () in\n        if let\
    \ substring = substring {\n            if substring == substring {\n         \
    \       count += 1\n            }\n        }\n    }\n    return count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpfi7eb477.swift:11:17: error: generic parameter 'Bound' could not\
    \ be inferred\n    let range = Range(start: string.startIndex, end: string.endIndex)\n\
    \                ^\n/tmp/tmpfi7eb477.swift:11:17: note: explicitly specify the\
    \ generic arguments to fix this issue\n    let range = Range(start: string.startIndex,\
    \ end: string.endIndex)\n                ^\n                     <<#Bound: Comparable#>>\n\
    /tmp/tmpfi7eb477.swift:11:61: error: extra argument 'end' in call\n    let range\
    \ = Range(start: string.startIndex, end: string.endIndex)\n                  \
    \   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmpfi7eb477.swift:11:37:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'ClosedRange<Bound>'\n    let range = Range(start: string.startIndex, end: string.endIndex)\n\
    \                                    ^\n/tmp/tmpfi7eb477.swift:12:55: error: cannot\
    \ find 'NSStringEnumerationOptions' in scope\n    string.enumerateSubstringsInRange(range,\
    \ options: NSStringEnumerationOptions.ByComposedCharacterSequences) { (substring,\
    \ substringRange, enclosingRange, stop) -> () in\n                           \
    \                           ^~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpfi7eb477.swift:12:12:\
    \ error: value of type 'String' has no member 'enumerateSubstringsInRange'\n \
    \   string.enumerateSubstringsInRange(range, options: NSStringEnumerationOptions.ByComposedCharacterSequences)\
    \ { (substring, substringRange, enclosingRange, stop) -> () in\n    ~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824881
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ howManyTimes = 0\n    var startIndex = string.startIndex\n    while startIndex\
    \ < string.endIndex {\n        let endIndex = string.index(startIndex, offsetBy:\
    \ substring.count, limitedBy: string.endIndex)\n        if let endIndex = endIndex,\
    \ string[startIndex..<endIndex] == substring {\n            howManyTimes += 1\n\
    \            startIndex = endIndex\n        } else {\n            break\n    \
    \    }\n    }\n    return howManyTimes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: Exception
  stderr: 'tmpklxhfgey/tmpklxhfgey.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af08a9f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af08a6eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af08a6ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af08a6e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpklxhfgey                        0x00005653c8511782 <unavailable> + 6018

    5    libc.so.6                          0x00002af08abdf460 __libc_start_main +
    245

    6    tmpklxhfgey                        0x00005653c85112f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824881
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    let\
    \ len = string.characters.count\n    let s_len = substring.characters.count\n\
    \    var i = 0\n    var count = 0\n    while(i < len - s_len + 1) {\n        if\
    \ string[string.index(string.startIndex, offsetBy: i)..<string.index(string.startIndex,\
    \ offsetBy: i + s_len)] == substring {\n            count += 1\n            i\
    \ += s_len\n        } else {\n            i += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjy2ky59d.swift:10:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    let len = string.characters.count\n               \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpjy2ky59d.swift:11:27:\
    \ error: 'characters' is unavailable: Please use String directly\n    let s_len\
    \ = substring.characters.count\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824881
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    if\
    \ string.isEmpty || substring.isEmpty {\n        return 0\n    }\n    let chars:\
    \ [Character] = Array(string)\n    let subchars: [Character] = Array(substring)\n\
    \    var count = 0\n    var subindex = 0\n    for char in chars {\n        if\
    \ char == subchars[subindex] {\n            subindex += 1\n            if subindex\
    \ == subchars.count {\n                count += 1\n                subindex =\
    \ 0\n            }\n        } else {\n            subindex = 0\n        }\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'tmp10tvdu2z/tmp10tvdu2z.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31804dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31801d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31801d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31801d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10tvdu2z                        0x000055c7dcd348a4 <unavailable> + 6308

    5    libc.so.6                          0x00002b31806c6460 __libc_start_main +
    245

    6    tmp10tvdu2z                        0x000055c7dcd34319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824881
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    for c in string.characters {\n        if String(c) == substring\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0cmqjplr.swift:11:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in string.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824881
