name: HumanEval_98_count_upper
language: swift
prompt: "\n/// Given a string s, count the number of uppercase vowels in even indices.\n\
  /// For example:\n/// count_upper('aBCdEf') returns 1\n/// count_upper('abcdefg')\
  \ returns 0\n/// count_upper('dBBE') returns 0\nfunc count_upper(s: String) -> Int\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(count_upper(s: \"aBCdEf\") == 1)\nassert(count_upper(s:\
  \ \"abcdefg\") == 0)\nassert(count_upper(s: \"dBBE\") == 0)\nassert(count_upper(s:\
  \ \"B\") == 0)\nassert(count_upper(s: \"U\") == 1)\nassert(count_upper(s: \"\")\
  \ == 0)\nassert(count_upper(s: \"EEEE\") == 2)"
completions: ["    var count = 0\n    var prev = false\n    for c in s.characters\
    \ {\n        let isUpper = c >= \"A\" && c <= \"Z\"\n        if isUpper && prev\
    \ {\n            count += 1\n        }\n        prev = !prev\n    }\n    return\
    \ count", "    var vowelCount = 0\n    for (index, char) in s.enumerated() {\n\
    \        if char.isVowel() && index % 2 == 0 && char.isUppercase() {\n       \
    \     vowelCount += 1\n        }\n    }\n    return vowelCount", "    var count\
    \ = 0\n    for i in 0..<s.count {\n        if s[i].isVowel && s[i].isUppercase\
    \ && i % 2 == 0 {\n            count += 1\n        }\n    }\n    return count",
  '    return s.filter{$0.isUpper && $0.isVowel}.count', '    return 0', "    let\
    \ isUpper = { $0 >= \"A\" && $0 <= \"Z\" }\n    return s.enumerated().reduce(0)\
    \ { $1.offset % 2 == 0 && isUpper($1.element) ? $0 + 1 : $0 }", "    var count\
    \ = 0\n    for i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy:\
    \ i)\n        if i % 2 == 0 && is_vowel(s: String(s[index])) {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var counter = 0\n    var string\
    \ = Array(s)\n    for (index, element) in string.enumerated() {\n        if ((index\
    \ % 2 == 0) && (element == \"A\" || element == \"E\" || element == \"I\" || element\
    \ == \"O\" || element == \"U\")) {\n            counter += 1\n        }\n    }\n\
    \    return counter", "    return s.enumerated().reduce(0) { (acc, x) in\n   \
    \     let idx = x.offset\n        let ch = x.element\n        let isOdd = idx\
    \ % 2 == 0\n        return isOdd && ch >= \"A\" && ch <= \"Z\" ? acc + 1 : acc\n\
    \    }", "    var sum = 0\n    for (index, value) in s.enumerated() {\n      \
    \  if value.isUppercase && index % 2 == 0 {\n            sum += 1\n        }\n\
    \    }\n    return sum", '    return 0', "    let vowels = CharacterSet(charactersIn:\
    \ \"AEIOU\")\n    let sUpper = s.uppercased()\n    var count = 0\n    for (index,\
    \ char) in sUpper.enumerated() {\n        if (vowels.contains(char.unicodeScalars.first!)\
    \ && index % 2 == 0) {\n            count += 1\n        }\n    }\n    return count",
  "    var count = 0\n    for (i, char) in s.enumerated() {\n        if i % 2 == 0\
    \ && char.isUppercase && [\"A\", \"E\", \"I\", \"O\", \"U\"].contains(char) {\n\
    \            count += 1\n        }\n    }\n    return count", "    var numUpper\
    \ = 0\n    for (index, char) in s.enumerated() {\n        if index % 2 == 0 &&\
    \ char.isUppercase {\n            numUpper += 1\n        }\n    }\n    return\
    \ numUpper", "    return s.enumerated().reduce(0) { (result, arg1) -> Int in\n\
    \        let (_, element) = arg1\n        return result + ((element == \"A\" ||\
    \ element == \"E\" || element == \"I\" || element == \"O\" || element == \"U\"\
    ) && (arg1.offset % 2 == 0) ? 1 : 0)\n    }", "    return s.enumerated().reduce(0)\
    \ {\n        (count, index) in\n        let (offset, character) = index\n    \
    \    let isUpper = character >= \"A\" && character <= \"Z\"\n        let isEven\
    \ = offset % 2 == 0\n        return count + (isUpper && isEven ? 1 : 0)\n    }",
  "    return s.characters.enumerated().reduce(0) { (result, arg1) -> Int in\n   \
    \     let (i, e) = arg1\n        return is_upper_vowel(e) && (i % 2 == 0) ? result\
    \ + 1 : result\n    }", '    return s.filter{ $0.isUpper && (s.index(of: $0)!
    % 2 == 0) }.count', "    return s.enumerated().reduce(0) {\n        return $1.0\
    \ % 2 == 0 && $1.1.isUppercaseVowel ? $0 + 1 : $0\n    }", "    \n    var count\
    \ = 0\n    let vowels: Set<Character> = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n\
    \    \n    for (index, char) in s.enumerated() {\n        if index % 2 == 0 &&\
    \ vowels.contains(char) {\n            count += 1\n        }\n    }\n    \n  \
    \  return count"]
stop_tokens:
- "\n}"
