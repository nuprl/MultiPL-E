language: swift
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    let letter_grades = [\"A+\", \"A\", \"A-\", \"B+\", \"B\"\
    , \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    var output:\
    \ [String] = []\n    let letter_grade_beginnings = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3,\
    \ 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n    for grade in grades {\n        for i in 0..<letter_grade_beginnings.count\
    \ - 1 {\n            if grade >= letter_grade_beginnings[i] && grade < letter_grade_beginnings[i\
    \ + 1] {\n                output.append(letter_grades[i])\n            }\n   \
    \     }\n        if grade == 0.0 {\n            output.append(letter_grades[letter_grades.count\
    \ - 1])\n        }\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphhvrlddx/tmphhvrlddx.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9568f95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9568c8cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9568c8c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9568c8b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphhvrlddx                        0x00005584f195ea86 <unavailable> + 6790

    5    libc.so.6                          0x00002b9569181460 __libc_start_main +
    245

    6    tmphhvrlddx                        0x00005584f195e5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014295
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    return grades.map {\n        let grade = Int($0)\n      \
    \  switch grade {\n        case 4:\n            return \"A+\"\n        case 3:\n\
    \            let gpa = Double($0)\n            switch gpa {\n            case\
    \ 3.7..<4.0:\n                return \"A\"\n            case 3.3..<3.7:\n    \
    \            return \"A-\"\n            case 3.0..<3.3:\n                return\
    \ \"B+\"\n            case 2.7..<3.0:\n                return \"B\"\n        \
    \    case 2.3..<2.7:\n                return \"B-\"\n            case 2.0..<2.3:\n\
    \                return \"C+\"\n            case 1.7..<2.0:\n                return\
    \ \"C\"\n            case 1.3..<1.7:\n                return \"C-\"\n        \
    \    case 1.0..<1.3:\n                return \"D+\"\n            case 0.7..<1.0:\n\
    \                return \"D\"\n            case 0.0..<0.7:\n                return\
    \ \"D-\"\n            default:\n                return \"E\"\n            }\n\
    \        case 2:\n            let gpa = Double($0)\n            switch gpa {\n\
    \            case 2.7..<3.0:\n                return \"B\"\n            case 2.3..<2.7:\n\
    \                return \"B-\"\n            case 2.0..<2.3:\n                return\
    \ \"C+\"\n            case 1.7..<2.0:\n                return \"C\"\n        \
    \    case 1.3..<1.7:\n                return \"C-\"\n            case 1.0..<1.3:\n\
    \                return \"D+\"\n            case 0.7..<1.0:\n                return\
    \ \"D\"\n            case 0.0..<0.7:\n                return \"D-\"\n        \
    \    default:\n                return \"E\"\n            }\n        case 1:\n\
    \            let gpa = Double($0)\n            switch gpa {\n            case\
    \ 1.7..<2.0:\n                return \"C\"\n            case 1.3..<1.7:\n    \
    \            return \"C-\"\n            case 1.0..\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc8ti697z.swift:86:23: error: expected ':' after 'case'\n      \
    \      case 1.0..\n                      ^\n/tmp/tmpc8ti697z.swift:107:66: error:\
    \ expected '}' at end of 'switch' statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmpc8ti697z.swift:26:22: note: to match this opening\
    \ '{'\n        switch grade {\n                     ^\n/tmp/tmpc8ti697z.swift:107:66:\
    \ error: expected '}' at end of closure\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmpc8ti697z.swift:24:23: note: to match this opening\
    \ '{'\n    return grades.map {\n                      ^\n/tmp/tmpc8ti697z.swift:107:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmpc8ti697z.swift:23:59: note: to match this opening\
    \ '{'\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n         \
    \                                                 ^\n/tmp/tmpc8ti697z.swift:86:21:\
    \ error: cannot find operator '..' in scope; did you mean '...'?\n           \
    \ case 1.0..\n                    ^~\n                    ...\n/tmp/tmpc8ti697z.swift:81:13:\
    \ error: switch must be exhaustive\n            switch gpa {\n            ^\n\
    /tmp/tmpc8ti697z.swift:81:13: note: do you want to add a default clause?\n   \
    \         switch gpa {\n            ^\n/tmp/tmpc8ti697z.swift:26:9: error: switch\
    \ must be exhaustive\n        switch grade {\n        ^\n/tmp/tmpc8ti697z.swift:26:9:\
    \ note: do you want to add a default clause?\n        switch grade {\n       \
    \ ^\n/tmp/tmpc8ti697z.swift:90:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014295
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    return grades.map {\n        switch $0 {\n        case 4.0:\n\
    \            return \"A+\"\n        case 3.7..<4.0:\n            return \"A\"\n\
    \        case 3.3..<3.7:\n            return \"A-\"\n        case 3.0..<3.3:\n\
    \            return \"B+\"\n        case 2.7..<3.0:\n            return \"B\"\n\
    \        case 2.3..<2.7:\n            return \"B-\"\n        case 2.0..<2.3:\n\
    \            return \"C+\"\n        case 1.7..<2.0:\n            return \"C\"\n\
    \        case 1.3..<1.7:\n            return \"C-\"\n        case 1.0..<1.3:\n\
    \            return \"D+\"\n        case 0.7..<1.0:\n            return \"D\"\n\
    \        case 0.0..<0.7:\n            return \"D-\"\n        default:\n      \
    \      return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdja9us_w/tmpdja9us_w.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61c832cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61c8023b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61c8023988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61c80227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdja9us_w                        0x000055e9712e97b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b61c8518460 __libc_start_main +
    245

    6    tmpdja9us_w                        0x000055e9712e92d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    let letterGrade = [\"A+\", \"A\", \"A-\", \"B+\", \"B\",\
    \ \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    let gradeLevels\
    \ = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0]\n    var\
    \ letterGrades: [String] = []\n    for i in grades {\n        for j in 0..<gradeLevels.count\
    \ {\n            if i >= gradeLevels[j] {\n                letterGrades.append(letterGrade[j])\n\
    \                break\n            }\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp75fudr2s/tmp75fudr2s.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd4c879c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd4c570b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd4c570988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd4c56f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp75fudr2s                        0x000055df6c5d9a26 <unavailable> + 6694

    5    libc.so.6                          0x00002abd4ca65460 __libc_start_main +
    245

    6    tmp75fudr2s                        0x000055df6c5d9549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660014295
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    let grade_conversion = [4.0: \"A+\", 3.7: \"A\", 3.3: \"\
    A-\", 3.0: \"B+\", 2.7: \"B\", 2.3: \"B-\", 2.0: \"C+\", 1.7: \"C\", 1.3: \"C-\"\
    , 1.0: \"D+\", 0.7: \"D\", 0.0: \"D-\", -1.0: \"E\"]\n    return grades.map {\
    \ grade in\n        return grade_conversion.filter { key, _ in grade >= key }.values.first\
    \ ?? \"E\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmphtyiwrtm/tmphtyiwrtm.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d6bb10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d6b807b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d6b807988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d6b8067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphtyiwrtm                        0x00005644529158e6 <unavailable> + 6374

    5    libc.so.6                          0x00002b7d6bcfc460 __libc_start_main +
    245

    6    tmphtyiwrtm                        0x0000564452915409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660014295
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var nl_grades: [String] = []\n    var letter_grade: String\
    \ = \"\"\n    for grade in grades {\n        switch grade {\n        case 4.0:\n\
    \            letter_grade = \"A+\"\n        case 3.7..<4.0:\n            letter_grade\
    \ = \"A\"\n        case 3.3..<3.7:\n            letter_grade = \"A-\"\n      \
    \  case 3.0..<3.3:\n            letter_grade = \"B+\"\n        case 2.7..<3.0:\n\
    \            letter_grade = \"B\"\n        case 2.3..<2.7:\n            letter_grade\
    \ = \"B-\"\n        case 2.0..<2.3:\n            letter_grade = \"C+\"\n     \
    \   case 1.7..<2.0:\n            letter_grade = \"C\"\n        case 1.3..<1.7:\n\
    \            letter_grade = \"C-\"\n        case 1.0..<1.3:\n            letter_grade\
    \ = \"D+\"\n        case 0.7..<1.0:\n            letter_grade = \"D\"\n      \
    \  case 0.0..<0.7:\n            letter_grade = \"D-\"\n        case 0.0:\n   \
    \         letter_grade = \"E\"\n        default:\n            print(\"ERROR\"\
    )\n        }\n        nl_grades.append(letter_grade)\n    }\n    return nl_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpqpe5vfav/tmpqpe5vfav.swift:75: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1a1edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b19ee4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b19ee4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b19ee37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpe5vfav                        0x000055b3e8f339f6 <unavailable> + 6646

    5    libc.so.6                          0x00002b0b1a3d9460 __libc_start_main +
    245

    6    tmpqpe5vfav                        0x000055b3e8f33519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1660014295
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letter_grades.append(\"\
    A+\")\n        case 3.7...:\n            letter_grades.append(\"A\")\n       \
    \ case 3.3...:\n            letter_grades.append(\"A-\")\n        case 3.0...:\n\
    \            letter_grades.append(\"B+\")\n        case 2.7...:\n            letter_grades.append(\"\
    B\")\n        case 2.3...:\n            letter_grades.append(\"B-\")\n       \
    \ case 2.0...:\n            letter_grades.append(\"C+\")\n        case 1.7...:\n\
    \            letter_grades.append(\"C\")\n        case 1.3...:\n            letter_grades.append(\"\
    C-\")\n        case 1.0...:\n            letter_grades.append(\"D+\")\n      \
    \  case 0.7...:\n            letter_grades.append(\"D\")\n        case 0.0...:\n\
    \            letter_grades.append(\"D-\")\n        default:\n            letter_grades.append(\"\
    E\")\n        }\n    }\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpqdcjpm0h/tmpqdcjpm0h.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5ddd20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5dda17b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5dda17988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5dda167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqdcjpm0h                        0x0000559f2de8c936 <unavailable> + 6454

    5    libc.so.6                          0x00002ae5ddf0c460 __libc_start_main +
    245

    6    tmpqdcjpm0h                        0x0000559f2de8c459 <unavailable> + 5209

    '
  stdout: ''
  timestamp: 1660014295
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grading = [String]()\n    for grade in grades {\n   \
    \     switch grade {\n        case 4.0:\n            grading.append(\"A+\")\n\
    \        case grade where grade > 3.7:\n            grading.append(\"A\")\n  \
    \      case grade where grade > 3.3:\n            grading.append(\"A-\")\n   \
    \     case grade where grade > 3.0:\n            grading.append(\"B+\")\n    \
    \    case grade where grade > 2.7:\n            grading.append(\"B\")\n      \
    \  case grade where grade > 2.3:\n            grading.append(\"B-\")\n       \
    \ case grade where grade > 2.0:\n            grading.append(\"C+\")\n        case\
    \ grade where grade > 1.7:\n            grading.append(\"C\")\n        case grade\
    \ where grade > 1.3:\n            grading.append(\"C-\")\n        case grade where\
    \ grade > 1.0:\n            grading.append(\"D+\")\n        case grade where grade\
    \ > 0.7:\n            grading.append(\"D\")\n        case grade where grade >\
    \ 0.0:\n            grading.append(\"D-\")\n        default:\n            grading.append(\"\
    E\")\n        }\n    }\n    return grading\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014295
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    return grades.map {\n        switch $0 {\n        case 4.0:\n\
    \            return \"A+\"\n        case 3.7..<4.0:\n            return \"A\"\n\
    \        case 3.3..<3.7:\n            return \"A-\"\n        case 3.0..<3.3:\n\
    \            return \"B+\"\n        case 2.7..<3.0:\n            return \"B\"\n\
    \        case 2.3..<2.7:\n            return \"B-\"\n        case 2.0..<2.3:\n\
    \            return \"C+\"\n        case 1.7..<2.0:\n            return \"C\"\n\
    \        case 1.3..<1.7:\n            return \"C-\"\n        case 1.0..<1.3:\n\
    \            return \"D+\"\n        case 0.7..<1.0:\n            return \"D\"\n\
    \        case 0.0..<0.7:\n            return \"D-\"\n        default:\n      \
    \      return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdja9us_w/tmpdja9us_w.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61c832cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61c8023b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61c8023988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61c80227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdja9us_w                        0x000055e9712e97b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b61c8518460 __libc_start_main +
    245

    6    tmpdja9us_w                        0x000055e9712e92d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    return grades.map{\n        if $0 >= 4.0 { return \"A+\"\
    \ }\n        else if $0 >= 3.7 { return \"A\" }\n        else if $0 >= 3.3 { return\
    \ \"A-\" }\n        else if $0 >= 3.0 { return \"B+\" }\n        else if $0 >=\
    \ 2.7 { return \"B\" }\n        else if $0 >= 2.3 { return \"B-\" }\n        else\
    \ if $0 >= 2.0 { return \"C+\" }\n        else if $0 >= 1.7 { return \"C\" }\n\
    \        else if $0 >= 1.3 { return \"C-\" }\n        else if $0 >= 1.0 { return\
    \ \"D+\" }\n        else if $0 >= 0.7 { return \"D\" }\n        else if $0 >=\
    \ 0.0 { return \"D-\" }\n        else { return \"E\" }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdjbzplwi/tmpdjbzplwi.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae83a297c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae839f8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae839f8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae839f8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdjbzplwi                        0x000055a3634ce686 <unavailable> + 5766

    5    libc.so.6                          0x00002ae83a483460 __libc_start_main +
    245

    6    tmpdjbzplwi                        0x000055a3634ce1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014295
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    return grades.map { g in\n        switch g {\n        case\
    \ 4.0:\n            return \"A+\"\n        case 3.7..<4.0:\n            return\
    \ \"A\"\n        case 3.3..<3.7:\n            return \"A-\"\n        case 3.0..<3.3:\n\
    \            return \"B+\"\n        case 2.7..<3.0:\n            return \"B\"\n\
    \        case 2.3..<2.7:\n            return \"B-\"\n        case 2.0..<2.3:\n\
    \            return \"C+\"\n        case 1.7..<2.0:\n            return \"C\"\n\
    \        case 1.3..<1.7:\n            return \"C-\"\n        case 1.0..<1.3:\n\
    \            return \"D+\"\n        case 0.7..<1.0:\n            return \"D\"\n\
    \        case 0.0..<0.7:\n            return \"D-\"\n        default:\n      \
    \      return \"E\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpi5lh0lv2/tmpi5lh0lv2.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72a66dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72a63d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72a63d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72a63d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi5lh0lv2                        0x000055d61e13d7b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b72a68c7460 __libc_start_main +
    245

    6    tmpi5lh0lv2                        0x000055d61e13d2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014295
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades\
    \ {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n   \
    \     } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n    \
    \    } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n    \
    \    } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n    \
    \    } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n     \
    \   } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letter_grades.append(\"C\")\n      \
    \  } else if grade >= 1.3 {\n            letter_grades.append(\"C-\")\n      \
    \  } else if grade >= 1.0 {\n            letter_grades.append(\"D+\")\n      \
    \  } else if grade >= 0.7 {\n            letter_grades.append(\"D\")\n       \
    \ } else if grade >= 0.0 {\n            letter_grades.append(\"D-\")\n       \
    \ } else {\n            letter_grades.append(\"E\")\n        }\n    }\n    return\
    \ letter_grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevw8w9v7/tmpevw8w9v7.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f23dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f20d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f20d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f20d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevw8w9v7                        0x00005558cf9fb7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b00f25c6460 __libc_start_main +
    245

    6    tmpevw8w9v7                        0x00005558cf9fb2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade == 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade > 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade > 3.3 {\n            letter_grades.append(\"A-\")\n        } else\
    \ if grade > 3.0 {\n            letter_grades.append(\"B+\")\n        } else if\
    \ grade > 2.7 {\n            letter_grades.append(\"B\")\n        } else if grade\
    \ > 2.3 {\n            letter_grades.append(\"B-\")\n        } else if grade >\
    \ 2.0 {\n            letter_grades.append(\"C+\")\n        } else if grade > 1.7\
    \ {\n            letter_grades.append(\"C\")\n        } else if grade > 1.3 {\n\
    \            letter_grades.append(\"C-\")\n        } else if grade > 1.0 {\n \
    \           letter_grades.append(\"D+\")\n        } else if grade > 0.7 {\n  \
    \          letter_grades.append(\"D\")\n        } else if grade > 0.0 {\n    \
    \        letter_grades.append(\"D-\")\n        } else {\n            letter_grades.append(\"\
    E\")\n        }\n    }\n    return letter_grades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades: [String] = []\n    let letterGradesWithValues\
    \ = [\n        \"A+\": 4.0,\n        \"A\": 3.7,\n        \"A-\": 3.3,\n     \
    \   \"B+\": 3.0,\n        \"B\": 2.7,\n        \"B-\": 2.3,\n        \"C+\": 2.0,\n\
    \        \"C\": 1.7,\n        \"C-\": 1.3,\n        \"D+\": 1.0,\n        \"D\"\
    : 0.7,\n        \"D-\": 0.0,\n        \"E\": 0.0\n    ]\n    for grade in grades\
    \ {\n        for (letterGrade, gradeValue) in letterGradesWithValues {\n     \
    \       if grade >= gradeValue {\n                letterGrades.append(letterGrade)\n\
    \                break\n            }\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp3va_0a1s/tmp3va_0a1s.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2c1daec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2c1aa5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2c1aa5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2c1aa47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3va_0a1s                        0x000055c972a829c6 <unavailable> + 6598

    5    libc.so.6                          0x00002ad2c1f9a460 __libc_start_main +
    245

    6    tmp3va_0a1s                        0x000055c972a824e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660014295
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    return grades.map { gpa in\n        switch gpa {\n      \
    \  case 0.0:\n            return \"E\"\n        case 0.0..<0.7:\n            return\
    \ \"D-\"\n        case 0.7..<1.0:\n            return \"D\"\n        case 1.0..<1.3:\n\
    \            return \"D+\"\n        case 1.3..<1.7:\n            return \"C-\"\
    \n        case 1.7..<2.0:\n            return \"C\"\n        case 2.0..<2.3:\n\
    \            return \"C+\"\n        case 2.3..<2.7:\n            return \"B-\"\
    \n        case 2.7..<3.0:\n            return \"B\"\n        case 3.0..<3.3:\n\
    \            return \"B+\"\n        case 3.3..<3.7:\n            return \"A-\"\
    \n        case 3.7..<4.0:\n            return \"A\"\n        default:\n      \
    \      return \"A+\"\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpsjppu7oe/tmpsjppu7oe.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ad499ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ad4691b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ad4691988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ad46907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsjppu7oe                        0x00005583730197b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b5ad4b86460 __libc_start_main +
    245

    6    tmpsjppu7oe                        0x00005583730192d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014295
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n  var grade_conversion: [Double: String] = [\n    4.0: \"A+\"\
    ,\n    3.7: \"A\",\n    3.3: \"A-\",\n    3.0: \"B+\",\n    2.7: \"B\",\n    2.3:\
    \ \"B-\",\n    2.0: \"C+\",\n    1.7: \"C\",\n    1.3: \"C-\",\n    1.0: \"D+\"\
    ,\n    0.7: \"D\",\n    0.0: \"D-\",\n    -1.0: \"E\"\n  ]\n  let sorted_keys\
    \ = grade_conversion.keys.sorted().reverse()\n  var converted_grades: [String]\
    \ = []\n  for grade in grades {\n    for key in sorted_keys {\n      if grade\
    \ >= key {\n        converted_grades.append(grade_conversion[key]!)\n        break\n\
    \      }\n    }\n  }\n  return converted_grades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6r558awd.swift:39:52: error: cannot use mutating member on immutable\
    \ value: function call returns immutable value\n  let sorted_keys = grade_conversion.keys.sorted().reverse()\n\
    \                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^\n"
  stdout: ''
  timestamp: 1660014295
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letter_grades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n       \
    \ } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        }\
    \ else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        }\
    \ else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        }\
    \ else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else\
    \ if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else\
    \ if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else\
    \ if grade >= 1.7 {\n            letter_grades.append(\"C\")\n        } else if\
    \ grade >= 1.3 {\n            letter_grades.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            letter_grades.append(\"D+\")\n        } else if\
    \ grade >= 0.7 {\n            letter_grades.append(\"D\")\n        } else if grade\
    \ >= 0.0 {\n            letter_grades.append(\"D-\")\n        } else {\n     \
    \       letter_grades.append(\"E\")\n        }\n    }\n    return letter_grades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_zel0ryb/tmp_zel0ryb.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b868728fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8686f86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8686f86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8686f857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zel0ryb                        0x0000559c6c5307f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b868747b460 __libc_start_main +
    245

    6    tmp_zel0ryb                        0x0000559c6c530319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014026
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n  func grade(gpa: Double) -> String {\n    switch gpa {\n   \
    \ case 4.0:\n      return \"A+\"\n    case 3.7..<4.0:\n      return \"A\"\n  \
    \  case 3.3..<3.7:\n      return \"A-\"\n    case 3.0..<3.3:\n      return \"\
    B+\"\n    case 2.7..<3.0:\n      return \"B\"\n    case 2.3..<2.7:\n      return\
    \ \"B-\"\n    case 2.0..<2.3:\n      return \"C+\"\n    case 1.7..<2.0:\n    \
    \  return \"C\"\n    case 1.3..<1.7:\n      return \"C-\"\n    case 1.0..<1.3:\n\
    \      return \"D+\"\n    case 0.7..<1.0:\n      return \"D\"\n    case 0.0..<0.7:\n\
    \      return \"D-\"\n    default:\n      return \"E\"\n    }\n  }\n  return grades.map(grade)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp2hpdzery/tmp2hpdzery.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1712ad1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17127c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17127c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17127c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2hpdzery                        0x000055a88d7777b6 <unavailable> + 6070

    5    libc.so.6                          0x00002b1712cbd460 __libc_start_main +
    245

    6    tmp2hpdzery                        0x000055a88d7772d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014295
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var grades_arr = [String]()\n    for i in grades {\n    \
    \    if i >= 4.0 {\n            grades_arr.append(\"A+\")\n        }\n       \
    \ else if i > 3.7 {\n            grades_arr.append(\"A\")\n        }\n       \
    \ else if i > 3.3 {\n            grades_arr.append(\"A-\")\n        }\n      \
    \  else if i > 3.0 {\n            grades_arr.append(\"B+\")\n        }\n     \
    \   else if i > 2.7 {\n            grades_arr.append(\"B\")\n        }\n     \
    \   else if i > 2.3 {\n            grades_arr.append(\"B-\")\n        }\n    \
    \    else if i > 2.0 {\n            grades_arr.append(\"C+\")\n        }\n   \
    \     else if i > 1.7 {\n            grades_arr.append(\"C\")\n        }\n   \
    \     else if i > 1.3 {\n            grades_arr.append(\"C-\")\n        }\n  \
    \      else if i > 1.0 {\n            grades_arr.append(\"D+\")\n        }\n \
    \       else if i > 0.7 {\n            grades_arr.append(\"D\")\n        }\n \
    \       else if i > 0.0 {\n            grades_arr.append(\"D-\")\n        }\n\
    \        else {\n            grades_arr.append(\"E\")\n        }\n    }\n    return\
    \ grades_arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014295
- exit_code: 0
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\n/// grade_equation([4.0, 3, 1.7, 2, 3.5])\
    \ ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n  return grades.map {\n    if $0 == 4.0 {\n      return \"A+\"\
    \n    } else if $0 > 3.7 {\n      return \"A\"\n    } else if $0 > 3.3 {\n   \
    \   return \"A-\"\n    } else if $0 > 3.0 {\n      return \"B+\"\n    } else if\
    \ $0 > 2.7 {\n      return \"B\"\n    } else if $0 > 2.3 {\n      return \"B-\"\
    \n    } else if $0 > 2.0 {\n      return \"C+\"\n    } else if $0 > 1.7 {\n  \
    \    return \"C\"\n    } else if $0 > 1.3 {\n      return \"C-\"\n    } else if\
    \ $0 > 1.0 {\n      return \"D+\"\n    } else if $0 > 0.7 {\n      return \"D\"\
    \n    } else if $0 > 0.0 {\n      return \"D-\"\n    } else {\n      return \"\
    E\"\n    }\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014295
