language: swift
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let n = numbers.count\n    let x_mean = average(numbers)\n   \
    \ var s = 0.0\n    for x in numbers {\n        s += abs(x - x_mean)\n    }\n \
    \   return s / Double(n)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpaora3h8e.swift:11:18: error: cannot find 'average' in scope\n \
    \   let x_mean = average(numbers)\n                 ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824837
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let abs_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(abs_deviations)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmplajwptw0.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmplajwptw0.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n  let n = numbers.count\n  if n < 2 {\n    return 0.0\n  }\n  let\
    \ mean = mean_arithmetic(numbers)\n  var sum_of_diffs = 0.0\n  for n in numbers\
    \ {\n    sum_of_diffs += abs(n - mean)\n  }\n  return sum_of_diffs / Double(n)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpqm7lbf7t.swift:14:14: error: cannot find 'mean_arithmetic' in scope\n\
    \  let mean = mean_arithmetic(numbers)\n             ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824837
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp79nc6w5y.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp79nc6w5y.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return sum(numbers.map { abs($0 - mean(numbers)) }) / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpzoeiqb_r.swift:10:12: error: cannot find 'sum' in scope\n    return\
    \ sum(numbers.map { abs($0 - mean(numbers)) }) / Double(numbers.count)\n     \
    \      ^~~\n/tmp/tmpzoeiqb_r.swift:10:39: error: cannot find 'mean' in scope\n\
    \    return sum(numbers.map { abs($0 - mean(numbers)) }) / Double(numbers.count)\n\
    \                                      ^~~~\n"
  stdout: ''
  timestamp: 1659824837
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let differences = numbers.map { abs($0 - mean) }\n    return differences.reduce(0,\
    \ combine: +) / Double(differences.count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpu4gjr5tu.swift:10:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let n = Double(numbers.count)\n    let mean = arithmetic_mean(numbers)\n\
    \    var total = 0.0\n    for x in numbers {\n        total += abs(x - mean)\n\
    \    }\n    return total / n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpyu86bqwh.swift:11:16: error: cannot find 'arithmetic_mean' in scope\n\
    \    let mean = arithmetic_mean(numbers)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824837
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_arithmetic(numbers: numbers)\n    let deviations\
    \ = numbers.map({ fabs($0 - mean) })\n    return mean_arithmetic(numbers: deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2_34yqtg.swift:10:16: error: cannot find 'mean_arithmetic' in scope\n\
    \    let mean = mean_arithmetic(numbers: numbers)\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmp2_34yqtg.swift:11:36: error: cannot find 'fabs' in scope\n    let deviations\
    \ = numbers.map({ fabs($0 - mean) })\n                                   ^~~~\n\
    /tmp/tmp2_34yqtg.swift:12:12: error: cannot find 'mean_arithmetic' in scope\n\
    \    return mean_arithmetic(numbers: deviations)\n           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824837
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    let absolute_deviations = numbers.map { abs($0 - mean) }\n    return absolute_deviations.reduce(0,\
    \ combine: +) / Double(absolute_deviations.count)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpfhdj_jyh.swift:10:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n"
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let abs_differences = numbers.map\
    \ { abs($0 - mean) }\n    return mean(abs_differences)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmprwcnescb.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmprwcnescb.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n  let mean = mean_num(numbers: numbers)\n  let diff = numbers.map\
    \ { abs($0 - mean) }\n  return mean_num(numbers: diff)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpllk2fr47.swift:10:14: error: cannot find 'mean_num' in scope\n\
    \  let mean = mean_num(numbers: numbers)\n             ^~~~~~~~\n/tmp/tmpllk2fr47.swift:12:10:\
    \ error: cannot find 'mean_num' in scope\n  return mean_num(numbers: diff)\n \
    \        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824837
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_differences = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_differences)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpdxn1sa30.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpdxn1sa30.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824837
- exit_code: 0
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    // TODO\n    var maDev = [Double]()\n    var sum = 0.0\n    var\
    \ mean: Double\n    var MAD: Double\n    for i in numbers {\n        sum += i\n\
    \    }\n    mean = sum / Double(numbers.count)\n    for j in numbers {\n     \
    \   maDev.append(abs(j - mean))\n    }\n    MAD = (maDev.reduce(0, +)) / Double(numbers.count)\n\
    \    return MAD\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n  return mean_absolute_difference(numbers, mean(numbers))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpdum9q26u.swift:10:10: error: cannot find 'mean_absolute_difference'\
    \ in scope\n  return mean_absolute_difference(numbers, mean(numbers))\n      \
    \   ^~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpdum9q26u.swift:10:44: error: cannot find\
    \ 'mean' in scope\n  return mean_absolute_difference(numbers, mean(numbers))\n\
    \                                           ^~~~\n"
  stdout: ''
  timestamp: 1659824837
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let result = mean(numbers.map({abs($0\
    \ - mean)}))\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp8bw97xmh.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp8bw97xmh.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824837
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpzqt5qx5t/tmpzqt5qx5t.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0d2bbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0d28b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0d28b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0d28b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzqt5qx5t                        0x0000562d758e3353 <unavailable> + 4947

    5    libc.so.6                          0x00002af0d2daa460 __libc_start_main +
    245

    6    tmpzqt5qx5t                        0x0000562d758e2fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_list(numbers)\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean_of_list(deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpjs343p1u.swift:10:16: error: cannot find 'mean_of_list' in scope\n\
    \    let mean = mean_of_list(numbers)\n               ^~~~~~~~~~~~\n/tmp/tmpjs343p1u.swift:12:12:\
    \ error: cannot find 'mean_of_list' in scope\n    return mean_of_list(deviations)\n\
    \           ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824837
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    // Mean.\n    let n = Double(numbers.count)\n    let mean = sum(numbers)\
    \ / n\n    // Absolute deviations.\n    let deviations = numbers.map { abs($0\
    \ - mean) }\n    // Mean absolute deviation.\n    return sum(deviations) / n\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp94q0i6wz.swift:12:16: error: cannot find 'sum' in scope\n    let\
    \ mean = sum(numbers) / n\n               ^~~\n/tmp/tmp94q0i6wz.swift:16:12: error:\
    \ cannot find 'sum' in scope\n    return sum(deviations) / n\n           ^~~\n"
  stdout: ''
  timestamp: 1659824837
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let numerator = numbers.map({ abs($0 - mean(numbers)) }).reduce(0,\
    \ combine: +)\n    return numerator / Double(numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpbs2i9v09.swift:10:44: error: cannot find 'mean' in scope\n    let\
    \ numerator = numbers.map({ abs($0 - mean(numbers)) }).reduce(0, combine: +)\n\
    \                                           ^~~~\n"
  stdout: ''
  timestamp: 1659824837
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n  // Calculate mean of the numbers\n  let mean = mean_of_numbers(numbers)\n\
    \  // Calculate the difference from the mean, and take the absolute value\n  var\
    \ mean_differences: [Double] = numbers.map { $0 - mean }\n  mean_differences =\
    \ mean_differences.map { abs($0) }\n  // Then take the mean of those absolute\
    \ differences\n  return mean_of_numbers(mean_differences)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp8lhqtj8_.swift:11:14: error: cannot find 'mean_of_numbers' in scope\n\
    \  let mean = mean_of_numbers(numbers)\n             ^~~~~~~~~~~~~~~\n/tmp/tmp8lhqtj8_.swift:16:10:\
    \ error: cannot find 'mean_of_numbers' in scope\n  return mean_of_numbers(mean_differences)\n\
    \         ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824837
