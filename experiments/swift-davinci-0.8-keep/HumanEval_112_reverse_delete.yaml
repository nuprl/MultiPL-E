name: HumanEval_112_reverse_delete
language: swift
prompt: "\n/// Task\n/// We are given two strings s and c, you have to deleted all\
  \ the characters in s that are equal to any character in c\n/// then check if the\
  \ result string is palindrome.\n/// A string is called palindrome if it reads the\
  \ same backward as forward.\n/// You should return a tuple containing the result\
  \ string and True/False for the check.\n/// Example\n/// For s = \"abcde\", c =\
  \ \"ae\", the result should be ('bcd',False)\n/// For s = \"abcdef\", c = \"b\"\
  \  the result should be ('acdef',False)\n/// For s = \"abcdedcba\", c = \"ab\",\
  \ the result should be ('cdedc',True)\nfunc reverse_delete(s: String, c: String)\
  \ -> (String, Bool) {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(reverse_delete(s: \"abcde\", c: \"ae\")\
  \ == (\"bcd\", false))\nassert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\"\
  , false))\nassert(reverse_delete(s: \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\n\
  assert(reverse_delete(s: \"dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s:\
  \ \"a\", c: \"a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c:\
  \ \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\
  v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") ==\
  \ (\"abba\", true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
completions: ["    var s = s, s_rev = \"\"\n    for ch in s {\n        if c.contains(ch)\
    \ {\n            s = s.replacingOccurrences(of: String(ch), with: \"\")\n    \
    \    }\n    }\n    s_rev = String(s.reversed())\n    return (s, s == s_rev)",
  "    var result = \"\"\n    for char in s {\n        if !c.contains(char) {\n  \
    \          result.append(char)\n        }\n    }\n    return (result, result ==\
    \ String(result.reversed()))", "    let resultString = s.filter { !c.contains($0)\
    \ }\n    let reversedString = String(resultString.reversed())\n    let result\
    \ = resultString == reversedString\n    return (resultString, result)", "  let\
    \ s = s.filter{c.contains($0) == false}\n  return (s, is_palindrome(s))", "  \
    \  var char_array = Array(s.characters)\n    var remove_array = Array(c.characters)\n\
    \    var index = 0\n    var flag = true\n    while (index < char_array.count)\
    \ {\n        if remove_array.contains(char_array[index]) {\n            char_array.remove(at:\
    \ index)\n            index -= 1\n        }\n        index += 1\n    }\n    var\
    \ i = 0\n    var j = char_array.count - 1\n    while (i < j) {\n        if char_array[i]\
    \ != char_array[j] {\n            flag = false\n            break\n        }\n\
    \        i += 1\n        j -= 1\n    }\n    return (String(char_array), flag)",
  "    var result_string = \"\"\n    for char in s {\n        if !c.contains(char)\
    \ {\n            result_string.append(char)\n        }\n    }\n    var result\
    \ = (result_string, result_string == String(result_string.reversed()))\n    return\
    \ result", "    var s_ = s\n    for c in c {\n        s_ = s_.replacingOccurrences(of:\
    \ String(c), with: \"\")\n    }\n    return (s_, s_ == String(s_.reversed()))",
  '    return ("", false)', "    var del_str = \"\"\n    for char in s {\n       \
    \ if !c.contains(char) {\n            del_str.append(char)\n        }\n    }\n\
    \    return (del_str, String(del_str.reversed()) == del_str)", "    let c = Set(c)\n\
    \    let s = String(s.filter { !c.contains($0) })\n    return (s, s == String(s.reversed()))",
  "    let s_array = s.map { String($0) }\n    let c_array = c.map { String($0) }\n\
    \    let result = s_array.filter { c_array.contains($0) == false }\n    let reversed\
    \ = String(result.reversed())\n    return (reversed, String(result) == reversed)",
  "    var new = \"\"\n    for char in s {\n        if !c.contains(char) {\n     \
    \       new.append(char)\n        }\n    }\n    var rev = \"\"\n    for char in\
    \ new {\n        rev.insert(char, at: rev.startIndex)\n    }\n    return (new,\
    \ new == rev)", "    var str = s\n    for ch in c {\n        str = str.replacingOccurrences(of:\
    \ String(ch), with: \"\")\n    }\n    return (str, str == String(str.reversed()))",
  "    var f = \"\"\n    for i in s.characters {\n        if !c.contains(String(i))\
    \ {\n            f += String(i)\n        }\n    }\n    if f == String(f.characters.reversed())\
    \ {\n        return (f, true)\n    }\n    return (f, false)", "    var result\
    \ = \"\"\n    for character in s {\n        if !c.contains(character) {\n    \
    \        result.append(character)\n        }\n    }\n    return (result, result\
    \ == String(result.reversed()))", "  // code...\n  var s = s\n  for char in c\
    \ {\n    s = s.replacingOccurrences(of: String(char), with: \"\")\n  }\n  return\
    \ (s, Array(s) == Array(s).reversed())", "    let ns = s.characters.filter({!c.characters.contains($0)})\n\
    \    let res = String(ns)\n    return (res, String(res.characters.reversed())\
    \ == res)", '    return (s, false)', "    let characters = Array(s)\n    var result\
    \ = characters.filter { !c.contains($0) }\n    var isPalindrome = true\n    for\
    \ i in 0..<result.count / 2 {\n        if result[i] != result[result.count - i\
    \ - 1] {\n            isPalindrome = false\n            break\n        }\n   \
    \ }\n    return (String(result), isPalindrome)", "    let s = s.filter { !c.contains($0)\
    \ }\n    let result = (s, s == String(s.reversed()))\n    return result"]
stop_tokens:
- "\n}"
