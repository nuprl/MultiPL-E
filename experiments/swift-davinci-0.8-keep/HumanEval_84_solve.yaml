name: HumanEval_84_solve
language: swift
prompt: "\n/// Given a positive integer N, return the total sum of its digits in binary.\n\
  /// Example\n/// For N = 1000, the sum of digits will be 1 the output should be\
  \ \"1\".\n/// For N = 150, the sum of digits will be 6 the output should be \"110\"\
  .\n/// For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\
  /// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n/// Output:\n\
  /// a string of binary number\nfunc solve(N: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(solve(N: 1000) == \"1\")\nassert(solve(N:\
  \ 150) == \"110\")\nassert(solve(N: 147) == \"1100\")\nassert(solve(N: 333) == \"\
  1001\")\nassert(solve(N: 963) == \"10010\")"
completions: ["    var sumOfDigits = 0\n    var str = \"\"\n    let bin = String(N,\
    \ radix: 2)\n    for c in bin {\n        sumOfDigits += Int(String(c))!\n    }\n\
    \    for c in String(sumOfDigits) {\n        str += String(c, radix: 2)\n    }\n\
    \    return str", "    var rest: Int\n    var result = \"\"\n    var number =\
    \ N\n    repeat {\n        rest = number % 2\n        number = number / 2\n  \
    \      result = String(rest) + result\n    } while number > 0\n    return result",
  "\tvar result = 0\n\tvar sum = 0\n\tvar N = N\n\twhile N > 0 {\n\t\tresult = N %\
    \ 2\n\t\tsum += result\n\t\tN /= 2\n\t}\n\treturn String(sum)", "    // Write\
    \ your code here\n    var n = N\n    var binary = [Int]()\n    while n > 0 {\n\
    \        binary.append(n % 2)\n        n /= 2\n    }\n    let reversedBinary =\
    \ binary.reversed()\n    var binaryString = \"\"\n    for i in reversedBinary\
    \ {\n        binaryString += String(i)\n    }\n    return binaryString", "  var\
    \ result = \"\"\n  var copyOfN = N\n  while copyOfN > 0 {\n    result.append(copyOfN\
    \ % 2 == 0 ? \"0\" : \"1\")\n    copyOfN /= 2\n  }\n  return String(result.reversed())",
  '    return String(N, radix: 2).map { String($0) }.reduce("", +)', "    var N =\
    \ N\n    var res = 0\n    var cnt = 0\n    while N > 0 {\n        let reminder\
    \ = N % 2\n        res += reminder\n        N /= 2\n        cnt += 1\n    }\n\
    \    return String(format: \"%0\\(cnt)d\", res)", "\treturn String(N, radix: 2).reduce(0,\
    \ { $0 + Int(String($1))! })", '    return String(N, radix: 2)', "    var binaryNumber\
    \ = \"\"\n    var number = N\n    while number > 0 {\n        let digit = number\
    \ % 2\n        binaryNumber = \"\\(digit)\" + binaryNumber\n        number /=\
    \ 2\n    }\n    return binaryNumber", '    return String(N, radix: 2)', '    return
    String(N, radix: 2).replacingOccurrences(of: "0", with: "").count.description',
  "    var binaryString = \"\"\n    var binaryN = N\n    while binaryN > 0 {\n   \
    \     binaryString = (binaryN % 2 == 0 ? \"0\" : \"1\") + binaryString\n     \
    \   binaryN /= 2\n    }\n    return binaryString", '    return String(N, radix:
    2)', "  var sum = 0\n  var binaryString = \"\"\n  var reverseBinaryString = \"\
    \"\n  var quotient = N\n  while quotient != 0 {\n    sum += quotient % 2\n   \
    \ quotient /= 2\n    binaryString += String(quotient % 2)\n  }\n  for i in 0..<binaryString.count\
    \ {\n    reverseBinaryString += String(binaryString[binaryString.index(binaryString.startIndex,\
    \ offsetBy: binaryString.count - 1 - i)])\n  }\n  return reverseBinaryString",
  "    var binaryNumber = String(N, radix: 2)\n    var sum: Int = 0\n    for ch in\
    \ binaryNumber {\n        sum += Int(String(ch))!\n    }\n    return String(sum)",
  '  return String(Int(Number(number: N).toBinary()), radix: 2)', "    var binaryNumber\
    \ = \"\"\n    var decimalNumber = N\n    while decimalNumber > 0 {\n        binaryNumber.append(contentsOf:\
    \ (decimalNumber % 2 == 0) ? \"0\" : \"1\")\n        decimalNumber /= 2\n    }\n\
    \    return String(binaryNumber.reversed())", "    var number = N\n    var digits:\
    \ [Int] = []\n    while number > 0 {\n        digits.append(number % 2)\n    \
    \    number /= 2\n    }\n    digits.reverse()\n    var output = \"\"\n    for\
    \ digit in digits {\n        output += String(digit)\n    }\n    return output",
  "  var n = N\n  var result = \"\"\n  while n > 0 {\n    result = String(n % 2) +\
    \ result\n    n /= 2\n  }\n  return result"]
stop_tokens:
- "\n}"
