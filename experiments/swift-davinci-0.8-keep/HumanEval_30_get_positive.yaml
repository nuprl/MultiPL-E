name: HumanEval_30_get_positive
language: swift
prompt: "\n/// Return only positive numbers in the list.\n/// >>> get_positive([-1,\
  \ 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0,\
  \ 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int]) -> [Int]\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(get_positive(l: [-1, -2, 4, 5, 6]) == [4,\
  \ 5, 6])\nassert(get_positive(l: [5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5,\
  \ 3, 2, 3, 3, 9, 123, 1])\nassert(get_positive(l: [-1, -2]) == [] as [Int])\nassert(get_positive(l:\
  \ [] as [Int]) == [] as [Int])"
completions: ['    return l.filter { $0 > 0 }', "    var result = [Int]()\n    for\
    \ i in l {\n        if i > 0 {\n            result.append(i)\n        }\n    }\n\
    \    return result", "\t// TODO: Implement\n\treturn []", '    return l.filter{$0
    > 0}', '    return l.filter {x in x > 0}', "    var positive = [Int]()\n    for\
    \ num in l {\n        if num > 0 {\n            positive.append(num)\n       \
    \ }\n    }\n    return positive", "    var l2: [Int] = []\n    for value in l\
    \ {\n        if value > 0 {\n            l2.append(value)\n        }\n    }\n\
    \    return l2", "    var result: [Int] = []\n    for i in l {\n        if i >\
    \ 0 {\n            result.append(i)\n        }\n    }\n    return result", '    return
    l.filter { $0 > 0 }', '  return filter(l, {x in x > 0})', "\treturn l.filter({$0\
    \ > 0})", "    var pos = [Int]()\n    for number in l {\n        if number > 0\
    \ {\n            pos.append(number)\n        }\n    }\n    return pos", '    return
    l.filter{ $0 > 0 }', "    var positives: [Int] = []\n    for i in l {\n      \
    \  if i > 0 {\n            positives.append(i)\n        }\n    }\n    return positives",
  '    return l.filter { return $0 > 0 }', '    return l.filter({ x in x > 0 })',
  "    var result : [Int] = []\n    for x in l {\n        if x > 0 {\n           \
    \ result.append(x)\n        }\n    }\n    return result", "    var result: [Int]\
    \ = []\n    for x in l {\n        if x > 0 {\n            result.append(x)\n \
    \       }\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ l {\n        if i > 0 {\n            result.append(i)\n        }\n    }\n  \
    \  return result", "    var list = [Int]()\n    for num in l {\n        if num\
    \ > 0 {\n            list.append(num)\n        }\n    }\n    return list"]
stop_tokens:
- "\n}"
