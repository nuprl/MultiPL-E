name: HumanEval_7_filter_by_substring
language: swift
prompt: "\n/// Filter an input list of strings only for ones that contain given substring\n\
  /// >>> filter_by_substring([], 'a')\n/// []\n/// >>> filter_by_substring(['abc',\
  \ 'bacd', 'cde', 'array'], 'a')\n/// ['abc', 'bacd', 'array']\nfunc filter_by_substring(strings:\
  \ [String], substring: String) -> [String] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(filter_by_substring(strings: [] as [String],\
  \ substring: \"john\") == [] as [String])\nassert(filter_by_substring(strings: [\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xxx\"\
  ) == [\"xxx\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings: [\"xxx\"\
  , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], substring: \"xx\") ==\
  \ [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\nassert(filter_by_substring(strings:\
  \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], substring: \"run\") == [\"\
  grunt\", \"prune\"])"
completions: ["    return strings.filter {\n        $0.contains(substring)\n    }",
  "    // your code here\n    return []", '    return strings.filter {$0.contains(substring)}',
  "    var out_strings: [String] = []\n    for str in strings {\n        if str.contains(substring)\
    \ {\n            out_strings.append(str)\n        }\n    }\n    return out_strings",
  "  return strings.filter({ (string: String) -> Bool in\n    return string.rangeOfString(substring)\
    \ != nil\n  })", '    return strings.filter({ (x: String) -> Bool in x.contains(substring)
    })', "  var result = [String]()\n  for string in strings {\n    if string.contains(substring)\
    \ {\n      result.append(string)\n    }\n  }\n  return result", "    var new_list:\
    \ [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            new_list.append(string)\n        }\n    }\n    return new_list",
  "  return strings.filter { string in\n    return string.contains(substring)\n  }",
  '    return strings.filter { $0.rangeOfString(substring) != nil }', "    var result:\
    \ [String] = []\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            result.append(string)\n        }\n    }\n    return result",
  "    return strings.filter({\n        contains(substring, $0)\n    })", "    var\
    \ filtered = [String]()\n    for string in strings {\n        if string.contains(substring)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var output = [String]()\n    for string in strings {\n        if string.rangeOfString(substring)\
    \ != nil {\n            output.append(string)\n        }\n    }\n    return output",
  "    return strings.filter({ (input: String) -> Bool in\n        return input.rangeOfString(substring)\
    \ != nil\n    })", '    return strings.filter {$0.contains(substring)}', '    return
    []', '    return strings.filter({$0.rangeOfString(substring) != nil})', "    return\
    \ strings.filter { string in\n        string.contains(substring)\n    }", "  \
    \  // TODO: your solution here\n    return []"]
stop_tokens:
- "\n}"
