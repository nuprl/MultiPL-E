name: HumanEval_82_prime_length
language: swift
prompt: "\n/// Write a function that takes a string and returns True if the string\n\
  /// length is a prime number or False otherwise\n/// Examples\n/// prime_length('Hello')\
  \ == True\n/// prime_length('abcdcba') == True\n/// prime_length('kittens') == True\n\
  /// prime_length('orange') == False\nfunc prime_length(string: String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(prime_length(string: \"Hello\") == true)\n\
  assert(prime_length(string: \"abcdcba\") == true)\nassert(prime_length(string: \"\
  kittens\") == true)\nassert(prime_length(string: \"orange\") == false)\nassert(prime_length(string:\
  \ \"wow\") == true)\nassert(prime_length(string: \"world\") == true)\nassert(prime_length(string:\
  \ \"MadaM\") == true)\nassert(prime_length(string: \"Wow\") == true)\nassert(prime_length(string:\
  \ \"\") == false)\nassert(prime_length(string: \"HI\") == true)\nassert(prime_length(string:\
  \ \"go\") == true)\nassert(prime_length(string: \"gogo\") == false)\nassert(prime_length(string:\
  \ \"aaaaaaaaaaaaaaa\") == false)\nassert(prime_length(string: \"Madam\") == true)\n\
  assert(prime_length(string: \"M\") == false)\nassert(prime_length(string: \"0\"\
  ) == false)"
completions: ['  return isPrime(int: string.count)', "    let len = string.characters.count\n\
    \    return isPrime(n: len)", '    return false', "    let stringLength = string.count\n\
    \    var isPrime = true\n    for index in 2...stringLength - 1 {\n        if stringLength\
    \ % index == 0 {\n            isPrime = false\n            break\n        }\n\
    \    }\n    return isPrime", "    \n    let stringLength = string.characters.count\n\
    \    \n    switch stringLength {\n        \n    case 2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\
    \ 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191,\
    \ 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277,\
    \ 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379,\
    \ 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467,\
    \ 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587,\
    \ 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677,\
    \ 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,\
    \ 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907,\
    \ 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997:\n        return\
    \ true\n        \n    default:\n        return false\n    }", "    if isPrime(number:\
    \ string.count) {\n        return true\n    }\n    return false", "    var num\
    \ = string.count\n    if num == 1 {\n        return false\n    }\n    for i in\
    \ 2..<num {\n        if num % i == 0 {\n            return false\n        }\n\
    \    }\n    return true", "    \n    return false", "    let length = string.characters.count\n\
    \    if length == 0 {\n        return false\n    }\n    for i in 2...length -\
    \ 1 {\n        if length % i == 0 {\n            return false\n        }\n   \
    \ }\n    return true", "    if string.isEmpty {\n        return false\n    }\n\
    \    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,\
    \ 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\
    \ 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,\
    \ 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\
    \ 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509,\
    \ 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617,\
    \ 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727,\
    \ 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829,\
    \ 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947,\
    \ 953, 967, 971, 977, 983, 991, 997]\n    let length = string.characters.count\n\
    \    return primes.contains(length)", "    let count = string.count\n    if count\
    \ <= 1 {\n        return false\n    } else if count == 2 {\n        return true\n\
    \    } else {\n        for divisor in 2...count-1 {\n            if count % divisor\
    \ == 0 {\n                return false\n            }\n        }\n        return\
    \ true\n    }", "    if string.characters.count == 2 || string.characters.count\
    \ == 3 {\n        return true\n    }\n    if string.characters.count % 2 == 0\
    \ || string.characters.count % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    while i * i <= string.characters.count {\n        if string.characters.count\
    \ % i == 0 || string.characters.count % (i + 2) == 0 {\n            return false\n\
    \        }\n        i += 6\n    }\n    return true", "    let stringLength = string.count\n\
    \    var primeNumbers = [Int]()\n    if stringLength % 2 == 0 {\n        return\
    \ false\n    }\n    for n in 2..<stringLength {\n        if stringLength % n ==\
    \ 0 {\n            primeNumbers.append(n)\n        }\n    }\n    return primeNumbers.count\
    \ == 0", "    let count = string.count\n    return count % 2 != 0 && count % 3\
    \ != 0 && count % 5 != 0 && count % 7 != 0", "    if string.isEmpty {\n      \
    \  return false\n    }\n    return isPrime(n: string.count)", "    let len = string.characters.count\n\
    \    for i in 2..<len {\n        if len % i == 0 {\n            return false\n\
    \        }\n    }\n    return true", "    let stringCount = string.count\n   \
    \ if stringCount == 1 {\n        return false\n    } else if stringCount == 2\
    \ {\n        return true\n    } else {\n        for index in 2..<stringCount {\n\
    \            if stringCount % index == 0 {\n                return false\n   \
    \         }\n        }\n        return true\n    }", '    return false', '    return
    true', "    let primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127,\
    \ 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211,\
    \ 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307,\
    \ 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,\
    \ 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499,\
    \ 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\
    \ 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709,\
    \ 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823,\
    \ 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937,\
    \ 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    var currentPrimeNumber = 0\n\
    \    for primeNumber in primeNumbers {\n        if primeNumber > string.count\
    \ {\n            return currentPrimeNumber == string.count\n        }\n      \
    \  currentPrimeNumber = primeNumber\n    }\n    return currentPrimeNumber == string.count"]
stop_tokens:
- "\n}"
