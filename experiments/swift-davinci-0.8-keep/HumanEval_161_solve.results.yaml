language: swift
name: HumanEval_161_solve
results:
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n  return s.map { $0.isLetter ? ($0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased()) : $0 }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpjo7l4mep.swift:12:30: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to closure result type 'String'\n  return s.map { $0.isLetter\
    \ ? ($0.isUppercase ? $0.lowercased() : $0.uppercased()) : $0 }.joined()\n   \
    \              ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpjo7l4mep.swift:12:48: error: result values in '? :' expression have mismatching\
    \ types 'String' and 'String.Element' (aka 'Character')\n  return s.map { $0.isLetter\
    \ ? ($0.isUppercase ? $0.lowercased() : $0.uppercased()) : $0 }.joined()\n   \
    \                            ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824622
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    guard s.contains(\"[a-zA-Z]\") else { return String(s.reversed())\
    \ }\n    return s.map {\n        switch $0 {\n        case \"a\"...\"z\": return\
    \ String($0).uppercased()\n        case \"A\"...\"Z\": return String($0).lowercased()\n\
    \        default: return String($0)\n        }\n    }.joined()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp14vzogmi/tmp14vzogmi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01a5f4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01a5c45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01a5c45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01a5c447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp14vzogmi                        0x00005629087c4a07 <unavailable> + 6663

    5    libc.so.6                          0x00002b01a613a460 __libc_start_main +
    245

    6    tmp14vzogmi                        0x00005629087c4649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824622
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    if s.isEmpty {\n        return \"\"\n    }\n    var newString\
    \ = \"\"\n    let lowerCharSet = CharacterSet.lowercaseLetters\n    let upperCharSet\
    \ = CharacterSet.uppercaseLetters\n    for char in s.characters {\n        if\
    \ lowerCharSet.contains(UnicodeScalar(String(char))!) {\n            newString.append(String(char).uppercased())\n\
    \        } else if upperCharSet.contains(UnicodeScalar(String(char))!) {\n   \
    \         newString.append(String(char).lowercased())\n        } else {\n    \
    \        newString.append(char)\n        }\n    }\n    if newString.isEmpty {\n\
    \        return String(s.characters.reversed())\n    }\n    return newString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpfyjp0cpu.swift:16:24: error: cannot find 'CharacterSet' in scope\n\
    \    let lowerCharSet = CharacterSet.lowercaseLetters\n                      \
    \ ^~~~~~~~~~~~\n/tmp/tmpfyjp0cpu.swift:17:24: error: cannot find 'CharacterSet'\
    \ in scope\n    let upperCharSet = CharacterSet.uppercaseLetters\n           \
    \            ^~~~~~~~~~~~\n/tmp/tmpfyjp0cpu.swift:18:19: error: 'characters' is\
    \ unavailable: Please use String directly\n    for char in s.characters {\n  \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpfyjp0cpu.swift:28:25: error: 'characters' is unavailable: Please\
    \ use String directly\n        return String(s.characters.reversed())\n      \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824622
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    guard s.contains(\"a\") || s.contains(\"A\") else { return\
    \ String(s.reversed()) }\n    var result = \"\"\n    for letter in s {\n     \
    \   if letter.isLetter {\n            if letter.isUppercase {\n              \
    \  result.append(letter.lowercased())\n            } else {\n                result.append(letter.uppercased())\n\
    \            }\n        } else {\n            result.append(letter)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpmbsgjq_p/tmpmbsgjq_p.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84e0882c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84e0579b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84e0579988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84e05787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmbsgjq_p                        0x0000557e665cb0c0 <unavailable> + 8384

    5    libc.so.6                          0x00002b84e0a6e460 __libc_start_main +
    245

    6    tmpmbsgjq_p                        0x0000557e665ca559 <unavailable> + 5465

    '
  stdout: ''
  timestamp: 1659824622
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var result\
    \ = \"\"\n    for char in s {\n        if letters.contains(char) {\n         \
    \   if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    if s == result {\n        return String(s.reversed())\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpz5hn74q2/tmpz5hn74q2.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2683a81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2683778b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2683778988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26837777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz5hn74q2                        0x0000563e0181c827 <unavailable> + 6183

    5    libc.so.6                          0x00002b2683c6d460 __libc_start_main +
    245

    6    tmpz5hn74q2                        0x0000563e0181c469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824622
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpxskqg2fg/tmpxskqg2fg.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7fb747c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7fb43eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7fb43e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7fb43d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxskqg2fg                        0x00005640d9f3d307 <unavailable> + 4871

    5    libc.so.6                          0x00002ad7fb933460 __libc_start_main +
    245

    6    tmpxskqg2fg                        0x00005640d9f3cf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824622
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpxskqg2fg/tmpxskqg2fg.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7fb747c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7fb43eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7fb43e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7fb43d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxskqg2fg                        0x00005640d9f3d307 <unavailable> + 4871

    5    libc.so.6                          0x00002ad7fb933460 __libc_start_main +
    245

    6    tmpxskqg2fg                        0x00005640d9f3cf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824622
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    if s.isEmpty {\n        return s\n    }\n    let letters =\
    \ s.filter { $0.isLetter }\n    if letters.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    var arr = Array(s)\n    for i in 0..<arr.count {\n        if arr[i].isLetter\
    \ {\n            arr[i] = arr[i].isUppercase ? arr[i].lowercased() : arr[i].uppercased()\n\
    \        }\n    }\n    return String(arr)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpo_6iug15.swift:22:41: error: cannot assign value of type 'String'\
    \ to subscript of type 'String.Element' (aka 'Character')\n            arr[i]\
    \ = arr[i].isUppercase ? arr[i].lowercased() : arr[i].uppercased()\n         \
    \            ~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824622
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let s = s.filter { $0.isLetter }\n    let letters = s.map {\n\
    \        let c = $0.lowercased()\n        if c == $0 {\n            return c.uppercased()\n\
    \        } else {\n            return c\n        }\n    }\n    if letters.count\
    \ == 0 {\n        return String(s.reversed())\n    }\n    return String(letters)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp7g924uog.swift:15:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'String' and 'String.Element' (aka 'Character')\n      \
    \  if c == $0 {\n           ~ ^  ~~\n/tmp/tmp7g924uog.swift:15:14: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        if c == $0 {\n             ^\n"
  stdout: ''
  timestamp: 1659824622
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let a = Array(s)\n    let notLetter = CharacterSet.letters.inverted\n\
    \    var res = [Character]()\n    for c in a {\n        res.append(contains(c,\
    \ notLetter) ? c : c.lowercased() == c ? c.uppercased() : c.lowercased())\n  \
    \  }\n    return String(res)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp1j3h2sjn.swift:13:21: error: cannot find 'CharacterSet' in scope\n\
    \    let notLetter = CharacterSet.letters.inverted\n                    ^~~~~~~~~~~~\n\
    /tmp/tmp1j3h2sjn.swift:16:20: error: cannot find 'contains' in scope\n       \
    \ res.append(contains(c, notLetter) ? c : c.lowercased() == c ? c.uppercased()\
    \ : c.lowercased())\n                   ^~~~~~~~\n/tmp/tmp1j3h2sjn.swift:16:64:\
    \ error: binary operator '==' cannot be applied to operands of type 'String' and\
    \ 'String.Element' (aka 'Character')\n        res.append(contains(c, notLetter)\
    \ ? c : c.lowercased() == c ? c.uppercased() : c.lowercased())\n             \
    \                                   ~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp1j3h2sjn.swift:16:64:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        res.append(contains(c, notLetter)\
    \ ? c : c.lowercased() == c ? c.uppercased() : c.lowercased())\n             \
    \                                                  ^\n/tmp/tmp1j3h2sjn.swift:16:20:\
    \ error: missing argument label 'contentsOf:' in call\n        res.append(contains(c,\
    \ notLetter) ? c : c.lowercased() == c ? c.uppercased() : c.lowercased())\n  \
    \                 ^\n                   contentsOf: \n/tmp/tmp1j3h2sjn.swift:16:45:\
    \ error: result values in '? :' expression have mismatching types 'String.Element'\
    \ (aka 'Character') and 'String'\n        res.append(contains(c, notLetter) ?\
    \ c : c.lowercased() == c ? c.uppercased() : c.lowercased())\n               \
    \                             ^\n"
  stdout: ''
  timestamp: 1659824622
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.characters.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.characters.reversed())\n    }\n    return String(s.characters.map\
    \ {\n        if $0.isLetter {\n            return String($0).lowercased() == String($0)\
    \ ? String($0).uppercased() : String($0).lowercased()\n        }\n        return\
    \ $0\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\"\
    ) == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\"\
    ) == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpn353e17x.swift:12:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    let letters = s.characters.filter { $0.isLetter }\n\
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpn353e17x.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n        return String(s.characters.reversed())\n      \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpn353e17x.swift:18:58: error: cannot convert return expression of\
    \ type 'String' to return type 'Character'\n            return String($0).lowercased()\
    \ == String($0) ? String($0).uppercased() : String($0).lowercased()\n        \
    \           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824623
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return s.containsLetters ? result : String(result.reversed())\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpy12u9ml7.swift:24:14: error: value of type 'String' has no member\
    \ 'containsLetters'\n    return s.containsLetters ? result : String(result.reversed())\n\
    \           ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824622
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    if s.isEmpty {\n        return s\n    }\n    var string = \"\
    \"\n    for char in s {\n        if \"a\"...\"z\" ~= char {\n            string.append(char.uppercased())\n\
    \        } else if \"A\"...\"Z\" ~= char {\n            string.append(char.lowercased())\n\
    \        } else {\n            string.append(char)\n        }\n    }\n    return\
    \ string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmppp8kh6ln/tmppp8kh6ln.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c1165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c0e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c0e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c0e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppp8kh6ln                        0x0000558a62ea1877 <unavailable> + 6263

    5    libc.so.6                          0x00002b36c1351460 __libc_start_main +
    245

    6    tmppp8kh6ln                        0x0000558a62ea13c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824622
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var letters = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            letters += String(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            letters += String(c)\n        }\n    }\n    return\
    \ letters.isEmpty ? String(s.reversed()) : letters\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmplw9fvd41/tmplw9fvd41.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e98ac3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e987bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4e987ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4e987b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplw9fvd41                        0x000055881dcda9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002b4e98caf460 __libc_start_main +
    245

    6    tmplw9fvd41                        0x000055881dcda549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824622
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    var res = \"\"\n    for letter in s {\n        if letters.contains(letter)\
    \ {\n            res += String(letter).lowercased() == String(letter) ? String(letter).uppercased()\
    \ : String(letter).lowercased()\n        } else {\n            res += String(letter)\n\
    \        }\n    }\n    return res == \"\" ? String(s.reversed()) : res\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpk496adpe/tmpk496adpe.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ef04a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ef019eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ef019e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ef019d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk496adpe                        0x000055712bf638b7 <unavailable> + 6327

    5    libc.so.6                          0x00002b9ef0693460 __libc_start_main +
    245

    6    tmpk496adpe                        0x000055712bf63409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659824622
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    var hasLetter = false\n    for char\
    \ in s {\n        if char.isLetter {\n            result.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n            hasLetter = true\n   \
    \     } else {\n            result.append(char)\n        }\n    }\n    return\
    \ hasLetter ? result : String(result.reversed())\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824622
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let strs = s.characters.map{ $0 }\n    var res = \"\"\n   \
    \ var unLetters: Bool = true\n    for c in strs {\n        if c.isLetter {\n \
    \           if c.isUpper {\n                res.append(c.lowercased())\n     \
    \       } else {\n                res.append(c.uppercased())\n            }\n\
    \            unLetters = false\n        } else {\n            res.append(c)\n\
    \        }\n    }\n    if unLetters {\n        return String(res.characters.reversed())\n\
    \    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp_q21x5w8.swift:12:18: error: 'characters' is unavailable: Please\
    \ use String directly\n    let strs = s.characters.map{ $0 }\n               \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp_q21x5w8.swift:17:18:\
    \ error: value of type 'String.Element' (aka 'Character') has no member 'isUpper'\n\
    \            if c.isUpper {\n               ~ ^~~~~~~\n/tmp/tmp_q21x5w8.swift:28:27:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ String(res.characters.reversed())\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824622
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var s = s\n    if s.isEmpty {\n        return s\n    }\n  \
    \  var reversed = \"\"\n    let s = s.reversed()\n    for item in s {\n      \
    \  if item.isLetter {\n            if item.isUppercase {\n                reversed.append(item.lowercased())\n\
    \            } else {\n                reversed.append(item.uppercased())\n  \
    \          }\n        } else {\n            reversed.append(item)\n        }\n\
    \    }\n    return reversed\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpfbu5nr74.swift:17:9: error: invalid redeclaration of 's'\n    let\
    \ s = s.reversed()\n        ^\n/tmp/tmpfbu5nr74.swift:12:9: note: 's' previously\
    \ declared here\n    var s = s\n        ^\n"
  stdout: ''
  timestamp: 1659824622
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = Set<Character>(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n    let characters = s.characters.map { (e) -> Character in\n        if letters.contains(e)\
    \ {\n            if e.isUppercase {\n                return e.lowercased()\n \
    \           } else {\n                return e.uppercased()\n            }\n \
    \       } else {\n            return e\n        }\n    }\n    return String(characters)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpibehii8j.swift:16:26: error: cannot convert return expression of\
    \ type 'String' to return type 'Character'\n                return e.lowercased()\n\
    \                       ~~^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824622
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.characters.filter { $0.isLetter }\n    let\
    \ number = s.characters.filter { !$0.isLetter }\n    if letters.count == 0 {\n\
    \        return String(number.reversed())\n    }\n    var result = String()\n\
    \    for c in s.characters {\n        if c.isUppercase {\n            result.append(c.lowercased())\n\
    \        } else if c.isLowercase {\n            result.append(c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpq4xes2tn.swift:12:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    let letters = s.characters.filter { $0.isLetter }\n\
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpq4xes2tn.swift:13:20: error: 'characters' is unavailable: Please\
    \ use String directly\n    let number = s.characters.filter { !$0.isLetter }\n\
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpq4xes2tn.swift:18:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824622
