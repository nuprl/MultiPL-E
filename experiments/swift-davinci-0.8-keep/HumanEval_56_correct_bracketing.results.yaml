language: swift
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    var open = false\n\
    \    for c in brackets {\n        if c == \"<\" {\n            stack.push(c)\n\
    \            open = true\n        } else if c == \">\" {\n            if stack.isEmpty()\
    \ {\n                return false\n            }\n            stack.pop()\n  \
    \      }\n    }\n    return stack.isEmpty() && open\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp00byg2ps.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659821070
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var brackets = brackets\n    while let range = brackets.range(of:\
    \ \"<>\") {\n        brackets.replaceSubrange(range, with: \"\")\n    }\n    return\
    \ brackets.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp90z7yfmu.swift:14:32: error: value of type 'String' has no member\
    \ 'range'\n    while let range = brackets.range(of: \"<>\") {\n              \
    \        ~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659821070
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n  var left = 0\n  for bracket in brackets {\n    if bracket\
    \ == \"<\" {\n      left += 1\n    } else if bracket == \">\" {\n      left -=\
    \ 1\n    }\n    if left < 0 {\n      return false\n    }\n  }\n  return left ==\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821071
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketStack = Stack<Character>()\n    for bracket\
    \ in brackets {\n        if bracket == \"<\" {\n            bracketStack.push(element:\
    \ bracket)\n        } else if bracket == \">\" {\n            if let elem = bracketStack.pop()\
    \ {\n                if elem != \"<\" {\n                    return false\n  \
    \              }\n            } else {\n                return false\n       \
    \     }\n        }\n    }\n    return bracketStack.isEmpty()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9rbtjkos.swift:13:24: error: cannot find 'Stack' in scope\n   \
    \ var bracketStack = Stack<Character>()\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1659821070
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let left: Character = \"<\"\n    let right: Character\
    \ = \">\"\n    var stack = Stack<Character>()\n    for bracket in brackets {\n\
    \        if bracket == left {\n            stack.push(bracket)\n        } else\
    \ if bracket == right {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwlkndba7.swift:15:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659821070
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let count = brackets.count\n    if count % 2 != 0 {\n\
    \        return false\n    }\n    var _brackets = Array(brackets)\n    var open\
    \ = [Character]()\n    for i in 0..<count {\n        if _brackets[i] == \"<\"\
    \ {\n            open.append(\"<\")\n        } else {\n            if open.count\
    \ == 0 {\n                return false\n            }\n            open.removeLast()\n\
    \        }\n    }\n    return open.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821071
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmpscuyjxdu/tmpscuyjxdu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82dd05dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82dcd54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82dcd54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82dcd537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpscuyjxdu                        0x000055b8ea1f44f3 <unavailable> + 5363

    5    libc.so.6                          0x00002b82dd249460 __libc_start_main +
    245

    6    tmpscuyjxdu                        0x000055b8ea1f3ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659821071
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<String>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(\">\")\n        } else\
    \ if stack.isEmpty() {\n            return false\n        } else {\n         \
    \   _ = stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgbeg2z6m.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<String>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659821070
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if stack.isEmpty() {\n            return false\n        } else {\n    \
    \        stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1egizj3x.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659821070
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack: [Character] = []\n    for c in brackets {\n\
    \        if c == \"<\" {\n            stack.append(c)\n        } else if c ==\
    \ \">\" {\n            if stack.popLast() == nil {\n                return false\n\
    \            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821071
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = [Character]()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.append(bracket)\n      \
    \  } else if bracket == \">\" {\n            if stack.isEmpty {\n            \
    \    return false\n            } else {\n                stack.removeLast()\n\
    \            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820994
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    // TODO\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmp1veqv_rd/tmp1veqv_rd.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b12cb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b129a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b129a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b129a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1veqv_rd                        0x0000558e57aa325b <unavailable> + 4699

    5    libc.so.6                          0x00002b7b12e9d460 __libc_start_main +
    245

    6    tmp1veqv_rd                        0x0000558e57aa2ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659821071
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opener: Int = 0\n    for char in brackets {\n   \
    \     if char == \"<\" {\n            opener = opener + 1\n        } else if char\
    \ == \">\" {\n            opener = opener - 1\n        }\n        if opener <\
    \ 0 {\n            return false\n        }\n    }\n    return opener == 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\n\
    assert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821071
- exit_code: -4
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var open: Int = 0\n    var close: Int = 0\n    for bracket\
    \ in brackets {\n        if bracket == \"<\" {\n            open += 1\n      \
    \  } else if bracket == \">\" {\n            close += 1\n        }\n    }\n  \
    \  return open == close\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: Exception
  stderr: 'tmpbx7evp9a/tmpbx7evp9a.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaeeca53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaeec74ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaeec74a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaeec7497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbx7evp9a                        0x000056017fab375b <unavailable> + 5979

    5    libc.so.6                          0x00002aaeecc3f460 __libc_start_main +
    245

    6    tmpbx7evp9a                        0x000056017fab3099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659821071
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack: Stack<String> = Stack<String>()\n    for character\
    \ in brackets {\n        switch character {\n        case \"<\":\n           \
    \ stack.push(\"<\")\n        case \">\":\n            if stack.isEmpty {\n   \
    \             return false\n            } else {\n                _ = stack.pop()\n\
    \            }\n        default:\n            return false\n        }\n    }\n\
    \    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqc6j6s3d.swift:13:16: error: cannot find type 'Stack' in scope\n\
    \    var stack: Stack<String> = Stack<String>()\n               ^~~~~\n"
  stdout: ''
  timestamp: 1659821070
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n  var openBrackets = 0\n  for char in brackets {\n    if\
    \ char == \"<\" {\n      openBrackets++\n    } else if char == \">\" {\n     \
    \ openBrackets--\n    }\n    if openBrackets < 0 {\n      return false\n    }\n\
    \  }\n  return openBrackets == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgifl0cb_.swift:16:19: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n      openBrackets++\n                  ^~\n/tmp/tmpgifl0cb_.swift:18:19:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n      openBrackets--\n\
    \                  ^~\n"
  stdout: ''
  timestamp: 1659821070
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var count = 0\n    for bracket in brackets {\n      \
    \  if bracket == \"<\" {\n            count += 1\n        } else if bracket ==\
    \ \">\" {\n            count -= 1\n        }\n        if count < 0 {\n       \
    \     return false\n        }\n    }\n    return count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"<>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<><>>\") == true)\nassert(correct_bracketing(brackets: \"<><><<><>><>\")\
    \ == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
    ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\n\
    assert(correct_bracketing(brackets: \"<<<<\") == false)\nassert(correct_bracketing(brackets:\
    \ \">\") == false)\nassert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820994
- exit_code: 1
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack = Stack<Character>()\n    for char in brackets\
    \ {\n        if char == \"<\" {\n            stack.push(char)\n        } else\
    \ if char == \">\" {\n            if stack.isEmpty {\n                return false\n\
    \            } else {\n                stack.pop()\n            }\n        }\n\
    \    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpj2a5_a76.swift:13:17: error: cannot find 'Stack' in scope\n   \
    \ var stack = Stack<Character>()\n                ^~~~~\n"
  stdout: ''
  timestamp: 1659820994
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var counter = 0\n    for c in brackets {\n        switch\
    \ c {\n        case \"<\":\n            counter += 1\n        case \">\":\n  \
    \          counter -= 1\n        default:\n            print(\"Error!\")\n   \
    \     }\n        if counter < 0 {\n            return false\n        }\n    }\n\
    \    return counter == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821071
- exit_code: 0
  program: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
    <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
    <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var stack: [String] = []\n    for bracket in brackets\
    \ {\n        if stack.isEmpty {\n            stack.append(String(bracket))\n \
    \       } else {\n            if String(bracket) == \">\" && stack.last == \"\
    <\" {\n                stack.removeLast()\n            } else {\n            \
    \    stack.append(String(bracket))\n            }\n        }\n    }\n    return\
    \ stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"<>\") == true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\n\
    assert(correct_bracketing(brackets: \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<><><<<><><>><>><<><><<>>>\") == true)\nassert(correct_bracketing(brackets:\
    \ \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets: \"><<>\") == false)\n\
    assert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\n\
    assert(correct_bracketing(brackets: \"<<>\") == false)\nassert(correct_bracketing(brackets:\
    \ \"<><><<><>><>><<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\"\
    ) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821071
