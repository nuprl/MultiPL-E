name: HumanEval_159_eat
language: swift
prompt: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
  \ of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n\
  /// you should return an array of [ total number of eaten carrots after your meals,\n\
  /// the number of carrots left after your meals ]\n/// if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n\
  /// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4, 8, 9) -> [12, 1]\n/// * eat(1, 10,\
  \ 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7, 0]\n/// Variables:\n/// @number : integer\n\
  /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
  \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
  \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n\
  /// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number:\
  \ Int, need: Int, remaining: Int) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) ==\
  \ [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
  \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
  \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
  \ 4, need: 5, remaining: 1) == [5, 0])"
completions: ["    var result = 0\n    if remaining >= need {\n        result = number\
    \ + need\n    } else {\n        result = number + remaining\n    }\n    return\
    \ [result, remaining - need]", '    return [min(number + remaining, need), max(0,
    number + remaining - need)]', "    var totalEaten = number\n    var remainingCarrots\
    \ = remaining\n    var result: [Int] = []\n    \n    if need <= remaining {\n\
    \        remainingCarrots = remaining - need\n        totalEaten += need\n   \
    \ } else {\n        totalEaten += remaining\n        remainingCarrots = 0\n  \
    \  }\n    \n    result.append(totalEaten)\n    result.append(remainingCarrots)\n\
    \    \n    return result", "  if remaining == 0 {\n    return [number, 0]\n  }\n\
    \  if remaining < need - number {\n    return [number + remaining, 0]\n  }\n \
    \ return [number + need, remaining - need + number]", '    return [number + min(need,
    remaining), max(0, remaining - need)]', '    return [number + min(need, remaining),
    max(0, remaining - need)]', "    // Write your code here...\n    return [0, 0]",
  "    var res = [number, remaining]\n    if res[1] >= res[0] + need {\n        res[1]\
    \ -= res[0] + need\n        res[0] += need\n    } else {\n        res[0] += res[1]\n\
    \        res[1] = 0\n    }\n    return res", "    var total = number + remaining\n\
    \    var remain = 0\n    if (total >= need) {\n        total = need\n        remain\
    \ = total - need\n    }\n    return [total, remain]", "    var eaten: Int = number\
    \ + need\n    let remainingCarrots: Int = eaten > remaining ? 0 : remaining -\
    \ eaten\n    return [eaten, remainingCarrots]", "    if remaining < need {\n \
    \       return [number + remaining, 0]\n    }\n    return [number + need, remaining\
    \ - need]", "    let result = [number + (need < remaining ? need : remaining),\
    \ (need > remaining ? need - remaining : 0)]\n    return result", "    let count\
    \ = number + min(need, remaining)\n    let last = max(0, remaining - need)\n \
    \   return [count, last]", "    var array = [Int]()\n    var a = number\n    var\
    \ b = need\n    var c = remaining\n    if c >= b {\n        a += b\n        c\
    \ -= b\n        b = 0\n    } else {\n        a += c\n        b -= c\n        c\
    \ = 0\n    }\n    array.append(a)\n    array.append(c)\n    return array", " \
    \   var message = \"\"\n    if number <= 0 || number > 1000 {\n        message\
    \ = \"number should be number between 0 and 1000\"\n    }\n    if need <= 0 ||\
    \ need > 1000 {\n        message = \"need should be number between 0 and 1000\"\
    \n    }\n    if remaining <= 0 || remaining > 1000 {\n        message = \"remaining\
    \ should be number between 0 and 1000\"\n    }\n    guard message.isEmpty else\
    \ {\n        print(message)\n        return []\n    }\n    let eatenCarrots =\
    \ number + need\n    var remainingCarrots = remaining - need\n    if remainingCarrots\
    \ < 0 {\n        remainingCarrots = 0\n    }\n    return [eatenCarrots, remainingCarrots]",
  "    let result = number + need\n    return [result, max(0, remaining - need)]",
  '    return [number + min(need, remaining), max(0, remaining - need)]', "    let\
    \ eaten = number + need > remaining ? remaining : number + need\n    return [eaten,\
    \ remaining - eaten]", '    return [number + min(need, remaining), max(0, remaining
    - need)]', "    let total: Int = number + remaining\n    if (total >= need) {\n\
    \        return [need, total - need]\n    } else {\n        return [total, 0]\n\
    \    }"]
stop_tokens:
- "\n}"
