language: swift
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 0
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n\
    \  if a == 0 || b == 0 || c == 0 {\n    return false\n  }\n  let triangle = [a,\
    \ b, c].sorted()\n  let a2 = triangle[0] * triangle[0]\n  let b2 = triangle[1]\
    \ * triangle[1]\n  let c2 = triangle[2] * triangle[2]\n  if a2 + b2 == c2 {\n\
    \    return true\n  }\n  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824610
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmp8exmbx7l/tmp8exmbx7l.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57b0e56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57b0b4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57b0b4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57b0b4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8exmbx7l                        0x0000561c55ab623b <unavailable> + 4667

    5    libc.so.6                          0x00002b57b1042460 __libc_start_main +
    245

    6    tmp8exmbx7l                        0x0000561c55ab5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824610
- exit_code: 0
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n\
    \    let l = [a, b, c].sorted()\n    return (l[0] * l[0] + l[1] * l[1]) == l[2]\
    \ * l[2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824610
- exit_code: 0
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n\
    \tlet sides = [a, b, c].sorted(by: <)\n\treturn sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824610
- exit_code: 0
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n\
    \  let a2 = a * a\n  let b2 = b * b\n  let c2 = c * c\n  if (a2 + b2 == c2) ||\
    \ (a2 + c2 == b2) || (b2 + c2 == a2) {\n    return true\n  }\n  return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824610
- exit_code: 0
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n\
    \    let sorted = [a, b, c].sorted()\n    return sorted[0] * sorted[0] + sorted[1]\
    \ * sorted[1] == sorted[2] * sorted[2]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824610
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n\
    \    if (a == b && b == c) {\n        return false\n    }\n    let max = max_of_three(a,\
    \ b, c)\n    let mid = mid_of_three(a, b, c)\n    let min = min_of_three(a, b,\
    \ c)\n    if (max == min) {\n        return false\n    }\n    if (mid * mid +\
    \ min * min == max * max) {\n        return true\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp61ud4bil.swift:13:15: error: cannot find 'max_of_three' in scope\n\
    \    let max = max_of_three(a, b, c)\n              ^~~~~~~~~~~~\n/tmp/tmp61ud4bil.swift:14:15:\
    \ error: cannot find 'mid_of_three' in scope\n    let mid = mid_of_three(a, b,\
    \ c)\n              ^~~~~~~~~~~~\n/tmp/tmp61ud4bil.swift:15:15: error: cannot\
    \ find 'min_of_three' in scope\n    let min = min_of_three(a, b, c)\n        \
    \      ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824642
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n\
    \  let squares = [a * a, b * b, c * c]\n  let maxIndex = squares.indexOf(squares.maxElement()!)!\n\
    \  return (squares[(maxIndex + 1) % 3] + squares[(maxIndex + 2) % 3]) == squares[maxIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps8a6azja.swift:11:26: error: value of type '[Int]' has no member\
    \ 'indexOf'\n  let maxIndex = squares.indexOf(squares.maxElement()!)!\n      \
    \           ~~~~~~~ ^~~~~~~\n/tmp/tmps8a6azja.swift:11:42: error: value of type\
    \ '[Int]' has no member 'maxElement'\n  let maxIndex = squares.indexOf(squares.maxElement()!)!\n\
    \                                 ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824610
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n\
    \    let r = sorted([a, b, c])\n    let (hypotenuse, adjacent, opposite) = (r[2],\
    \ r[1], r[0])\n    return hypotenuse * hypotenuse == adjacent * adjacent + opposite\
    \ * opposite\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpfy5tdm8j.swift:10:13: error: cannot find 'sorted' in scope\n  \
    \  let r = sorted([a, b, c])\n            ^~~~~~\n"
  stdout: ''
  timestamp: 1659824627
- exit_code: 0
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n\
    \    return a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c\
    \ == a * a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824610
- exit_code: 0
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n\
    \    // FIXME: Implement me\n    var answer: Bool = false\n    let check: (Int,\
    \ Int, Int) -> Bool = { n1, n2, n3 in\n        if n1 == n2 && n2 == n3 {\n   \
    \         return false\n        }\n        let toSort = [n1, n2, n3]\n       \
    \ let sorted = toSort.sorted { $0 < $1 }\n        let a = sorted[0]\n        let\
    \ b = sorted[1]\n        let c = sorted[2]\n        if a * a + b * b == c * c\
    \ {\n            return true\n        }\n        return false\n    }\n    answer\
    \ = check(a, b, c)\n    return answer\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824610
- exit_code: 0
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n\
    \    var aSq: Int = a * a\n    var bSq: Int = b * b\n    var cSq: Int = c * c\n\
    \    var max: Int = max(max(aSq, bSq), cSq)\n    if max == aSq {\n        return\
    \ max == bSq + cSq\n    } else if max == bSq {\n        return max == aSq + cSq\n\
    \    } else {\n        return max == aSq + bSq\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824610
- exit_code: 0
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n\
    \    // Your code here!\n    if a * a + b * b == c * c {\n        return true\n\
    \    }\n    if a * a + c * c == b * b {\n        return true\n    }\n    if b\
    \ * b + c * c == a * a {\n        return true\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824610
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n\
    \  let longestSide = max(a, max(b, c))\n  let sumOfShorterSides = a + b + c -\
    \ longestSide\n  return longestSide * longestSide == sumOfShorterSides * sumOfShorterSides\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\n\
    assert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a:\
    \ 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\n\
    assert(right_angle_triangle(a: 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a:\
    \ 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) ==\
    \ true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a:\
    \ 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) ==\
    \ false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpjyk8yguz/tmpjyk8yguz.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19d11b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19d0eaeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19d0eae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19d0ead7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjyk8yguz                        0x0000563978d4224b <unavailable> + 4683

    5    libc.so.6                          0x00002b19d13a3460 __libc_start_main +
    245

    6    tmpjyk8yguz                        0x0000563978d41ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824610
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n\
    \    fatalError(\"Unimplemented\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpf7ivhzz7/tmpf7ivhzz7.swift:10: Fatal error: Unimplemented

    Current stack trace:

    0    libswiftCore.so                    0x00002ba86e1b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba86dea7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba86dea7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba86dea67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf7ivhzz7                        0x000055c8361c5824 <unavailable> + 6180

    5    tmpf7ivhzz7                        0x000055c8361c51d5 <unavailable> + 4565

    6    libc.so.6                          0x00002ba86e39c460 __libc_start_main +
    245

    7    tmpf7ivhzz7                        0x000055c8361c4ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1659824610
- exit_code: 0
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n\
    \    if (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a) {\n   \
    \     return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824610
- exit_code: 0
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n\
    \    let sides = [a, b, c].sorted()\n    return sides[0] * sides[0] + sides[1]\
    \ * sides[1] == sides[2] * sides[2]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824548
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n\
    \    return a*a + b*b == c*c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(right_angle_triangle(a:\
    \ 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a: 1, b: 2, c: 3) == false)\n\
    assert(right_angle_triangle(a: 10, b: 6, c: 8) == true)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a: 7, b: 24, c: 25) ==\
    \ true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) == false)\nassert(right_angle_triangle(a:\
    \ 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a: 15, b: 8, c: 17) ==\
    \ true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a: 2, b: 2, c: 10) ==\
    \ false)"
  status: Exception
  stderr: 'tmps01u3fyq/tmps01u3fyq.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00fe8b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00fe5b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00fe5b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00fe5af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps01u3fyq                        0x000055d812f672b9 <unavailable> + 4793

    5    libc.so.6                          0x00002b00feaa5460 __libc_start_main +
    245

    6    tmps01u3fyq                        0x000055d812f66e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824610
- exit_code: 0
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n\
    \    let sides = [a, b, c].sorted(by: >)\n    return sides[0] * sides[0] == sides[1]\
    \ * sides[1] + sides[2] * sides[2]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824610
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n/// sides form a right-angled triangle, False otherwise.\n///\
    \ A right-angled triangle is a triangle in which one angle is right angle or \n\
    /// 90 degree.\n/// Example:\n/// right_angle_triangle(3, 4, 5) == True\n/// right_angle_triangle(1,\
    \ 2, 3) == False\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n\
    \    // Write your code here\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(right_angle_triangle(a: 3, b: 4, c: 5) == true)\nassert(right_angle_triangle(a:\
    \ 1, b: 2, c: 3) == false)\nassert(right_angle_triangle(a: 10, b: 6, c: 8) ==\
    \ true)\nassert(right_angle_triangle(a: 2, b: 2, c: 2) == false)\nassert(right_angle_triangle(a:\
    \ 7, b: 24, c: 25) == true)\nassert(right_angle_triangle(a: 10, b: 5, c: 7) ==\
    \ false)\nassert(right_angle_triangle(a: 5, b: 12, c: 13) == true)\nassert(right_angle_triangle(a:\
    \ 15, b: 8, c: 17) == true)\nassert(right_angle_triangle(a: 48, b: 55, c: 73)\
    \ == true)\nassert(right_angle_triangle(a: 1, b: 1, c: 1) == false)\nassert(right_angle_triangle(a:\
    \ 2, b: 2, c: 10) == false)"
  status: Exception
  stderr: 'tmpxcrfawh3/tmpxcrfawh3.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd5dc4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd5d946b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd5d946988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd5d9457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxcrfawh3                        0x000055a515f751bb <unavailable> + 4539

    5    libc.so.6                          0x00002abd5de3b460 __libc_start_main +
    245

    6    tmpxcrfawh3                        0x000055a515f74e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824610
