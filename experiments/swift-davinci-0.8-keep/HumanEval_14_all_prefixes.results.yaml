language: swift
name: HumanEval_14_all_prefixes
results:
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefs = [String]()\n    for i in 0..<string.count\
    \ {\n        prefs.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefs\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    let length = string.characters.count\n    return\
    \ (0..<length).map { string.substringToIndex(string.startIndex.advancedBy($0))\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") ==\
    \ [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\",\
    \ \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\"\
    ) == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9umlb_xd.swift:6:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    let length = string.characters.count\n            \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp9umlb_xd.swift:7:38: error: value of type 'String' has no member 'substringToIndex'\n\
    \    return (0..<length).map { string.substringToIndex(string.startIndex.advancedBy($0))\
    \ }\n                              ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp9umlb_xd.swift:7:73:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n    return (0..<length).map\
    \ { string.substringToIndex(string.startIndex.advancedBy($0)) }\n            \
    \                                          ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014190
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n  return (1..<count(string)).map {string[string.startIndex..<advance(string.startIndex,\
    \ $0)]}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\
    \") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgy9gpf5d.swift:6:15: error: cannot find 'count' in scope\n  return\
    \ (1..<count(string)).map {string[string.startIndex..<advance(string.startIndex,\
    \ $0)]}\n              ^~~~~\n/tmp/tmpgy9gpf5d.swift:6:62: error: cannot find\
    \ 'advance' in scope\n  return (1..<count(string)).map {string[string.startIndex..<advance(string.startIndex,\
    \ $0)]}\n                                                             ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014190
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for length in 0..<string.count\
    \ {\n        prefixes.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: length + 1)))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqdn0obdg.swift:8:32: error: value of type 'String' has no member\
    \ 'substring'\n        prefixes.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: length + 1)))\n                        ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014190
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var res: [String] = []\n    for i in 0..<string.count\
    \ {\n        res.append(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)])\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzdtnv4j6.swift:8:26: error: subscript 'subscript(_:)' requires\
    \ the types 'String.Index' and 'Int' be equivalent\n        res.append(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)])\n                         ^\nSwift.String:5:12: note: where\
    \ 'R.Bound' = 'String.Index'\n    public subscript<R>(bounds: R) -> String where\
    \ R : RangeExpression, R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    let chars = Array(string.characters)\n    var output\
    \ = [String]()\n    for i in 0..<chars.count {\n        output.append(String(chars[0...i]))\n\
    \    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpojaqvrug.swift:6:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let chars = Array(string.characters)\n            \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014190
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    let count = string.count\n\
    \    for i in 0..<count {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n  var result: [String] = []\n  let characters = Array(string.characters)\n\
    \  for i in 0..<characters.count {\n    result.append(String(characters[0...i]))\n\
    \  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9hzpjx9s.swift:7:33: error: 'characters' is unavailable: Please\
    \ use String directly\n  let characters = Array(string.characters)\n         \
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpao82qb9g.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpao82qb9g.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpao82qb9g.swift:8:65:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    return (1...string.characters.count).map({ string.substringToIndex(string.startIndex.advancedBy($0))\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") ==\
    \ [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\",\
    \ \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\"\
    ) == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0x08t3v6.swift:6:55: error: value of type 'String' has no member\
    \ 'substringToIndex'\n    return (1...string.characters.count).map({ string.substringToIndex(string.startIndex.advancedBy($0))\
    \ })\n                                               ~~~~~~ ^~~~~~~~~~~~~~~~\n\
    /tmp/tmp0x08t3v6.swift:6:90: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n    return (1...string.characters.count).map({ string.substringToIndex(string.startIndex.advancedBy($0))\
    \ })\n                                                                       ~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014190
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var list = [String]()\n    let length = string.characters.count\n\
    \    for i in 0...length {\n        list.append(string.substringToIndex(string.startIndex.advancedBy(i)))\n\
    \    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqdyc_y23.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    let length = string.characters.count\n            \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpqdyc_y23.swift:9:28: error: value of type 'String' has no member 'substringToIndex'\n\
    \        list.append(string.substringToIndex(string.startIndex.advancedBy(i)))\n\
    \                    ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpqdyc_y23.swift:9:63: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        list.append(string.substringToIndex(string.startIndex.advancedBy(i)))\n\
    \                                            ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014190
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    let n = string.characters.count\n    return (0..<n).map\
    \ { string.startIndex.advancedBy($0)..<string.startIndex.advancedBy($0+1) }.map\
    \ { String(string[$0]) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt5ul5jzv.swift:6:20: error: 'characters' is unavailable: Please\
    \ use String directly\n    let n = string.characters.count\n                 \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpt5ul5jzv.swift:7:44:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n    return (0..<n).map\
    \ { string.startIndex.advancedBy($0)..<string.startIndex.advancedBy($0+1) }.map\
    \ { String(string[$0]) }\n                         ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpt5ul5jzv.swift:7:79: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n    return (0..<n).map { string.startIndex.advancedBy($0)..<string.startIndex.advancedBy($0+1)\
    \ }.map { String(string[$0]) }\n                                             \
    \               ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014191
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for index in 1...string.characters.count\
    \ {\n        result.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: index)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmppqyrmm22.swift:7:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    for index in 1...string.characters.count {\n      \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmppqyrmm22.swift:8:30: error: value of type 'String' has no member\
    \ 'substring'\n        result.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: index)))\n                      ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014190
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n  let count = string.characters.count\n  var result =\
    \ [String]()\n  for i in 0..<count {\n    result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \  }\n  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6oq9u77_.swift:6:22: error: 'characters' is unavailable: Please\
    \ use String directly\n  let count = string.characters.count\n               \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6oq9u77_.swift:9:26:\
    \ error: value of type 'String' has no member 'substringToIndex'\n    result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                  ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp6oq9u77_.swift:9:61: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n    result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                          ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014190
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n  return string.characters.indices.map { string.substringToIndex($0)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\") ==\
    \ [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\",\
    \ \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\"\
    ) == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbpojsd4b.swift:6:49: error: value of type 'String' has no member\
    \ 'substringToIndex'\n  return string.characters.indices.map { string.substringToIndex($0)\
    \ }\n                                         ~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014190
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    let len = string.length\n    var ret = [String]()\n\
    \    for i in 1...len {\n        ret.append(string[0..<i])\n    }\n    return\
    \ ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(all_prefixes(string: \"\
    \") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\", \"\
    as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc1sjwp61.swift:6:22: error: value of type 'String' has no member\
    \ 'length'\n    let len = string.length\n              ~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014190
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for index in 0..<string.count\
    \ {\n        result.append(string[0..<index+1])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpif5joyrp.swift:8:23: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        result.append(string[0..<index+1])\n                      ^~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014190
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for index in string.indices\
    \ {\n        result.append(String(string[..<index]))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsakyu9s6/tmpsakyu9s6.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b225013ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b224fe31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b224fe31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b224fe307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsakyu9s6                        0x0000560a32731b58 <unavailable> + 7000

    5    libc.so.6                          0x00002b2250326460 __libc_start_main +
    245

    6    tmpsakyu9s6                        0x0000560a327315b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660014191
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014191
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
