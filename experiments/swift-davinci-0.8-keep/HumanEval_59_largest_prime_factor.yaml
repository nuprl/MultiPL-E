name: HumanEval_59_largest_prime_factor
language: swift
prompt: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
  /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
  \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
  \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
completions: ["    var p = 2\n    while p < n {\n        if n % p == 0 {\n       \
    \     return largest_prime_factor(n / p)\n        }\n        p += 1\n    }\n \
    \   return n", "    if is_prime(n) {\n        return n\n    }\n    var i = 2\n\
    \    while i <= sqrt(n) {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n        i += 1\n    }\n    return n", "    var maxPrime = 0\n\
    \    var n = n\n    while n%2 == 0 {\n        maxPrime = 2\n        n /= 2\n \
    \   }\n    for i in stride(from: 3, through: Int(sqrt(Double(n))), by: 2) {\n\
    \        while n%i == 0 {\n            maxPrime = i\n            n /= i\n    \
    \    }\n    }\n    if n > 2 {\n        maxPrime = n\n    }\n    return maxPrime",
  "  let (factors, _) = prime_factors(n)\n  return factors.last!", "    var m = n\n\
    \    var p = 2\n    while p * p <= m {\n        if m % p == 0 {\n            m\
    \ /= p\n        } else {\n            p += 1\n        }\n    }\n    return m",
  "    var factors = [Int]()\n    var m = n\n    var i = 2\n    while i * i <= m {\n\
    \        if m % i == 0 {\n            m /= i\n            factors.append(i)\n\
    \        } else {\n            i += 1\n        }\n    }\n    if m > 1 {\n    \
    \    factors.append(m)\n    }\n    return factors.last!", "    var i = 2\n   \
    \ var current_largest = 0\n    while i < n / 2 {\n        if n % i == 0 {\n  \
    \          current_largest = largest_prime_factor(n / i)\n            break\n\
    \        }\n        i += 1\n    }\n    return i > current_largest ? i : current_largest",
  "  // 2 is the only even prime number\n  if n % 2 == 0 {\n    return largest_prime_factor(n\
    \ / 2)\n  }\n  for f in stride(from: 3, through: Int(sqrt(Double(n))), by: 2)\
    \ {\n    if n % f == 0 {\n      return largest_prime_factor(n / f)\n    }\n  }\n\
    \  return n", "    for i in (2...(n/2)).reverse() {\n        if n % i == 0 &&\
    \ is_prime(i) {\n            return i\n        }\n    }\n    return n", "    var\
    \ prime_factor = 1\n    var d = 2\n    while n > 1 {\n        while n % d == 0\
    \ {\n            prime_factor = d\n            n /= d\n        }\n        d +=\
    \ 1\n    }\n    return prime_factor", "    var m = 2\n    var n = n\n    while\
    \ n > 1 {\n        if n % m == 0 {\n            n /= m\n        } else {\n   \
    \         m += 1\n        }\n    }\n    return m", "    // i is the potential\
    \ prime number\n    var i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n\
    \            // Recursively find the largest prime factor of i\n            return\
    \ largest_prime_factor(n: i);\n        }\n        i += 1;\n    }\n    return n;",
  "  var factor = 2\n  var largest_factor = 1\n  var p = n\n  while p > 1 {\n    if\
    \ p % factor == 0 {\n      largest_factor = factor\n      p /= factor\n    } else\
    \ {\n      factor += 1\n    }\n  }\n  return largest_factor", "  var factor =\
    \ 2\n  var n = n\n  while n != 1 {\n    if n % factor == 0 {\n      n /= factor\n\
    \    } else {\n      factor += 1\n    }\n  }\n  return factor", "    var a = 2\n\
    \    var b = n\n    while b > a {\n        if b % a == 0 {\n            b /= a\n\
    \        } else {\n            a += 1\n        }\n    }\n    return a", "    let\
    \ x = sqrt(Double(n))\n    var p = Int(x)\n    var q = 0\n    while q == 0 {\n\
    \        p = p - 1\n        if p == 1 {\n            break\n        }\n      \
    \  q = prime_factor(n, p)\n    }\n    return p", "  var prime_factors = prime_factors_of(n)\n\
    \  return prime_factors[prime_factors.count - 1]", "  var factor = 2\n  var n\
    \ = n\n  while n > 1 {\n    if n % factor == 0 {\n      n /= factor\n    } else\
    \ {\n      factor += 1\n    }\n  }\n  return factor", "    var factor = 2\n  \
    \  var num = n\n    while num > 1 {\n        if num % factor == 0 {\n        \
    \    num /= factor\n        } else {\n            factor += 1\n        }\n   \
    \ }\n    return factor", "    var largest_prime_factor = 1\n    var k = 2\n  \
    \  while k * k <= n {\n        while n % k == 0 {\n            largest_prime_factor\
    \ = k\n            n /= k\n        }\n        k += 1\n    }\n    if n > 1 {\n\
    \        largest_prime_factor = n\n    }\n    return largest_prime_factor"]
stop_tokens:
- "\n}"
