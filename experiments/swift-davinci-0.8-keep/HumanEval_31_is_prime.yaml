name: HumanEval_31_is_prime
language: swift
prompt: "\n/// Return true if a given number is prime, and false otherwise.\n/// >>>\
  \ is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
  /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n///\
  \ >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n: Int)\
  \ -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n:\
  \ 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
  assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
  \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
  assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
  \ 77) == false)\nassert(is_prime(n: 255379) == false)"
completions: ["    if n < 2 {\n        return false\n    } else if n < 4 {\n     \
    \   return true\n    } else if n % 2 == 0 {\n        return false\n    } else\
    \ if n < 9 {\n        return true\n    } else if n % 3 == 0 {\n        return\
    \ false\n    } else {\n        let sqrt_n = Int(floor(sqrt(Double(n))))\n    \
    \    var f = 5\n        while f <= sqrt_n {\n            if n % f == 0 {\n   \
    \             return false\n            }\n            if n % (f + 2) == 0 {\n\
    \                return false\n            }\n            f += 6\n        }\n\
    \        return true\n    }", "    var prime = true\n    if n % 2 == 0 {\n   \
    \     prime = false\n    }\n    for i in (3..<n).filter({ $0 % 2 != 0 }) {\n \
    \       if n % i == 0 {\n            prime = false\n        }\n    }\n    return\
    \ prime", "    if n < 2 {\n        return false\n    }\n    var i = 2\n    while\
    \ i < n {\n        if n % i == 0 {\n            return false\n        }\n    \
    \    i += 1\n    }\n    return true", '    return n > 1 && !contains(2..<n, {n
    % $0 == 0})', "    if n == 1 { return false }\n    if n == 2 { return true }\n\
    \    var x = 2\n    while x < n {\n        if n % x == 0 {\n            return\
    \ false\n        }\n        x += 1\n    }\n    return true", "    // Assume that\
    \ we have a function is_prime_helper(n: Int, i: Int) -> Bool\n    // that takes\
    \ two Int's as input, where n is the number we are testing\n    // and i is the\
    \ candidate divisor to check. We then return true if i\n    // divides evenly\
    \ into n and false otherwise.\n    func is_prime_helper(n: Int, i: Int) -> Bool\
    \ {\n        if i > n / 2 {\n            return true\n        } else if n % i\
    \ == 0 {\n            return false\n        } else {\n            return is_prime_helper(n,\
    \ i + 1)\n        }\n    }\n    return is_prime_helper(n, 2)", '    return false',
  "    if n < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    for i in stride(from:\
    \ 3, through: sqrt(Float(n)), by: 2) {\n        if n % Int(i) == 0 {\n       \
    \     return false\n        }\n    }\n    return true", '    return false', " \
    \   if n < 2 {\n        return false\n    }\n    else if n == 2 {\n        return\
    \ true\n    }\n    else if n % 2 == 0 {\n        return false\n    }\n    else\
    \ {\n        var i = 3\n        while i <= n {\n            if n % i == 0 {\n\
    \                return false\n            }\n            i += 2\n        }\n\
    \        return true\n    }", "    let upper_bound = Int(sqrt(Double(n)))\n  \
    \  var i = 2\n    while i <= upper_bound {\n        if n % i == 0 {\n        \
    \    return false\n        }\n        i += 1\n    }\n    return true", "    if\
    \ n == 1 {\n        return false\n    } else if n <= 3 {\n        return true\n\
    \    } else if n % 2 == 0 || n % 3 == 0 {\n        return false\n    } else {\n\
    \        for i in stride(from: 5, through: n - 1, by: 6) {\n            if n %\
    \ i == 0 || n % (i + 2) == 0 {\n                return false\n            }\n\
    \        }\n        return true\n    }", "    for i in 2...n-1 {\n        if n\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true", "\t\
    if n <= 1 {\n\t\treturn false\n\t}\n\tvar div = 2\n\twhile div < n {\n\t\tif n\
    \ % div == 0 {\n\t\t\treturn false\n\t\t}\n\t\tdiv += 1\n\t}\n\treturn true",
  "    let sqrt_n = sqrt(Double(n))\n    if n == 1 {\n        return false\n    }\n\
    \    for i in 2...Int(sqrt_n) {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true", "    var result = true\n    if n != 2 {\n\
    \        if n == 1 || n % 2 == 0 {\n            result = false\n        } else\
    \ {\n            var i = 3\n            while i * i <= n {\n                if\
    \ n % i == 0 {\n                    result = false\n                    break\n\
    \                }\n                i += 2\n            }\n        }\n    }\n\
    \    return result", '    return Int(n).isPrime()', "    if n == 1 {\n       \
    \ return false\n    }\n    else if n == 2 {\n        return true\n    }\n    else\
    \ {\n        for i in 2...n - 1 {\n            if n % i == 0 {\n             \
    \   return false\n            }\n        }\n        return true\n    }", "   \
    \ let upper_bound = Int(n**0.5)\n    for i in 2...upper_bound {\n        if n\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true", " \
    \ var flag: Bool = true\n  var i: Int = 2\n  while flag && i < n {\n    if n %\
    \ i == 0 {\n      flag = false\n    }\n    i = i + 1\n  }\n  return flag"]
stop_tokens:
- "\n}"
