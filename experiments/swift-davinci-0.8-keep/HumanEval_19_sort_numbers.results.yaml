language: swift
name: HumanEval_19_sort_numbers
results:
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    let numberals = [\"zero\", \"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\"]\n    var num_int = [Int]()\n    for item in numbers.split(separator:\
    \ \" \") {\n        num_int.append(numberals.firstIndex(of: String(item))!)\n\
    \    }\n    let sorted_int = num_int.sorted()\n    var sorted_numberals = [String]()\n\
    \    for item in sorted_int {\n        sorted_numberals.append(numberals[item])\n\
    \    }\n    let sorted_string = sorted_numberals.joined(separator: \" \")\n  \
    \  return sorted_string\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013456
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    let splitNumbers = numbers.components(separatedBy:\
    \ \" \")\n    let sortedNumbers = splitNumbers.sorted(by: <)\n    let stringNumbers\
    \ = sortedNumbers.joined(separator: \" \")\n    return stringNumbers\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpflf1nm1t.swift:8:32: error: value of type 'String' has no member\
    \ 'components'\n    let splitNumbers = numbers.components(separatedBy: \" \")\n\
    \                       ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013456
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    let options = [\n        \"zero\"\
    : 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n      \
    \  \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\"\
    : 7,\n        \"eight\": 8,\n        \"nine\": 9\n    ]\n    let values = numbers.components(separatedBy:\
    \ \" \").map { options[$0] }\n    let sorted_values = values.sorted()\n    return\
    \ sorted_values.map { options.key(for: $0)! }.joined(separator: \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmplyi7fe8_.swift:20:26: error: value of type 'String' has no member\
    \ 'components'\n    let values = numbers.components(separatedBy: \" \").map {\
    \ options[$0] }\n                 ~~~~~~~ ^~~~~~~~~~\n/tmp/tmplyi7fe8_.swift:22:40:\
    \ error: value of type '[String : Int]' has no member 'key'\n    return sorted_values.map\
    \ { options.key(for: $0)! }.joined(separator: \" \")\n                       \
    \        ~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660013456
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    let arrayOfStrings = numbers.split\
    \ { $0 == \" \" }.map(String.init)\n    let arrayOfNumbers = arrayOfStrings.map\
    \ { Int(getDigitFromWord(word: $0)) }\n    let sortedNumbers = arrayOfNumbers.sorted()\n\
    \    let sortedWords = sortedNumbers.map { getWordFromDigit(digit: $0) }\n   \
    \ return sortedWords.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp43gs71bx.swift:9:51: error: cannot find 'getDigitFromWord' in scope\n\
    \    let arrayOfNumbers = arrayOfStrings.map { Int(getDigitFromWord(word: $0))\
    \ }\n                                                  ^~~~~~~~~~~~~~~~\n/tmp/tmp43gs71bx.swift:11:43:\
    \ error: cannot find 'getWordFromDigit' in scope\n    let sortedWords = sortedNumbers.map\
    \ { getWordFromDigit(digit: $0) }\n                                          ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013456
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    \n    let numbers = numbers.split(separator:\
    \ \" \")\n    var strNumbers: [String] = []\n    var numNumbers: [Int] = []\n\
    \    \n    for number in numbers {\n        switch number {\n        case \"zero\"\
    :\n            strNumbers.append(\"zero\")\n            numNumbers.append(0)\n\
    \        case \"one\":\n            strNumbers.append(\"one\")\n            numNumbers.append(1)\n\
    \        case \"two\":\n            strNumbers.append(\"two\")\n            numNumbers.append(2)\n\
    \        case \"three\":\n            strNumbers.append(\"three\")\n         \
    \   numNumbers.append(3)\n        case \"four\":\n            strNumbers.append(\"\
    four\")\n            numNumbers.append(4)\n        case \"five\":\n          \
    \  strNumbers.append(\"five\")\n            numNumbers.append(5)\n        case\
    \ \"six\":\n            strNumbers.append(\"six\")\n            numNumbers.append(6)\n\
    \        case \"seven\":\n            strNumbers.append(\"seven\")\n         \
    \   numNumbers.append(7)\n        case \"eight\":\n            strNumbers.append(\"\
    eight\")\n            numNumbers.append(8)\n        case \"nine\":\n         \
    \   strNumbers.append(\"nine\")\n            numNumbers.append(9)\n        default:\n\
    \            print(\"Invalid\")\n        }\n    }\n    \n    numNumbers.sort()\n\
    \    var output = \"\"\n    \n    for number in numNumbers {\n        switch number\
    \ {\n        case 0:\n            output += \"zero \"\n        case 1:\n     \
    \       output += \"one \"\n        case 2:\n            output += \"two \"\n\
    \        case 3:\n            output += \"three \"\n        case 4:\n        \
    \    output += \"four \"\n        case 5:\n            output += \"five \"\n \
    \       case 6:\n            output += \"six \"\n        case 7:\n           \
    \ output += \"seven \"\n        case 8:\n            output += \"eight \"\n  \
    \      case 9:\n            output += \"nine \"\n        default:\n          \
    \  print(\"Invalid\")\n        }\n    }\n    \n    return output\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp2d_b28my/tmp2d_b28my.swift:97: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf19864c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf1955bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf1955b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf1955a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2d_b28my                        0x0000562bddb4ec35 <unavailable> + 7221

    5    libc.so.6                          0x00002acf19a50460 __libc_start_main +
    245

    6    tmp2d_b28my                        0x0000562bddb4e789 <unavailable> + 6025

    '
  stdout: ''
  timestamp: 1660013457
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    let nums = numbers.split(separator:\
    \ \" \")\n    var numbers = nums.map { Int(number_to_numeral($0)) }\n    numbers.sort()\n\
    \    let result = numbers.map { numeral_to_number(String(format: \"%d\", $0))\
    \ }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp9cvrg50h.swift:9:34: error: cannot find 'number_to_numeral' in\
    \ scope\n    var numbers = nums.map { Int(number_to_numeral($0)) }\n         \
    \                        ^~~~~~~~~~~~~~~~~\n/tmp/tmp9cvrg50h.swift:11:32: error:\
    \ cannot find 'numeral_to_number' in scope\n    let result = numbers.map { numeral_to_number(String(format:\
    \ \"%d\", $0)) }\n                               ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013456
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    let number_dict = [\n       \
    \ \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n\
    \        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\"\
    : 7,\n        \"eight\": 8,\n        \"nine\": 9\n    ]\n    var string_list =\
    \ numbers.components(separatedBy: \" \")\n    var num_list = [Int]()\n    for\
    \ string in string_list {\n        num_list.append(number_dict[string]!)\n   \
    \ }\n    num_list.sort()\n    var new_string_list = [String]()\n    for num in\
    \ num_list {\n        let found = number_dict.first(where: { $0.value == num })!\n\
    \        new_string_list.append(found.key)\n    }\n    return new_string_list.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp8wc21hn0.swift:20:31: error: value of type 'String' has no member\
    \ 'components'\n    var string_list = numbers.components(separatedBy: \" \")\n\
    \                      ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013456
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    // Your code here\n    let numberArray\
    \ = numbers.split(separator: \" \")\n    let numberArrayInt: [Int] = numberArray.map\
    \ {return convertStringToInt(string: String($0))}\n    let sortedNumberArrayInt\
    \ = numberArrayInt.sorted()\n    let sortedNumberArray = sortedNumberArrayInt.map\
    \ {return convertIntToString(number: $0)}\n    let result = sortedNumberArray.joined(separator:\
    \ \" \")\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpu4vddaao.swift:10:57: error: cannot find 'convertStringToInt' in\
    \ scope\n    let numberArrayInt: [Int] = numberArray.map {return convertStringToInt(string:\
    \ String($0))}\n                                                        ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpu4vddaao.swift:12:62: error: cannot find 'convertIntToString' in scope\n\
    \    let sortedNumberArray = sortedNumberArrayInt.map {return convertIntToString(number:\
    \ $0)}\n                                                             ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013456
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numberStrings = numbers.components(separatedBy:\
    \ \" \")\n    var numbers = [Int]()\n    for s in numberStrings {\n        numbers.append(number_to_number(s))\n\
    \    }\n    numbers.sort()\n    for i in 0..<numbers.count {\n        numberStrings[i]\
    \ = number_to_string(numbers[i])\n    }\n    return numberStrings.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpp7herkaa.swift:8:33: error: value of type 'String' has no member\
    \ 'components'\n    var numberStrings = numbers.components(separatedBy: \" \"\
    )\n                        ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpp7herkaa.swift:15:28: error:\
    \ cannot find 'number_to_string' in scope\n        numberStrings[i] = number_to_string(numbers[i])\n\
    \                           ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013456
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    let numberDict = [\"zero\": 0,\
    \ \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6,\
    \ \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    var numbersSet = numbers.components(separatedBy:\
    \ \" \")\n    numbersSet.sort { (str1, str2) -> Bool in\n        let num1 = numberDict[str1]\n\
    \        let num2 = numberDict[str2]\n        return num1! < num2!\n    }\n  \
    \  return numbersSet.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp2p6_koy7.swift:9:30: error: value of type 'String' has no member\
    \ 'components'\n    var numbersSet = numbers.components(separatedBy: \" \")\n\
    \                     ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013456
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbers = numbers.split(separator:\
    \ \" \")\n    numbers.sort()\n    return numbers.joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmp3yjmj9js/tmp3yjmj9js.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7330b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba732dabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba732dab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba732daa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3yjmj9js                        0x0000561502117952 <unavailable> + 6482

    5    libc.so.6                          0x00002ba7332a0460 __libc_start_main +
    245

    6    tmp3yjmj9js                        0x0000561502117389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013456
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    let sorted = numbers.components(separatedBy:\
    \ \" \").sorted {\n        a, b in\n        switch a {\n        case \"zero\"\
    :\n            return true\n        case \"one\":\n            return b != \"\
    zero\"\n        case \"two\":\n            return b != \"zero\" && b != \"one\"\
    \n        case \"three\":\n            return b != \"zero\" && b != \"one\" &&\
    \ b != \"two\"\n        case \"four\":\n            return b != \"zero\" && b\
    \ != \"one\" && b != \"two\" && b != \"three\"\n        case \"five\":\n     \
    \       return b != \"zero\" && b != \"one\" && b != \"two\" && b != \"three\"\
    \ && b != \"four\"\n        case \"six\":\n            return b != \"zero\" &&\
    \ b != \"one\" && b != \"two\" && b != \"three\" && b != \"four\" && b != \"five\"\
    \n        case \"seven\":\n            return b != \"zero\" && b != \"one\" &&\
    \ b != \"two\" && b != \"three\" && b != \"four\" && b != \"five\" && b != \"\
    six\"\n        case \"eight\":\n            return b != \"zero\" && b != \"one\"\
    \ && b != \"two\" && b != \"three\" && b != \"four\" && b != \"five\" && b !=\
    \ \"six\" && b != \"seven\"\n        case \"nine\":\n            return b != \"\
    zero\" && b != \"one\" && b != \"two\" && b != \"three\" && b != \"four\" && b\
    \ != \"five\" && b != \"six\" && b != \"seven\" && b != \"eight\"\n        default:\n\
    \            return false\n        }\n    }\n    return sorted.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpl2p1e58c.swift:8:26: error: value of type 'String' has no member\
    \ 'components'\n    let sorted = numbers.components(separatedBy: \" \").sorted\
    \ {\n                 ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013456
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    let num_dict: [String: Int] =\
    \ [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5,\
    \ \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numbersArray =\
    \ numbers.components(separatedBy: \" \")\n    let numbersInt = numbersArray.map\
    \ { num_dict[$0] }\n    let sorted = numbersInt.sorted()\n    let sortedString\
    \ = sorted.map { num_dict.first(where: { $0.value == $1 })?.key }\n    return\
    \ sortedString.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpl1ha9pah.swift:9:32: error: value of type 'String' has no member\
    \ 'components'\n    let numbersArray = numbers.components(separatedBy: \" \")\n\
    \                       ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpl1ha9pah.swift:12:64: error:\
    \ value of type 'String' has no member 'value'\n    let sortedString = sorted.map\
    \ { num_dict.first(where: { $0.value == $1 })?.key }\n                       \
    \                                     ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013456
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    // parse the string into an array\
    \ of numbers\n    let numArray = numbers.components(separatedBy: \" \")\n    //\
    \ create a dictionary mapping string names to integer values\n    let mapping\
    \ = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    // sort the parsed\
    \ array of numbers\n    let sortedArray = numArray.sorted(by: {mapping[$0]! <\
    \ mapping[$1]!})\n    // return the string of sorted numbers\n    return sortedArray.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpxw_pexoq.swift:9:28: error: value of type 'String' has no member\
    \ 'components'\n    let numArray = numbers.components(separatedBy: \" \")\n  \
    \                 ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013456
- exit_code: -4
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    let numWords = [\"zero\", \"\
    one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\
    \ \"nine\"]\n    let wordToNum = [String: Int]()\n    let array = numbers.split(separator:\
    \ \" \")\n    let sortedArray = numbers.split(separator: \" \").sorted(by: { numWords.firstIndex(of:\
    \ String($0))! < numWords.firstIndex(of: String($1))!})\n    var result = \"\"\
    \n    for word in sortedArray {\n        result += \" \\(word)\"\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: Exception
  stderr: 'tmpjjza6ych/tmpjjza6ych.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdffddec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdffad5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdffad5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdffad47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjza6ych                        0x0000560b59f87e35 <unavailable> + 7733

    5    libc.so.6                          0x00002afdfffca460 __libc_start_main +
    245

    6    tmpjjza6ych                        0x0000560b59f87989 <unavailable> + 6537

    '
  stdout: ''
  timestamp: 1660013456
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    let numbersByString = [\n   \
    \     \"zero\":0,\n        \"one\":1,\n        \"two\":2,\n        \"three\":3,\n\
    \        \"four\":4,\n        \"five\":5,\n        \"six\":6,\n        \"seven\"\
    :7,\n        \"eight\":8,\n        \"nine\":9,\n    ]\n    let numbersString =\
    \ numbers.split(separator: \" \")\n    let numbersInt = numbersString.map{Int(numbersByString[String($0)]!)}\n\
    \    let sortNumbersInt = numbersInt.sorted()\n    let sortNumbersString = sortNumbersInt.map{numbersByString.first{$0.value\
    \ == $1}!.key}\n    return sortNumbersString.joined(separator: \" \")\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp7qhwl_lq.swift:23:47: error: contextual type for closure argument\
    \ list expects 1 argument, which cannot be implicitly ignored\n    let sortNumbersString\
    \ = sortNumbersInt.map{numbersByString.first{$0.value == $1}!.key}\n         \
    \                                     ^\n                                    \
    \           _ in \n/tmp/tmp7qhwl_lq.swift:23:73: error: value of type 'String'\
    \ has no member 'value'\n    let sortNumbersString = sortNumbersInt.map{numbersByString.first{$0.value\
    \ == $1}!.key}\n                                                             \
    \        ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660013456
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    let mapped: [String] = numbers.components(separatedBy:\
    \ \" \").map({map_number($0)})\n    let sorted: [String] = mapped.sorted(by: {$0\
    \ < $1})\n    return sorted.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpfvox3hvx.swift:8:70: error: cannot find 'map_number' in scope\n\
    \    let mapped: [String] = numbers.components(separatedBy: \" \").map({map_number($0)})\n\
    \                                                                     ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013456
- exit_code: 0
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    let numbersDict = [\"zero\":\
    \ 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\":\
    \ 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let numbersArray = numbers.split(separator:\
    \ \" \")\n    let sortedArray = numbersArray.sorted {\n        numbersDict[String($0)]!\
    \ < numbersDict[String($1)]!\n    }\n    let result = sortedArray.joined(separator:\
    \ \" \")\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_numbers(numbers:\
    \ \"\") == \"\")\nassert(sort_numbers(numbers: \"three\") == \"three\")\nassert(sort_numbers(numbers:\
    \ \"three five nine\") == \"three five nine\")\nassert(sort_numbers(numbers: \"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013456
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numbersArray = numbers.components(separatedBy:\
    \ \" \")\n    var dictionary = [String: Int]()\n    dictionary[\"zero\"] = 0\n\
    \    dictionary[\"one\"] = 1\n    dictionary[\"two\"] = 2\n    dictionary[\"three\"\
    ] = 3\n    dictionary[\"four\"] = 4\n    dictionary[\"five\"] = 5\n    dictionary[\"\
    six\"] = 6\n    dictionary[\"seven\"] = 7\n    dictionary[\"eight\"] = 8\n   \
    \ dictionary[\"nine\"] = 9\n    var newNumbers = [Int]()\n    for number in numbersArray\
    \ {\n        newNumbers.append(dictionary[number]!)\n    }\n    newNumbers.sort()\n\
    \    for (index, element) in newNumbers.enumerated() {\n        newNumbers[index]\
    \ = element\n    }\n    var output = \"\"\n    for number in newNumbers {\n  \
    \      output += \"\\(dictionary.first(where: { $0.value == number })?.key ??\
    \ \"\") \"\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers: \"three\"\
    ) == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") == \"three\
    \ five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers: \"six\
    \ five four three two one zero\") == \"zero one two three four five six\")"
  status: SyntaxError
  stderr: "/tmp/tmpumvy8c0x.swift:8:32: error: value of type 'String' has no member\
    \ 'components'\n    var numbersArray = numbers.components(separatedBy: \" \")\n\
    \                       ~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013456
- exit_code: 1
  program: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest\
    \ to largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc\
    \ sort_numbers(numbers: String) -> String {\n    var numList = numbers.components(separatedBy:\
    \ \" \")\n    numList.sort(by: {(a: String, b: String) -> Bool in\n        let\
    \ aInt = str_to_int(str: a)\n        let bInt = str_to_int(str: b)\n        return\
    \ aInt < bInt\n    })\n    return numList.joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
    \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\")\
    \ == \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
    \ \"six five four three two one zero\") == \"zero one two three four five six\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpg1y985az.swift:8:27: error: value of type 'String' has no member\
    \ 'components'\n    var numList = numbers.components(separatedBy: \" \")\n   \
    \               ~~~~~~~ ^~~~~~~~~~\n/tmp/tmpg1y985az.swift:10:20: error: cannot\
    \ find 'str_to_int' in scope\n        let aInt = str_to_int(str: a)\n        \
    \           ^~~~~~~~~~\n/tmp/tmpg1y985az.swift:11:20: error: cannot find 'str_to_int'\
    \ in scope\n        let bInt = str_to_int(str: b)\n                   ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013456
