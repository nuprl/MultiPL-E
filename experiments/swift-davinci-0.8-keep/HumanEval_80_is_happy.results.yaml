language: swift
name: HumanEval_80_is_happy
results:
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let s = s.characters.map {String($0)}\n    guard s.count >= 3\
    \ else {\n        return false\n    }\n    for i in 0..<s.count - 2 {\n      \
    \  let sss = [s[i], s[i + 1], s[i + 2]]\n        if sss[0] == sss[1] || sss[0]\
    \ == sss[2] || sss[1] == sss[2] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsi8mzpcg.swift:13:15: error: 'characters' is unavailable: Please\
    \ use String directly\n    let s = s.characters.map {String($0)}\n           \
    \   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014103
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpw2xw8p4p/tmpw2xw8p4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b50b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b4dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b4dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b4dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2xw8p4p                        0x0000562ed383e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba6b52a1460 __libc_start_main +
    245

    6    tmpw2xw8p4p                        0x0000562ed383dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n        let\
    \ index2 = s.index(s.startIndex, offsetBy: i + 1)\n        let index3 = s.index(s.startIndex,\
    \ offsetBy: i + 2)\n        if s[index1] == s[index2] || s[index1] == s[index3]\
    \ || s[index2] == s[index3] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let chars = Array(s)\n    let length = chars.count\n    if length\
    \ < 3 {\n        return false\n    }\n    for index in 0...length - 3 {\n    \
    \    if chars[index] == chars[index + 1] || chars[index] == chars[index + 2] ||\
    \ chars[index + 1] == chars[index + 2] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014103
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var s = s.map { String($0) }\n    while s.count >= 3 {\n    \
    \    let letter = s.remove(at: 0)\n        let next = s.remove(at: 0)\n      \
    \  let last = s.remove(at: 0)\n        if letter == next || next == last || letter\
    \ == last {\n            return false\n        }\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpvgl_jzwy/tmpvgl_jzwy.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3946165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3945e5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3945e5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3945e5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvgl_jzwy                        0x00005567163604dd <unavailable> + 5341

    5    libc.so.6                          0x00002b3946351460 __libc_start_main +
    245

    6    tmpvgl_jzwy                        0x0000556716360169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014103
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    return !(1..<s.count\
    \ - 1).map { s.index(s.startIndex, offsetBy: $0) }.contains { i in\n        s[s.index(i,\
    \ offsetBy: -1)] == s[i] || s[i] == s[s.index(i, offsetBy: 1)]\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpb0juucas/tmpb0juucas.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5e61a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5e5ea0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5e5ea0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5e5e9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb0juucas                        0x00005621b0734ba8 <unavailable> + 7080

    5    libc.so.6                          0x00002ba5e6395460 __libc_start_main +
    245

    6    tmpb0juucas                        0x00005621b0734369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660014104
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0...s.count\
    \ - 3 {\n        if String(s[s.index(s.startIndex, offsetBy: i)]) == String(s[s.index(s.startIndex,\
    \ offsetBy: i + 1)]) {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp4jw2l1j9/tmp4jw2l1j9.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0151d3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0151a35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0151a35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0151a347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4jw2l1j9                        0x00005638817ce94f <unavailable> + 6479

    5    libc.so.6                          0x00002b0151f2a460 __libc_start_main +
    245

    6    tmp4jw2l1j9                        0x00005638817ce289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660014103
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let s = s.lowercased()\n    if s.count < 3 {\n        return\
    \ false\n    }\n    var previous1 = \"\"\n    var previous2 = \"\"\n    for character\
    \ in s {\n        if character == previous1 || character == previous2 {\n    \
    \        return false\n        }\n        previous2 = previous1\n        previous1\
    \ = String(character)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmp41hksblt.swift:20:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == previous1\
    \ || character == previous2 {\n           ~~~~~~~~~ ^  ~~~~~~~~~\n/tmp/tmp41hksblt.swift:20:22:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        if character == previous1\
    \ || character == previous2 {\n                     ^\n/tmp/tmp41hksblt.swift:20:48:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        if character == previous1 || character == previous2 {\n\
    \                                     ~~~~~~~~~ ^  ~~~~~~~~~\n/tmp/tmp41hksblt.swift:20:48:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        if character == previous1\
    \ || character == previous2 {\n                                              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014103
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n  let array = Array(s)\n  if array.count < 3 {\n    return false\n\
    \  }\n  if array.count == 3 {\n    return array[0] != array[1] && array[1] !=\
    \ array[2] && array[0] != array[2]\n  }\n  for i in 0..<array.count - 2 {\n  \
    \  if array[i] == array[i + 1] || array[i + 1] == array[i + 2] || array[i] ==\
    \ array[i + 2] {\n      return false\n    }\n  }\n  return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014103
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var chars\
    \ = [Character]()\n    for i in 0..<s.count {\n        chars.append(s[i])\n  \
    \  }\n    if chars.count == 3 {\n        if chars[0] == chars[1] || chars[1] ==\
    \ chars[2] || chars[0] == chars[2] {\n            return false\n        }\n  \
    \      return true\n    }\n    for i in 0..<chars.count - 2 {\n        if chars[i]\
    \ == chars[i + 1] || chars[i + 1] == chars[i + 2] || chars[i] == chars[i + 2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmph5vayljf.swift:18:22: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        chars.append(s[i])\n\
    \                     ^~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014103
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let subStr = s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex,\
    \ offsetBy: i+3)]\n        if Set(subStr).count < 3 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014103
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 2..<s.count\
    \ {\n        if s[s.index(s.startIndex, offsetBy: i)] == s[s.index(s.startIndex,\
    \ offsetBy: i - 1)] &&\n            s[s.index(s.startIndex, offsetBy: i)] == s[s.index(s.startIndex,\
    \ offsetBy: i - 2)] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpn2kezav9/tmpn2kezav9.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af98fc65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af98f95cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af98f95c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af98f95b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn2kezav9                        0x000055a28633c791 <unavailable> + 6033

    5    libc.so.6                          0x00002af98fe51460 __libc_start_main +
    245

    6    tmpn2kezav9                        0x000055a28633c239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660014103
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var (last1,\
    \ last2, last3) = (s.removeFirst(), s.removeFirst(), s.removeFirst())\n    for\
    \ _ in 1..<s.count {\n        let next = s.removeFirst()\n        if next == last1\
    \ || next == last2 || next == last3 {\n            return false\n        }\n \
    \       (last1, last2, last3) = (last2, last3, next)\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr0654czs.swift:16:36: error: cannot use mutating member on immutable\
    \ value: 's' is a 'let' constant\n    var (last1, last2, last3) = (s.removeFirst(),\
    \ s.removeFirst(), s.removeFirst())\n                                 ~ ^\n/tmp/tmpr0654czs.swift:16:53:\
    \ error: cannot use mutating member on immutable value: 's' is a 'let' constant\n\
    \    var (last1, last2, last3) = (s.removeFirst(), s.removeFirst(), s.removeFirst())\n\
    \                                                  ~ ^\n/tmp/tmpr0654czs.swift:16:70:\
    \ error: cannot use mutating member on immutable value: 's' is a 'let' constant\n\
    \    var (last1, last2, last3) = (s.removeFirst(), s.removeFirst(), s.removeFirst())\n\
    \                                                                   ~ ^\n/tmp/tmpr0654czs.swift:18:22:\
    \ error: cannot use mutating member on immutable value: 's' is a 'let' constant\n\
    \        let next = s.removeFirst()\n                   ~ ^\n"
  stdout: ''
  timestamp: 1660014104
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var letterTracker\
    \ = [Character : Int]()\n    for char in s {\n        if letterTracker[char] ==\
    \ nil {\n            letterTracker[char] = 1\n        } else {\n            letterTracker[char]!\
    \ += 1\n        }\n    }\n    return !letterTracker.values.contains(where: {$0\
    \ > 1})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpoaev3_r8/tmpoaev3_r8.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8be50ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8be201b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8be201988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8be2007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoaev3_r8                        0x000055a27d9d3b15 <unavailable> + 6933

    5    libc.so.6                          0x00002ae8be6f6460 __libc_start_main +
    245

    6    tmpoaev3_r8                        0x000055a27d9d3399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660014103
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpw2xw8p4p/tmpw2xw8p4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b50b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b4dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b4dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b4dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2xw8p4p                        0x0000562ed383e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba6b52a1460 __libc_start_main +
    245

    6    tmpw2xw8p4p                        0x0000562ed383dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let isHappy = s.characters.count >= 3 && s.characters.count %\
    \ 3 == 0\n    return isHappy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9dk62jot.swift:13:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    let isHappy = s.characters.count >= 3 && s.characters.count\
    \ % 3 == 0\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9dk62jot.swift:13:48: error: 'characters' is unavailable:\
    \ Please use String directly\n    let isHappy = s.characters.count >= 3 && s.characters.count\
    \ % 3 == 0\n                                               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014103
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n  if s.count < 3 {\n    return false\n  }\n  for i in 0..<s.count\
    \ - 2 {\n    let start = s.index(s.startIndex, offsetBy: i)\n    let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n    let subString = s[start..<end]\n    let distinctArray\
    \ = Array(Set(subString))\n    if distinctArray.count != 3 {\n      return false\n\
    \    }\n  }\n  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014103
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let str = Array(s)\n    if str.count < 3 {\n        return false\n\
    \    }\n    var set = Set<Character>()\n    var i = 0\n    while i < str.count\
    \ - 2 {\n        if set.contains(str[i]) {\n            return false\n       \
    \ }\n        set.insert(str[i])\n        if str[i] == str[i + 1] || str[i] ==\
    \ str[i + 2] || str[i + 1] == str[i + 2] {\n            return false\n       \
    \ }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: Exception
  stderr: 'tmpckx5o5xc/tmpckx5o5xc.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aecfb39fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecfb096b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aecfb096988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aecfb0957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpckx5o5xc                        0x000055a339822a25 <unavailable> + 6693

    5    libc.so.6                          0x00002aecfb58b460 __libc_start_main +
    245

    6    tmpckx5o5xc                        0x000055a3398222a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660014103
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmplj85s64i/tmplj85s64i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0359dbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0359ab2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0359ab2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0359ab17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj85s64i                        0x000055c0cd91325d <unavailable> + 4701

    5    libc.so.6                          0x00002b0359fa7460 __libc_start_main +
    245

    6    tmplj85s64i                        0x000055c0cd912ee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660014103
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let split = Array(s)\n    var happy = true\n    for i in 0..<s.count-2\
    \ {\n        let word = split[i...i+2]\n        if Set(word).count != 3 {\n  \
    \          happy = false\n        }\n    }\n    return happy\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2f1a06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2f16fd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac2f16fd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac2f16fd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac2f16fcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpyoi702uk                        0x0000558fe4923ea5 <unavailable> + 7845

    6    tmpyoi702uk                        0x0000558fe49237b6 <unavailable> + 6070

    7    libc.so.6                          0x00002ac2f1bf2460 __libc_start_main +
    245

    8    tmpyoi702uk                        0x0000558fe49234b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660014103
