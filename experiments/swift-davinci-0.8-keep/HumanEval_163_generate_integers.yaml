name: HumanEval_163_generate_integers
language: swift
prompt: "\n/// Given two positive integers a and b, return the even digits between\
  \ a\n/// and b, in ascending order.\n/// For example:\n/// generate_integers(2,\
  \ 8) => [2, 4, 6, 8]\n/// generate_integers(8, 2) => [2, 4, 6, 8]\n/// generate_integers(10,\
  \ 14) => []\nfunc generate_integers(a: Int, b: Int) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(generate_integers(a: 2, b: 10) == [2, 4,\
  \ 6, 8])\nassert(generate_integers(a: 10, b: 2) == [2, 4, 6, 8])\nassert(generate_integers(a:\
  \ 132, b: 2) == [2, 4, 6, 8])\nassert(generate_integers(a: 17, b: 89) == [] as [Int])"
completions: ["    let min = a < b ? a : b\n    let max = a > b ? a : b\n    var arr\
    \ = [Int]()\n    for i in min...max {\n        if i % 2 == 0 {\n            arr.append(i)\n\
    \        }\n    }\n    return arr", "    let min = min(a, b)\n    let max = max(a,\
    \ b)\n    var result = [Int]()\n    for i in min...max {\n        if i % 2 ==\
    \ 0 {\n            result.append(i)\n        }\n    }\n    return result", " \
    \   let sorted = [a, b].sorted()\n    return (sorted[0]...sorted[1]).filter {\
    \ $0 % 2 == 0 }", "    let min = min(a, b)\n    let max = max(a, b)\n    return\
    \ (min...max).filter { $0 % 2 == 0 }", '    return Array(a...b).filter { $0 %
    2 == 0 }', "    var evens = [Int]()\n    for i in a...b {\n        if i % 2 ==\
    \ 0 {\n            evens.append(i)\n        }\n    }\n    return evens", "   \
    \ let low = min(a, b)\n    let high = max(a, b)\n    var results = [Int]()\n \
    \   if low % 2 == 0 {\n        results.append(low)\n    }\n    let next = low\
    \ + 1\n    if next > high {\n        return results\n    }\n    if next % 2 ==\
    \ 0 {\n        results.append(next)\n    }\n    let next2 = next + 1\n    if next2\
    \ > high {\n        return results\n    }\n    if next2 % 2 == 0 {\n        results.append(next2)\n\
    \    }\n    let next3 = next2 + 1\n    if next3 > high {\n        return results\n\
    \    }\n    if next3 % 2 == 0 {\n        results.append(next3)\n    }\n    let\
    \ next4 = next3 + 1\n    if next4 > high {\n        return results\n    }\n  \
    \  if next4 % 2 == 0 {\n        results.append(next4)\n    }\n    let next5 =\
    \ next4 + 1\n    if next5 > high {\n        return results\n    }\n    if next5\
    \ % 2 == 0 {\n        results.append(next5)\n    }\n    let next6 = next5 + 1\n\
    \    if next6 > high {\n        return results\n    }\n    if next6 % 2 == 0 {\n\
    \        results.append(next6)\n    }\n    let next7 = next6 + 1\n    if next7\
    \ > high {\n        return results\n    }\n    if next7 % 2 == 0 {\n        results.append(next7)\n\
    \    }\n    let next8 = next7 + 1\n    if next8 > high {\n        return results\n\
    \    }\n    if next8 % 2 == 0 {\n        results.append(next8)\n    }\n    let\
    \ next9 = next8 + 1\n    if next9 > high {\n        return results\n    }\n  \
    \  if next9 % 2 == 0 {\n        results.append(next9)\n    }\n    let next10 =\
    \ next9 + 1\n    if next10 > high {\n        return results\n    }\n    if next10\
    \ % 2 == 0 {\n        results.append(next10)", "    if a > b {\n        return\
    \ generate_integers(a: b, b: a)\n    }\n    var result = [Int]()\n    for i in\
    \ a...b {\n        if i % 2 == 0 {\n            result.append(i)\n        }\n\
    \    }\n    return result", "    if a > b {\n        return generate_integers(a:\
    \ b, b: a)\n    }\n    return stride(from: a, through: b, by: 2).map { $0 }",
  "  let low = a < b ? a : b\n  let high = a < b ? b : a\n  var arr = [Int]()\n  for\
    \ i in low...high {\n    if i % 2 == 0 {\n      arr.append(i)\n    }\n  }\n  return\
    \ arr", "    let start = a < b ? a : b\n    let end = a < b ? b : a\n    return\
    \ (start..<end).filter { $0 % 2 == 0 }", "    var a = a, b = b\n    if a > b {\
    \ swap(&a, &b) }\n    let isEven: (Int) -> Bool = { $0 % 2 == 0 }\n    return\
    \ (a...b).filter(isEven)", "  // convert to signed int\n  var start = Int(truncatingIfNeeded:\
    \ a)\n  var end = Int(truncatingIfNeeded: b)\n  // reverse if out of order\n \
    \ if a > b {\n    swap(&start, &end)\n  }\n  // generate range\n  let values =\
    \ start...end\n  // filter out odd values\n  let evens = values.filter({ $0 %\
    \ 2 == 0 })\n  return evens", "    let min = min(a, b)\n    let max = max(a, b)\n\
    \    return (min...max).filter({ $0 % 2 == 0 })", "    let min = Swift.min(a,\
    \ b)\n    let max = Swift.max(a, b)\n    var count = max - min\n    var i = min\n\
    \    var result = [Int]()\n    while count > 0 {\n        if i % 2 == 0 {\n  \
    \          result.append(i)\n        }\n        i += 1\n        count -= 1\n \
    \   }\n    return result", "    var start = min(a, b)\n    var end = max(a, b)\n\
    \    var result = [Int]()\n    if start % 2 != 0 {\n        start += 1\n    }\n\
    \    while start <= end {\n        result.append(start)\n        start += 2\n\
    \    }\n    return result", "    let lowerBound = min(a, b)\n    let upperBound\
    \ = max(a, b)\n    return (lowerBound...upperBound).filter({ $0 % 2 == 0 })",
  '    return Array(stride(from: a, through: b, by: 2))', '  return Array(a ... b).filter
    { $0 % 2 == 0 }', "    let even = [Int](a...b).filter({ $0 % 2 == 0 })\n    return\
    \ even"]
stop_tokens:
- "\n}"
