language: swift
name: HumanEval_51_remove_vowels
results:
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfunc remove_vowels(text: String)\
    \ -> String {\n    var result = \"\"\n    for character in text {\n        switch\
    \ character {\n        case \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\":\n            break\n        default:\n            result.append(character)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824524
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfunc remove_vowels(text: String)\
    \ -> String {\n    return text.filter { !$0.isVowel }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpoe56gmpl.swift:14:30: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isVowel'\n    return text.filter { !$0.isVowel }\n\
    \                          ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfunc remove_vowels(text: String)\
    \ -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"\
    E\", \"I\", \"O\", \"U\"]\n    var filteredText = \"\"\n    for character in text\
    \ {\n        if !vowels.contains(String(character)) {\n            filteredText.append(character)\n\
    \        }\n    }\n    return filteredText\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"\
    abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824524
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfunc remove_vowels(text: String)\
    \ -> String {\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    , \"A\", \"E\", \"I\", \"O\", \"U\"]\n    return String(text.characters.filter{!vowels.contains($0)})\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpzm7t23gl.swift:15:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    return String(text.characters.filter{!vowels.contains($0)})\n\
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1659824524
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfunc remove_vowels(text: String)\
    \ -> String {\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    , \"A\", \"E\", \"I\", \"O\", \"U\"]\n    var str = \"\"\n    for ch in text {\n\
    \        if !vowels.contains(ch) {\n            str.append(ch)\n        }\n  \
    \  }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824524
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfunc remove_vowels(text: String)\
    \ -> String {\n    var new_text = text\n    let vowels = \"aeiou\"\n    for vowel\
    \ in vowels {\n        if let range = new_text.range(of: String(vowel)) {\n  \
    \          new_text.remove(at: range.lowerBound)\n        }\n    }\n    return\
    \ new_text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpib7hw64g.swift:17:33: error: value of type 'String' has no member\
    \ 'range'\n        if let range = new_text.range(of: String(vowel)) {\n      \
    \                 ~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824524
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfunc remove_vowels(text: String)\
    \ -> String {\n    var result: String = \"\"\n    for i in text {\n        if\
    \ i == \"a\" || i == \"A\" || i == \"e\" || i == \"E\" || i == \"i\" || i == \"\
    I\" || i == \"o\" || i == \"O\" || i == \"u\" || i == \"U\" {\n            continue\n\
    \        }\n        result += String(i)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824524
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfunc remove_vowels(text: String)\
    \ -> String {\n    var new_text = text\n    new_text = new_text.replacingOccurrences(of:\
    \ \"a\", with: \"\")\n    new_text = new_text.replacingOccurrences(of: \"A\",\
    \ with: \"\")\n    new_text = new_text.replacingOccurrences(of: \"e\", with: \"\
    \")\n    new_text = new_text.replacingOccurrences(of: \"E\", with: \"\")\n   \
    \ new_text = new_text.replacingOccurrences(of: \"i\", with: \"\")\n    new_text\
    \ = new_text.replacingOccurrences(of: \"I\", with: \"\")\n    new_text = new_text.replacingOccurrences(of:\
    \ \"o\", with: \"\")\n    new_text = new_text.replacingOccurrences(of: \"O\",\
    \ with: \"\")\n    new_text = new_text.replacingOccurrences(of: \"u\", with: \"\
    \")\n    new_text = new_text.replacingOccurrences(of: \"U\", with: \"\")\n   \
    \ return new_text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmperw07qwc.swift:15:25: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    new_text = new_text.replacingOccurrences(of: \"\
    a\", with: \"\")\n               ~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmperw07qwc.swift:16:25:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n    new_text\
    \ = new_text.replacingOccurrences(of: \"A\", with: \"\")\n               ~~~~~~~~\
    \ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmperw07qwc.swift:17:25: error: value of type 'String'\
    \ has no member 'replacingOccurrences'\n    new_text = new_text.replacingOccurrences(of:\
    \ \"e\", with: \"\")\n               ~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmperw07qwc.swift:18:25:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n    new_text\
    \ = new_text.replacingOccurrences(of: \"E\", with: \"\")\n               ~~~~~~~~\
    \ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmperw07qwc.swift:19:25: error: value of type 'String'\
    \ has no member 'replacingOccurrences'\n    new_text = new_text.replacingOccurrences(of:\
    \ \"i\", with: \"\")\n               ~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmperw07qwc.swift:20:25:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n    new_text\
    \ = new_text.replacingOccurrences(of: \"I\", with: \"\")\n               ~~~~~~~~\
    \ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmperw07qwc.swift:21:25: error: value of type 'String'\
    \ has no member 'replacingOccurrences'\n    new_text = new_text.replacingOccurrences(of:\
    \ \"o\", with: \"\")\n               ~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmperw07qwc.swift:22:25:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n    new_text\
    \ = new_text.replacingOccurrences(of: \"O\", with: \"\")\n               ~~~~~~~~\
    \ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmperw07qwc.swift:23:25: error: value of type 'String'\
    \ has no member 'replacingOccurrences'\n    new_text = new_text.replacingOccurrences(of:\
    \ \"u\", with: \"\")\n               ~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmperw07qwc.swift:24:25:\
    \ error: value of type 'String' has no member 'replacingOccurrences'\n    new_text\
    \ = new_text.replacingOccurrences(of: \"U\", with: \"\")\n               ~~~~~~~~\
    \ ^~~~~~~~~"
  stdout: ''
  timestamp: 1659824524
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfunc remove_vowels(text: String)\
    \ -> String {\n    return text.characters.filter{!(vowels.contains($0))}.reduce(\"\
    \",{$0 + String($1)})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpdznqkukw.swift:14:37: error: cannot find 'vowels' in scope\n  \
    \  return text.characters.filter{!(vowels.contains($0))}.reduce(\"\",{$0 + String($1)})\n\
    \                                    ^~~~~~\n"
  stdout: ''
  timestamp: 1659824524
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfunc remove_vowels(text: String)\
    \ -> String {\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    , \"A\", \"E\", \"I\", \"O\", \"U\"]\n    var res_text = \"\"\n    for i in text\
    \ {\n        if !vowels.contains(i) {\n            res_text.append(i)\n      \
    \  }\n    }\n    return res_text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824524
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfunc remove_vowels(text: String)\
    \ -> String {\n    let vowels = \"aeiouAEIOU\"\n    return String(text.filter\
    \ { !vowels.contains($0) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824524
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfunc remove_vowels(text: String)\
    \ -> String {\n    var vowels = \"aeiouAEIOU\"\n    var s = \"\"\n    for c in\
    \ text {\n        if !vowels.contains(c) {\n            s += String(c)\n     \
    \   }\n    }\n    return s\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824524
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfunc remove_vowels(text: String)\
    \ -> String {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"\
    u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    return String(text.characters.filter\
    \ { !vowels.contains($0) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpzijllje_.swift:15:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    return String(text.characters.filter { !vowels.contains($0)\
    \ })\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659824464
- exit_code: -4
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfunc remove_vowels(text: String)\
    \ -> String {\n    let vowels: String = \"aeiou\"\n    var modified_text: String\
    \ = \"\"\n    for character in text {\n        if (!vowels.contains(character))\
    \ {\n            modified_text.append(character)\n        }\n    }\n    return\
    \ modified_text\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: Exception
  stderr: 'tmp_9_hla34/tmp_9_hla34.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab09fa98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab09f78fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab09f78f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab09f78e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9_hla34                        0x000055e701e2696b <unavailable> + 6507

    5    libc.so.6                          0x00002ab09fc84460 __libc_start_main +
    245

    6    tmp_9_hla34                        0x000055e701e26169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824524
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfunc remove_vowels(text: String)\
    \ -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"\
    E\", \"I\", \"O\", \"U\"]\n    var filteredCharacters = [Character]()\n    for\
    \ character in text {\n        if !vowels.contains(String(character)) {\n    \
    \        filteredCharacters.append(character)\n        }\n    }\n    return String(filteredCharacters)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824524
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfunc remove_vowels(text: String)\
    \ -> String {\n    return text.filter {\n        switch $0 {\n        case \"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\":\n        \
    \    return false\n        default:\n            return true\n        }\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824524
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfunc remove_vowels(text: String)\
    \ -> String {\n    let vowels = \"aeiou\"\n    var index = 0\n    var text = text\n\
    \    var result = \"\"\n    while index < text.characters.count {\n        let\
    \ a = text[text.startIndex.advancedBy(index)]\n        if !vowels.containsString(String(a))\
    \ {\n            result += String(a)\n        }\n        index += 1\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(remove_vowels(text:\
    \ \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\nghijklm\") == \"bcdf\\\
    nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"fdcb\")\nassert(remove_vowels(text:\
    \ \"eeeee\") == \"\")\nassert(remove_vowels(text: \"acBAA\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"EcBOO\") == \"cB\")\nassert(remove_vowels(text: \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpyctfa0ux.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    while index < text.characters.count {\n           \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmpyctfa0ux.swift:19:38: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n        let a = text[text.startIndex.advancedBy(index)]\n    \
    \                 ~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpyctfa0ux.swift:20:20: error:\
    \ value of type 'String' has no member 'containsString'\n        if !vowels.containsString(String(a))\
    \ {\n            ~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824524
- exit_code: 1
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfunc remove_vowels(text: String)\
    \ -> String {\n    return text.replacingOccurrences(of: \"[aeiouAEIOU]\", with:\
    \ \"\", options: [.regularExpression])\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: SyntaxError
  stderr: "/tmp/tmpzvisjbp1.swift:14:17: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    return text.replacingOccurrences(of: \"[aeiouAEIOU]\"\
    , with: \"\", options: [.regularExpression])\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzvisjbp1.swift:14:79: error: reference to member 'regularExpression' cannot\
    \ be resolved without a contextual type\n    return text.replacingOccurrences(of:\
    \ \"[aeiouAEIOU]\", with: \"\", options: [.regularExpression])\n             \
    \                                                                 ^\n"
  stdout: ''
  timestamp: 1659824524
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfunc remove_vowels(text: String)\
    \ -> String {\n    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    , \"A\", \"E\", \"I\", \"O\", \"U\"]\n    var result = \"\"\n    for char in text\
    \ {\n        if vowels.contains(char) {\n            continue\n        }\n   \
    \     result.append(char)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text:\
    \ \"abcdef\\nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\"\
    ) == \"fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824524
- exit_code: 0
  program: "\n/// remove_vowels is a function that takes string and returns string\
    \ without vowels.\n/// >>> remove_vowels('')\n/// ''\n/// >>> remove_vowels('abcdef')\n\
    /// 'bcdf'\n/// >>> remove_vowels('aaaaa')\n/// ''\n/// >>> remove_vowels('aaBAA')\n\
    /// 'B'\n/// >>> remove_vowels('zbcd')\n/// 'zbcd'\nfunc remove_vowels(text: String)\
    \ -> String {\n    var result = \"\"\n    for character in text {\n        switch\
    \ character {\n        case \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"\
    I\", \"O\", \"U\":\n            break\n        default:\n            result.append(character)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(remove_vowels(text: \"\") == \"\")\nassert(remove_vowels(text: \"abcdef\\\
    nghijklm\") == \"bcdf\\nghjklm\")\nassert(remove_vowels(text: \"fedcba\") == \"\
    fdcb\")\nassert(remove_vowels(text: \"eeeee\") == \"\")\nassert(remove_vowels(text:\
    \ \"acBAA\") == \"cB\")\nassert(remove_vowels(text: \"EcBOO\") == \"cB\")\nassert(remove_vowels(text:\
    \ \"ybcd\") == \"ybcd\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824524
