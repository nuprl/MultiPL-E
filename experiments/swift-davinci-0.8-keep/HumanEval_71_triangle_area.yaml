name: HumanEval_71_triangle_area
language: swift
prompt: "\n/// Given the lengths of the three sides of a triangle. Return the area\
  \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
  \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
  \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
  /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
  \ Int, b: Int, c: Int) -> Double {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\n\
  assert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8,\
  \ c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
  \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
  \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
  \ 2, b: 2, c: 10) == -1)"
completions: ["    if (a + b > c) && (a + c > b) && (b + c > a) {\n        let s =\
    \ Double((a + b + c)) / 2\n        let area = sqrt(s * (s - Double(a)) * (s -\
    \ Double(b)) * (s - Double(c)))\n        return Double(round(100 * area) / 100)\n\
    \    }\n    return -1", "  // your code here\n  ", "    if a + b > c && a + c\
    \ > b && b + c > a {\n        let p = Double(a + b + c) / 2\n        return (p\
    \ * (p - Double(a)) * (p - Double(b)) * (p - Double(c))).squareRoot()\n    }\n\
    \    return -1", "    let sides = [a, b, c].sorted(by: <)\n    if sides[0] + sides[1]\
    \ > sides[2] {\n        let p = Double(a + b + c) / 2\n        return (p * (p\
    \ - Double(a)) * (p - Double(b)) * (p - Double(c))).squareRoot()\n    }\n    return\
    \ -1", "    // Code here\n    let s: Double = Double((a + b + c)) / 2\n    var\
    \ area: Double = 0\n    if Double(a) < s && Double(b) < s && Double(c) < s {\n\
    \        area = sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n\
    \    } else {\n        area = -1\n    }\n    return Double(area.rounded(toPlaces:\
    \ 2))", "    let sides = [a, b, c].sorted()\n    if sides[0] + sides[1] <= sides[2]\
    \ {\n        return -1\n    }\n    let p = Double(a + b + c) / 2\n    return round(sqrt(p\
    \ * (p - Double(a)) * (p - Double(b)) * (p - Double(c))) * 100) / 100", '    return
    0.0', "  // your code here\n  let dd = [Double(a), Double(b), Double(c)]\n  let\
    \ long = dd.max()!\n  if dd.reduce(0, +) - long > long {\n    let p = (long +\
    \ dd.min()! + dd[2 - dd.index(of: long)! - dd.index(of: dd.min()!)!] ) / 2\n \
    \   return sqrt(p * (p - long) * (p - dd.min()!) * (p - dd[2 - dd.index(of: long)!\
    \ - dd.index(of: dd.min()!)!]))\n  }\n  return -1", '    return a', '    return
    -1', "    let s = Double(a + b + c) / 2\n    let area = sqrt(s * (s - Double(a))\
    \ * (s - Double(b)) * (s - Double(c)))\n    return area >= 0 ? area : -1", '    return
    -1', "    if isTriangle(a: a, b: b, c: c) {\n        let p = Double(a + b + c)\
    \ / 2\n        return sqrt(p * (p - Double(a)) * (p - Double(b)) * (p - Double(c)))\n\
    \    }\n    return -1", "    if (a + b > c) && (a + c > b) && (b + c > a) {\n\
    \        let p = Double(a + b + c) / 2\n        return Double(p * (p - Double(a))\
    \ * (p - Double(b)) * (p - Double(c)))\n    }\n    return -1", "    if a + b >\
    \ c && a + c > b && b + c > a {\n        let s = Double(a + b + c) / 2\n     \
    \   return (s * (s - Double(a)) * (s - Double(b)) * (s - Double(c))).squareRoot()\n\
    \    }\n    return -1", "  let s = Double(a + b + c) / 2\n  let t = s * (s - Double(a))\
    \ * (s - Double(b)) * (s - Double(c))\n  if t < 0 {\n    return -1\n  }\n  return\
    \ sqrt(t)", "    if a + b > c && a + c > b && b + c > a {\n        let s = Double(a\
    \ + b + c) / 2\n        return sqrt(s * (s - Double(a)) * (s - Double(b)) * (s\
    \ - Double(c)))\n    }\n    return -1", "    var result = 0.0\n    if (a + b >\
    \ c) && (a + c > b) && (b + c > a) {\n        let p = Double((a + b + c) / 2)\n\
    \        result = (p * (p - Double(a)) * (p - Double(b)) * (p - Double(c)))\n\
    \        result = Double(result.squareRoot())\n    } else {\n        result =\
    \ -1\n    }\n    return result.rounded(toPlaces: 2)", "    // Implement this function\n\
    \    var result: Double = -1.0\n    var arr: [Int] = [a, b, c]\n    arr.sort()\n\
    \    if arr[0] + arr[1] > arr[2] {\n        let s = Double(arr[0] + arr[1] + arr[2])/2\n\
    \        result = sqrt(s * (s - Double(arr[0])) * (s - Double(arr[1])) * (s -\
    \ Double(arr[2])))\n    }\n    return result", "    let s = Double(a + b + c)\
    \ / 2\n    if a + b > c && a + c > b && b + c > a {\n        return sqrt(s * (s\
    \ - Double(a)) * (s - Double(b)) * (s - Double(c)))\n    }\n    return -1"]
stop_tokens:
- "\n}"
