language: swift
name: HumanEval_110_exchange
results:
- exit_code: 1
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let isOdd = { $0.isOdd }\n    let evens = lst1.filter(isOdd)\n    let\
    \ odds = lst2.filter(isOdd)\n    return evens.count == odds.count ? \"YES\" :\
    \ \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: SyntaxError
  stderr: "/tmp/tmpd671oqw3.swift:14:17: error: unable to infer type of a closure\
    \ parameter '$0' in the current context\n    let isOdd = { $0.isOdd }\n      \
    \          ^\n/tmp/tmpd671oqw3.swift:15:29: error: converting non-escaping value\
    \ to '(Int) throws -> Bool' may allow it to escape\n    let evens = lst1.filter(isOdd)\n\
    \                            ^\n/tmp/tmpd671oqw3.swift:16:28: error: converting\
    \ non-escaping value to '(Int) throws -> Bool' may allow it to escape\n    let\
    \ odds = lst2.filter(isOdd)\n                           ^\n"
  stdout: ''
  timestamp: 1659824759
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n  // your code here\n  return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpyn14r_2r/tmpyn14r_2r.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8bd2011c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8bd1d08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8bd1d08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8bd1d077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyn14r_2r                        0x000055836fc8247d <unavailable> + 5245

    5    libc.so.6                          0x00002b8bd21fd460 __libc_start_main +
    245

    6    tmpyn14r_2r                        0x000055836fc82049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824759
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n  for i in lst1 {\n    if i % 2 != 0 {\n      for j in lst2 {\n        if\
    \ j % 2 == 0 {\n          return \"YES\"\n        }\n      }\n    }\n  }\n  return\
    \ \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpl38qkmma/tmpl38qkmma.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4db11a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4db0ea0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4db0ea0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4db0e9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl38qkmma                        0x000055612eb5f7ef <unavailable> + 6127

    5    libc.so.6                          0x00002b4db1395460 __libc_start_main +
    245

    6    tmpl38qkmma                        0x000055612eb5f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824759
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let even = lst1.filter { $0 % 2 == 0 }\n    let odd = lst1.filter { $0\
    \ % 2 != 0 }\n    let result = lst2.filter { $0 % 2 != 0 }\n    let rest = lst2.filter\
    \ { $0 % 2 == 0 }\n    return odd.count == result.count && even.count == rest.count\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpkimi7fci/tmpkimi7fci.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ace7a3c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ace7a0b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ace7a0b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ace7a0b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkimi7fci                        0x000055e7ecc9aac7 <unavailable> + 6855

    5    libc.so.6                          0x00002ace7a5ac460 __libc_start_main +
    245

    6    tmpkimi7fci                        0x000055e7ecc9a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824759
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var result: String = \"NO\"\n    var lst1 = lst1\n    var lst2 = lst2\n\
    \    while lst1.count > 0 {\n        if lst1[0] % 2 == 0 {\n            lst1.remove(at:\
    \ 0)\n        } else {\n            for i in 0..<lst2.count {\n              \
    \  if lst2[i] % 2 == 0 {\n                    let temp = lst1[0]\n           \
    \         lst1[0] = lst2[i]\n                    lst2[i] = temp\n            \
    \        break\n                }\n            }\n            if lst1[0] % 2 !=\
    \ 0 {\n                return result\n            }\n        }\n    }\n    result\
    \ = \"YES\"\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824759
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let odds1 = lst1.filter({ $0 % 2 != 0 })\n    let odds2 = lst2.filter({\
    \ $0 % 2 != 0 })\n    return odds1.count == odds2.count ? \"YES\" : \"NO\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpym59qfft/tmpym59qfft.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1e5e25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1e5b1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1e5b1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1e5b1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpym59qfft                        0x000055863598eac7 <unavailable> + 6855

    5    libc.so.6                          0x00002ba1e6011460 __libc_start_main +
    245

    6    tmpym59qfft                        0x000055863598e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824759
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7_dsd3lx/tmp7_dsd3lx.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60af49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac60ac40b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac60ac40988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac60ac3f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_dsd3lx                        0x0000564e1d5aa47d <unavailable> + 5245

    5    libc.so.6                          0x00002ac60b135460 __libc_start_main +
    245

    6    tmp7_dsd3lx                        0x0000564e1d5aa049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var count = 0\n    while lst1.contains(where:\
    \ {$0 % 2 != 0}) && lst2.contains(where: {$0 % 2 == 0}) {\n        lst1 = lst1.map\
    \ { $0 % 2 == 0 ? $0 : lst2[count]}\n        lst2 = lst2.map { $0 % 2 != 0 ? $0\
    \ : lst1[count]}\n        count += 1\n    }\n    return lst1.contains(where: {$0\
    \ % 2 != 0}) ? \"NO\" : \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmps67mwsbg/tmps67mwsbg.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eba46ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3eba161b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3eba161988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3eba1607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps67mwsbg                        0x000055adc8d0867d <unavailable> + 5757

    5    libc.so.6                          0x00002b3eba656460 __libc_start_main +
    245

    6    tmps67mwsbg                        0x000055adc8d08249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824759
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7_dsd3lx/tmp7_dsd3lx.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60af49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac60ac40b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac60ac40988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac60ac3f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_dsd3lx                        0x0000564e1d5aa47d <unavailable> + 5245

    5    libc.so.6                          0x00002ac60b135460 __libc_start_main +
    245

    6    tmp7_dsd3lx                        0x0000564e1d5aa049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var canExchange = false\n \
    \   var i = 0\n    var j = 0\n    while i < lst1.count && !canExchange {\n   \
    \     j = 0\n        while j < lst2.count && !canExchange {\n            if lst1[i]\
    \ % 2 != 0 {\n                let tmp = lst1[i]\n                lst1[i] = lst2[j]\n\
    \                lst2[j] = tmp\n            }\n            j += 1\n          \
    \  if lst1.filter({$0 % 2 != 0}).count == 0 {\n                canExchange = true\n\
    \            }\n        }\n        i += 1\n    }\n    return canExchange ? \"\
    YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824759
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    if lst1.filter { $0 % 2 == 0 }.count == lst1.count {\n        return\
    \ \"YES\"\n    }\n    return lst2.filter { $0 % 2 == 0 }.count == lst2.count ?\
    \ \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpa_ewn7jn/tmpa_ewn7jn.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b9e6d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b9e3cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b9e3cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b9e3ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa_ewn7jn                        0x0000558d5eb4e62d <unavailable> + 5677

    5    libc.so.6                          0x00002b5b9e8c4460 __libc_start_main +
    245

    6    tmpa_ewn7jn                        0x0000558d5eb4e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824759
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpbo5nl900/tmpbo5nl900.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b990aa00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b990a6f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b990a6f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b990a6f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbo5nl900                        0x000055c470a815ef <unavailable> + 5615

    5    libc.so.6                          0x00002b990abec460 __libc_start_main +
    245

    6    tmpbo5nl900                        0x000055c470a81049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824759
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let evenNum1 = lst1.filter{$0 % 2 == 0}\n    let evenNum2 = lst2.filter{$0\
    \ % 2 == 0}\n    if evenNum1.count == lst1.count || evenNum2.count == lst2.count\
    \ {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmphui3nvg9/tmphui3nvg9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90230b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9022dabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9022dab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9022daa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphui3nvg9                        0x000055d59ebcc62d <unavailable> + 5677

    5    libc.so.6                          0x00002b90232a0460 __libc_start_main +
    245

    6    tmphui3nvg9                        0x000055d59ebcc1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824759
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    for element in lst1 {\n        if element % 2 != 0 {\n            for\
    \ element2 in lst2 {\n                if element2 % 2 == 0 {\n               \
    \     return \"YES\"\n                }\n            }\n        }\n    }\n   \
    \ return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpr1ahpasd/tmpr1ahpasd.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44f0681c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44f0378b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44f0378988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44f03777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr1ahpasd                        0x000055ad58def7ef <unavailable> + 6127

    5    libc.so.6                          0x00002b44f086d460 __libc_start_main +
    245

    6    tmpr1ahpasd                        0x000055ad58def249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824759
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1EvenCount = lst1.filter { $0 % 2 == 0 }.count\n    let lst2EvenCount\
    \ = lst2.filter { $0 % 2 == 0 }.count\n    return lst1EvenCount > lst2EvenCount\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpuj2z7aaj/tmpuj2z7aaj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d6fac6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d6f7bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d6f7bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d6f7bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuj2z7aaj                        0x000055fbaa15262d <unavailable> + 5677

    5    libc.so.6                          0x00002b6d6fcb2460 __libc_start_main +
    245

    6    tmpuj2z7aaj                        0x000055fbaa1521f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824759
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var array: [Int] = []\n    var evenNumbersInListOne = 0\n    var returnString\
    \ = \"NO\"\n    \n    for number in lst1 {\n        if number % 2 == 0 {\n   \
    \         evenNumbersInListOne += 1\n        }\n    }\n    \n    array = lst1\
    \ + lst2\n    \n    let evenNumbersInListTwo = array.count - evenNumbersInListOne\n\
    \    \n    if lst1.count == evenNumbersInListOne || lst2.count == evenNumbersInListTwo\
    \ {\n        returnString = \"YES\"\n    }\n    \n    return returnString\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpe7kngonf/tmpe7kngonf.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13fbc05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13fb8fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13fb8fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13fb8fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe7kngonf                        0x000055f27f5e472d <unavailable> + 5933

    5    libc.so.6                          0x00002b13fbdf1460 __libc_start_main +
    245

    6    tmpe7kngonf                        0x000055f27f5e42f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824759
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    return \"\";\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp_t2m2c2x/tmp_t2m2c2x.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4430d25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4430a1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4430a1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4430a1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_t2m2c2x                        0x000056015e62747d <unavailable> + 5245

    5    libc.so.6                          0x00002b4430f11460 __libc_start_main +
    245

    6    tmp_t2m2c2x                        0x000056015e627049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824759
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let evens = lst1.filter { $0 % 2 == 0 }\n    let odds = lst2.filter {\
    \ $0 % 2 != 0 }\n    if evens.count > odds.count {\n        return \"NO\"\n  \
    \  }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp52odtsjr/tmp52odtsjr.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c0e44ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c0e145b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c0e145988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c0e1447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp52odtsjr                        0x00005591c2ddc79f <unavailable> + 6047

    5    libc.so.6                          0x00002b5c0e63a460 __libc_start_main +
    245

    6    tmp52odtsjr                        0x00005591c2ddc1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824759
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    if lst1.contains(where: { $0 % 2 != 0 }) && lst2.contains(where: { $0\
    \ % 2 == 0 }) {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp1yj1kg5v/tmp1yj1kg5v.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0561a5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0561751b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0561751988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05617507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1yj1kg5v                        0x000056398ce306ef <unavailable> + 5871

    5    libc.so.6                          0x00002b0561c46460 __libc_start_main +
    245

    6    tmp1yj1kg5v                        0x000056398ce30149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824759
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    while lst1.contains(where:\
    \ {$0 % 2 != 0}) {\n        let firstOdd = lst1.firstIndex(where: {$0 % 2 != 0})!\n\
    \        if let firstEven = lst2.firstIndex(where: {$0 % 2 == 0}) {\n        \
    \    lst1[firstOdd] = lst2[firstEven]\n            lst2[firstEven] = lst1[firstOdd]\n\
    \        } else {\n            return \"NO\"\n        }\n    }\n    return \"\
    YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpvfm8su_0/tmpvfm8su_0.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1d0aa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1d0798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1d0798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1d07977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfm8su_0                        0x000055579cbdf84f <unavailable> + 6223

    5    libc.so.6                          0x00002ad1d0c8d460 __libc_start_main +
    245

    6    tmpvfm8su_0                        0x000055579cbdf2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659824759
