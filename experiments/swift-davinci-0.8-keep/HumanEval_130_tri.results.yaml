language: swift
name: HumanEval_130_tri
results:
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n\tvar result = [Int]()\n\
    \tresult.append(1)\n\tresult.append(3)\n\tif n > 1 {\n\t\tresult.append(2)\n\t\
    }\n\tfor index in 3...n {\n\t\tif index % 2 == 0 {\n\t\t\tresult.append(1 + index\
    \ / 2)\n\t\t} else {\n\t\t\tresult.append(result[index - 1] + result[index - 2]\
    \ + result[index + 1])\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ae40aa3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae40a734561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae40a734286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae40a73413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae40a733bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ae40a533e83 <unavailable> + 188035

    6    tmpwinmnppu                        0x0000564e943f8495 <unavailable> + 9365

    7    tmpwinmnppu                        0x0000564e943f753b <unavailable> + 5435

    8    libc.so.6                          0x00002ae40ac29460 __libc_start_main +
    245

    9    tmpwinmnppu                        0x0000564e943f7259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var triSequence =\
    \ [Int]()\n    for i in 0...n {\n        if i == 0 {\n            triSequence.append(1)\n\
    \        } else if i == 1 {\n            triSequence.append(3)\n        } else\
    \ if i == 2 {\n            triSequence.append(2)\n        } else if i % 2 == 0\
    \ {\n            triSequence.append(1 + i / 2)\n        } else {\n           \
    \ triSequence.append(triSequence[i - 1] + triSequence[i - 2] + triSequence[i +\
    \ 1])\n        }\n    }\n    return triSequence\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afc0d649c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc0d340561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afc0d340286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afc0d34013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afc0d33fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afc0d13fe83 <unavailable> + 188035

    6    tmp_7wb4okg                        0x00005588a69134bd <unavailable> + 9405

    7    tmp_7wb4okg                        0x00005588a691253b <unavailable> + 5435

    8    libc.so.6                          0x00002afc0d835460 __libc_start_main +
    245

    9    tmp_7wb4okg                        0x00005588a6912259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  var triArray = [1, 3,\
    \ 2]\n  if n < 3 {\n    return Array(triArray[0..<n + 1])\n  }\n  for i in 3...n\
    \ {\n    if i % 2 == 0 {\n      triArray.append(1 + i / 2)\n    } else {\n   \
    \   triArray.append(triArray[i - 1] + triArray[i - 2] + triArray[i + 1])\n   \
    \ }\n  }\n  return triArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ade18d91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade18a88561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ade18a88286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ade18a8813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ade18a87bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ade18887e83 <unavailable> + 188035

    6    tmpyhqiu1px                        0x000055668808a715 <unavailable> + 10005

    7    tmpyhqiu1px                        0x000055668808963b <unavailable> + 5691

    8    libc.so.6                          0x00002ade18f7d460 __libc_start_main +
    245

    9    tmpyhqiu1px                        0x0000556688089359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  if n == 0 {\n    return\
    \ [1]\n  }\n  if n == 1 {\n    return [1, 3]\n  }\n  if n == 2 {\n    return [1,\
    \ 3, 2]\n  }\n  var arr = [1, 3, 2]\n  for i in 3...n {\n    let val = i % 2 ==\
    \ 0 ? (1 + i / 2) : (arr[i - 1] + arr[i - 2] + arr[i - 3])\n    arr.append(val)\n\
    \  }\n  return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpeo4g9nti/tmpeo4g9nti.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21ccda3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21cca9ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21cca9a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21cca997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeo4g9nti                        0x0000558397ff05ca <unavailable> + 5578

    5    libc.so.6                          0x00002b21ccf8f460 __libc_start_main +
    245

    6    tmpeo4g9nti                        0x0000558397ff0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    switch n {\n    case\
    \ 0:\n        return [1]\n    case 1:\n        return [1, 3]\n    case 2:\n  \
    \      return [1, 3, 2]\n    default:\n        var sequence = [1, 3, 2]\n    \
    \    for i in 3...n {\n            let triN = sequence[i - 1] + sequence[i - 2]\
    \ + sequence[i - 3]\n            sequence.append(triN)\n        }\n        return\
    \ sequence\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp2ubgx_rs/tmp2ubgx_rs.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b110d05dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b110cd54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b110cd54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b110cd537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2ubgx_rs                        0x000055e674ea95ca <unavailable> + 5578

    5    libc.so.6                          0x00002b110d249460 __libc_start_main +
    245

    6    tmp2ubgx_rs                        0x000055e674ea9209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    // create Array with\
    \ 0...n\n    let range = Array(0...n)\n    var result: [Int] = []\n    for i in\
    \ range {\n        // check number\n        switch i {\n        case 0:\n    \
    \        result.append(1)\n        case 1:\n            result.append(3)\n   \
    \     case 2:\n            result.append(2)\n        default:\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp4jr_wsot/tmp4jr_wsot.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e37dd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e37acbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e37acb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e37aca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4jr_wsot                        0x000055d7138f877a <unavailable> + 6010

    5    libc.so.6                          0x00002b1e37fc0460 __libc_start_main +
    245

    6    tmp4jr_wsot                        0x000055d7138f83b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n == 0 {\n    \
    \    return [0]\n    } else if n == 1 {\n        return [1, 3]\n    } else if\
    \ n == 2 {\n        return [1, 3, 2]\n    } else {\n        var list = [1, 3,\
    \ 2]\n        for i in 3...n {\n            if i % 2 == 0 {\n                list.append(1\
    \ + i / 2)\n            } else {\n                list.append(list[i - 2] + list[i\
    \ - 1] + list[i + 1])\n            }\n        }\n        return list\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7eda8e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7eda5d9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7eda5d9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7eda5d913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7eda5d8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7eda3d8e83 <unavailable> + 188035

    6    tmprek8u1m3                        0x000055f0b92594ee <unavailable> + 9454

    7    tmprek8u1m3                        0x000055f0b92584eb <unavailable> + 5355

    8    libc.so.6                          0x00002b7edaace460 __libc_start_main +
    245

    9    tmprek8u1m3                        0x000055f0b9258209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return [1, 3, 2, 8]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpx4fem35k/tmpx4fem35k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1642db8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1642aafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1642aaf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1642aae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4fem35k                        0x000055d9f0e9947f <unavailable> + 5247

    5    libc.so.6                          0x00002b1642fa4460 __libc_start_main +
    245

    6    tmpx4fem35k                        0x000055d9f0e98fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var tri = [1, 3, 2]\n\
    \    if n < 3 {\n        return tri.dropLast(3 - n)\n    }\n    for i in (3...n)\
    \ {\n        if i % 2 == 0 {\n            tri.append(1 + i / 2)\n        } else\
    \ {\n            tri.append(tri[i - 1] + tri[i - 2] + tri[i + 1])\n        }\n\
    \    }\n    return tri\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adcb970cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcb9403561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adcb9403286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adcb940313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adcb9402bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adcb9202e83 <unavailable> + 188035

    6    tmpeo8ezyof                        0x0000558f3a0da537 <unavailable> + 9527

    7    tmpeo8ezyof                        0x0000558f3a0d954b <unavailable> + 5451

    8    libc.so.6                          0x00002adcb98f8460 __libc_start_main +
    245

    9    tmpeo8ezyof                        0x0000558f3a0d9269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  guard n > 0 else { return\
    \ [] }\n  guard n > 1 else { return [1] }\n  guard n > 2 else { return [1, 3]\
    \ }\n  var sum = [1, 3, 2]\n  for i in 3...n {\n    let lastThree = sum[i - 3]\
    \ + sum[i - 2] + sum[i - 1]\n    sum.append(lastThree)\n  }\n  return sum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmppbsn0799/tmppbsn0799.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba464afbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4647f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4647f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4647f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbsn0799                        0x00005558c6be75ca <unavailable> + 5578

    5    libc.so.6                          0x00002ba464ce7460 __libc_start_main +
    245

    6    tmppbsn0799                        0x00005558c6be7209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  guard n > 0 else { return\
    \ [] }\n  guard n > 1 else { return [1] }\n  guard n > 2 else { return [1, 3]\
    \ }\n  return Array(stride(from: 0, to: n + 1, by: 1)).map({ $0 == 0 ? 1 : $0\
    \ == 1 ? 3 : $0 == 2 ? 2 : tri(n: $0 - 1) + tri(n: $0 - 2) + tri(n: $0 - 3) })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpxiyp02bv.swift:21:10: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n  return Array(stride(from: 0, to: n + 1, by: 1)).map({ $0\
    \ == 0 ? 1 : $0 == 1 ? 3 : $0 == 2 ? 2 : tri(n: $0 - 1) + tri(n: $0 - 2) + tri(n:\
    \ $0 - 3) })\n         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824917
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n > 0 else {\
    \ return [] }\n    var result = [1, 3, 2]\n    var index = 3\n    while index\
    \ <= n {\n        let item = (index % 2 == 0) ? (1 + index / 2) : (result[index\
    \ - 1] + result[index - 2] + result[index + 1])\n        result.append(item)\n\
    \        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba91df8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba91dc82561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba91dc82286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba91dc8213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba91dc81bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ba91da81e83 <unavailable> + 188035

    6    tmph5i3g5oq                        0x0000563caa48b22a <unavailable> + 8746

    7    tmph5i3g5oq                        0x0000563caa48a3fb <unavailable> + 5115

    8    libc.so.6                          0x00002ba91e177460 __libc_start_main +
    245

    9    tmph5i3g5oq                        0x0000563caa48a119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n  var result = [1, 3,\
    \ 2]\n  guard n > 2 else { return [Int](result[0...n]) }\n  for i in 3...n {\n\
    \    let a = result[i - 1]\n    let b = result[i - 2]\n    let c = result[i -\
    \ 3]\n    result.append(i % 2 == 0 ? 1 + i / 2 : a + b + c)\n  }\n  return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp1lg8gu1g/tmp1lg8gu1g.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25f502ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25f4d21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25f4d21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25f4d207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1lg8gu1g                        0x0000560e0c6527ba <unavailable> + 6074

    5    libc.so.6                          0x00002b25f5216460 __libc_start_main +
    245

    6    tmp1lg8gu1g                        0x0000560e0c6523f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return [Int](1...n).map\
    \ {\n        ($0 + 1) % 2 == 0 ? ($0 + 1) / 2 : tri(n: $0 - 1) + tri(n: $0 - 2)\
    \ + tri(n: $0 + 1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmptg454sei.swift:18:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return [Int](1...n).map {\n           ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824844
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return (0...n).map\
    \ {n in n <= 1 ? 1 : n <= 2 ? 3 : 1 + n / 2}\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpg4cbuai9/tmpg4cbuai9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c2adeac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c2aae1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c2aae1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c2aae07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg4cbuai9                        0x00005618d55f955a <unavailable> + 5466

    5    libc.so.6                          0x00002b9c2afd6460 __libc_start_main +
    245

    6    tmpg4cbuai9                        0x00005618d55f9199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n < 0 {\n     \
    \   return []\n    } else if n == 0 {\n        return [1]\n    } else if n ==\
    \ 1 {\n        return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n\
    \    }\n    var triNumbers = [1, 3, 2]\n    while triNumbers.count - 1 < n {\n\
    \        let nextNumber = triNumbers[triNumbers.count - 1] + triNumbers[triNumbers.count\
    \ - 2] + triNumbers[triNumbers.count - 3]\n        triNumbers.append(nextNumber)\n\
    \    }\n    return triNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpo7hunxao/tmpo7hunxao.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20f9dc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20f9ab9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20f9ab9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20f9ab87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo7hunxao                        0x00005593e4f3a49a <unavailable> + 5274

    5    libc.so.6                          0x00002b20f9fae460 __libc_start_main +
    245

    6    tmpo7hunxao                        0x00005593e4f3a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n == 0 {\n    \
    \    return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n    }\n    if\
    \ n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3, 2]\n    for\
    \ _ in 3...n {\n        let x = result[result.count - 1]\n        let y = result[result.count\
    \ - 2]\n        let z = result[result.count - 3]\n        result.append(x + y\
    \ + z)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpqtcmrn2j/tmpqtcmrn2j.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8b4efec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8b4bf5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8b4bf5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8b4bf47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqtcmrn2j                        0x000056466d54161a <unavailable> + 5658

    5    libc.so.6                          0x00002ad8b50ea460 __libc_start_main +
    245

    6    tmpqtcmrn2j                        0x000056466d541259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var tri = [1, 3, 2]\n\
    \    for i in 3...n {\n        let e = i % 2 == 0 ? 1 + i / 2 : tri[i - 1] + tri[i\
    \ - 2] + tri[i + 1]\n        tri.append(e)\n    }\n    return tri\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7651698c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b765138f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b765138f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b765138f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b765138ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b765118ee83 <unavailable> + 188035

    6    tmpswhfqfu7                        0x00005634fd86d41d <unavailable> + 9245

    7    tmpswhfqfu7                        0x00005634fd86c4eb <unavailable> + 5355

    8    libc.so.6                          0x00002b7651884460 __libc_start_main +
    245

    9    tmpswhfqfu7                        0x00005634fd86c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var res = [Int]()\n\
    \    for i in 0...n {\n        if i == 0 {\n            res.append(1)\n      \
    \  } else if i == 1 {\n            res.append(3)\n        } else if i == 2 {\n\
    \            res.append(2)\n        } else if i % 2 == 0 {\n            res.append(1\
    \ + i / 2)\n        } else {\n            res.append(res[i - 1] + res[i - 2] +\
    \ res[i - 3])\n        }\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpj4zr5ji6/tmpj4zr5ji6.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b13b689ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13b6595b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b13b6595988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b13b65947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj4zr5ji6                        0x000055e769e4361a <unavailable> + 5658

    5    libc.so.6                          0x00002b13b6a8a460 __libc_start_main +
    245

    6    tmpj4zr5ji6                        0x000055e769e43259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824788
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n == 0 {\n    \
    \    return [0]\n    }\n    if n == 1 {\n        return [1, 3]\n    }\n    if\
    \ n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3, 2]\n    var\
    \ i = 3\n    while i <= n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ecdc9ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ecd991561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6ecd991286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6ecd99113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6ecd990bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6ecd790e83 <unavailable> + 188035

    6    tmp3bbb2u4i                        0x0000555dad4922de <unavailable> + 8926

    7    tmp3bbb2u4i                        0x0000555dad4913fb <unavailable> + 5115

    8    libc.so.6                          0x00002b6ecde86460 __libc_start_main +
    245

    9    tmp3bbb2u4i                        0x0000555dad491119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659824788
