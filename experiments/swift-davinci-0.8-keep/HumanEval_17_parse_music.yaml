name: HumanEval_17_parse_music
language: swift
prompt: "\n/// Input to this function is a string representing musical notes in a\
  \ special ASCII format.\n/// Your task is to parse this string and return list of\
  \ integers corresponding to how many beats does each\n/// not last.\n/// Here is\
  \ a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts\
  \ two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o o| .|\
  \ o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
  \ String) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(parse_music(music_string: \"\") == [] as\
  \ [Int])\nassert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
  \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .|\
  \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"\
  o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
completions: ['    /// Your code goes here', "    \n    var beats: [Int] = []\n  \
    \  let beats_legend: [Character: Int] = [\"o\": 4, \"o|\": 2, \".|\": 1]\n   \
    \ \n    let music_components = music_string.split(separator: \" \")\n    \n  \
    \  for component in music_components {\n        if let beat = beats_legend[component.first!]\
    \ {\n            beats.append(beat)\n        }\n    }\n    \n    return beats",
  "    var result: [Int] = []\n    music_string.replacingOccurrences(of: \" \", with:\
    \ \"\").forEach { char in\n        switch char {\n        case \"o\":\n      \
    \      result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for char in music_string {\n        switch char {\n        case \"o\":\n\
    \            result.append(4)\n        case \"|\":\n            if music_string[music_string.index(before:\
    \ music_string.endIndex)] == \"o\" {\n                result.append(2)\n     \
    \       } else {\n                result.append(1)\n            }\n        default:\n\
    \            print(\"How did this happen?\")\n        }\n    }\n    return result",
  "    var array = [Int]()\n    var musicString = music_string\n    while musicString.count\
    \ > 0 {\n        if musicString.starts(with: \"o\") {\n            array.append(4)\n\
    \            musicString.removeFirst()\n        } else if musicString.starts(with:\
    \ \"o|\") {\n            array.append(2)\n            musicString.removeFirst(2)\n\
    \        } else if musicString.starts(with: \".|\") {\n            array.append(1)\n\
    \            musicString.removeFirst(2)\n        }\n    }\n    return array",
  "    var result = [Int]()\n    var notes = music_string.split(separator: \" \")\n\
    \    for note in notes {\n        if note.contains(\"o\") {\n            if note.contains(\"\
    |\") {\n                result.append(2)\n            } else {\n             \
    \   result.append(4)\n            }\n        } else {\n            result.append(1)\n\
    \        }\n    }\n    return result", "    var beats: [Int] = []\n    let arr\
    \ = music_string.components(separatedBy: \" \")\n    for i in arr {\n        if\
    \ i == \"o\" {\n            beats.append(4)\n        } else if i == \"o|\" {\n\
    \            beats.append(2)\n        } else if i == \".|\" {\n            beats.append(1)\n\
    \        }\n    }\n    return beats", "    let music_string = music_string.replacingOccurrences(of:\
    \ \"\\\\s\", with: \"\", options: .regularExpression)\n    var beat_ints: [Int]\
    \ = []\n    var last_char = music_string.startIndex\n    for index in music_string.indices\
    \ {\n        if music_string[index] == \"|\" || music_string[index] == \" \" {\n\
    \            let str = music_string[last_char..<index]\n            switch str\
    \ {\n            case \"o\":\n                beat_ints.append(4)\n          \
    \  case \".\":\n                beat_ints.append(1)\n            default:\n  \
    \              fatalError(\"invalid str: \\(str)\")\n            }\n         \
    \   last_char = music_string.index(after: index)\n        }\n    }\n    return\
    \ beat_ints", "    let split = music_string.split(separator: \" \")\n    var result:\
    \ [Int] = []\n    for i in split {\n        switch i {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      continue\n        }\n    }\n    return result", "    var beats = [Int]()\n\
    \    let notes = music_string.split(separator: \" \")\n    for (index, note) in\
    \ notes.enumerated() {\n        if note == \"o\" {\n            beats.append(4)\n\
    \        } else if note == \"o|\" {\n            beats.append(2)\n        } else\
    \ if note == \".|\" {\n            beats.append(1)\n        }\n    }\n    return\
    \ beats", "    var beats: [Int] = []\n    var currentNote = \"\"\n    for char\
    \ in music_string {\n        if char == \"|\" {\n            if currentNote ==\
    \ \"o\" {\n                beats.append(4)\n            } else if currentNote\
    \ == \"o\" {\n                beats.append(2)\n            } else if currentNote\
    \ == \".\" {\n                beats.append(1)\n            }\n            currentNote\
    \ = \"\"\n        } else {\n            currentNote += String(char)\n        }\n\
    \    }\n    return beats", "  let tempoDict: [Character: Int] = [\"o\": 4, \"\
    .\": 1, \"|\": 2]\n  var result: [Int] = []\n  var note: Int = 0\n  for c in music_string\
    \ {\n    if let tmp = tempoDict[c] {\n      note += tmp\n    } else {\n      result.append(note)\n\
    \      note = 0\n    }\n  }\n  result.append(note)\n  return result", "    var\
    \ music_lengths = [Int]()\n    var beat_lengths = [String: Int]()\n    beat_lengths[\"\
    o\"] = 4\n    beat_lengths[\"o|\"] = 2\n    beat_lengths[\".|\"] = 1\n    let\
    \ music_array = music_string.components(separatedBy: \" \")\n    for music_item\
    \ in music_array {\n        music_lengths.append(beat_lengths[music_item]!)\n\
    \    }\n    return music_lengths", "    var beats: [Int] = []\n    let music_string_subs\
    \ = music_string.components(separatedBy: \" \")\n    for notes in music_string_subs\
    \ {\n        switch notes {\n        case \"o\":\n            beats.append(4)\n\
    \        case \"o|\":\n            beats.append(2)\n        case \".|\":\n   \
    \         beats.append(1)\n        default:\n            print(\"no\")\n     \
    \   }\n    }\n    return beats", "    let crescents = music_string.components(separatedBy:\
    \ \"|\")\n    var result: [Int] = []\n    for crescent in crescents {\n      \
    \  result.append(count_crescent(crescent: crescent))\n    }\n    return result",
  "    let notes = music_string.components(separatedBy: \" \")\n    return notes.map\
    \ {\n        switch $0 {\n        case \"o\":\n            return 4\n        case\
    \ \"o|\":\n            return 2\n        case \".|\":\n            return 1\n\
    \        default:\n            return 0\n        }\n    }", "    var result =\
    \ [Int]()\n    var temp_str = music_string\n    while temp_str.count > 0 {\n \
    \       if temp_str.first == \"o\" {\n            result.append(4)\n         \
    \   temp_str.removeFirst()\n        } else if temp_str.first == \".\" {\n    \
    \        result.append(1)\n            temp_str.removeFirst()\n        }\n   \
    \     temp_str.removeFirst()\n    }\n    return result", "    var result: [Int]\
    \ = []\n    var array = music_string.characters.split{$0 == \" \"}.map(String.init)\n\
    \    for value in array {\n        if value == \"o\" {\n            result.append(4)\n\
    \        } else if value == \"o|\" {\n            result.append(2)\n        }\
    \ else if value == \".|\" {\n            result.append(1)\n        }\n    }\n\
    \    return result", '    return [1]', "    return music_string.split(separator:\
    \ \" \").map({ (character) -> Int in\n        switch character {\n        case\
    \ \"o\":\n            return 4\n        case \"o|\":\n            return 2\n \
    \       case \".|\":\n            return 1\n        default:\n            return\
    \ 0\n        }\n    })"]
stop_tokens:
- "\n}"
