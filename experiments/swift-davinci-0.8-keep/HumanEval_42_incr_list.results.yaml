language: swift
name: HumanEval_42_incr_list
results:
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for i in l {\n        result.append(i + 1)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824733
- exit_code: 1
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    return\
    \ map(l, { $0 + 1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: SyntaxError
  stderr: "/tmp/tmp78u3gv21.swift:8:12: error: cannot find 'map' in scope\n    return\
    \ map(l, { $0 + 1 })\n           ^~~\n"
  stdout: ''
  timestamp: 1659824733
- exit_code: -4
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n  // TODO:\
    \ Implement this function!\n  return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(incr_list(l: [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1])\
    \ == [4, 3, 2])\nassert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124])"
  status: Exception
  stderr: 'tmpb3mlrns_/tmpb3mlrns_.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79a62dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79a5fd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79a5fd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79a5fd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb3mlrns_                        0x000055d93dc4d49d <unavailable> + 5277

    5    libc.so.6                          0x00002b79a64cb460 __libc_start_main +
    245

    6    tmpb3mlrns_                        0x000055d93dc4cfc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    return\
    \ l.map({ $0 + 1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824733
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    return\
    \ l.map({$0 + 1})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824733
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    for i in l {\n        result.append(i + 1)\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824733
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for element in l {\n        result.append(element + 1)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ tmp = l\n    for i in 0..<l.count {\n        tmp[i] = l[i] + 1\n    }\n    return\
    \ tmp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as [Int])\
    \ == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    return\
    \ l.map({ $0 + 1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824733
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result: [Int] = [Int]()\n    var el = 0\n    while el < l.count {\n        result.append(l[el]\
    \ + 1)\n        el += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(incr_list(l: [] as [Int]) == [] as [Int])\nassert(incr_list(l:\
    \ [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123])\
    \ == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ l2: [Int] = []\n    for i in l {\n        l2.append(i + 1)\n    }\n    return\
    \ l2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(incr_list(l: [] as [Int]) ==\
    \ [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 1
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    return\
    \ map(l, {x in x + 1})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: SyntaxError
  stderr: "/tmp/tmp5zt4ld9l.swift:8:12: error: cannot find 'map' in scope\n    return\
    \ map(l, {x in x + 1})\n           ^~~\n"
  stdout: ''
  timestamp: 1659824733
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    for x in l {\n        result.append(x + 1)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 1
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    if\
    \ l.isEmpty {\n        return []\n    } else {\n        return [incr(l[0])] +\
    \ incr_list(Array(l[1..<l.count]))\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(incr_list(l: [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3,\
    \ 2, 1]) == [4, 3, 2])\nassert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) ==\
    \ [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: SyntaxError
  stderr: "/tmp/tmp1humznol.swift:11:17: error: cannot find 'incr' in scope\n    \
    \    return [incr(l[0])] + incr_list(Array(l[1..<l.count]))\n                ^~~~\n\
    /tmp/tmp1humznol.swift:11:41: error: missing argument label 'l:' in call\n   \
    \     return [incr(l[0])] + incr_list(Array(l[1..<l.count]))\n               \
    \                         ^\n                                        l: \n"
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    return\
    \ l.map({ $0 + 1 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824733
- exit_code: 1
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    return\
    \ map(l) { n in n + 1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: SyntaxError
  stderr: "/tmp/tmpyh49ukr7.swift:8:12: error: cannot find 'map' in scope\n    return\
    \ map(l) { n in n + 1 }\n           ^~~\n"
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    return\
    \ l.map { $0 + 1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824733
- exit_code: 1
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    return\
    \ map(l, { x in x + 1})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(incr_list(l:\
    \ [] as [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\n\
    assert(incr_list(l: [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124])"
  status: SyntaxError
  stderr: "/tmp/tmphhiqbppj.swift:8:12: error: cannot find 'map' in scope\n    return\
    \ map(l, { x in x + 1})\n           ^~~\n"
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var\
    \ res = [Int]()\n    for x in l {\n        res.append(x + 1)\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as [Int])\
    \ == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
- exit_code: 0
  program: "\n/// Return list with elements incremented by 1.\n/// >>> incr_list([1,\
    \ 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n///\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    return\
    \ l.map{ $0 + 1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(incr_list(l: [] as\
    \ [Int]) == [] as [Int])\nassert(incr_list(l: [3, 2, 1]) == [4, 3, 2])\nassert(incr_list(l:\
    \ [5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824774
