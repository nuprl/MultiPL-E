language: swift
name: HumanEval_104_unique_digits
results:
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    // TODO\n    return []\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpdvmgg3lr/tmpdvmgg3lr.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61873cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61870c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61870c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61870c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdvmgg3lr                        0x0000562b6d1ab3cc <unavailable> + 5068

    5    libc.so.6                          0x00002b61875b7460 __libc_start_main +
    245

    6    tmpdvmgg3lr                        0x0000562b6d1aafc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824396
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var x = x\n    x.sort()\n \
    \   for (index, value) in x.enumerated() {\n        var reversed = 0\n       \
    \ var remainder = value\n        while remainder != 0 {\n            let digit\
    \ = remainder % 10\n            reversed = reversed * 10 + digit\n           \
    \ remainder = remainder / 10\n        }\n        if reversed % 2 == 0 {\n    \
    \        x.remove(at: index)\n        }\n    }\n    return x\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp9jnvcaqs/tmp9jnvcaqs.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee3537bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee35072b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee35072988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee350717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9jnvcaqs                        0x0000563b5ef807ec <unavailable> + 6124

    5    libc.so.6                          0x00002aee35567460 __libc_start_main +
    245

    6    tmp9jnvcaqs                        0x0000563b5ef803e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659824396
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var unique_digits = [Int]()\n\
    \    for i in x {\n        if !has_even_digit(i) {\n            unique_digits.append(i)\n\
    \        }\n    }\n    return unique_digits\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpaqhq22zt.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824396
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var arr: [Int] = []\n    var\
    \ i = 0\n    while i < x.count {\n        var j = 0\n        var even: Bool =\
    \ false\n        while j < String(x[i]).count {\n            if (Int(String(String(x[i])[j]))!\
    \ % 2 == 0) {\n                even = true\n            }\n            j += 1\n\
    \        }\n        if (even == false) {\n            arr.append(x[i])\n     \
    \   }\n        i += 1\n    }\n    arr.sort()\n    return arr\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpvay0z3fc.swift:17:28: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n            if (Int(String(String(x[i])[j]))!\
    \ % 2 == 0) {\n                           ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659824396
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n  return x.filter({i in\n    //\
    \ Convert to string\n    let str = String(i)\n    for i in str.characters {\n\
    \      // Check if character is an even number\n      if (Int(String(i))! % 2\
    \ == 0) {\n        return false\n      }\n    }\n    return true\n  })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp_d45w9mv.swift:14:18: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in str.characters {\n                 ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824396
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var results: [Int] = []\n \
    \   for i in x {\n        let x_str = String(i)\n        var has_even = false\n\
    \        for c in x_str {\n            if c == \"2\" || c == \"4\" || c == \"\
    6\" || c == \"8\" {\n                has_even = true\n                break\n\
    \            }\n        }\n        if !has_even {\n            results.append(i)\n\
    \        }\n    }\n    return results\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpunwinsun/tmpunwinsun.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af23c6dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af23c3d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af23c3d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af23c3d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunwinsun                        0x000056251e3f780c <unavailable> + 6156

    5    libc.so.6                          0x00002af23c8c6460 __libc_start_main +
    245

    6    tmpunwinsun                        0x000056251e3f7409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659824396
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.hasNoEvenDigit()\
    \ }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpvefh8_j_.swift:11:26: error: value of type 'Int' has no member\
    \ 'hasNoEvenDigit'\n    return x.filter { $0.hasNoEvenDigit() }.sorted()\n   \
    \                   ~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824396
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n\treturn x.filter({\n\t\t$0.description.chars.all({\n\
    \t\t\t$0 % 2 != 0\n\t\t})\n\t})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp1j5_3s8a.swift:12:18: error: value of type 'String' has no member\
    \ 'chars'\n                $0.description.chars.all({\n                ~~~~~~~~~~~~~~\
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1659824396
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { num in\n\
    \        var num = num\n        while num > 0 {\n            if num % 2 == 0 {\n\
    \                return false\n            }\n            num /= 10\n        }\n\
    \        return true\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp96f5xv8h/tmp96f5xv8h.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf8fd77c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf8fa6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf8fa6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf8fa6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp96f5xv8h                        0x000056125d6cb52c <unavailable> + 5420

    5    libc.so.6                          0x00002adf8ff63460 __libc_start_main +
    245

    6    tmp96f5xv8h                        0x000056125d6cb129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824396
- exit_code: 0
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    let even: Set<Character> =\
    \ [\"0\", \"2\", \"4\", \"6\", \"8\"]\n    var output = [Int]()\n    for i in\
    \ x {\n        if String(i).contains(where: {even.contains($0)}) {\n         \
    \   continue\n        }\n        output.append(i)\n    }\n    return output.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824396
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for num in x {\n        if !check_if_even(num) {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp54wma49p.swift:13:13: error: cannot find 'check_if_even' in scope\n\
    \        if !check_if_even(num) {\n            ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824396
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result : [Int] = []\n \
    \   for element in x {\n        var even_flag = false\n        var temp = element\n\
    \        while temp > 0 {\n            let digit = temp % 10\n            if digit\
    \ % 2 == 0 {\n                even_flag = true\n                break\n      \
    \      }\n            temp /= 10\n        }\n        if even_flag == false {\n\
    \            result.append(element)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpi3ohadj5/tmpi3ohadj5.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbdc4afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbdc1a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbdc1a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbdc1a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi3ohadj5                        0x0000564806dbc62c <unavailable> + 5676

    5    libc.so.6                          0x00002adbdc69b460 __libc_start_main +
    245

    6    tmpi3ohadj5                        0x0000564806dbc229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659824396
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ number in x {\n        var flag = false\n        let digits = String(number).characters.map{\
    \ Int(String($0))! }\n        for digit in digits {\n            if digit % 2\
    \ == 0 {\n                flag = true\n                break\n            }\n\
    \        }\n        if !flag {\n            result.append(number)\n        }\n\
    \    }\n    return result.sort()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp9f1cj0le.swift:14:37: error: 'characters' is unavailable: Please\
    \ use String directly\n        let digits = String(number).characters.map{ Int(String($0))!\
    \ }\n                                    ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp9f1cj0le.swift:25:19: error: cannot convert\
    \ return expression of type '()' to return type '[Int]'\n    return result.sort()\n\
    \           ~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824396
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n  var ret: [Int] = []\n  var even:\
    \ Bool = false\n  var str: String\n  for num in x {\n    str = String(num)\n \
    \   even = false\n    for c in str.characters {\n      if Int(String(c))! % 2\
    \ == 0 {\n        even = true\n        break\n      }\n    }\n    if !even {\n\
    \      ret.append(num)\n    }\n  }\n  return ret\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpagawc0mv.swift:17:18: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in str.characters {\n                 ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824396
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n\treturn []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpo3klhmqo/tmpo3klhmqo.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af144c94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af14498bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af14498b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af14498a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3klhmqo                        0x000055d31b0103cc <unavailable> + 5068

    5    libc.so.6                          0x00002af144e80460 __libc_start_main +
    245

    6    tmpo3klhmqo                        0x000055d31b00ffc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824396
- exit_code: 0
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var x_new: [Int] = []\n   \
    \ for element in x {\n        var is_unique: Bool = true\n        var element_string:\
    \ String = String(element)\n        let a: [Character] = [\"0\", \"2\", \"4\"\
    , \"6\", \"8\"]\n        for index in a {\n            if element_string.contains(index)\
    \ {\n                is_unique = false\n            }\n        }\n        if is_unique\
    \ {\n            x_new.append(element)\n        }\n    }\n    x_new.sort()\n \
    \   return x_new\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824396
- exit_code: 0
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n\tvar result = [Int]()\n\tfor num\
    \ in x {\n\t\tvar digits = [Int]()\n\t\tvar n = num\n\t\twhile n > 0 {\n\t\t\t\
    digits.append(n % 10)\n\t\t\tn /= 10\n\t\t}\n\t\tvar all_odd = true\n\t\tfor d\
    \ in digits {\n\t\t\tif d % 2 == 0 {\n\t\t\t\tall_odd = false\n\t\t\t\tbreak\n\
    \t\t\t}\n\t\t}\n\t\tif all_odd {\n\t\t\tresult.append(num)\n\t\t}\n\t}\n\treturn\
    \ result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824396
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  var check: Bool = false\n    for i in x {\n        for j in String(i) {\n \
    \           if j % 2 == 0 {\n                check = true\n            }\n   \
    \     }\n        if check == false {\n            result.append(i)\n        }\n\
    \        check = false\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpqk38e4js.swift:15:16: error: cannot convert value of type 'Character'\
    \ to expected argument type 'Int'\n            if j % 2 == 0 {\n             \
    \  ^\n"
  stdout: ''
  timestamp: 1659824396
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var a: [Int] = []\n    for\
    \ y in x {\n        if y % 2 != 0 {\n            a.append(y)\n        }\n    }\n\
    \    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp_um55xsf/tmp_um55xsf.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3ab75dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3ab454b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3ab454988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3ab4537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_um55xsf                        0x000056210afca62c <unavailable> + 5676

    5    libc.so.6                          0x00002af3ab949460 __libc_start_main +
    245

    6    tmp_um55xsf                        0x000056210afca229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659824396
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  // Note: You should replace this with your solution.\n    // Start your solution\
    \ here:\n    for i in x {\n        var i_str = String(i)\n        var no_even\
    \ = true\n        for j in i_str {\n            let digit = Int(String(j))!\n\
    \            if digit % 2 == 0 {\n                no_even = false\n          \
    \      break\n            }\n        }\n        if no_even {\n            result.append(i)\n\
    \        }\n    }\n    // End your solution here:\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpysnwx3p7/tmpysnwx3p7.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1543a66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b154375db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b154375d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b154375c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpysnwx3p7                        0x00005570492718ac <unavailable> + 6316

    5    libc.so.6                          0x00002b1543c52460 __libc_start_main +
    245

    6    tmpysnwx3p7                        0x00005570492714a9 <unavailable> + 5289

    '
  stdout: ''
  timestamp: 1659824396
