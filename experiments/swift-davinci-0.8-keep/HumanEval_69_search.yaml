name: HumanEval_69_search
language: swift
prompt: "\n/// You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n/// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n/// The frequency of an integer is the number\
  \ of times it appears in the list.\n/// If no such a value exist, return -1.\n///\
  \ Examples:\n/// search([4, 1, 2, 2, 3, 1]) == 2\n/// search([1, 2, 2, 3, 3, 3,\
  \ 4, 4, 4]) == 3\n/// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst: [Int]) ->\
  \ Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(search(lst: [5, 5, 5, 5, 1]) == 1)\nassert(search(lst:\
  \ [4, 1, 4, 1, 4, 4]) == 4)\nassert(search(lst: [3, 3]) == -1)\nassert(search(lst:\
  \ [8, 8, 8, 8, 8, 8, 8, 8]) == 8)\nassert(search(lst: [2, 3, 3, 2, 2]) == 2)\nassert(search(lst:\
  \ [2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1)\n\
  assert(search(lst: [3, 2, 8, 2]) == 2)\nassert(search(lst: [6, 7, 1, 8, 8, 10, 5,\
  \ 8, 5, 3, 10]) == 1)\nassert(search(lst: [8, 8, 3, 6, 5, 6, 4]) == -1)\nassert(search(lst:\
  \ [6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9])\
  \ == 1)\nassert(search(lst: [1, 9, 10, 1, 3]) == 1)\nassert(search(lst: [6, 9, 7,\
  \ 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5)\nassert(search(lst:\
  \ [1]) == 1)\nassert(search(lst: [8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10,\
  \ 4, 2, 1, 10, 2, 1, 1, 5]) == 4)\nassert(search(lst: [2, 10, 4, 8, 2, 10, 5, 1,\
  \ 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2)\nassert(search(lst: [1, 6, 10, 1, 6, 9,\
  \ 10, 8, 6, 8, 7, 3]) == 1)\nassert(search(lst: [9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7,\
  \ 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4)\nassert(search(lst:\
  \ [2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4)\n\
  assert(search(lst: [9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) ==\
  \ 2)\nassert(search(lst: [5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
  \ 7, 7, 10, 8]) == -1)\nassert(search(lst: [10]) == -1)\nassert(search(lst: [9,\
  \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2)\nassert(search(lst: [5, 4, 10, 2,\
  \ 1, 1, 10, 3, 6, 1, 8]) == 1)\nassert(search(lst: [7, 9, 9, 9, 3, 4, 1, 5, 9, 1,\
  \ 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1)\nassert(search(lst: [3, 10, 10, 9,\
  \ 2]) == -1)"
completions: ["    var dict = [Int: Int]()\n    for i in lst {\n        if dict[i]\
    \ == nil {\n            dict[i] = 1\n        } else {\n            dict[i]! +=\
    \ 1\n        }\n    }\n    for i in dict.keys.sorted(by: >) {\n        if i ==\
    \ dict[i] {\n            return i\n        }\n    }\n    return -1", "    var\
    \ dict = [Int: Int]()\n    for number in lst {\n        if let value = dict[number]\
    \ {\n            dict[number] = value + 1\n        } else {\n            dict[number]\
    \ = 1\n        }\n    }\n    let sortedDict = dict.sorted { $0.value > $1.value\
    \ }\n    for number in sortedDict {\n        if number.key > 0 && number.key <=\
    \ number.value {\n            return number.key\n        }\n    }\n    return\
    \ -1", "    var dict = [Int: Int]()\n    var maxInt = 0\n    var maxCount = 0\n\
    \    for i in lst {\n        if dict[i] == nil {\n            dict[i] = 1\n  \
    \      } else {\n            dict[i]! += 1\n        }\n        if dict[i]! >=\
    \ i && dict[i]! > maxCount {\n            maxInt = i\n            maxCount = dict[i]!\n\
    \        }\n    }\n    return maxInt", "    var result = -1\n    var count = 0\n\
    \    var maxCount = 0\n    var value = 0\n    let sortedLst = lst.sorted()\n \
    \   for i in 0..<sortedLst.count {\n        if i == 0 {\n            value = sortedLst[i]\n\
    \            count = 1\n        } else if sortedLst[i] == value {\n          \
    \  count += 1\n        } else {\n            value = sortedLst[i]\n          \
    \  if count > maxCount {\n                maxCount = count\n                result\
    \ = value\n            }\n            count = 1\n        }\n    }\n    if count\
    \ > maxCount {\n        maxCount = count\n        result = value\n    }\n    if\
    \ result > 0 && maxCount >= result {\n        return result\n    }\n    return\
    \ -1", "    let sorted = lst.sorted()\n    var count = 1\n    for i in 1..<sorted.count\
    \ {\n        if sorted[i] == sorted[i - 1] {\n            count += 1\n       \
    \ } else {\n            if count >= sorted[i - 1] {\n                return sorted[i\
    \ - 1]\n            }\n            count = 1\n        }\n    }\n    return count\
    \ >= sorted[sorted.count - 1] ? sorted[sorted.count - 1] : -1", "    if lst.count\
    \ == 0 {\n        return -1\n    }\n    var num = -1\n    var freq = -1\n    var\
    \ dict: [Int: Int] = [:]\n    for a in lst {\n        dict[a] = dict[a, default:\
    \ 0] + 1\n    }\n    for a in lst {\n        if dict[a]! >= a && dict[a]! > freq\
    \ {\n            num = a\n            freq = dict[a]!\n        }\n    }\n    return\
    \ num", "    var freq = [Int: Int]()\n    for num in lst {\n        if freq[num]\
    \ == nil {\n            freq[num] = 1\n        } else {\n            freq[num]!\
    \ += 1\n        }\n    }\n    let sortedNum = lst.sorted { $0 > $1 }\n    for\
    \ num in sortedNum {\n        if num <= freq[num] ?? 0 {\n            return num\n\
    \        }\n    }\n    return -1", "    return lst.reduce(into: [:]) { counts,\
    \ int in counts[int, default: 0] += 1 }\n        .first { $0.key >= $0.value }?.key\
    \ ?? -1", "  var greatestFrequency = 0\n  var mostFrequentInt = -1\n  var frequencyDict\
    \ = [Int: Int]()\n  \n  for num in lst {\n    if frequencyDict[num] == nil {\n\
    \      frequencyDict[num] = 1\n    } else {\n      frequencyDict[num]! += 1\n\
    \    }\n    \n    if frequencyDict[num]! >= num && frequencyDict[num]! > greatestFrequency\
    \ {\n      greatestFrequency = frequencyDict[num]!\n      mostFrequentInt = num\n\
    \    }\n  }\n  \n  return mostFrequentInt", "    let sortedLst = lst.sorted()\n\
    \    var greatest = -1\n    var currentValue = -1\n    var counter = 0\n    for\
    \ value in sortedLst {\n        if value != currentValue {\n            if counter\
    \ == currentValue {\n                greatest = counter\n            }\n     \
    \       currentValue = value\n            counter = 1\n        } else {\n    \
    \        counter += 1\n        }\n    }\n    if counter == currentValue {\n  \
    \      greatest = counter\n    }\n    return greatest", "    var max = 0\n   \
    \ for i in lst {\n        if i > max {\n            max = i\n        }\n    }\n\
    \    var dic = [Int: Int]()\n    for i in lst {\n        if let tmp = dic[i] {\n\
    \            dic[i] = tmp + 1\n        } else {\n            dic[i] = 1\n    \
    \    }\n    }\n    for i in 1..<max {\n        if let tmp = dic[i] {\n       \
    \     if tmp >= i {\n                return i\n            }\n        }\n    }\n\
    \    return -1", "\treturn -1", "    let dict = lst.reduce(into: [:]) { $0[$1,\
    \ default: 0] += 1 }\n    let result = dict.filter { $0.key <= $0.value }.max\
    \ { $0.key < $1.key }\n    return result?.key ?? -1", "    // create dictionary:\
    \ [Int : Int] (intValue : freq)\n    var dict = [Int : Int]()\n    for elem in\
    \ lst {\n        if let freq = dict[elem] {\n            dict[elem] = freq + 1\n\
    \        } else {\n            dict[elem] = 1\n        }\n    }\n    // find max\
    \ integer with freq > intValue\n    var maxInt = -1\n    for (key, value) in dict\
    \ {\n        if value >= key && key > maxInt {\n            maxInt = key\n   \
    \     }\n    }\n    return maxInt", "    var dict = [Int: Int]()\n    var highestKey:\
    \ Int = 0\n    var highestValue: Int = 0\n    for num in lst {\n        if dict[num]\
    \ == nil {\n            dict[num] = 1\n        } else {\n            dict[num]!\
    \ += 1\n        }\n        if dict[num]! >= num && num > highestKey {\n      \
    \      highestKey = num\n            highestValue = dict[num]!\n        }\n  \
    \  }\n    if highestKey > 0 && highestValue >= highestKey {\n        return highestKey\n\
    \    } else {\n        return -1\n    }", "    let counts = lst.reduce(into: [:])\
    \ { counts, num in counts[num, default: 0] += 1 }\n    for n in lst.sorted(by:\
    \ >) {\n        if counts[n]! >= n {\n            return n\n        }\n    }\n\
    \    return -1", '    return -1', "    guard !lst.isEmpty else { return -1 }\n\
    \    var frequencies: [Int: Int] = [:]\n    for i in lst {\n        if let count\
    \ = frequencies[i] {\n            frequencies[i] = count + 1\n        } else {\n\
    \            frequencies[i] = 1\n        }\n    }\n    let sortedKeys = frequencies.keys.sorted()\n\
    \    let sortedValues = frequencies.values.sorted()\n    for i in sortedKeys {\n\
    \        if sortedValues[i] >= i {\n            return i\n        }\n    }\n \
    \   return -1", "\tvar dict: [Int: Int] = [:]\n\tfor i in lst {\n\t\tif dict[i]\
    \ == nil {\n\t\t\tdict[i] = 1\n\t\t} else {\n\t\t\tdict[i]! += 1\n\t\t}\n\t}\n\
    \t\n\tfor i in dict.keys.sorted().reversed() {\n\t\tif dict[i]! >= i {\n\t\t\t\
    return i\n\t\t}\n\t}\n\treturn -1", "  var dict = [Int: Int]()\n  for num in lst\
    \ {\n    dict[num] = (dict[num] ?? 0) + 1\n  }\n  var result = -1\n  for key in\
    \ dict.keys.sorted(by: { $0 > $1 }) {\n    if dict[key]! >= key {\n      result\
    \ = key\n      break\n    }\n  }\n  return result"]
stop_tokens:
- "\n}"
