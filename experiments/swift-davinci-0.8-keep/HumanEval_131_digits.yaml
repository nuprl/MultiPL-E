name: HumanEval_131_digits
language: swift
prompt: "\n/// Given a positive integer n, return the product of the odd digits.\n\
  /// Return 0 if all digits are even.\n/// For example:\n/// digits(1)  == 1\n///\
  \ digits(4)  == 0\n/// digits(235) == 15\nfunc digits(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(digits(n: 5) == 5)\nassert(digits(n: 54)\
  \ == 5)\nassert(digits(n: 120) == 1)\nassert(digits(n: 5014) == 5)\nassert(digits(n:\
  \ 98765) == 315)\nassert(digits(n: 5576543) == 2625)\nassert(digits(n: 2468) ==\
  \ 0)"
completions: ['    return 0', '  return n.description.compactMap { Int(String($0))
    }.filter { $0 % 2 != 0 }.reduce(1, *)', '    return 0', "    var result = 1\n\
    \    for i in String(n) {\n        if let integer = Int(String(i)) {\n       \
    \     if integer % 2 != 0 {\n                result *= integer\n            }\n\
    \        }\n    }\n    return result", "  if n == 0 {\n    return 1\n  }\n  var\
    \ num = n\n  var result = 1\n  while num > 0 {\n    let remainder = num % 10\n\
    \    if remainder % 2 != 0 {\n      result *= remainder\n    }\n    num /= 10\n\
    \  }\n  return result", "    let digits = String(n).map { Int(String($0))! }\n\
    \    return digits.filter { $0 % 2 != 0 }.reduce(1, combine: { $0 * $1 })", " \
    \   var product = 1\n    let numbers = String(n).compactMap{ Int(String($0)) }\n\
    \    for number in numbers {\n        if number % 2 != 0 {\n            product\
    \ *= number\n        }\n    }\n    return product", '    return 0', "    let n\
    \ = n < 0 ? n * -1 : n\n    var sum = 1\n    for i in String(n) {\n        if\
    \ let i = Int(String(i)) {\n            if i % 2 != 0 {\n                sum *=\
    \ i\n            }\n        }\n    }\n    return sum", '    return 0', '    return
    0', '    return 0', "  var result = 1\n  var n = n\n  while n > 0 {\n    let digit\
    \ = n % 10\n    if digit % 2 != 0 {\n      result *= digit\n    }\n    n /= 10\n\
    \  }\n  return result", '    return n.digits.reduce(1) { $0 * ($1 % 2 == 0 ? 1
    : $1) }', "    var product = 1\n    for digit in String(n) {\n        if let num\
    \ = Int(String(digit)) {\n            if num % 2 != 0 {\n                product\
    \ *= num\n            }\n        }\n    }\n    return product", "    guard n >\
    \ 0 else { return 0 }\n    return digits(n: n / 10) * 10 + (n % 2 == 1 ? n % 10\
    \ : 0)", '    return 0', "    let n = n > 0 ? n : 0\n    let nStr = \"\\(n)\"\n\
    \    var sum = 1\n    for char in nStr {\n        let number = Int(String(char))\
    \ ?? 0\n        if number % 2 != 0 {\n            sum *= number\n        }\n \
    \   }\n    return sum", "  var newArray = [Int]()\n  var num = n\n  while num\
    \ > 0 {\n    newArray.append(num % 10)\n    num /= 10\n  }\n  var result = 1\n\
    \  for i in newArray {\n    if i % 2 != 0 {\n      result *= i\n    }\n  }\n \
    \ return result", "    let oddNums = n.toArray.filter {$0 % 2 != 0}\n    return\
    \ oddNums.reduce(1, combine: *)"]
stop_tokens:
- "\n}"
