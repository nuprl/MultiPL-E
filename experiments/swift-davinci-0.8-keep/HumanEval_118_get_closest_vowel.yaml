name: HumanEval_118_get_closest_vowel
language: swift
prompt: "\n/// You are given a word. Your task is to find the closest vowel that stands\
  \ between \n/// two consonants from the right side of the word (case sensitive).\n\
  /// Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
  \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
  yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
  quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"\
  u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
  \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
  \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
  \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
  \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
  \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
  \ \"Above\") == \"o\")"
completions: ["    let vowels = \"AEIOUaeiou\"\n    let consontants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\
    \n    var pos = -1\n    for (index, letter) in word.characters.enumerated() {\n\
    \        if consontants.contains(String(letter)) {\n            for (vIndex, vLetter)\
    \ in vowels.characters.enumerated() {\n                if consontants.contains(String(vLetter))\
    \ {\n                    continue\n                }\n                if index\
    \ == 0 {\n                    if word.contains(String(vLetter)) {\n          \
    \              pos = vIndex\n                        break\n                 \
    \   }\n                } else {\n                    let left = String(word.characters.prefix(index))\n\
    \                    let right = String(word.characters.suffix(word.characters.count\
    \ - index))\n                    if right.contains(String(vLetter)) && !left.contains(String(vLetter))\
    \ {\n                        pos = vIndex\n                        break\n   \
    \                 }\n                }\n            }\n        }\n    }\n    if\
    \ pos != -1 {\n        return String(vowels.characters.suffix(vowels.characters.count\
    \ - pos))\n    }\n    return \"\"", "  let vowelList = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n  let wordList = Array(word)\n  let wordListLen = wordList.count\n\
    \  var vowelPos = -1\n  var i = wordListLen - 1\n  while i >= 0 {\n    if vowelList.contains(String(wordList[i]))\
    \ {\n      vowelPos = i\n      break\n    }\n    i -= 1\n  }\n  if vowelPos ==\
    \ -1 {\n    return \"\"\n  }\n  i = vowelPos - 1\n  while i >= 0 {\n    if !vowelList.contains(String(wordList[i]))\
    \ {\n      return String(wordList[vowelPos])\n    }\n    i -= 1\n  }\n  return\
    \ \"\"", "    var res: String = \"\"\n    let vowels: [Character] = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    let letters: [Character] = Array(word)\n    if\
    \ vowels.contains(letters[0]) || vowels.contains(letters[letters.count - 1]) {\n\
    \        return res\n    }\n    for i in 0..<letters.count {\n        if vowels.contains(letters[i])\
    \ {\n            if i > 0 && !vowels.contains(letters[i - 1]) {\n            \
    \    res = String(letters[i])\n                break\n            }\n        }\n\
    \    }\n    return res", "    let vowelSet = Set<Character>([\"a\", \"e\", \"\
    i\", \"o\", \"u\"])\n    let consonantSet = Set<Character>([\"b\", \"c\", \"d\"\
    , \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"])\n    let charArray = Array(word)\n\
    \    let lastVowel: String = charArray.filter{ vowelSet.contains($0) }.last !=\
    \ nil ? String(charArray.filter{ vowelSet.contains($0) }.last!) : \"\"\n    var\
    \ tempArray = Array(word.reversed())\n    tempArray = tempArray.filter{ consonantSet.contains($0)\
    \ }\n    guard let first = tempArray.first, let last = tempArray.last else { return\
    \ lastVowel }\n    guard tempArray.count > 1 else { return String(first) }\n \
    \   guard let lastVowelIndex = charArray.firstIndex(of: Character(lastVowel))\
    \ else { return String(last) }\n    if first > last {\n        if word.count >\
    \ lastVowelIndex + 1 {\n            return String(charArray[lastVowelIndex + 1])\n\
    \        } else {\n            return String(last)\n        }\n    } else {\n\
    \        if word.count > lastVowelIndex + 1 {\n            return String(charArray[lastVowelIndex\
    \ + 1])\n        } else {\n            return String(first)\n        }\n    }",
  "    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    var check = false\n\
    \    let reverseWord = String(word.reversed())\n    for c in reverseWord {\n \
    \       if vowels.contains(c) {\n            result = String(c)\n            check\
    \ = true\n        } else if check {\n            break\n        }\n    }\n   \
    \ return result", '  // your code goes here', "  let vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n  var found_vowel: String = \"\"\n  let last_idx = word.count\
    \ - 1\n  var prev_idx = last_idx\n  var curr_idx = last_idx\n  var is_a_consonant\
    \ = false\n  var is_previous_consonant = false\n  while curr_idx >= 0 {\n    let\
    \ char = String(word[word.index(word.startIndex, offsetBy: curr_idx)])\n    is_a_consonant\
    \ = vowels.contains(char) ? false : true\n    if is_a_consonant && is_previous_consonant\
    \ {\n      found_vowel = String(word[word.index(word.startIndex, offsetBy: prev_idx)])\n\
    \      break\n    }\n    prev_idx = curr_idx\n    curr_idx -= 1\n    is_previous_consonant\
    \ = is_a_consonant\n  }\n  return found_vowel", '    return ""', "    if word.isEmpty\
    \ {\n        return \"\"\n    }\n    var vowels = \"aeiou\"\n    var closest:\
    \ String = \"\"\n    var min: Int = Int.max\n    var found = false\n    for i\
    \ in stride(from: word.count - 1, through: 0, by: -1) {\n        let c = word[i]\n\
    \        if c.isVowel {\n            closest = c.description\n            found\
    \ = true\n            min = i\n            break\n        }\n    }\n    if !found\
    \ {\n        return \"\"\n    }\n    for i in stride(from: word.count - 1, through:\
    \ 0, by: -1) {\n        let c = word[i]\n        if c.isVowel {\n            if\
    \ abs(i - min) < min {\n                closest = c.description\n            \
    \    min = i\n            }\n        }\n    }\n    return closest", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var wordConsonents = word.filter\
    \ { !vowels.contains($0.lowercased()) }\n    var wordVowels = word.filter { vowels.contains($0.lowercased())\
    \ }\n    for index in stride(from: wordConsonents.count-1, through: 0, by: -1)\
    \ {\n        if let vowel = wordVowels.last,\n            vowels.contains(wordConsonents[wordConsonents.index(wordConsonents.startIndex,\
    \ offsetBy: index)].lowercased()) &&\n            vowels.contains(wordConsonents[wordConsonents.index(wordConsonents.startIndex,\
    \ offsetBy: index-1)].lowercased()) {\n            return String(vowel)\n    \
    \    }\n        wordVowels.removeLast()\n    }\n    return \"\"", "    let vowels\
    \ = Set(\"aeiouAEIOU\")\n    let consonants = Set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    )\n    var vowel_index = -1\n    for (index, character) in word.characters.enumerated()\
    \ {\n        if vowels.contains(character) {\n            vowel_index = index\n\
    \        }\n        if vowel_index != -1 {\n            if consonants.contains(character)\
    \ {\n                return String(word[word.index(word.startIndex, offsetBy:\
    \ vowel_index)])\n            }\n        }\n    }\n    return \"\"", '    return
    ""', "    // Note: in Swift, \"..<\" is a half-open range (exclusive): it includes\
    \ the first value, but not the last.\n    // The ..< operator creates ranges up\
    \ to, but excluding, the final value.\n    // let indices = word.characters.indices.dropLast()\n\
    \    let indices = word.startIndex ..< word.endIndex\n    var first_consonant_index\
    \ = 0\n    var last_consonant_index = 0\n    var first_vowel_index = 0\n    var\
    \ last_vowel_index = 0\n    var next_consonant_index = 0\n    var next_vowel_index\
    \ = 0\n    var vowel_index_array: [Int] = []\n    var consonant_index_array: [Int]\
    \ = []\n    var result_letter = \"\"\n    for i in indices {\n        let char\
    \ = word[i]\n        let char_value = String(char)\n        if char_value == \"\
    a\" || char_value == \"e\" || char_value == \"i\" || char_value == \"o\" || char_value\
    \ == \"u\" || char_value == \"A\" || char_value == \"E\" || char_value == \"I\"\
    \ || char_value == \"O\" || char_value == \"U\" {\n            vowel_index_array.append(word.characters.distance(from:\
    \ word.startIndex, to: i))\n        } else {\n            consonant_index_array.append(word.characters.distance(from:\
    \ word.startIndex, to: i))\n        }\n    }\n    first_consonant_index = consonant_index_array.first!\n\
    \    last_consonant_index = consonant_index_array.last!\n    first_vowel_index\
    \ = vowel_index_array.first!\n    last_vowel_index = vowel_index_array.last!\n\
    \    if first_consonant_index < first_vowel_index {\n        return \"\"\n   \
    \ }\n    if last_consonant_index > last_vowel_index {\n        return \"\"\n \
    \   }\n    next_consonant_index = consonant_index_array", "    let vowels = \"\
    aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var result = \"\"\
    \n    var closest = Int.max\n    for (index, char) in word.characters.enumerated()\
    \ {\n        if vowels.contains(char) {\n            guard let cIndex = word.characters.index(of:\
    \ char) else { continue }\n            let left = word.characters.index(before:\
    \ cIndex)\n            let right = word.characters.index(after: cIndex)\n    \
    \        if consonants.contains(word[left]) && consonants.contains(word[right])\
    \ {\n                let diff = index - word.characters.count\n              \
    \  if abs(diff) < closest {\n                    closest = abs(diff)\n       \
    \             result = String(char)\n                }\n            }\n      \
    \  }\n    }\n    return result", "    let vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var reversedWord = String(word.reversed())\n    var vowel = String()\n\
    \    for i in 0..<reversedWord.count - 1 {\n        if vowels.contains(String(reversedWord[reversedWord.index(reversedWord.startIndex,\
    \ offsetBy: i)])) && !vowels.contains(String(reversedWord[reversedWord.index(reversedWord.startIndex,\
    \ offsetBy: i + 1)])) {\n            vowel = String(reversedWord[reversedWord.index(reversedWord.startIndex,\
    \ offsetBy: i)])\n            break\n        }\n    }\n    return vowel", "  \
    \  var vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var cons:\
    \ [Character] = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"]\n    var non_vowels: [Character] = []\n    var vow: [Character] = []\n\
    \    for char in word {\n        if vowels.contains(char) {\n            vow.append(char)\n\
    \        } else if cons.contains(char) {\n            non_vowels.append(char)\n\
    \        }\n    }\n    if vow.count == 0 || non_vowels.count == 0 {\n        return\
    \ \"\"\n    }\n    var char1: Character = vow[vow.count - 1]\n    var char2: Character\
    \ = non_vowels[non_vowels.count - 1]\n    var index = word.firstIndex(of: char1)!\n\
    \    var count = 0\n    while index != word.endIndex {\n        if count > 1 {\n\
    \            break\n        }\n        if word[index] == char2 {\n           \
    \ count += 1\n        }\n        index = word.index(after: index)\n    }\n   \
    \ if count > 1 {\n        return String(char1)\n    } else {\n        return \"\
    \"\n    }", "    let v = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var index =\
    \ word.characters.count - 1\n    var s = \"\"\n    while index > 0 {\n       \
    \ if v.contains(String(word[word.index(word.startIndex, offsetBy: index)])) {\n\
    \            s = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \            index -= 1\n            if v.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index)])) {\n                s = \"\"\n            }\n           \
    \ break\n        }\n        index -= 1\n    }\n    return s", "    if word.isEmpty\
    \ {\n        return \"\"\n    }\n    let vowels = \"aeiouAEIOU\"\n    var consonantsCount\
    \ = 0\n    for letter in word.reversed() {\n        if vowels.contains(letter)\
    \ {\n            consonantsCount += 1\n        } else {\n            if consonantsCount\
    \ >= 2 {\n                return String(letter)\n            }\n        }\n  \
    \  }\n    return \"\"", "    let word = word.lowercased()\n    var leftVowel =\
    \ \"\"\n    var rightVowel = \"\"\n    var i = word.count - 1\n    while i >=\
    \ 0 {\n        let left = word.index(word.startIndex, offsetBy: i)\n        let\
    \ leftChar = word[left]\n        if leftChar == \"a\" || leftChar == \"e\" ||\
    \ leftChar == \"i\" || leftChar == \"o\" || leftChar == \"u\" {\n            leftVowel\
    \ = String(leftChar)\n            break\n        }\n        i -= 1\n    }\n  \
    \  if i == 0 {\n        return \"\"\n    }\n    i -= 1\n    while i >= 0 {\n \
    \       let left = word.index(word.startIndex, offsetBy: i)\n        let leftChar\
    \ = word[left]\n        if leftChar == \"a\" || leftChar == \"e\" || leftChar\
    \ == \"i\" || leftChar == \"o\" || leftChar == \"u\" {\n            rightVowel\
    \ = String(leftChar)\n            break\n        }\n        i -= 1\n    }\n  \
    \  return leftVowel.count > rightVowel.count ? rightVowel : leftVowel", "    var\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var answer =\
    \ \"\"\n    var reversed_word = String(word.reversed())\n    for i in 0..<reversed_word.count\
    \ {\n        let current_index = reversed_word.index(reversed_word.startIndex,\
    \ offsetBy: i)\n        let current_letter = String(reversed_word[current_index])\n\
    \        if vowels.contains(current_letter) {\n            if i < reversed_word.count\
    \ - 1 {\n                let previous_index = reversed_word.index(reversed_word.startIndex,\
    \ offsetBy: i + 1)\n                let previous_letter = String(reversed_word[previous_index])\n\
    \                if consonants.contains(previous_letter) {\n                 \
    \   answer = current_letter\n                    break\n                }\n  \
    \          }\n        }\n    }\n    return answer"]
stop_tokens:
- "\n}"
