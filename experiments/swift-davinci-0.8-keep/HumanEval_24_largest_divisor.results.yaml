language: swift
name: HumanEval_24_largest_divisor
results:
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let limit = Int(sqrt(Double(n))) + 1\n    for i in (2...limit).reverse()\
    \ {\n        if n % i == 0 {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(largest_divisor(n: 3) == 1)\n\
    assert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n:\
    \ 100) == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpjpmd_sjf.swift:6:21: error: cannot find 'sqrt' in scope\n    let\
    \ limit = Int(sqrt(Double(n))) + 1\n                    ^~~~\n/tmp/tmpjpmd_sjf.swift:7:26:\
    \ error: value of type 'ClosedRange<Int>' has no member 'reverse'\n    for i in\
    \ (2...limit).reverse() {\n             ~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpwoukbqny/tmpwoukbqny.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b6aac6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b6a7bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b6a7bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b6a7bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwoukbqny                        0x0000555b6f82d1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b8b6acb2460 __libc_start_main +
    245

    6    tmpwoukbqny                        0x0000555b6f82ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n/2).reverse() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1x0sufbs.swift:6:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var x = n\n    while x > 0 {\n        if n % x == 0 {\n \
    \           return x\n        }\n        x -= 1\n    }\n    return x\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp8auyima8/tmp8auyima8.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af95e5f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af95e2e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af95e2e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af95e2e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8auyima8                        0x000055a132ff9245 <unavailable> + 4677

    5    libc.so.6                          0x00002af95e7dc460 __libc_start_main +
    245

    6    tmp8auyima8                        0x000055a132ff8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let divisors = [Int](1...n/2)\n    return divisors.filter\
    \ { n % $0 == 0 }.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 0\n    var divisor = n\n    while divisor\
    \ > 0 {\n        if n % divisor == 0 {\n            largest_divisor = divisor\n\
    \        }\n        divisor -= 1\n    }\n    return largest_divisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpvcfx2401/tmpvcfx2401.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abaa65dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abaa62d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abaa62d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abaa62d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvcfx2401                        0x0000558475e4b33b <unavailable> + 4923

    5    libc.so.6                          0x00002abaa67cb460 __libc_start_main +
    245

    6    tmpvcfx2401                        0x0000558475e4aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var i = n\n    while i > 0 {\n        if n % i == 0 {\n \
    \           return i\n        }\n        i -= 1\n    }\n    return 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpr7_ujj3b/tmpr7_ujj3b.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10e2340c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10e2037b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10e2037988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10e20367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr7_ujj3b                        0x000055e11c222245 <unavailable> + 4677

    5    libc.so.6                          0x00002b10e252c460 __libc_start_main +
    245

    6    tmpr7_ujj3b                        0x000055e11c221ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824442
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1..<n).reverse() {\n        if n % i == 0 {\n \
    \           return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvtf7kt4a.swift:6:22: error: value of type 'Range<Int>' has no member\
    \ 'reverse'\n    for i in (1..<n).reverse() {\n             ~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824442
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var m = n\n    for i in (1..<n).reverse() {\n        if m\
    \ % i == 0 {\n            return i\n        }\n    }\n    return 0\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp11t3xxom.swift:7:22: error: value of type 'Range<Int>' has no member\
    \ 'reverse'\n    for i in (1..<n).reverse() {\n             ~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824442
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    let sqrtn = Int(sqrt(Double(n)))\n    for i in stride(from:\
    \ sqrtn, through: 2, by: -1) {\n        if n % i == 0 {\n            return i\n\
    \        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpqyelwwmx.swift:6:21: error: cannot find 'sqrt' in scope\n    let\
    \ sqrtn = Int(sqrt(Double(n)))\n                    ^~~~\n"
  stdout: ''
  timestamp: 1659824442
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\tlet limit = Int(floor(sqrt(Double(n))))\n\t\n\tfor i in (2...limit).reverse()\
    \ {\n\t\tif n % i == 0 {\n\t\t\treturn i\n\t\t}\n\t}\n\t\n\treturn 1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1aeo1i8k.swift:6:18: error: cannot find 'floor' in scope\n    \
    \    let limit = Int(floor(sqrt(Double(n))))\n                        ^~~~~\n\
    /tmp/tmp1aeo1i8k.swift:6:24: error: cannot find 'sqrt' in scope\n        let limit\
    \ = Int(floor(sqrt(Double(n))))\n                              ^~~~\n/tmp/tmp1aeo1i8k.swift:8:23:\
    \ error: value of type 'ClosedRange<Int>' has no member 'reverse'\n        for\
    \ i in (2...limit).reverse() {\n                 ~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in (2...n/2).reversed() {\n  \
    \      if n % i == 0 {\n            largest = i\n            break\n        }\n\
    \    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b49b10b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49b0dae561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b49b0dae286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b49b0dae13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b49b0dadbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmptkuqxxaw                        0x000055b2d4893910 <unavailable> + 6416

    6    tmptkuqxxaw                        0x000055b2d4893498 <unavailable> + 5272

    7    libc.so.6                          0x00002b49b12a3460 __libc_start_main +
    245

    8    tmptkuqxxaw                        0x000055b2d48931b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659824442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    if n < 2 {\n        return 1\n    }\n    var num = n\n  \
    \  var largest = 2\n    while num % 2 == 0 {\n        num /= 2\n    }\n    largest\
    \ = max(largest, num)\n    for i in stride(from: 3, through: n/2, by: 2) {\n \
    \       while num % i == 0 {\n            num /= i\n        }\n        largest\
    \ = max(largest, num)\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmp3cg2kee0/tmp3cg2kee0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afafa9e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afafa6d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afafa6d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afafa6d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3cg2kee0                        0x000055f2ca28c505 <unavailable> + 5381

    5    libc.so.6                          0x00002afafabce460 __libc_start_main +
    245

    6    tmp3cg2kee0                        0x000055f2ca28c1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1659824442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n\n    var max = divisor\n    while divisor\
    \ > 0 {\n        if n % divisor == 0 {\n            max = divisor\n        }\n\
    \        divisor -= 1\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpz13dpmfj/tmpz13dpmfj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0699f00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0699bf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0699bf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0699bf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz13dpmfj                        0x000055838b8c733b <unavailable> + 4923

    5    libc.so.6                          0x00002b069a0ec460 __libc_start_main +
    245

    6    tmpz13dpmfj                        0x000055838b8c6ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in stride(from: n - 1, through: 1, by: -1) {\n    \
    \    if n % i == 0 {\n            return i\n        }\n    }\n    return 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return n / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp2z684_il/tmp2z684_il.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06c620bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06c5f02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06c5f02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06c5f017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2z684_il                        0x0000557d7b7ad2c0 <unavailable> + 4800

    5    libc.so.6                          0x00002b06c63f7460 __libc_start_main +
    245

    6    tmp2z684_il                        0x0000557d7b7acef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824442
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var last_divisor = 1\n    for i in 2...n {\n        if n\
    \ % i == 0 {\n            last_divisor = i\n        }\n    }\n    return last_divisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpdvqypxg4/tmpdvqypxg4.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2494354c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b249404bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b249404b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b249404a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdvqypxg4                        0x000055be26f5d335 <unavailable> + 4917

    5    libc.so.6                          0x00002b2494540460 __libc_start_main +
    245

    6    tmpdvqypxg4                        0x000055be26f5cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824442
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n\treturn Int(sqrt(Double(n)))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp8u7qqgy1.swift:6:13: error: cannot find 'sqrt' in scope\n     \
    \   return Int(sqrt(Double(n)))\n                   ^~~~\n"
  stdout: ''
  timestamp: 1659824442
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var ld = n-1\n    for i in 1..<n {\n        if n % i == 0\
    \ {\n            ld = i\n        }\n    }\n    return ld\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824442
