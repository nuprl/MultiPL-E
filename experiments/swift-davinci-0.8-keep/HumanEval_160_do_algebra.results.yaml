language: swift
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  var operand = operand\n  for ops in operator\
    \ {\n    if ops == \"//\" {\n      let num1 = operand.removeFirst()\n      let\
    \ num2 = operand.removeFirst()\n      operand.insert(num1 / num2, at: 0)\n   \
    \ } else if ops == \"**\" {\n      let num1 = operand.removeFirst()\n      let\
    \ num2 = operand.removeFirst()\n      operand.insert(Int(pow(Double(num1), Double(num2))),\
    \ at: 0)\n    } else {\n      let num1 = operand.removeFirst()\n      let num2\
    \ = operand.removeFirst()\n      switch ops {\n      case \"+\":\n        operand.insert(num1\
    \ + num2, at: 0)\n      case \"-\":\n        operand.insert(num1 - num2, at: 0)\n\
    \      case \"*\":\n        operand.insert(num1 * num2, at: 0)\n      default:\n\
    \        break\n      }\n    }\n  }\n  return operand[0]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpb975ko6b.swift:22:14: error: expected Sequence expression for for-each\
    \ loop\n  for ops in operator {\n             ^\n/tmp/tmpb975ko6b.swift:22:14:\
    \ error: expected '{' to start the body of for-each loop\n  for ops in operator\
    \ {\n             ^\n"
  stdout: ''
  timestamp: 1660012339
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\tvar operand = operand\n\t\n\tvar operators\
    \ = operator\n\twhile operators.count > 0 {\n\t\t// Find index of first + or -\n\
    \t\tvar addSubtractIndex = operators.index(where: { $0 == \"+\" || $0 == \"-\"\
    \ })\n\t\tif addSubtractIndex == nil {\n\t\t\taddSubtractIndex = operators.count\n\
    \t\t}\n\t\t\n\t\t// Apply all * and / operators\n\t\tfor i in 0..<addSubtractIndex!\
    \ {\n\t\t\tlet op = operators[i]\n\t\t\tswitch op {\n\t\t\tcase \"*\":\n\t\t\t\
    \toperand[i] *= operand[i + 1]\n\t\t\tcase \"/\":\n\t\t\t\toperand[i] /= operand[i\
    \ + 1]\n\t\t\tcase \"**\":\n\t\t\t\toperand[i] = Int(pow(Double(operand[i]), Double(operand[i\
    \ + 1])))\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t\n\t\t\toperand.remove(at:\
    \ i + 1)\n\t\t\toperators.remove(at: i)\n\t\t}\n\t\t\n\t\tfor i in 0..<operators.count\
    \ {\n\t\t\tlet op = operators[i]\n\t\t\tswitch op {\n\t\t\tcase \"+\":\n\t\t\t\
    \toperand[i] += operand[i + 1]\n\t\t\tcase \"-\":\n\t\t\t\toperand[i] -= operand[i\
    \ + 1]\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t\n\t\t\toperand.remove(at:\
    \ i + 1)\n\t\t\toperators.remove(at: i)\n\t\t}\n\t}\n\t\n\treturn operand[0]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpsfxbyl65.swift:23:18: error: expected initial value after '='\n\
    \        var operators = operator\n                        ^\n/tmp/tmpsfxbyl65.swift:23:17:\
    \ error: consecutive statements on a line must be separated by ';'\n        var\
    \ operators = operator\n                       ^\n                       ;\n/tmp/tmpsfxbyl65.swift:23:26:\
    \ error: expected operator name in operator declaration\n        var operators\
    \ = operator\n                                ^\n"
  stdout: ''
  timestamp: 1660012340
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var res = operand[0]\n    for i in 0..<operator.count\
    \ {\n        let op = operator[i]\n        let num = operand[i+1]\n        switch\
    \ op {\n        case \"+\":\n            res += num\n        case \"-\":\n   \
    \         res -= num\n        case \"*\":\n            res *= num\n        case\
    \ \"//\":\n            res /= num\n        case \"**\":\n            res = Int(pow(Double(res),\
    \ Double(num)))\n        default:\n            break\n        }\n    }\n    return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(do_algebra(operator: [\"\
    **\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmphja6t5q6.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmphja6t5q6.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmphja6t5q6.swift:23:18: error: expected initial\
    \ value after '='\n        let op = operator[i]\n                 ^\n/tmp/tmphja6t5q6.swift:23:17:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ op = operator[i]\n                ^\n                ;\n/tmp/tmphja6t5q6.swift:23:26:\
    \ error: '[' is not allowed in operator names\n        let op = operator[i]\n\
    \                         ^\n"
  stdout: ''
  timestamp: 1660012339
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  let op1 = operand[0]\n  let op2 = operand[1]\n\
    \  switch operator[0] {\n  case \"+\":\n    return op1 + op2\n  case \"-\":\n\
    \    return op1 - op2\n  case \"*\":\n    return op1 * op2\n  case \"//\":\n \
    \   return op1 / op2\n  case \"**\":\n    return op1 ^ op2\n  default:\n    return\
    \ 0\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp3g0az67e.swift:23:10: error: expected expression in 'switch' statement\n\
    \  switch operator[0] {\n         ^\n/tmp/tmp3g0az67e.swift:23:18: error: '['\
    \ is not allowed in operator names\n  switch operator[0] {\n                 ^\n"
  stdout: ''
  timestamp: 1660012339
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var total: Int = operand[0]\n    for\
    \ i in 0..<operator.count {\n        let op = operator[i]\n        let num = operand[i+1]\n\
    \        switch op {\n        case \"+\":\n            total += num\n        case\
    \ \"-\":\n            total -= num\n        case \"*\":\n            total *=\
    \ num\n        case \"//\":\n            total /= num\n        case \"**\":\n\
    \            total = Int(pow(Double(total), Double(num)))\n        default:\n\
    \            return -1\n        }\n    }\n    return total\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpuxxx02zl.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpuxxx02zl.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpuxxx02zl.swift:23:18: error: expected initial\
    \ value after '='\n        let op = operator[i]\n                 ^\n/tmp/tmpuxxx02zl.swift:23:17:\
    \ error: consecutive statements on a line must be separated by ';'\n        let\
    \ op = operator[i]\n                ^\n                ;\n/tmp/tmpuxxx02zl.swift:23:26:\
    \ error: '[' is not allowed in operator names\n        let op = operator[i]\n\
    \                         ^\n"
  stdout: ''
  timestamp: 1660012339
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\tvar result = operand[0]\n\tfor i in 0..<operator.count\
    \ {\n\t\tswitch operator[i] {\n\t\tcase \"+\":\n\t\t\tresult += operand[i + 1]\n\
    \t\tcase \"-\":\n\t\t\tresult -= operand[i + 1]\n\t\tcase \"*\":\n\t\t\tresult\
    \ *= operand[i + 1]\n\t\tcase \"//\":\n\t\t\tresult /= operand[i + 1]\n\t\tcase\
    \ \"**\":\n\t\t\tresult = Int(pow(Double(result), Double(operand[i + 1])))\n\t\
    \tdefault:\n\t\t\tresult = 0\n\t\t}\n\t}\n\treturn result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpzj5ckfe6.swift:22:15: error: expected expression after operator\n\
    \        for i in 0..<operator.count {\n                     ^\n/tmp/tmpzj5ckfe6.swift:22:15:\
    \ error: expected '{' to start the body of for-each loop\n        for i in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpzj5ckfe6.swift:23:10: error: expected expression\
    \ in 'switch' statement\n                switch operator[i] {\n              \
    \         ^\n/tmp/tmpzj5ckfe6.swift:23:18: error: '[' is not allowed in operator\
    \ names\n                switch operator[i] {\n                              \
    \ ^\n"
  stdout: ''
  timestamp: 1660012339
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for index\
    \ in 0..<operator.count {\n        switch operator[index] {\n        case \"+\"\
    :\n            result += operand[index + 1]\n        case \"-\":\n           \
    \ result -= operand[index + 1]\n        case \"*\":\n            result *= operand[index\
    \ + 1]\n        case \"//\":\n            result /= operand[index + 1]\n     \
    \   case \"**\":\n            result = Int(pow(Double(result), Double(operand[index\
    \ + 1])))\n        default:\n            print(\"Invalid operator\")\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpgflmx06c.swift:22:22: error: expected expression after operator\n\
    \    for index in 0..<operator.count {\n                     ^\n/tmp/tmpgflmx06c.swift:22:22:\
    \ error: expected '{' to start the body of for-each loop\n    for index in 0..<operator.count\
    \ {\n                     ^\n/tmp/tmpgflmx06c.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[index] {\n               ^\n\
    /tmp/tmpgflmx06c.swift:23:24: error: '[' is not allowed in operator names\n  \
    \      switch operator[index] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012339
- exit_code: -4
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmpwbbphucm/tmpwbbphucm.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a1c585c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a1c27cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a1c27c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a1c27b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbbphucm                        0x000055fe5d45647b <unavailable> + 5243

    5    libc.so.6                          0x00002b0a1c771460 __libc_start_main +
    245

    6    tmpwbbphucm                        0x000055fe5d456029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012340
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.count == 0 || operand.count\
    \ == 0 {\n        return 0\n    }\n    if operator.count != operand.count - 1\
    \ {\n        return 0\n    }\n    var c = (operand: operand, operator: operator)\n\
    \    var newOperand = [Int]()\n    var newOperator = [String]()\n    for i in\
    \ 0..<c.operator.count {\n        if c.operator[i] == \"*\" || c.operator[i] ==\
    \ \"/\" {\n            if c.operator[i] == \"*\" {\n                newOperand.append(c.operand[i]\
    \ * c.operand[i + 1])\n            } else {\n                newOperand.append(c.operand[i]\
    \ / c.operand[i + 1])\n            }\n            if i != c.operator.count - 1\
    \ {\n                newOperator.append(c.operator[i + 1])\n            }\n  \
    \      } else {\n            newOperand.append(c.operand[i])\n            newOperator.append(c.operator[i])\n\
    \        }\n    }\n    c = (operand: newOperand, operator: newOperator)\n    var\
    \ result = c.operand[0]\n    for i in 0..<c.operator.count {\n        if c.operator[i]\
    \ == \"+\" {\n            result += c.operand[i + 1]\n        } else {\n     \
    \       result -= c.operand[i + 1]\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpieon0ujo.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count == 0 || operand.count == 0 {\n       ^\n\
    /tmp/tmpieon0ujo.swift:21:16: error: '.' is not allowed in operator names\n  \
    \  if operator.count == 0 || operand.count == 0 {\n               ^\n/tmp/tmpieon0ujo.swift:24:8:\
    \ error: expected expression, var, or let in 'if' condition\n    if operator.count\
    \ != operand.count - 1 {\n       ^\n/tmp/tmpieon0ujo.swift:24:16: error: '.' is\
    \ not allowed in operator names\n    if operator.count != operand.count - 1 {\n\
    \               ^\n/tmp/tmpieon0ujo.swift:27:42: error: expected expression in\
    \ list of expressions\n    var c = (operand: operand, operator: operator)\n  \
    \                                       ^\n/tmp/tmpieon0ujo.swift:27:41: error:\
    \ consecutive statements on a line must be separated by ';'\n    var c = (operand:\
    \ operand, operator: operator)\n                                        ^\n  \
    \                                      ;\n/tmp/tmpieon0ujo.swift:27:50: error:\
    \ ')' is not allowed in operator names\n    var c = (operand: operand, operator:\
    \ operator)\n                                                 ^\n/tmp/tmpieon0ujo.swift:27:14:\
    \ error: cannot create a single-element tuple with an element label\n    var c\
    \ = (operand: operand, operator: operator)\n             ^~~~~~~~~\n         \
    \    \n/tmp/tmpieon0ujo.swift:30:20: error: value of tuple type '(operand: [Int])'\
    \ has no member 'operator'\n    for i in 0..<c.operator.count {\n            \
    \     ~ ^~~~~~~~\n/tmp/tmpieon0ujo.swift:45:9: error: cannot assign value of type\
    \ '(operand: [Int], operator: [String])' to type '(operand: [Int])'\n    c = (operand:\
    \ newOperand, operator: newOperator)\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpieon0ujo.swift:47:20: error: value of tuple type '(operand: [Int])' has\
    \ no member 'operator'\n    for i in 0..<c.operator.count {\n                \
    \ ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660012339
- exit_code: -4
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: Exception
  stderr: 'tmp0fhj2pek/tmp0fhj2pek.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fcdb0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fcd806b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fcd806988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fcd8057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0fhj2pek                        0x00005602649ce47b <unavailable> + 5243

    5    libc.so.6                          0x00002b8fcdcfb460 __libc_start_main +
    245

    6    tmp0fhj2pek                        0x00005602649ce029 <unavailable> + 4137

    '
  stdout: ''
  timestamp: 1660012185
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var operand = operand\n    guard operand.count\
    \ > 1 else { return 0 }\n    while operator.count > 0 {\n        if operand.count\
    \ < 2 { return 0 }\n        let op = operator.removeFirst()\n        switch op\
    \ {\n        case \"+\":\n            operand[0] += operand.removeLast()\n   \
    \     case \"-\":\n            operand[0] -= operand.removeLast()\n        case\
    \ \"*\":\n            operand[0] *= operand.removeLast()\n        case \"//\"\
    :\n            operand[0] /= operand.removeLast()\n        case \"**\":\n    \
    \        operand[0] = Int(pow(Double(operand[0]), Double(operand.removeLast())))\n\
    \        default:\n            return 0\n        }\n    }\n    return operand[0]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpgiyxgbqz.swift:23:11: error: expected expression, var, or let in\
    \ 'while' condition\n    while operator.count > 0 {\n          ^\n/tmp/tmpgiyxgbqz.swift:23:19:\
    \ error: '.' is not allowed in operator names\n    while operator.count > 0 {\n\
    \                  ^\n"
  stdout: ''
  timestamp: 1660012339
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n  var result = operand[0]\n  for i in 0..<operator.count\
    \ {\n    switch operator[i] {\n    case \"+\":\n      result += operand[i + 1]\n\
    \    case \"-\":\n      result -= operand[i + 1]\n    case \"*\":\n      result\
    \ *= operand[i + 1]\n    case \"//\":\n      result /= operand[i + 1]\n    case\
    \ \"**\":\n      result = Int(pow(Double(result), Double(operand[i + 1])))\n \
    \   default:\n      break\n    }\n  }\n  return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand: [2,\
    \ 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmphjdh0b3c.swift:22:16: error: expected expression after operator\n\
    \  for i in 0..<operator.count {\n               ^\n/tmp/tmphjdh0b3c.swift:22:16:\
    \ error: expected '{' to start the body of for-each loop\n  for i in 0..<operator.count\
    \ {\n               ^\n/tmp/tmphjdh0b3c.swift:23:12: error: expected expression\
    \ in 'switch' statement\n    switch operator[i] {\n           ^\n/tmp/tmphjdh0b3c.swift:23:20:\
    \ error: '[' is not allowed in operator names\n    switch operator[i] {\n    \
    \               ^\n"
  stdout: ''
  timestamp: 1660012339
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var operand = operand\n    var expression\
    \ = \"\"\n    for (index, op) in operator.enumerated() {\n        expression +=\
    \ \"\\(operand[index]) \\(op) \\(operand[index + 1])\"\n    }\n    return eval(expression:\
    \ expression)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpy2s8l9a6.swift:23:24: error: expected Sequence expression for for-each\
    \ loop\n    for (index, op) in operator.enumerated() {\n                     \
    \  ^\n/tmp/tmpy2s8l9a6.swift:23:24: error: expected '{' to start the body of for-each\
    \ loop\n    for (index, op) in operator.enumerated() {\n                     \
    \  ^\n/tmp/tmpy2s8l9a6.swift:26:12: error: cannot find 'eval' in scope\n    return\
    \ eval(expression: expression)\n           ^~~~\n"
  stdout: ''
  timestamp: 1660012339
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for i in\
    \ 0..<operator.count {\n        if operator[i] == \"+\" {\n            result\
    \ += operand[i+1]\n        } else if operator[i] == \"-\" {\n            result\
    \ -= operand[i+1]\n        } else if operator[i] == \"*\" {\n            result\
    \ *= operand[i+1]\n        } else if operator[i] == \"//\" {\n            result\
    \ /= operand[i+1]\n        } else if operator[i] == \"**\" {\n            result\
    \ = Int(pow(Double(result), Double(operand[i+1])))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpnw8d5dgy.swift:22:18: error: expected expression after operator\n\
    \    for i in 0..<operator.count {\n                 ^\n/tmp/tmpnw8d5dgy.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for i in 0..<operator.count\
    \ {\n                 ^\n/tmp/tmpnw8d5dgy.swift:23:12: error: expected expression,\
    \ var, or let in 'if' condition\n        if operator[i] == \"+\" {\n         \
    \  ^\n/tmp/tmpnw8d5dgy.swift:23:20: error: '[' is not allowed in operator names\n\
    \        if operator[i] == \"+\" {\n                   ^\n/tmp/tmpnw8d5dgy.swift:25:19:\
    \ error: expected expression, var, or let in 'if' condition\n        } else if\
    \ operator[i] == \"-\" {\n                  ^\n/tmp/tmpnw8d5dgy.swift:25:27: error:\
    \ '[' is not allowed in operator names\n        } else if operator[i] == \"-\"\
    \ {\n                          ^\n/tmp/tmpnw8d5dgy.swift:27:19: error: expected\
    \ expression, var, or let in 'if' condition\n        } else if operator[i] ==\
    \ \"*\" {\n                  ^\n/tmp/tmpnw8d5dgy.swift:27:27: error: '[' is not\
    \ allowed in operator names\n        } else if operator[i] == \"*\" {\n      \
    \                    ^\n/tmp/tmpnw8d5dgy.swift:29:19: error: expected expression,\
    \ var, or let in 'if' condition\n        } else if operator[i] == \"//\" {\n \
    \                 ^\n/tmp/tmpnw8d5dgy.swift:29:27: error: '[' is not allowed in\
    \ operator names\n        } else if operator[i] == \"//\" {\n                \
    \          ^\n/tmp/tmpnw8d5dgy.swift:31:19: error: expected expression, var, or\
    \ let in 'if' condition\n        } else if operator[i] == \"**\" {\n         \
    \         ^\n/tmp/tmpnw8d5dgy.swift:31:27: error: '[' is not allowed in operator\
    \ names\n        } else if operator[i] == \"**\" {\n                         \
    \ ^\n"
  stdout: ''
  timestamp: 1660012339
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var answer = operand[0]\n    for x in\
    \ 0...operator.count - 1 {\n        switch operator[x] {\n        case \"+\":\n\
    \            answer += operand[x + 1]\n        case \"-\":\n            answer\
    \ -= operand[x + 1]\n        case \"*\":\n            answer *= operand[x + 1]\n\
    \        case \"//\":\n            answer /= operand[x + 1]\n        case \"**\"\
    :\n            answer = Int(pow(Double(answer), Double(operand[x + 1])))\n   \
    \     default:\n            break\n        }\n    }\n    return answer\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpahdwxnje.swift:22:18: error: expected expression after operator\n\
    \    for x in 0...operator.count - 1 {\n                 ^\n/tmp/tmpahdwxnje.swift:22:18:\
    \ error: expected '{' to start the body of for-each loop\n    for x in 0...operator.count\
    \ - 1 {\n                 ^\n/tmp/tmpahdwxnje.swift:23:16: error: expected expression\
    \ in 'switch' statement\n        switch operator[x] {\n               ^\n/tmp/tmpahdwxnje.swift:23:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[x] {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660012339
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n\t// Define an operation to do an operation\n\
    \tfunc doOperation(firstNum: Int, secondNum: Int, operator: String) -> Int {\n\
    \t\tswitch operator {\n\t\tcase \"+\":\n\t\t\treturn firstNum + secondNum\n\t\t\
    case \"-\":\n\t\t\treturn firstNum - secondNum\n\t\tcase \"*\":\n\t\t\treturn\
    \ firstNum * secondNum\n\t\tcase \"//\":\n\t\t\treturn firstNum / secondNum\n\t\
    \tcase \"**\":\n\t\t\treturn Int(pow(Double(firstNum), Double(secondNum)))\n\t\
    \tdefault:\n\t\t\treturn 0\n\t\t}\n\t}\n\t\n\t// Define the next operation\n\t\
    func nextOperation(operand: [Int], operator: [String]) -> Int {\n\t\tif operator.count\
    \ == 0 {\n\t\t\treturn operand[0]\n\t\t}\n\t\tif operator[0] == \"*\" || operator[0]\
    \ == \"//\" {\n\t\t\treturn doOperation(firstNum: operand[0], secondNum: operand[1],\
    \ operator: operator[0])\n\t\t}\n\t\treturn doOperation(firstNum: operand[0],\
    \ secondNum: nextOperation(operand: [operand[1]], operator: Array(operator[1...])),\
    \ operator: operator[0])\n\t}\n\t\n\t// Give the result\n\treturn nextOperation(operand:\
    \ operand, operator: operator)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpw2fm92zh.swift:23:10: error: expected expression in 'switch' statement\n\
    \                switch operator {\n                       ^\n/tmp/tmpw2fm92zh.swift:23:19:\
    \ error: expected operator name in operator declaration\n                switch\
    \ operator {\n                                ^\n/tmp/tmpw2fm92zh.swift:41:6:\
    \ error: expected expression, var, or let in 'if' condition\n                if\
    \ operator.count == 0 {\n                   ^\n/tmp/tmpw2fm92zh.swift:41:14: error:\
    \ '.' is not allowed in operator names\n                if operator.count == 0\
    \ {\n                           ^\n/tmp/tmpw2fm92zh.swift:44:6: error: expected\
    \ expression, var, or let in 'if' condition\n                if operator[0] ==\
    \ \"*\" || operator[0] == \"//\" {\n                   ^\n/tmp/tmpw2fm92zh.swift:44:14:\
    \ error: '[' is not allowed in operator names\n                if operator[0]\
    \ == \"*\" || operator[0] == \"//\" {\n                           ^\n/tmp/tmpw2fm92zh.swift:44:36:\
    \ error: '[' is not allowed in operator names\n                if operator[0]\
    \ == \"*\" || operator[0] == \"//\" {\n                                      \
    \           ^\n/tmp/tmpw2fm92zh.swift:47:108: error: expected expression in list\
    \ of expressions\n                return doOperation(firstNum: operand[0], secondNum:\
    \ nextOperation(operand: [operand[1]], operator: Array(operator[1...])), operator:\
    \ operator[0])\n                                                             \
    \                                                            ^\n/tmp/tmpw2fm92zh.swift:47:116:\
    \ error: '[' is not allowed in operator names\n                return doOperation(firstNum:\
    \ operand[0], secondNum: nextOperation(operand: [operand[1]], operator: Array(operator[1...])),\
    \ operator: operator[0])\n                                                   \
    \                                                                            \
    \  ^\n/tmp/tmpw2fm92zh.swift:47:134: error: expected operator name in operator\
    \ declaration\n                return doOperation(firstNum: operand[0], secondNum:\
    \ nextOperation(operand: [operand[1]], operator: Array("
  stdout: ''
  timestamp: 1660012339
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    var i =\
    \ 0\n    while i < operator.count {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i + 1]\n        case \"-\":\n        \
    \    result -= operand[i + 1]\n        case \"*\":\n            result *= operand[i\
    \ + 1]\n        case \"//\":\n            result /= operand[i + 1]\n        case\
    \ \"**\":\n            result = Int(pow(Double(result), Double(operand[i + 1])))\n\
    \        default:\n            return -1\n        }\n        i += 1\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpjgk9wudk.swift:23:15: error: expected expression after operator\n\
    \    while i < operator.count {\n              ^\n/tmp/tmpjgk9wudk.swift:23:23:\
    \ error: '.' is not allowed in operator names\n    while i < operator.count {\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1660012339
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    var result = operand[0]\n    for (index,\
    \ value) in operand.enumerated() {\n        if index == 0 {\n            continue\n\
    \        }\n        switch operator[index - 1] {\n        case \"+\":\n      \
    \      result += value\n        case \"-\":\n            result -= value\n   \
    \     case \"*\":\n            result *= value\n        case \"//\":\n       \
    \     result /= value\n        case \"**\":\n            result = Int(pow(Double(result),\
    \ Double(value)))\n        default:\n            break\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(do_algebra(operator:\
    \ [\"**\", \"*\", \"+\"], operand: [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator:\
    \ [\"+\", \"*\", \"-\"], operand: [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator:\
    \ [\"//\", \"*\"], operand: [7, 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmp47u_fy4u.swift:26:16: error: expected expression in 'switch' statement\n\
    \        switch operator[index - 1] {\n               ^\n/tmp/tmp47u_fy4u.swift:26:24:\
    \ error: '[' is not allowed in operator names\n        switch operator[index -\
    \ 1] {\n                       ^\n"
  stdout: ''
  timestamp: 1660012339
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    let op = operator.reduce([], {\n   \
    \     if $0.count == 0 {\n            return [$1]\n        } else {\n        \
    \    var pre = $0\n            pre.append($1)\n            return pre\n      \
    \  }\n    })\n    let opr = operand.reduce([], {\n        if $0.count == 0 {\n\
    \            return [$1]\n        } else {\n            var pre = $0\n       \
    \     pre.append($1)\n            return pre\n        }\n    })\n    func _do_algebra(op:\
    \ [String], opr: [Int]) -> Int {\n        if op.count == 0 {\n            return\
    \ opr[0]\n        } else {\n            if op[0] == \"+\" {\n                return\
    \ opr[0] + _do_algebra(op: op.dropFirst(), opr: opr.dropFirst())\n           \
    \ } else if op[0] == \"-\" {\n                return opr[0] - _do_algebra(op:\
    \ op.dropFirst(), opr: opr.dropFirst())\n            } else if op[0] == \"*\"\
    \ {\n                return opr[0] * _do_algebra(op: op.dropFirst(), opr: opr.dropFirst())\n\
    \            } else if op[0] == \"//\" {\n                return opr[0] / _do_algebra(op:\
    \ op.dropFirst(), opr: opr.dropFirst())\n            } else if op[0] == \"**\"\
    \ {\n                return Int(pow(Double(opr[0]), Double(_do_algebra(op: op.dropFirst(),\
    \ opr: opr.dropFirst()))))\n            } else {\n                return 0\n \
    \           }\n        }\n    }\n    return _do_algebra(op: op, opr: opr)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpkt9q1lni.swift:21:14: error: expected initial value after '='\n\
    \    let op = operator.reduce([], {\n             ^\n/tmp/tmpkt9q1lni.swift:21:13:\
    \ error: consecutive statements on a line must be separated by ';'\n    let op\
    \ = operator.reduce([], {\n            ^\n            ;\n/tmp/tmpkt9q1lni.swift:21:22:\
    \ error: '.' is not allowed in operator names\n    let op = operator.reduce([],\
    \ {\n                     ^\n/tmp/tmpkt9q1lni.swift:44:52: error: cannot convert\
    \ value of type 'ArraySlice<String>' to expected argument type '[String]'\n  \
    \              return opr[0] + _do_algebra(op: op.dropFirst(), opr: opr.dropFirst())\n\
    \                                                   ^\n/tmp/tmpkt9q1lni.swift:44:74:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n                return opr[0] + _do_algebra(op: op.dropFirst(), opr:\
    \ opr.dropFirst())\n                                                         \
    \                ^\n/tmp/tmpkt9q1lni.swift:46:52: error: cannot convert value\
    \ of type 'ArraySlice<String>' to expected argument type '[String]'\n        \
    \        return opr[0] - _do_algebra(op: op.dropFirst(), opr: opr.dropFirst())\n\
    \                                                   ^\n/tmp/tmpkt9q1lni.swift:46:74:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n                return opr[0] - _do_algebra(op: op.dropFirst(), opr:\
    \ opr.dropFirst())\n                                                         \
    \                ^\n/tmp/tmpkt9q1lni.swift:48:52: error: cannot convert value\
    \ of type 'ArraySlice<String>' to expected argument type '[String]'\n        \
    \        return opr[0] * _do_algebra(op: op.dropFirst(), opr: opr.dropFirst())\n\
    \                                                   ^\n/tmp/tmpkt9q1lni.swift:48:74:\
    \ error: cannot convert value of type 'ArraySlice<Int>' to expected argument type\
    \ '[Int]'\n                return opr[0] * _do_algebra(op: op.dropFirst(), opr:\
    \ opr.dropFirst())\n                                                         \
    \                ^\n/tmp/tmpkt9q"
  stdout: ''
  timestamp: 1660012339
- exit_code: 1
  program: "\n/// Given two lists operator, and operand. The first list has basic\
    \ algebra operations, and \n/// the second list is a list of integers. Use the\
    \ two given lists to build the algebric \n/// expression and return the evaluation\
    \ of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n\
    /// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n\
    /// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array\
    \ = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n///\
    \ The length of operator list is equal to the length of operand list minus one.\n\
    /// Operand is a list of of non-negative integers.\n/// Operator list has at least\
    \ one operator, and operand list has at least two operands.\nfunc do_algebra(operator:\
    \ [String], operand: [Int]) -> Int {\n    if operator.count == 0 || operand.count\
    \ == 0 {\n        return 0\n    }\n    var result = operand[0]\n    for i in 0..<operator.count\
    \ {\n        if i == 0 {\n            result = Operation.init(rawValue: operator[i])!.operate(operand[i],\
    \ operand[i+1])\n        } else {\n            result = Operation.init(rawValue:\
    \ operator[i])!.operate(result, operand[i+1])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(do_algebra(operator: [\"**\", \"*\", \"+\"], operand:\
    \ [2, 3, 4, 5]) == 37)\nassert(do_algebra(operator: [\"+\", \"*\", \"-\"], operand:\
    \ [2, 3, 4, 5]) == 9)\nassert(do_algebra(operator: [\"//\", \"*\"], operand: [7,\
    \ 3, 4]) == 8)"
  status: SyntaxError
  stderr: "/tmp/tmpze9ttvj1.swift:21:8: error: expected expression, var, or let in\
    \ 'if' condition\n    if operator.count == 0 || operand.count == 0 {\n       ^\n\
    /tmp/tmpze9ttvj1.swift:21:16: error: '.' is not allowed in operator names\n  \
    \  if operator.count == 0 || operand.count == 0 {\n               ^\n/tmp/tmpze9ttvj1.swift:25:18:\
    \ error: expected expression after operator\n    for i in 0..<operator.count {\n\
    \                 ^\n/tmp/tmpze9ttvj1.swift:25:18: error: expected '{' to start\
    \ the body of for-each loop\n    for i in 0..<operator.count {\n             \
    \    ^\n/tmp/tmpze9ttvj1.swift:27:47: error: expected expression in list of expressions\n\
    \            result = Operation.init(rawValue: operator[i])!.operate(operand[i],\
    \ operand[i+1])\n                                              ^\n/tmp/tmpze9ttvj1.swift:27:55:\
    \ error: '[' is not allowed in operator names\n            result = Operation.init(rawValue:\
    \ operator[i])!.operate(operand[i], operand[i+1])\n                          \
    \                            ^\n/tmp/tmpze9ttvj1.swift:29:47: error: expected\
    \ expression in list of expressions\n            result = Operation.init(rawValue:\
    \ operator[i])!.operate(result, operand[i+1])\n                              \
    \                ^\n/tmp/tmpze9ttvj1.swift:29:55: error: '[' is not allowed in\
    \ operator names\n            result = Operation.init(rawValue: operator[i])!.operate(result,\
    \ operand[i+1])\n                                                      ^\n"
  stdout: ''
  timestamp: 1660012339
