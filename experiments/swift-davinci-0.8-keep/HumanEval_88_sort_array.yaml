name: HumanEval_88_sort_array
language: swift
prompt: "\n/// Given an array of non-negative integers, return a copy of the given\
  \ array after sorting,\n/// you will sort the given array in ascending order if\
  \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
  \ order if the sum( first index value, last index value) is even.\n/// Note:\n///\
  \ * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n///\
  \ * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3,\
  \ 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunc\
  \ sort_array(array: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as\
  \ [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4,\
  \ 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
  \ 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\n\
  assert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\
  assert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
completions: ["    var oddArray = [Int]()\n    var evenArray = [Int]()\n    var result\
    \ = [Int]()\n    \n    for element in array {\n        if element % 2 == 0 {\n\
    \            evenArray.append(element)\n        } else {\n            oddArray.append(element)\n\
    \        }\n    }\n    \n    if (array.first! + array.last!) % 2 == 0 {\n    \
    \    evenArray.sort { (a, b) -> Bool in\n            return a > b\n        }\n\
    \        oddArray.sort { (a, b) -> Bool in\n            return a > b\n       \
    \ }\n    } else {\n        evenArray.sort { (a, b) -> Bool in\n            return\
    \ a < b\n        }\n        oddArray.sort { (a, b) -> Bool in\n            return\
    \ a < b\n        }\n    }\n    \n    var index = 0\n    while (index < array.count)\
    \ {\n        if array[index] % 2 == 0 {\n            result.append(evenArray.removeFirst())\n\
    \        } else {\n            result.append(oddArray.removeFirst())\n       \
    \ }\n        index += 1\n    }\n    \n    return result", "    let odd: Bool =\
    \ array.count % 2 != 0\n    let sorted = array.sorted()\n    return odd ? sorted\
    \ : sorted.reversed()", "    var result = array\n    let key = array.first ??\
    \ 0\n    let index = array.count - 1\n    let sum = key + array[index]\n    if\
    \ sum % 2 == 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by:\
    \ <)\n    }\n    return result", "    if array.count < 1 {\n        return array\n\
    \    }\n    let swapped_array =  swap_first_and_last(array: array)\n    let sum_odd_even\
    \ = swapped_array.first! + swapped_array.last!\n    if sum_odd_even % 2 == 0 {\n\
    \        return swapped_array.sorted(by: >)\n    }\n    return swapped_array.sorted(by:\
    \ <)", '    return array.count < 3 ? array : array.sorted(by: { $0 + $1 % 2 ==
    0 ? $0 > $1 : $0 < $1 })', "    var a = array\n    let first = a.removeFirst()\n\
    \    let last = a.removeLast()\n    let sum = first + last\n    var isOdd = false\n\
    \    if sum % 2 == 1 {\n        isOdd = true\n    }\n    if isOdd {\n        a.sort()\n\
    \    } else {\n        a.sort(by: {$0 > $1})\n    }\n    return [first] + a +\
    \ [last]", "    if array.count == 0 {\n        return []\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    if array.count > 2 {\n        let sum\
    \ = array[0] + array[array.count - 1]\n        if sum % 2 == 0 {\n           \
    \ return array.sorted { $0 > $1 }\n        } else {\n            return array.sorted\
    \ { $0 < $1 }\n        }\n    }\n    return []", '    return []', "    var mutableArray\
    \ = array\n    if array.isEmpty {\n        return []\n    }\n    if array.count\
    \ == 1 {\n        return array\n    }\n    for i in 0..<array.count - 1 {\n  \
    \      for j in i + 1..<array.count {\n            if array[i] > array[j] {\n\
    \                mutableArray.swapAt(i, j)\n            }\n        }\n    }\n\
    \    if array.first! + array.last! % 2 == 0 {\n        mutableArray.reverse()\n\
    \    }\n    return mutableArray", "    guard array.count > 1 else { return array\
    \ }\n    return array.sorted {\n        $0.isEven == $1.isEven ? $0 < $1 : $0\
    \ > $1\n    }", "    var sortedArray = array\n    if let first = sortedArray.first,\
    \ let last = sortedArray.last, (first + last) % 2 == 0 {\n        sortedArray.sort(by:\
    \ { $0 > $1 })\n    } else {\n        sortedArray.sort(by: { $0 < $1 })\n    }\n\
    \    return sortedArray", "    var result: [Int] = array.sorted()\n    if array.isEmpty\
    \ || array.count == 1 {\n        return array\n    }\n    if array[0] + array[array.count\
    \ - 1] % 2 == 0 {\n        result = array.sorted().reversed()\n    }\n    return\
    \ result", "    guard array.count > 1 else { return array }\n    var result =\
    \ array\n    let isEven: Bool = array.first! + array.last! % 2 == 0\n    let range\
    \ = 0..<result.count\n    result[range].sort {\n        if isEven {\n        \
    \    return $0 > $1\n        } else {\n            return $0 < $1\n        }\n\
    \    }\n    return result", "    guard array.count > 0 else { return [] }\n  \
    \  var arr = array\n    let isEven = (array[0] + array[array.count - 1]) % 2 ==\
    \ 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n      \
    \      if isEven {\n                if arr[i] < arr[j] {\n                   \
    \ arr.swapAt(i, j)\n                }\n            } else {\n                if\
    \ arr[i] > arr[j] {\n                    arr.swapAt(i, j)\n                }\n\
    \            }\n        }\n    }\n    return arr", "    let first = array.first\
    \ ?? 0\n    let last = array.last ?? 0\n    let odd = (first + last) % 2 != 0\n\
    \    let sorted = array.sorted(by: odd ? > : <)\n    return sorted", "    if array.count\
    \ == 0 {\n        return []\n    }\n    if array.count == 1 {\n        return\
    \ array\n    }\n    if array.count == 2 {\n        if array[0] + array[1] % 2\
    \ == 0 {\n            return [array[1], array[0]]\n        } else {\n        \
    \    return array\n        }\n    }\n    var sum = array[0] + array[array.count\
    \ - 1]\n    var result = array\n    if sum % 2 == 0 {\n        result.sort { $0\
    \ > $1 }\n    } else {\n        result.sort { $0 < $1 }\n    }\n    return result",
  "    let nums = array.count\n    let res = array.sorted(by: {\n        if nums %\
    \ 2 == 0 {\n            return $0 > $1\n        } else {\n            return $0\
    \ < $1\n        }\n    })\n    return res", "    var copy = array\n    copy.sort\
    \ { (a, b) -> Bool in\n        return (array.first! + array.last!) % 2 == 0 ?\
    \ b < a : a < b\n    }\n    return copy", "    if array.count == 0 {\n       \
    \ return []\n    }\n    if array.count == 1 {\n        return array\n    }\n \
    \   if array.count % 2 == 0 {\n        var result = array\n        for index in\
    \ 0..<array.count/2 {\n            result[index*2] = array[array.count-index-1]\n\
    \            result[index*2+1] = array[index]\n        }\n        return result\n\
    \    } else {\n        var result = array\n        for index in 0..<array.count/2\
    \ {\n            result[index*2] = array[array.count-index-1]\n            result[index*2+1]\
    \ = array[index]\n        }\n        result[array.count-1] = array[array.count/2]\n\
    \        return result\n    }", "  let reverse = array.count > 0 && (array[0]\
    \ + array[array.count - 1]) % 2 == 0\n  return array.sorted(by: { $0 < $1 })"]
stop_tokens:
- "\n}"
