name: HumanEval_16_count_distinct_characters
language: swift
prompt: "\n/// Given a string, find out how many distinct characters (regardless of\
  \ case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n/// 3\n\
  /// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
  \ String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(count_distinct_characters(string: \"\")\
  \ == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
  \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
  ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
completions: ['    return Set(string.characters).count', "    return string.lowercased().characters.reduce(Set<Character>())\
    \ { (result, character) in\n        var result = result\n        result.insert(character)\n\
    \        return result\n    }.count", "    var distinct_characters = Set<Character>()\n\
    \    for character in string {\n        distinct_characters.insert(character)\n\
    \    }\n    return distinct_characters.count", "    // TODO: Fill in the code\
    \ here\n    return 0", '    return 0', "    var set = Set<Character>()\n    for\
    \ c in string {\n        set.insert(c)\n    }\n    return set.count", "    let\
    \ lc = string.lowercased()\n    let chars = Array(lc)\n    let set = Set(chars)\n\
    \    return set.count", "    // convert the string to upper case first, because\
    \ 'a' and 'A' are\n    // the same character\n    let uppercase = string.uppercaseString\n\
    \    // split the string into an array of characters\n    let character_array\
    \ = uppercase.characters.map { String($0) }\n    // return the number of unique\
    \ characters in the array\n    return Set(character_array).count", '    return
    Array(Set(string.lowercased())).count', "    // get characters and set it\n  \
    \  var set = Set<Character>()\n    let chars = string.characters\n    for c in\
    \ chars {\n        set.insert(c)\n    }\n    return set.count", "    let set:\
    \ Set<Character> = Set(string.lowercased())\n    return set.count", "    let lowercase\
    \ = string.lowercased()\n    return Set(lowercase).count", "    let a = Array(string)\n\
    \    let lowercase = a.map { $0.lowercased() }\n    return Set(lowercase).count",
  "    var str = string.lowercased()\n    let strLen = str.characters.count\n    var\
    \ count = 0\n    var i = 0\n\n    while i < strLen {\n        var j = 0\n    \
    \    while j < strLen {\n            if str[i] == str[j] {\n                str.remove(at:\
    \ str.index(str.startIndex, offsetBy: j))\n                j -= 1\n          \
    \      strLen -= 1\n            }\n            j += 1\n        }\n        count\
    \ += 1\n        i += 1\n    }\n    return count", "  var chars = [Character: Int]()\n\
    \  for c in string.characters {\n    chars[c] = 1\n  }\n  return chars.count",
  '    return Set(string.lowercased()).count', "    var seenCharacters = Set<Character>()\n\
    \    for character in string {\n        seenCharacters.insert(character)\n   \
    \ }\n    return seenCharacters.count", "    var result = Set<Character>()\n  \
    \  for char in string {\n        result.insert(char)\n    }\n    return result.count",
  '    return Set(string.lowercased()).count', "    //your code here\n    let chars\
    \ = string.lowercased().characters\n    let sortedchars = chars.sorted()\n   \
    \ var dict = [Character: Int]()\n    for char in sortedchars {\n        if dict[char]\
    \ == nil {\n            dict[char] = 1\n        }\n    }\n    return dict.count"]
stop_tokens:
- "\n}"
