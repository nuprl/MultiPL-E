name: HumanEval_92_any_int
language: swift
prompt: "\n/// Create a function that takes 3 numbers.\n/// Returns true if one of\
  \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
  /// Returns false in any other cases.\n/// Examples\n/// any_int(5, 2, 7) \u279E\
  \ True\n/// any_int(3, 2, 2) \u279E False\n/// any_int(3, -2, 1) \u279E True\n///\
  \ any_int(3.6, -2.2, 2) \u279E False\nfunc any_int(x: Double, y: Double, z: Double)\
  \ -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(any_int(x: 2, y: 3, z: 1) == true)\nassert(any_int(x:\
  \ 2.5, y: 2, z: 3) == false)\nassert(any_int(x: 1.5, y: 5, z: 3.5) == false)\nassert(any_int(x:\
  \ 2, y: 6, z: 2) == false)\nassert(any_int(x: 4, y: 2, z: 2) == true)\nassert(any_int(x:\
  \ 2.2, y: 2.2, z: 2.2) == false)\nassert(any_int(x: -4, y: 6, z: 2) == true)\nassert(any_int(x:\
  \ 2, y: 1, z: 1) == true)\nassert(any_int(x: 3, y: 4, z: 7) == true)\nassert(any_int(x:\
  \ 3.0, y: 4, z: 7) == false)"
completions: ["    if x == y + z || y == x + z || z == x + y {\n        return true\n\
    \    } else {\n        return false\n    }", "    let result: Bool\n    if x ==\
    \ y + z || y == x + z || z == x + y {\n        result = true\n    } else {\n \
    \       result = false\n    }\n    return result", '    return (Int(x) == Int(y)
    + Int(z)) || (Int(y) == Int(x) + Int(z)) || (Int(z) == Int(x) + Int(y))', '    return
    (x * y * z) == 0 && (x == (y + z) || y == (x + z) || z == (x + y))', "    if x\
    \ == y + z && x.truncatingRemainder(dividingBy: 1) == 0 && y.truncatingRemainder(dividingBy:\
    \ 1) == 0 && z.truncatingRemainder(dividingBy: 1) == 0 {\n        return true\n\
    \    } else if y == x + z && x.truncatingRemainder(dividingBy: 1) == 0 && y.truncatingRemainder(dividingBy:\
    \ 1) == 0 && z.truncatingRemainder(dividingBy: 1) == 0 {\n        return true\n\
    \    } else if z == x + y && x.truncatingRemainder(dividingBy: 1) == 0 && y.truncatingRemainder(dividingBy:\
    \ 1) == 0 && z.truncatingRemainder(dividingBy: 1) == 0 {\n        return true\n\
    \    } else {\n        return false\n    }", "    if (x.truncatingRemainder(dividingBy:\
    \ 1) == 0) && (y.truncatingRemainder(dividingBy: 1) == 0) && (z.truncatingRemainder(dividingBy:\
    \ 1) == 0) {\n        if (x == y + z) || (y == x + z) || (z == x + y) {\n    \
    \        return true\n        }\n    }\n    return false", '    return abs(x.truncatingRemainder(dividingBy:
    1)) == 0 && abs(y.truncatingRemainder(dividingBy: 1)) == 0 && abs(z.truncatingRemainder(dividingBy:
    1)) == 0 && (x + y == z || x + z == y || y + z == x)', '    return x.truncatingRemainder(dividingBy:
    1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:
    1) == 0 && (x + y == z || x + z == y || y + z == x)', '    return (x == y + z
    || y == x + z || z == x + y) && x.truncatingRemainder(dividingBy: 1) == 0 && y.truncatingRemainder(dividingBy:
    1) == 0 && z.truncatingRemainder(dividingBy: 1) == 0', "    let x_flr = floor(x)\n\
    \    let y_flr = floor(y)\n    let z_flr = floor(z)\n    if (x_flr == y_flr +\
    \ z_flr) || (y_flr == x_flr + z_flr) || (z_flr == x_flr + y_flr) {\n        return\
    \ true\n    } else {\n        return false\n    }", '    return (x.truncatingRemainder(dividingBy:
    1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:
    1) == 0) && (x+y == z || x+z == y || y+z == x)', '    return (x == y + z || y
    == x + z || z == x + y) && floor(x) == x && floor(y) == y && floor(z) == z', '    return
    (x == y + z || y == x + z || z == x + y) && x.truncatingRemainder(dividingBy:
    1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:
    1) == 0', "    if x.truncatingRemainder(dividingBy: 1) == 0, y.truncatingRemainder(dividingBy:\
    \ 1) == 0, z.truncatingRemainder(dividingBy: 1) == 0 {\n        if x + y == z\
    \ || x + z == y || y + z == x {\n            return true\n        }\n    }\n \
    \   return false", '  return false', "    if x.truncatingRemainder(dividingBy:\
    \ 1) == 0 && y.truncatingRemainder(dividingBy: 1) == 0 && z.truncatingRemainder(dividingBy:\
    \ 1) == 0 {\n        if x == y + z || y == x + z || z == x + y {\n           \
    \ return true\n        }\n    }\n    return false", '    return (x + y == z ||
    x + z == y || y + z == x) && x.truncatingRemainder(dividingBy: 1) == 0 && y.truncatingRemainder(dividingBy:
    1) == 0 && z.truncatingRemainder(dividingBy: 1) == 0', '    return isInt(x) &&
    isInt(y) && isInt(z) && (x == y + z || x == y - z || x == z - y)', '    return
    x.isInteger && y.isInteger && z.isInteger && (x == y + z || y == x + z || z ==
    x + y)', '    return (x.truncatingRemainder(dividingBy: 1) == 0 && y.truncatingRemainder(dividingBy:
    1) == 0 && z.truncatingRemainder(dividingBy: 1) == 0) && (x + y == z || x + z
    == y || y + z == x)']
stop_tokens:
- "\n}"
