name: HumanEval_125_split_words
language: swift
prompt: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
  \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
  /// should split on commas ',' if no commas exists you should return the number\
  \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
  \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
  \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\",\
  \ \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String) ->\
  \ Result<[String], Int> {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
  Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
  Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
  Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
  Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
  assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\"\
  ) == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
completions: ["    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0\
    \ >= \"a\" && $0 <= \"z\" }.enumerated().reduce(0) { return $1.offset % 2 == 0\
    \ ? $0 : $0 + 1 })\n    }", "    let spaces = txt.components(separatedBy: \" \"\
    )\n    let commas = txt.components(separatedBy: \",\")\n    if spaces.count ==\
    \ 1 {\n        if commas.count == 1 {\n            return .failure(txt.lowercased().filter\
    \ {$0.asciiValue! % 2 == 1}.count)\n        } else {\n            return .success(commas)\n\
    \        }\n    } else {\n        return .success(spaces)\n    }", "    if txt.contains(\"\
    \ \") {\n        return .success(txt.components(separatedBy: \" \"))\n    } else\
    \ if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.asciiValue! % 2 == 1 }.count)\n    }", "\treturn .success(txt.split{ $0.isWhitespace\
    \ || $0 == \",\" }.map{ String($0) })", "    if let list = txt.split(separator:\
    \ \" \").first {\n        return .success(Array(list))\n    } else if let list\
    \ = txt.split(separator: \",\").first {\n        return .success(Array(list))\n\
    \    } else {\n        var count = 0\n        for char in txt {\n            if\
    \ char.lowercased() == char, char.asciiValue! % 2 == 1 {\n                count\
    \ += 1\n            }\n        }\n        return .failure(count)\n    }", "\t\
    if txt.contains(\" \") {\n\t\treturn .success(txt.components(separatedBy: \" \"\
    ))\n\t} else if txt.contains(\",\") {\n\t\treturn .success(txt.components(separatedBy:\
    \ \",\"))\n\t} else {\n\t\treturn .failure(txt.lowercased().filter {\n\t\t\tlet\
    \ index = \"abcdefghijklmnopqrstuvwxyz\".firstIndex(of: $0)!\n\t\t\treturn index\
    \ % 2 == 1\n\t\t}.count)\n\t}", "    if txt.contains(\" \") {\n        return\
    \ .success(txt.components(separatedBy: \" \"))\n    } else if txt.contains(\"\
    ,\") {\n        return .success(txt.components(separatedBy: \",\"))\n    } else\
    \ {\n        return .failure(txt.filter { $0.isLowercase && $0.unicodeScalars.first!.value\
    \ % 2 == 1 }.count)\n    }", "    var numOdd = 0\n    let splitArray = txt.components(separatedBy:\
    \ \" \")\n    if splitArray.count > 1 {\n        return .ok(splitArray)\n    }\
    \ else {\n        let splitArrayComma = txt.components(separatedBy: \",\")\n \
    \       if splitArrayComma.count > 1 {\n            return .ok(splitArrayComma)\n\
    \        } else {\n            for (index, char) in txt.enumerated() {\n     \
    \           if index % 2 == 0 {\n                    if char.lowercased() == char\
    \ {\n                        numOdd += 1\n                    }\n            \
    \    }\n            }\n            return .error(numOdd)\n        }\n    }", " \
    \   if let _ = txt.firstIndex(of: \" \") {\n        return .success(txt.split(separator:\
    \ \" \").map(String.init))\n    } else if let _ = txt.firstIndex(of: \",\") {\n\
    \        return .success(txt.split(separator: \",\").map(String.init))\n    }\
    \ else {\n        let lower = txt.lowercased()\n        let odds = (0..<26).filter\
    \ { (idx) -> Bool in\n            let chr = Character(UnicodeScalar(idx + 97)!)\n\
    \            return lower.filter { $0 == chr }.count % 2 == 1\n        }\n   \
    \     return .failure(odds.count)\n    }", "    if txt.contains(\" \") {\n   \
    \     return .success(txt.components(separatedBy: \" \"))\n    } else if txt.contains(\"\
    ,\") {\n        return .success(txt.components(separatedBy: \",\"))\n    } else\
    \ {\n        return .failure(txt.filter {Character(UnicodeScalar($0.asciiValue!)!).isLowercase}.count)\n\
    \    }", "    guard txt.contains(\" \") else {\n        guard txt.contains(\"\
    ,\") else {\n            var n = 0\n            for (i, ch) in txt.lowercased().enumerated()\
    \ {\n                if (i + 1) % 2 == 1 {\n                    n += Int(ch.asciiValue!)\
    \ - 97\n                }\n            }\n            return .failure(n)\n   \
    \     }\n        return .success(txt.split(separator: \",\").map { String($0)\
    \ })\n    }\n    return .success(txt.split(separator: \" \").map { String($0)\
    \ })", "    let a = txt.components(separatedBy: \" \")\n    let b = txt.components(separatedBy:\
    \ \",\")\n    let c = txt.filter{(\"a\"...\"z\").contains($0)}.compactMap{String($0)}.map{$0.unicodeScalars.first?.value}.filter{$0!\
    \ % 2 == 1}.count\n    return a.count > 1 ? .success(a) : b.count > 1 ? .success(b)\
    \ : .failure(c)", "    let words = txt.split(separator: \" \")\n    if words.count\
    \ > 1 {\n        return .success(words.map(String.init))\n    }\n    let words2\
    \ = txt.split(separator: \",\")\n    if words2.count > 1 {\n        return .success(words2.map(String.init))\n\
    \    }\n    return .failure(txt.filter{$0.isLowercase && $0.wholeNumberValue!.isOdd}.count)",
  "    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.reduce(0) { (num, char) ->\
    \ Int in\n            char < \"a\" || char > \"z\" ? num : (num + (Int(String(char))!\
    \ - 97) % 2)\n        })\n    }", "    if txt.contains(\" \") {\n        return\
    \ .success(txt.components(separatedBy: \" \"))\n    } else if txt.contains(\"\
    ,\") {\n        return .success(txt.components(separatedBy: \",\"))\n    } else\
    \ {\n        return .failure(txt.filter { $0.isLowercase }.count)\n    }", " \
    \   return txt.contains(\" \") ? .ok(txt.split(separator: \" \").map(String.init))\
    \ :\n        txt.contains(\",\") ? .ok(txt.split(separator: \",\").map(String.init))\
    \ :\n        txt.lowercased().filter { \"abcdefghijklmnopqrstuvwxyz\".contains($0)\
    \ }.reduce(0) { $1.wholeNumberValue! % 2 == 1 ? $0 + 1 : $0 }", '    return .failure(0)',
  "    guard txt.contains(\" \") else {\n        guard txt.contains(\",\") else {\n\
    \            var acc = 0\n            for c in txt.lowercased() {\n          \
    \      if c.asciiValue! % 2 == 1 {\n                    acc += 1\n           \
    \     }\n            }\n            return .success(acc)\n        }\n        return\
    \ .success(txt.split(separator: \",\").map { String($0) })\n    }\n    return\
    \ .success(txt.split(separator: \" \").map { String($0) })", "    if txt.contains(\"\
    \ \") {\n        return .success(txt.components(separatedBy: \" \"))\n    } else\
    \ if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        var count = 0\n        txt.forEach {\n      \
    \      let index = UnicodeScalar($0.lowercased())?.value ?? 0\n            if\
    \ index % 2 == 1 {\n                count += 1\n            }\n        }\n   \
    \     return .failure(count)\n    }", "    if txt.contains(\" \") {\n        return\
    \ .success(txt.components(separatedBy: \" \"))\n    } else if txt.contains(\"\
    ,\") {\n        return .success(txt.components(separatedBy: \",\"))\n    } else\
    \ {\n        return .failure(txt.filter { Int((\"a\" as UnicodeScalar).value)\
    \ ... Int((\"z\" as UnicodeScalar).value) ~= Int($0.unicodeScalars.first!.value)\
    \ }.count)\n    }"]
stop_tokens:
- "\n}"
