name: HumanEval_35_max_element
language: swift
prompt: "\n/// Return maximum element in the list.\n/// >>> max_element([1, 2, 3])\n\
  /// 3\n/// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\nfunc\
  \ max_element(l: [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(max_element(l: [1, 2, 3]) == 3)\nassert(max_element(l:\
  \ [5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124)"
completions: ["    assert(l.count != 0)\n    var m = l[0]\n    for x in l {\n    \
    \    if m < x {\n            m = x\n        }\n    }\n    return m", '    return
    l.reduce(l[0], { max($0, $1) })', "    var m = l[0]\n    for i in l {\n      \
    \  if m < i {\n            m = i\n        }\n    }\n    return m", "  var max\
    \ = l[0]\n  for e in l {\n    if e > max {\n      max = e\n    }\n  }\n  return\
    \ max", '  return _max_element(l, first(l))', "    var max = l[0]\n    for i in\
    \ l {\n        if max < i {\n            max = i\n        }\n    }\n    return\
    \ max", "    var m = Int.min\n    for i in l {\n        if i > m {\n         \
    \   m = i\n        }\n    }\n    return m", "    var max = l[0]\n    for i in\
    \ l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max", "    var max = l[0]\n    for i in l {\n        if max < i {\n        \
    \    max = i\n        }\n    }\n    return max", "    var m = l[0]\n    for i\
    \ in 1..<l.count {\n        if l[i] > m {\n            m = l[i]\n        }\n \
    \   }\n    return m", "    var result = Int.min\n    var i = 0\n    while i <\
    \ l.count {\n        result = max(result, l[i])\n        i += 1\n    }\n    return\
    \ result", '    return fold_left(l, l[0], { x, y in x > y ? x : y })', "    var\
    \ max = l[0]\n    for e in l {\n        if e > max {\n            max = e\n  \
    \      }\n    }\n    return max", "    var max: Int = l[0]\n    for i in 1..<l.count\
    \ {\n        if l[i] > max {\n            max = l[i]\n        }\n    }\n    return\
    \ max", '  return 0', '    return reduce(l, l[0], {max($0, $1)})', "    var max\
    \ = l[0]\n    for i in l {\n        if i > max {\n            max = i\n      \
    \  }\n    }\n    return max", "  if l.count == 0 {\n    return 0\n  }\n  return\
    \ l.reduce(l[0]) { max($0, $1) }", "    if l.count == 0 {\n        return 0\n\
    \    }\n    return l.reduce(l[0]) { max($0, $1) }", "    var max = l[0]\n    for\
    \ i in l {\n        if i > max {\n            max = i\n        }\n    }\n    return\
    \ max"]
stop_tokens:
- "\n}"
