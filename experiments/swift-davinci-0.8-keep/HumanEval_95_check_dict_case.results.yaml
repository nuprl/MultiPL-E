language: swift
name: HumanEval_95_check_dict_case
results:
- exit_code: 0
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.count == 0 {\n        return false\n\
    \    }\n    else {\n        var uppercase = false\n        var lowercase = false\n\
    \        for (key,_) in dict {\n            if key.uppercased() == key {\n   \
    \             uppercase = true\n            }\n            else if key.lowercased()\
    \ == key {\n                lowercase = true\n            }\n            else\
    \ {\n                return false\n            }\n        }\n        if uppercase\
    \ == true && lowercase == true {\n            return false\n        }\n      \
    \  else {\n            return true\n        }\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823233
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var keys_are_upper = true\n    var keys_are_lower\
    \ = true\n    for key in dict.keys {\n        keys_are_upper = keys_are_upper\
    \ && key.uppercased() == key\n        keys_are_lower = keys_are_lower && key.lowercased()\
    \ == key\n    }\n    return keys_are_upper || keys_are_lower\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmphsyewjbz/tmphsyewjbz.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad563faec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad563ca5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad563ca5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad563ca47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsyewjbz                        0x0000564490c89bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002ad56419a460 __libc_start_main +
    245

    6    tmphsyewjbz                        0x0000564490c893b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823233
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var upper = true\n    var lower = true\n \
    \   for (key, _) in dict {\n        upper = upper && key.isUppercase\n       \
    \ lower = lower && key.isLowercase\n    }\n    return upper || lower\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3rtpead7.swift:15:30: error: value of type 'String' has no member\
    \ 'isUppercase'\n        upper = upper && key.isUppercase\n                  \
    \       ~~~ ^~~~~~~~~~~\n/tmp/tmp3rtpead7.swift:16:30: error: value of type 'String'\
    \ has no member 'isLowercase'\n        lower = lower && key.isLowercase\n    \
    \                     ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCaseCount = 0\n    var upperCaseCount\
    \ = 0\n    for (key, _) in dict {\n        if key.lowercased() == key {\n    \
    \        lowerCaseCount += 1\n        } else if key.uppercased() == key {\n  \
    \          upperCaseCount += 1\n        }\n    }\n    return (lowerCaseCount ==\
    \ dict.count || upperCaseCount == dict.count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpqajs5_j6/tmpqajs5_j6.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba914c8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba914981b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba914981988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9149807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqajs5_j6                        0x0000561758b24bc0 <unavailable> + 7104

    5    libc.so.6                          0x00002ba914e76460 __libc_start_main +
    245

    6    tmpqajs5_j6                        0x0000561758b243a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823233
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.isEmpty {\n        return false\n\
    \    }\n    var isAllUpperCase = true\n    var isAllLowerCase = true\n    var\
    \ isAllString = true\n    for (key, value) in dict {\n        if key.uppercased()\
    \ != key {\n            isAllUpperCase = false\n        }\n        if key.lowercased()\
    \ != key {\n            isAllLowerCase = false\n        }\n        if value.uppercased()\
    \ != value {\n            isAllUpperCase = false\n        }\n        if value.lowercased()\
    \ != value {\n            isAllLowerCase = false\n        }\n        if !key.isAlpha\
    \ {\n            isAllString = false\n        }\n        if !value.isAlpha {\n\
    \            isAllString = false\n        }\n    }\n    return isAllUpperCase\
    \ || isAllLowerCase\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpethranlm.swift:31:17: error: value of type 'String' has no member\
    \ 'isAlpha'\n        if !key.isAlpha {\n            ~~~ ^~~~~~~\n/tmp/tmpethranlm.swift:34:19:\
    \ error: value of type 'String' has no member 'isAlpha'\n        if !value.isAlpha\
    \ {\n            ~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.isEmpty {\n        return false\n\
    \    }\n    let upperKeys = dict.keys.filter { $0.isUppercase }\n    let lowerKeys\
    \ = dict.keys.filter { $0.isLowercase }\n    return !upperKeys.isEmpty && !lowerKeys.isEmpty\
    \ ? false : true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp47czz0yf.swift:15:43: error: value of type 'Dictionary<String,\
    \ String>.Keys.Element' (aka 'String') has no member 'isUppercase'\n    let upperKeys\
    \ = dict.keys.filter { $0.isUppercase }\n                                    \
    \   ~~ ^~~~~~~~~~~\n/tmp/tmp47czz0yf.swift:16:43: error: value of type 'Dictionary<String,\
    \ String>.Keys.Element' (aka 'String') has no member 'isLowercase'\n    let lowerKeys\
    \ = dict.keys.filter { $0.isLowercase }\n                                    \
    \   ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823232
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.count == 0 {\n        return false\n\
    \    }\n\n    if dict.count == 1 {\n        return true\n    }\n\n    var caseType:\
    \ String.Element.CaseIterable\n    let firstKey = dict.keys.first!\n    if firstKey.lowercased()\
    \ == firstKey {\n        caseType = String.Element.lowercaseLetters\n    } else\
    \ {\n        caseType = String.Element.uppercaseLetters\n    }\n\n    for key\
    \ in dict.keys {\n        for letter in key {\n            if !caseType.contains(letter)\
    \ {\n                return false\n            }\n        }\n    }\n\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpa1scbnxh.swift:20:34: error: 'CaseIterable' is not a member type\
    \ of struct 'Swift.String.Element' (aka 'Swift.Character')\n    var caseType:\
    \ String.Element.CaseIterable\n                  ~~~~~~~~~~~~~~ ^\nSwift.Character:1:23:\
    \ note: 'Character' declared here\n@frozen public struct Character : Sendable\
    \ {\n                      ^\n/tmp/tmpa1scbnxh.swift:23:35: error: type 'String.Element'\
    \ (aka 'Character') has no member 'lowercaseLetters'\n        caseType = String.Element.lowercaseLetters\n\
    \                   ~~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpa1scbnxh.swift:25:35:\
    \ error: type 'String.Element' (aka 'Character') has no member 'uppercaseLetters'\n\
    \        caseType = String.Element.uppercaseLetters\n                   ~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823233
- exit_code: 0
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    let lowerKeys = dict.keys.filter { $0.lowercased()\
    \ == $0 }\n    let upperKeys = dict.keys.filter { $0.uppercased() == $0 }\n  \
    \  return lowerKeys.count > 0 && upperKeys.count == 0 ||\n        upperKeys.count\
    \ > 0 && lowerKeys.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823233
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n  // your code here\n  var isUpper = true\n  var\
    \ isLower = true\n  for (key,_) in dict {\n    if !key.lowercased().elementsEqual(key)\
    \ {\n      isLower = false\n    }\n    if !key.uppercased().elementsEqual(key)\
    \ {\n      isUpper = false\n    }\n  }\n  return isUpper || isLower\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpd071ww_8/tmpd071ww_8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49903ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49900f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49900f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49900f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd071ww_8                        0x0000558e9b926c00 <unavailable> + 7168

    5    libc.so.6                          0x00002b49905eb460 __libc_start_main +
    245

    6    tmpd071ww_8                        0x0000558e9b9263e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659823233
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower_case = true\n    var upper_case\
    \ = true\n    var result = false\n    for item in dict {\n        let key = item.key\n\
    \        let value = item.value\n        if key != key.lowercased() {\n      \
    \      lower_case = false\n        }\n        if key != key.uppercased() {\n \
    \           upper_case = false\n        }\n    }\n    if lower_case || upper_case\
    \ {\n        result = true\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpnayvu2t9/tmpnayvu2t9.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac42badec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac42b7d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac42b7d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac42b7d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnayvu2t9                        0x000055d774497b70 <unavailable> + 7024

    5    libc.so.6                          0x00002ac42bcca460 __libc_start_main +
    245

    6    tmpnayvu2t9                        0x000055d774497359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823233
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCaseKeys = 0\n    var upperCaseKeys\
    \ = 0\n    for key in dict.keys {\n        if key.lowercased() == key {\n    \
    \        lowerCaseKeys += 1\n        } else if key.uppercased() == key {\n   \
    \         upperCaseKeys += 1\n        }\n    }\n    if lowerCaseKeys == dict.count\
    \ || upperCaseKeys == dict.count {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpq0st7yel/tmpq0st7yel.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b353abe1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b353a8d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b353a8d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b353a8d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq0st7yel                        0x0000563c8085cc10 <unavailable> + 7184

    5    libc.so.6                          0x00002b353adcd460 __libc_start_main +
    245

    6    tmpq0st7yel                        0x0000563c8085c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659823233
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var has_lower = false\n    var has_upper =\
    \ false\n    for (key, _) in dict {\n        if key.lowercased() == key {\n  \
    \          has_lower = true\n        } else if key.uppercased() == key {\n   \
    \         has_upper = true\n        } else {\n            return false\n     \
    \   }\n    }\n    return dict.count == 0 ? false : has_lower != has_upper\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp4pxpegek/tmp4pxpegek.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51eb928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51eb61fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51eb61f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51eb61e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4pxpegek                        0x00005636e2eb6bc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b51ebb14460 __libc_start_main +
    245

    6    tmp4pxpegek                        0x00005636e2eb63a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823233
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var capCount = 0\n    var lowCount = 0\n \
    \   for key in dict.keys {\n        if key.uppercased() == key {\n           \
    \ capCount += 1\n        } else {\n            lowCount += 1\n        }\n    }\n\
    \    return (lowCount == 0) || (capCount == 0)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp8wz8rg_l/tmp8wz8rg_l.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad39a5e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad39a2dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad39a2dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad39a2db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8wz8rg_l                        0x0000559363de6d74 <unavailable> + 7540

    5    libc.so.6                          0x00002ad39a7d1460 __libc_start_main +
    245

    6    tmp8wz8rg_l                        0x0000559363de6359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823233
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpdojdgbsk/tmpdojdgbsk.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b640cc0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b640c904b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b640c904988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b640c9037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdojdgbsk                        0x00005621f94306f5 <unavailable> + 5877

    5    libc.so.6                          0x00002b640cdf9460 __libc_start_main +
    245

    6    tmpdojdgbsk                        0x00005621f94300d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659823233
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCaseCount = 0\n    var upperCaseCount\
    \ = 0\n    for key in dict.keys {\n        let thisKey = key\n        let firstChar\
    \ = thisKey.first!\n        if firstChar.isUppercase {\n            upperCaseCount\
    \ += 1\n        } else {\n            lowerCaseCount += 1\n        }\n    }\n\
    \    if lowerCaseCount == 0 || upperCaseCount == 0 {\n        return true\n  \
    \  } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpmd2c1_uh/tmpmd2c1_uh.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65f5e5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65f5b56b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65f5b56988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65f5b557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmd2c1_uh                        0x000055e77e378c40 <unavailable> + 7232

    5    libc.so.6                          0x00002b65f604b460 __libc_start_main +
    245

    6    tmpmd2c1_uh                        0x000055e77e378429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659823233
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    \n    // Check if dictionary is empty\n  \
    \  if dict.isEmpty {\n        return false\n    }\n    \n    // Iterate over elements\n\
    \    for (key, _) in dict {\n        \n        // If key is uppercase but there\
    \ is a lowercase key\n        if key.uppercased() == key && dict.contains(where:\
    \ { $0.key.lowercased() == $0.key }) {\n            return false\n        }\n\
    \        \n        // If key is lowercase but there is an uppercase key\n    \
    \    if key.lowercased() == key && dict.contains(where: { $0.key.uppercased()\
    \ == $0.key }) {\n            return false\n        }\n    }\n    \n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp88p1kosd/tmp88p1kosd.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59deffdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59decf4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59decf4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59decf37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp88p1kosd                        0x000055e012780e64 <unavailable> + 7780

    5    libc.so.6                          0x00002b59df1e9460 __libc_start_main +
    245

    6    tmp88p1kosd                        0x000055e012780449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659823233
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var i = 1\n    var isUpper = false\n    var\
    \ isLower = false\n    let dictKey = dict.keys\n    if dictKey.count == 0 {\n\
    \        return false\n    }\n    while i < dictKey.count {\n        if dictKey[i]\
    \ == dictKey[i].uppercased() {\n            isUpper = true\n        } else if\
    \ dictKey[i] == dictKey[i].lowercased() {\n            isLower = true\n      \
    \  } else {\n            return false\n        }\n        i += 1\n    }\n    if\
    \ isUpper && isLower {\n        return false\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgo29t5rr.swift:20:34: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Dictionary<String, String>.Index'\n        if dictKey[i]\
    \ == dictKey[i].uppercased() {\n                                 ^\n/tmp/tmpgo29t5rr.swift:20:20:\
    \ error: cannot convert value of type 'Int' to expected argument type 'Dictionary<String,\
    \ String>.Index'\n        if dictKey[i] == dictKey[i].uppercased() {\n       \
    \            ^\n/tmp/tmpgo29t5rr.swift:22:41: error: cannot convert value of type\
    \ 'Int' to expected argument type 'Dictionary<String, String>.Index'\n       \
    \ } else if dictKey[i] == dictKey[i].lowercased() {\n                        \
    \                ^\n/tmp/tmpgo29t5rr.swift:22:27: error: cannot convert value\
    \ of type 'Int' to expected argument type 'Dictionary<String, String>.Index'\n\
    \        } else if dictKey[i] == dictKey[i].lowercased() {\n                 \
    \         ^\n"
  stdout: ''
  timestamp: 1659823233
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    \n    if dict.isEmpty {\n        return false\n\
    \    }\n    \n    var isUpperCase = true\n    var isLowerCase = true\n    \n \
    \   for key in dict.keys {\n        if key != key.uppercased() {\n           \
    \ isUpperCase = false\n        }\n        if key != key.lowercased() {\n     \
    \       isLowerCase = false\n        }\n    }\n    \n    return isUpperCase ||\
    \ isLowerCase\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpv9ph18_8/tmpv9ph18_8.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0e8368c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0e805fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0e805f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0e805e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9ph18_8                        0x000055cc85dc3c20 <unavailable> + 7200

    5    libc.so.6                          0x00002ab0e8554460 __libc_start_main +
    245

    6    tmpv9ph18_8                        0x000055cc85dc3409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659823233
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    //<-- your code goes here\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmprv5egahg/tmprv5egahg.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acdef9b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acdef6b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acdef6b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acdef6af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprv5egahg                        0x000055c43877a523 <unavailable> + 5411

    5    libc.so.6                          0x00002acdefba5460 __libc_start_main +
    245

    6    tmprv5egahg                        0x000055c43877a0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659823233
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var containsLowerCase: Bool = false\n    var\
    \ containsUpperCase: Bool = false\n    var key: String\n    var value: String\n\
    \    var count: Int = 0\n    \n    for (key, value) in dict {\n        if key\
    \ == key.lowercased() {\n            containsLowerCase = true\n        }\n   \
    \     if key == key.uppercased() {\n            containsUpperCase = true\n   \
    \     }\n        count += 1\n    }\n    \n    if count == 0 {\n        return\
    \ false\n    }\n    \n    if containsLowerCase && containsUpperCase {\n      \
    \  return false\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmph7sxw7b5/tmph7sxw7b5.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7eef6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7eec63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7eec63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7eec627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7sxw7b5                        0x000055ab9a158d74 <unavailable> + 7540

    5    libc.so.6                          0x00002ab7ef158460 __libc_start_main +
    245

    6    tmph7sxw7b5                        0x000055ab9a158359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823233
