name: HumanEval_62_derivative
language: swift
prompt: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x +\
  \ xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
  /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
  \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4,\
  \ 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
  \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
  assert(derivative(xs: [1]) == [] as [Int])"
completions: ["\treturn xs.reduce((0, [])) {\n\t\t($0.0 + 1, [$0.1, $0.0] + xs[$0.0\
    \ + 1..<xs.count])\n\t}.1", "    var ys: [Int] = []\n    for i in 0..<xs.count\
    \ - 1 {\n        ys.append(xs[i] * (xs.count - i - 1))\n    }\n    return ys",
  "  var result = [Int]()\n  for (i, _) in xs.enumerated() {\n    if i > 0 {\n   \
    \   result.append(i * xs[i])\n    }\n  }\n  return result", "    var ds = [Int]()\n\
    \    for i in 1..<xs.count {\n        ds.append(i * xs[i])\n    }\n    return\
    \ ds", "    var result = [Int]()\n    for index in 0..<xs.count-1 {\n        result.append(xs[index+1]\
    \ * (index+1))\n    }\n    return result", "    var result: [Int] = []\n    for\
    \ i in 0..<xs.count - 1 {\n        result.append(xs[i] * (xs.count - i - 1))\n\
    \    }\n    return result", "    if xs.count <= 1 {\n        return []\n    }\n\
    \    var ret = [Int]()\n    for i in 1..<xs.count {\n        ret.append(xs[i]\
    \ * i)\n    }\n    return ret", "    var xs = xs\n    xs.removeFirst()\n    for\
    \ i in 0..<xs.count {\n        xs[i] *= i + 1\n    }\n    return xs", "    var\
    \ xs = xs\n    for i in 0..<xs.count - 1 {\n        xs[i] = xs[i + 1] * (i + 1)\n\
    \    }\n    xs.removeLast()\n    return xs", "    var xs = xs\n    xs.removeAtIndex(0)\n\
    \    for i in 0..<xs.count {\n        xs[i] *= i + 1\n    }\n    return xs", " \
    \ var result: [Int] = []\n  for i in 1..<xs.count {\n    result.append(i * xs[i])\n\
    \  }\n  return result", "    var ret = [Int]()\n    for i in 1..<xs.count {\n\
    \        ret.append(xs[i] * i)\n    }\n    return ret", "    return xs.enumerate().reduce([])\
    \ { (arr, e) in\n        var arr = arr\n        if e.index == 0 {\n          \
    \  return arr\n        }\n        arr.append(e.element * e.index)\n        return\
    \ arr\n    }", "    return Array(xs.enumerated().map({ (index, element) -> Int\
    \ in\n        if index == 0 {\n            return 0\n        }\n        return\
    \ index * element\n    }).dropFirst())", "    var result = [Int]()\n    for (index,\
    \ value) in xs.enumerated() {\n        result.append(value * index)\n    }\n \
    \   result.removeFirst()\n    return result", "    let dx = xs.dropFirst()\n \
    \   var n = 0\n    return dx.map { n += 1; n * $0 }", "    var ys = [Int]()\n\
    \    for i in 0..<xs.count - 1 {\n        ys.append(xs[i] * (xs.count - i - 1))\n\
    \    }\n    return ys", '    return derivative(xs, degree: xs.count)', "    var\
    \ xs2: [Int] = []\n    for (i, x) in xs.enumerated() {\n        xs2.append(x *\
    \ i)\n    }\n    xs2.removeFirst()\n    return xs2", "    var res: [Int] = []\n\
    \    for (i, x) in xs.enumerated() {\n        if i == 0 {\n            continue\n\
    \        }\n        res.append(i * x)\n    }\n    return res"]
stop_tokens:
- "\n}"
