language: swift
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n/// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n/// strange_sort_list([]) == []\nfunc strange_sort_list(lst: [Int]) -> [Int]\
    \ {\n    let sorted = lst.sorted()\n    return zip(sorted, sorted.reversed()).flatMap\
    \ { $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpfualouy7.swift:11:53: error: cannot convert value of type '(Int,\
    \ ReversedCollection<[Int]>.Element)' (aka '(Int, Int)') to closure result type\
    \ 'Int?'\n    return zip(sorted, sorted.reversed()).flatMap { $0 }\n         \
    \                                           ^~\n"
  stdout: ''
  timestamp: 1659825051
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n/// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n/// strange_sort_list([]) == []\nfunc strange_sort_list(lst: [Int]) -> [Int]\
    \ {\n    var lst = lst\n    var result = [Int]()\n    while !lst.isEmpty {\n \
    \       var ind_min = 0\n        var ind_max = 0\n        for i in 0..<lst.count\
    \ {\n            if lst[i] < lst[ind_min] {\n                ind_min = i\n   \
    \         }\n            if lst[i] > lst[ind_max] {\n                ind_max =\
    \ i\n            }\n        }\n        result.append(lst[ind_min])\n        lst.remove(at:\
    \ ind_min)\n        if !lst.isEmpty {\n            result.append(lst[ind_max])\n\
    \            lst.remove(at: ind_max)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a86a61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a86758561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1a86758286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1a8675813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1a86757bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1a86557e83 <unavailable> + 188035

    6    tmpkp8af52l                        0x00005611afc7a67f <unavailable> + 9855

    7    tmpkp8af52l                        0x00005611afc796bc <unavailable> + 5820

    8    libc.so.6                          0x00002b1a86c4d460 __libc_start_main +
    245

    9    tmpkp8af52l                        0x00005611afc79399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659825051
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n/// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n/// strange_sort_list([]) == []\nfunc strange_sort_list(lst: [Int]) -> [Int]\
    \ {\n    var lst = lst\n    var sorted: [Int] = []\n    while !lst.isEmpty {\n\
    \        sorted.append(lst.remove(at: lst.index(of: lst.min()!)!))\n        sorted.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmp6svjffvl/tmp6svjffvl.swift:14: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bab13dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7baae34561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7baae34286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7baae3413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7baae33bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp6svjffvl                        0x0000557da59a1605 <unavailable> + 9733

    6    tmp6svjffvl                        0x0000557da59a077b <unavailable> + 6011

    7    libc.so.6                          0x00002b7bab329460 __libc_start_main +
    245

    8    tmp6svjffvl                        0x0000557da59a0319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659825051
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n/// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n/// strange_sort_list([]) == []\nfunc strange_sort_list(lst: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    let sorted = lst.sorted()\n    var i = 0\n\
    \    while result.count < lst.count {\n        result.append(sorted[i])\n    \
    \    if (i < lst.count - 1) {\n            result.append(sorted[lst.count - 1\
    \ - i])\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmppokonmts/tmppokonmts.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e00724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e0041bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e0041b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e0041a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppokonmts                        0x0000561373c8b71b <unavailable> + 5915

    5    libc.so.6                          0x00002b8e00910460 __libc_start_main +
    245

    6    tmppokonmts                        0x0000561373c8b1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659825051
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n/// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n/// strange_sort_list([]) == []\nfunc strange_sort_list(lst: [Int]) -> [Int]\
    \ {\n    if lst.count == 0 {\n        return []\n    }\n    var lst = lst\n  \
    \  var result = [Int]()\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n\
    \        if lst.count > 1 {\n            result.append(lst.max()!)\n        }\n\
    \        lst.remove(result.last!)\n        lst.remove(result.last!)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp1wsu6i6h.swift:20:13: error: no exact matches in call to instance\
    \ method 'remove'\n        lst.remove(result.last!)\n            ^\nSwift.Array:10:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at index: Int) -> Element\n         \
    \                           ^\nSwift.RangeReplaceableCollection:9:37: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(at:)')\n    @inlinable public\
    \ mutating func remove(at position: Self.Index) -> Self.Element\n            \
    \                        ^\n/tmp/tmp1wsu6i6h.swift:21:13: error: no exact matches\
    \ in call to instance method 'remove'\n        lst.remove(result.last!)\n    \
    \        ^\nSwift.Array:10:37: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(at:)')\n    @inlinable public mutating func remove(at index: Int)\
    \ -> Element\n                                    ^\nSwift.RangeReplaceableCollection:9:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(at:)')\n   \
    \ @inlinable public mutating func remove(at position: Self.Index) -> Self.Element\n\
    \                                    ^\n"
  stdout: ''
  timestamp: 1659825051
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n/// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n/// strange_sort_list([]) == []\nfunc strange_sort_list(lst: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    let sortedList = lst.sorted(by: <)\n    var\
    \ minIndex = 0\n    var maxIndex = sortedList.count - 1\n    for i in 0..<sortedList.count\
    \ {\n        if i % 2 == 0 {\n            result.append(sortedList[minIndex])\n\
    \            minIndex += 1\n        } else {\n            result.append(sortedList[maxIndex])\n\
    \            maxIndex -= 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659825051
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n/// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n/// strange_sort_list([]) == []\nfunc strange_sort_list(lst: [Int]) -> [Int]\
    \ {\n    // Write your code here\n    var lst = lst\n    var result: [Int] = []\n\
    \    lst.sort()\n    var lst1 = lst\n    var lst2 = lst.reversed()\n    for i\
    \ in 0..<lst.count {\n        if i % 2 == 0 {\n            result.append(lst1.removeFirst())\n\
    \        } else {\n            result.append(lst2.removeFirst())\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp24niwh3a.swift:20:27: error: referencing instance method 'removeFirst()'\
    \ on 'Collection' requires the types 'ReversedCollection<[Int]>' and 'Slice<ReversedCollection<[Int]>>'\
    \ be equivalent\n            result.append(lst2.removeFirst())\n             \
    \             ^\nSwift.Collection:1:11: note: where 'Self' = 'ReversedCollection<[Int]>',\
    \ 'Self.SubSequence' = 'Slice<ReversedCollection<[Int]>>'\nextension Collection\
    \ where Self == Self.SubSequence {\n          ^\n"
  stdout: ''
  timestamp: 1659825051
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n/// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n/// strange_sort_list([]) == []\nfunc strange_sort_list(lst: [Int]) -> [Int]\
    \ {\n\t\n\tguard lst.count > 1 else {\n\t\treturn lst\n\t}\n\t\n\tvar arr = lst\n\
    \t\n\tfor i in 0 ..< arr.count / 2 {\n\t\tarr.insert(arr.remove(at: arr.index(of:\
    \ arr.min()!)!), at: arr.index(of: arr.max()!)!)\n\t}\n\t\n\treturn arr\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpai4ual4b/tmpai4ual4b.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac95a545c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac95a23cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac95a23c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac95a23b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpai4ual4b                        0x000055ef1aac3814 <unavailable> + 6164

    5    libc.so.6                          0x00002ac95a731460 __libc_start_main +
    245

    6    tmpai4ual4b                        0x000055ef1aac3409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659825051
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n/// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n/// strange_sort_list([]) == []\nfunc strange_sort_list(lst: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    var lst = lst\n    while lst.count > 0 {\n\
    \        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if lst.count == 0 {\n            break\n        }\n        result.append(lst.max()!)\n\
    \        lst.remove(at: lst.index(of: lst.max()!)!)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824973
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n/// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n/// strange_sort_list([]) == []\nfunc strange_sort_list(lst: [Int]) -> [Int]\
    \ {\n    let lst = lst.sort()\n    var output = [Int]()\n    var i = 0\n    var\
    \ j = lst.count - 1\n    while i <= j {\n        output.append(lst[i])\n     \
    \   if i != j {\n            output.append(lst[j])\n        }\n        i += 1\n\
    \        j -= 1\n    }\n    return output\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmp85nlnnbk.swift:10:19: error: cannot use mutating member on immutable\
    \ value: 'lst' is a 'let' constant\n    let lst = lst.sort()\n              ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1659825051
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n/// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n/// strange_sort_list([]) == []\nfunc strange_sort_list(lst: [Int]) -> [Int]\
    \ {\n\tvar lst = lst\n\tvar res = [Int]()\n\twhile !lst.isEmpty {\n\t\tres.append(lst.min()!)\n\
    \t\tres.append(lst.max()!)\n\t\tlst.remove(at: lst.index(of: lst.min()!)!)\n\t\
    \tlst.remove(at: lst.index(of: lst.max()!)!)\n\t}\n\treturn res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\n\
    assert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7,\
    \ 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5])\
    \ == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6,\
    \ 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
    \ -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: Exception
  stderr: 'tmpaju8vvvh/tmpaju8vvvh.swift:16: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002ac59edd2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac59eac9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac59eac9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac59eac913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac59eac8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpaju8vvvh                        0x000055804c67781a <unavailable> + 10266

    6    tmpaju8vvvh                        0x000055804c6767cb <unavailable> + 6091

    7    libc.so.6                          0x00002ac59efbe460 __libc_start_main +
    245

    8    tmpaju8vvvh                        0x000055804c676369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659825051
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n/// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n/// strange_sort_list([]) == []\nfunc strange_sort_list(lst: [Int]) -> [Int]\
    \ {\n    var newLst = lst\n    var listLength = newLst.count\n    var minIndex\
    \ = 0\n    var maxIndex = 0\n    var minValue = 0\n    var maxValue = 0\n    var\
    \ result: [Int] = []\n    \n    while listLength > 0 {\n        minValue = newLst[0]\n\
    \        maxValue = newLst[0]\n        for i in 0..<listLength {\n           \
    \ if newLst[i] < minValue {\n                minValue = newLst[i]\n          \
    \      minIndex = i\n            }\n            if newLst[i] > maxValue {\n  \
    \              maxValue = newLst[i]\n                maxIndex = i\n          \
    \  }\n        }\n        result.append(minValue)\n        newLst.remove(at: minIndex)\n\
    \        listLength -= 1\n        if listLength == 0 {\n            break\n  \
    \      }\n        result.append(maxValue)\n        newLst.remove(at: maxIndex)\n\
    \        listLength -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'Swift/Array.swift:1331: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3e5d32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3e5a29561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba3e5a29286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba3e5a2913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba3e5a28bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba3e5a16018 <unavailable> + 1355800

    6    tmpoc6d8psv                        0x000055d3f231b5bf <unavailable> + 9663

    7    tmpoc6d8psv                        0x000055d3f231a5dc <unavailable> + 5596

    8    libc.so.6                          0x00002ba3e5f1e460 __libc_start_main +
    245

    9    tmpoc6d8psv                        0x000055d3f231a2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1659825051
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n/// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n/// strange_sort_list([]) == []\nfunc strange_sort_list(lst: [Int]) -> [Int]\
    \ {\n    var res: [Int] = []\n    guard lst.count > 0 else {\n        return res\n\
    \    }\n    let min = lst.min()!\n    var lstCopy = lst\n    lstCopy.remove(at:\
    \ lstCopy.index(of: min)!)\n    res.append(min)\n    while lstCopy.count > 0 {\n\
    \        let max = lstCopy.max()!\n        lstCopy.remove(at: lstCopy.index(of:\
    \ max)!)\n        res.append(max)\n        if lstCopy.count > 0 {\n          \
    \  let min = lstCopy.min()!\n            lstCopy.remove(at: lstCopy.index(of:\
    \ min)!)\n            res.append(min)\n        }\n    }\n    return res\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659825051
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n/// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n/// strange_sort_list([]) == []\nfunc strange_sort_list(lst: [Int]) -> [Int]\
    \ {\n    guard !lst.isEmpty else { return [] }\n    return Array(lst.min()!...lst.max()!).map\
    \ {\n        lst.filter { $0 != $0.signum() * $0.signum() * $0 }.min()!\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmpayzrxg5z.swift:11:47: error: contextual type for closure argument\
    \ list expects 1 argument, which cannot be implicitly ignored\n    return Array(lst.min()!...lst.max()!).map\
    \ {\n                                              ^\n                       \
    \                        _ in \n"
  stdout: ''
  timestamp: 1659825051
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n/// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n/// strange_sort_list([]) == []\nfunc strange_sort_list(lst: [Int]) -> [Int]\
    \ {\n    let sorted = lst.sorted()\n    var result = [Int]()\n    var i = 0\n\
    \    while i < sorted.count {\n        result.append(sorted[i])\n        if i\
    \ + 1 < sorted.count {\n            result.append(sorted[sorted.count - i - 1])\n\
    \        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpf0qdbsw2/tmpf0qdbsw2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab93e9d6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab93e6cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab93e6cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab93e6cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf0qdbsw2                        0x000055a9619a55d4 <unavailable> + 5588

    5    libc.so.6                          0x00002ab93ebc2460 __libc_start_main +
    245

    6    tmpf0qdbsw2                        0x000055a9619a51c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659825051
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n/// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n/// strange_sort_list([]) == []\nfunc strange_sort_list(lst: [Int]) -> [Int]\
    \ {\n    var sorted = lst.sorted()\n    var result = [Int]()\n    var isOdd =\
    \ true\n    while !sorted.isEmpty {\n        if isOdd {\n            result.append(sorted.removeFirst())\n\
    \        } else {\n            result.append(sorted.removeLast())\n        }\n\
    \        isOdd = !isOdd\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3,\
    \ 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1])\
    \ == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5,\
    \ 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst:\
    \ [0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659825051
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n/// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n/// strange_sort_list([]) == []\nfunc strange_sort_list(lst: [Int]) -> [Int]\
    \ {\n    var copy = lst\n    var sorted = [Int]()\n    while !copy.isEmpty {\n\
    \        sorted.append(copy.min()!)\n        copy.remove(at: copy.index(of: copy.min()!)!)\n\
    \        if !copy.isEmpty {\n            sorted.append(copy.max()!)\n        \
    \    copy.remove(at: copy.index(of: copy.max()!)!)\n        }\n    }\n    return\
    \ sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659825051
- exit_code: -4
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n/// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n/// strange_sort_list([]) == []\nfunc strange_sort_list(lst: [Int]) -> [Int]\
    \ {\n    guard lst.count > 0 else { return [] }\n    var result = lst\n    var\
    \ start = 0\n    var end = lst.count - 1\n    var isAscending = true\n    while\
    \ start < end {\n        if isAscending {\n            result.swapAt(start, start\
    \ + 1)\n            start += 1\n        } else {\n            result.swapAt(end,\
    \ end - 1)\n            end -= 1\n        }\n        isAscending = !isAscending\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: Exception
  stderr: 'tmpwdrbu3lh/tmpwdrbu3lh.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcb2496c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcb218db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcb218d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcb218c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwdrbu3lh                        0x0000558d10bef4d4 <unavailable> + 5332

    5    libc.so.6                          0x00002abcb2682460 __libc_start_main +
    245

    6    tmpwdrbu3lh                        0x0000558d10bef0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659825051
- exit_code: 1
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n/// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n/// strange_sort_list([]) == []\nfunc strange_sort_list(lst: [Int]) -> [Int]\
    \ {\n  var arr = lst.sort()\n  var res = [Int]()\n  let len = arr.count\n  var\
    \ counter = 0\n  while counter < len {\n    var c = 1\n    while c <= 2 {\n  \
    \    if counter < len {\n        let start = arr.startIndex\n        let end =\
    \ arr.endIndex\n        let mid = start + (end - start) / 2\n        if c == 1\
    \ {\n          res.append(arr[start])\n          arr.removeAtIndex(start)\n  \
    \      } else {\n          res.append(arr[mid])\n          arr.removeAtIndex(mid)\n\
    \        }\n        counter += 1\n      }\n      c += 1\n    }\n  }\n  return\
    \ res\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(strange_sort_list(lst:\
    \ [1, 2, 3, 4]) == [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9])\
    \ == [5, 9, 6, 8, 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5,\
    \ 2, 4, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8,\
    \ 6, 7])\nassert(strange_sort_list(lst: [5, 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst:\
    \ [] as [Int]) == [] as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5,\
    \ 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2,\
    \ 2, 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst:\
    \ [111111]) == [111111])"
  status: SyntaxError
  stderr: "/tmp/tmplsnqiu3_.swift:10:17: error: cannot use mutating member on immutable\
    \ value: 'lst' is a 'let' constant\n  var arr = lst.sort()\n            ~~~ ^\n"
  stdout: ''
  timestamp: 1659825051
- exit_code: 0
  program: "\n/// Given list of integers, return list in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]\n/// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5,\
    \ 5]\n/// strange_sort_list([]) == []\nfunc strange_sort_list(lst: [Int]) -> [Int]\
    \ {\n    var lst = lst\n    var res = [Int]()\n    while !lst.isEmpty {\n    \
    \    if lst.count == 1 {\n            res.append(lst[0])\n            lst.removeAll()\n\
    \        } else {\n            res.append(lst.min()!)\n            lst.remove(at:\
    \ lst.index(of: lst.min()!)!)\n            res.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return res\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) == [1, 4,\
    \ 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7])\n\
    assert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
    \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
    \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == []\
    \ as [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
    \ 2, 7, 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5])\
    \ == [-5, 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659825051
