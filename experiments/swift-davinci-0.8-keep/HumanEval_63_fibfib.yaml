name: HumanEval_63_fibfib
language: swift
prompt: "\n/// The FibFib number sequence is a sequence similar to the Fibbonacci\
  \ sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n\
  /// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
  /// Please write a function to efficiently compute the n-th element of the fibfib\
  \ number sequence.\n/// >>> fibfib(1)\n/// 0\n/// >>> fibfib(5)\n/// 4\n/// >>>\
  \ fibfib(8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(fibfib(n: 2) == 1)\nassert(fibfib(n: 1)\
  \ == 0)\nassert(fibfib(n: 5) == 4)\nassert(fibfib(n: 8) == 24)\nassert(fibfib(n:\
  \ 10) == 81)\nassert(fibfib(n: 12) == 274)\nassert(fibfib(n: 14) == 927)"
completions: ["    // TODO: Implement\n    return 0", "    if n < 3 {\n        return\
    \ n-1\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }", "    var a = 0\n    var b = 0\n    var c = 1\n    var d = 0\n    for\
    \ _ in 1...n {\n        d = c + b + a\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return a", "    if n == 0 {\n        return 0\n    } else if\
    \ n == 1 {\n        return 0\n    } else if n == 2 {\n        return 1\n    }\
    \ else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }", "  \
    \  if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n \
    \   } else if n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }", '    return 0', '    return 0', "    //\
    \ Implement your solution here\n    return 0", "  // TODO: Implement this\n  return\
    \ -1", "    guard n > 2 else { return n }\n    var a = 0\n    var b = 0\n    var\
    \ c = 1\n    var d = a + b + c\n    for _ in 3...n {\n        a = b\n        b\
    \ = c\n        c = d\n        d = a + b + c\n    }\n    return d", "    var dict\
    \ = [0: 0, 1: 0, 2: 1]\n    return fibfibHelp(n: n, cache: &dict)", "    if n\
    \ == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n    } else\
    \ if n == 2 {\n        return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }", "    if n < 3 {\n        return n - 1\n    }\n    var\
    \ fibPrevPrev = 1\n    var fibPrev = 0\n    var fib = 0\n    for _ in 3...n {\n\
    \        fib = fibPrevPrev + fibPrev + fib\n        fibPrevPrev = fibPrev\n  \
    \      fibPrev = fib\n    }\n    return fib", "    var fibs = [0, 0, 1]\n    if\
    \ n < 3 {\n        return fibs[n]\n    }\n    for i in 3...n {\n        fibs.append(fibs[i-1]\
    \ + fibs[i-2] + fibs[i-3])\n    }\n    return fibs[n]", "    if n == 0 {\n   \
    \     return 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2\
    \ {\n        return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }", "    if n == 0 {\n        return 0\n    } else if n ==\
    \ 1 {\n        return 0\n    } else if n == 2 {\n        return 1\n    } else\
    \ {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }", "    // your\
    \ code here\n    return 0", "    // Fill out this funciton.\n    return 0", '    return
    0', '    return 0']
stop_tokens:
- "\n}"
