language: swift
name: HumanEval_121_solution
results:
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// solution([5, 8,\
    \ 7, 1]) ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24,\
    \ 321]) ==>0\nfunc solution(lst: [Int]) -> Int {\n    // write your code in Swift\
    \ 3.0 (Linux)\n    var sum = 0\n    var count = 0\n    for a in lst {\n      \
    \  if a % 2 == 1 && count % 2 == 0 {\n            sum += a\n        }\n      \
    \  count += 1\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3])\
    \ == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5,\
    \ 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013451
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// solution([5, 8,\
    \ 7, 1]) ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24,\
    \ 321]) ==>0\nfunc solution(lst: [Int]) -> Int {\n    var oddSum = 0\n    for\
    \ (i, item) in lst.enumerated() {\n        if i % 2 == 0 && item % 2 != 0 {\n\
    \            oddSum += item\n        }\n    }\n    return oddSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013451
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// solution([5, 8,\
    \ 7, 1]) ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24,\
    \ 321]) ==>0\nfunc solution(lst: [Int]) -> Int {\n    var result = 0\n    for\
    \ (index, item) in lst.enumerated() {\n        if index % 2 == 0 && item % 2 !=\
    \ 0 {\n            result += item\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013451
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// solution([5, 8,\
    \ 7, 1]) ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24,\
    \ 321]) ==>0\nfunc solution(lst: [Int]) -> Int {\n    var oddTotal = 0\n    for\
    \ (index, value) in lst.enumerated() {\n        if index % 2 == 0 && value % 2\
    \ != 0 {\n            oddTotal += value\n        }\n    }\n    return oddTotal\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013451
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// solution([5, 8,\
    \ 7, 1]) ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24,\
    \ 321]) ==>0\nfunc solution(lst: [Int]) -> Int {\n    let evens = lst.enumerated().filter\
    \ { $0.offset % 2 == 0 }\n    let odds = evens.filter { $0.element % 2 != 0 }\n\
    \    return odds.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3,\
    \ 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013451
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// solution([5, 8,\
    \ 7, 1]) ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24,\
    \ 321]) ==>0\nfunc solution(lst: [Int]) -> Int {\n    let answer = lst.enumerated().filter({\
    \ (index, element) -> Bool in\n        return index % 2 == 0 && element % 2 !=\
    \ 0\n    }).reduce(0, { (result, value) -> Int in\n        return result + value.element\n\
    \    })\n    return answer\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013451
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// solution([5, 8,\
    \ 7, 1]) ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24,\
    \ 321]) ==>0\nfunc solution(lst: [Int]) -> Int {\n    var result = 0\n    for\
    \ i in 0..<lst.count {\n        if i % 2 == 0 {\n            if lst[i] % 2 !=\
    \ 0 {\n                result += lst[i]\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solution(lst: [5,\
    \ 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013451
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// solution([5, 8,\
    \ 7, 1]) ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24,\
    \ 321]) ==>0\nfunc solution(lst: [Int]) -> Int {\n    let res = lst.enumerated().reduce(0)\
    \ { (acc, num) in\n        return (num.offset % 2 == 0 && num.element % 2 != 0)\
    \ ? acc + num.element : acc\n    }\n    return res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013451
- exit_code: -4
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// solution([5, 8,\
    \ 7, 1]) ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24,\
    \ 321]) ==>0\nfunc solution(lst: [Int]) -> Int {\n  var sum = 0\n  for (index,\
    \ element) in lst.enumerated() {\n    if index % 2 == 0 {\n      sum += element\n\
    \    }\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpd9yj89f8/tmpd9yj89f8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb89d96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb89a8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb89a8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb89a8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd9yj89f8                        0x000056313203275c <unavailable> + 5980

    5    libc.so.6                          0x00002adb89f82460 __libc_start_main +
    245

    6    tmpd9yj89f8                        0x0000563132032219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013451
- exit_code: -4
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// solution([5, 8,\
    \ 7, 1]) ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24,\
    \ 321]) ==>0\nfunc solution(lst: [Int]) -> Int {\n  return lst.enumerated().reduce(0)\
    \ {\n    $0 + (($1.offset + 1) % 2 == 0 && $1.element % 2 != 0 ? $1.element :\
    \ 0)\n  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solution(lst: [5, 8,\
    \ 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpja4arx_k/tmpja4arx_k.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0499d9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0499a94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0499a94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0499a937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpja4arx_k                        0x00005632b01d952a <unavailable> + 5418

    5    libc.so.6                          0x00002b0499f89460 __libc_start_main +
    245

    6    tmpja4arx_k                        0x00005632b01d9189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013451
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// solution([5, 8,\
    \ 7, 1]) ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24,\
    \ 321]) ==>0\nfunc solution(lst: [Int]) -> Int {\n    return lst.enumerated().reduce(0)\
    \ { $0 + ($1.offset % 2 == 0 && $1.element % 2 != 0 ? $1.element : 0) }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013294
- exit_code: -4
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// solution([5, 8,\
    \ 7, 1]) ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24,\
    \ 321]) ==>0\nfunc solution(lst: [Int]) -> Int {\n    var lst = lst\n    var sum\
    \ = 0\n    while !lst.isEmpty {\n        let num = lst.removeFirst()\n       \
    \ if num % 2 == 0 {\n            if !lst.isEmpty {\n                sum += lst.removeFirst()\n\
    \            }\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpcjfgt57c/tmpcjfgt57c.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42c59afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42c56a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42c56a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42c56a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcjfgt57c                        0x00005607d708d4da <unavailable> + 5338

    5    libc.so.6                          0x00002b42c5b9b460 __libc_start_main +
    245

    6    tmpcjfgt57c                        0x00005607d708d139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013451
- exit_code: -4
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// solution([5, 8,\
    \ 7, 1]) ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24,\
    \ 321]) ==>0\nfunc solution(lst: [Int]) -> Int {\n    var sum = 0\n    for index\
    \ in 0..<lst.count {\n        if (index + 1) % 2 == 0 {\n            sum += lst[index]\
    \ % 2 == 0 ? 0 : lst[index]\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpvmpj80oq/tmpvmpj80oq.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4916b13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b491680ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b491680a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49168097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvmpj80oq                        0x000055b0c549e54a <unavailable> + 5450

    5    libc.so.6                          0x00002b4916cff460 __libc_start_main +
    245

    6    tmpvmpj80oq                        0x000055b0c549e1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013451
- exit_code: -4
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// solution([5, 8,\
    \ 7, 1]) ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24,\
    \ 321]) ==>0\nfunc solution(lst: [Int]) -> Int {\n    var result = 0\n    for\
    \ i in stride(from: 1, to: lst.count, by: 2) {\n        if i % 2 == 0 {\n    \
    \        result += lst[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpaj70u064/tmpaj70u064.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5db5cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5db2c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5db2c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5db2c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaj70u064                        0x00005596536c465a <unavailable> + 5722

    5    libc.so.6                          0x00002ab5db7ba460 __libc_start_main +
    245

    6    tmpaj70u064                        0x00005596536c42b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013451
- exit_code: -4
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// solution([5, 8,\
    \ 7, 1]) ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24,\
    \ 321]) ==>0\nfunc solution(lst: [Int]) -> Int {\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpoxfwg_bw/tmpoxfwg_bw.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e42cb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e429aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e429ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e429ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoxfwg_bw                        0x000055b10410a30a <unavailable> + 4874

    5    libc.so.6                          0x00002b9e42ea3460 __libc_start_main +
    245

    6    tmpoxfwg_bw                        0x000055b104109f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013451
- exit_code: -4
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// solution([5, 8,\
    \ 7, 1]) ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24,\
    \ 321]) ==>0\nfunc solution(lst: [Int]) -> Int {\n    // Code here\n    return\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) ==\
    \ 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30,\
    \ 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpr3pfpbcj/tmpr3pfpbcj.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac182d3ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac182a35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac182a35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac182a347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr3pfpbcj                        0x000055b9e95a930a <unavailable> + 4874

    5    libc.so.6                          0x00002ac182f2a460 __libc_start_main +
    245

    6    tmpr3pfpbcj                        0x000055b9e95a8f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1660013451
- exit_code: -4
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// solution([5, 8,\
    \ 7, 1]) ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24,\
    \ 321]) ==>0\nfunc solution(lst: [Int]) -> Int {\n  var sum = 0\n  for (index,\
    \ element) in lst.enumerated() {\n    if index % 2 == 0 {\n      sum += element\n\
    \    }\n  }\n  return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solution(lst:\
    \ [5, 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpd9yj89f8/tmpd9yj89f8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb89d96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb89a8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb89a8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb89a8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd9yj89f8                        0x000056313203275c <unavailable> + 5980

    5    libc.so.6                          0x00002adb89f82460 __libc_start_main +
    245

    6    tmpd9yj89f8                        0x0000563132032219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013451
- exit_code: -4
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// solution([5, 8,\
    \ 7, 1]) ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24,\
    \ 321]) ==>0\nfunc solution(lst: [Int]) -> Int {\n    let lst = lst.enumerated().filter\
    \ { $0.offset % 2 == 1 && $0.element % 2 == 1 }\n    return lst.reduce(0) { $0\
    \ + $1.element }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solution(lst: [5,\
    \ 8, 7, 1]) == 12)\nassert(solution(lst: [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst:\
    \ [30, 13, 24, 321]) == 0)\nassert(solution(lst: [5, 9]) == 5)\nassert(solution(lst:\
    \ [2, 4, 8]) == 0)\nassert(solution(lst: [30, 13, 23, 32]) == 23)\nassert(solution(lst:\
    \ [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmp_9vrnfi2/tmp_9vrnfi2.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad070ecfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad070bc6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad070bc6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad070bc57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9vrnfi2                        0x00005615ed4a358a <unavailable> + 5514

    5    libc.so.6                          0x00002ad0710bb460 __libc_start_main +
    245

    6    tmp_9vrnfi2                        0x00005615ed4a31e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013451
- exit_code: -4
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// solution([5, 8,\
    \ 7, 1]) ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24,\
    \ 321]) ==>0\nfunc solution(lst: [Int]) -> Int {\n    let oddIndices = lst.indices.filter\
    \ { $0 % 2 == 1 }\n    return oddIndices.reduce(0) { $0 + lst[$1] }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: Exception
  stderr: 'tmpdv93qznv/tmpdv93qznv.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9df4156c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9df3e4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9df3e4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9df3e4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdv93qznv                        0x000055ddd052f62a <unavailable> + 5674

    5    libc.so.6                          0x00002b9df4342460 __libc_start_main +
    245

    6    tmpdv93qznv                        0x000055ddd052f289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013451
- exit_code: 0
  program: "\n/// Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n/// Examples\n/// solution([5, 8,\
    \ 7, 1]) ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24,\
    \ 321]) ==>0\nfunc solution(lst: [Int]) -> Int {\n    var sum = 0\n    for (i,\
    \ num) in lst.enumerated() {\n        if i % 2 == 0 {\n            sum += num\
    \ % 2 == 0 ? 0 : num\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
    \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
    \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
    \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013451
