language: swift
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var valid_triples = 0\n    let array = get_integer_array(n: n)\n    for\
    \ i in 0..<array.count {\n        for j in i+1..<array.count {\n            for\
    \ k in j+1..<array.count {\n                if (array[i] + array[j] + array[k])\
    \ % 3 == 0 {\n                    valid_triples += 1\n                }\n    \
    \        }\n        }\n    }\n    return valid_triples\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpz1kfccg_.swift:14:17: error: cannot find 'get_integer_array' in\
    \ scope\n    let array = get_integer_array(n: n)\n                ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824870
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var array = [Int]()\n    for i in 1...n {\n     \
    \   array.append(i * i - i + 1)\n    }\n    for i in 0..<array.count {\n     \
    \   for j in (i + 1)..<array.count {\n            for k in (j + 1)..<array.count\
    \ {\n                if array[i] + array[j] + array[k] % 3 == 0 {\n          \
    \          result += 1\n                }\n            }\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpg715kzkk/tmpg715kzkk.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b9aa03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b9a6fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b9a6fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b9a6f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg715kzkk                        0x00005649c96d35d5 <unavailable> + 5589

    5    libc.so.6                          0x00002b7b9abef460 __libc_start_main +
    245

    6    tmpg715kzkk                        0x00005649c96d3289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824870
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    if n <= 2 {\n        return 0\n    }\n    var count = 0\n    var arr\
    \ = [Int]()\n    for i in 1...n {\n        arr.append(i * i - i + 1)\n    }\n\
    \    for i in 0..<arr.count - 2 {\n        for j in i + 1..<arr.count - 1 {\n\
    \            if (arr[i] + arr[j]) % 3 == 0 {\n                for k in j + 1..<arr.count\
    \ {\n                    if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n          \
    \              count += 1\n                    }\n                }\n        \
    \    }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpuxptiuhj/tmpuxptiuhj.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b362db61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b362d858b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b362d858988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b362d8577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuxptiuhj                        0x000055fbb57c35d5 <unavailable> + 5589

    5    libc.so.6                          0x00002b362dd4d460 __libc_start_main +
    245

    6    tmpuxptiuhj                        0x000055fbb57c3289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824870
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var output = 0;\n    for i in 1..<n {\n        for j in i..<n {\n   \
    \         for k in j..<n {\n                if( i + j + k) % 3 == 0 {\n      \
    \              output += 1;\n                }\n            }\n        }\n   \
    \ }\n    return output;\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmppmnpfv7d/tmppmnpfv7d.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4cea4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4ce741b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4ce741988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4ce7407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmnpfv7d                        0x000056165cddc335 <unavailable> + 4917

    5    libc.so.6                          0x00002af4cec36460 __libc_start_main +
    245

    6    tmppmnpfv7d                        0x000056165cddbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824870
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if is_multiple_of_3(num: i*i-i+1\
    \ + j*j-j+1 + k*k-k+1) {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpva2wuyru.swift:17:20: error: cannot find 'is_multiple_of_3' in\
    \ scope\n                if is_multiple_of_3(num: i*i-i+1 + j*j-j+1 + k*k-k+1)\
    \ {\n                   ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824870
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpoird8vjl/tmpoird8vjl.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af602542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af602239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af602239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6022387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoird8vjl                        0x00005617af45b1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002af60272e460 __libc_start_main +
    245

    6    tmpoird8vjl                        0x00005617af45ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824870
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    //greddy\n    var res = 0\n    var i = 0\n    var j = 1\n    var k =\
    \ 2\n    var nums = [Int]()\n    for a in 1...n {\n        nums.append(a * a -\
    \ a + 1)\n    }\n    while i < n - 2 {\n        while j < n - 1 {\n          \
    \  while k < n {\n                if nums[i] + nums[j] + nums[k] % 3 == 0 {\n\
    \                    res += 1\n                }\n                k += 1\n   \
    \         }\n            j += 1\n            k = j + 1\n        }\n        i +=\
    \ 1\n        j = i + 1\n        k = j + 1\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpa04d8iox/tmpa04d8iox.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7320ebbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7320bb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7320bb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7320bb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa04d8iox                        0x0000562d7a77a445 <unavailable> + 5189

    5    libc.so.6                          0x00002b73210a7460 __libc_start_main +
    245

    6    tmpa04d8iox                        0x0000562d7a77a0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1659824870
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var res = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n {\n \
    \           for k in (j + 1)..<n {\n                if ((i * i - i + 1) + (j *\
    \ j - j + 1) + (k * k - k + 1)) % 3 == 0 {\n                    res += 1\n   \
    \             }\n            }\n        }\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp_3wfe8wf/tmp_3wfe8wf.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cf9666c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cf935db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cf935d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cf935c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_3wfe8wf                        0x000055a7ae9023b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b9cf9852460 __libc_start_main +
    245

    6    tmp_3wfe8wf                        0x000055a7ae901fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824870
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var triples = 0\n    for i in 1...n-2 {\n        for j in i+1...n-1 {\n\
    \            for k in j+1...n {\n                if (i * i - i + 1 + j * j - j\
    \ + 1 + k * k - k + 1) % 3 == 0 {\n                    triples += 1\n        \
    \        }\n            }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824870
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    // We can try to find a pattern in a. \n    // For example, if we take\
    \ a[1] = 1 * 1 - 1 + 1 = 1. \n    // How does a[2] change relative to a[1]? What\
    \ about a[3]? a[4]? a[5]? \n    // If we plot a[i] for i = 1, 2, 3, 4, 5, we get\
    \ the following:\n    // a[i] = | 1,   2,   4,   7,   11,\n    // And the differences\
    \ between each point are:\n    // a[i] = | 1,   2,   3,   4,   5,\n    // Let's\
    \ plot the differences:\n    // a[i] = | 1,   2,   3,   4,   5,\n    // Can you\
    \ see a pattern now?\n    // a[i] = | 2,   3,   4,   5,   6,\n    // a[i] = |\
    \ 1,   1,   1,   1,   1,\n    // That's right! The nth item in the array has the\
    \ value n.\n    // The array would look like this:\n    // a[i] = | 1,   2,  \
    \ 3,   4,   5,   6,   7,   8,   9,   10,  11,  12,  13,  14,  15,  16,  17,  18,\
    \  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33, \
    \ 34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,\
    \  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64, \
    \ 65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: '/tmp/tmpi8_hb29q.swift:28:1: error: missing return in global function expected
    to return ''Int''

    }

    ^

    '
  stdout: ''
  timestamp: 1659824870
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    // write your code in Swift 3.0 (Linux)\n    return 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp5454bxl3/tmp5454bxl3.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fa3ee4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fa3bdbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fa3bdb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fa3bda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5454bxl3                        0x000055ff9b4041b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b9fa40d0460 __libc_start_main +
    245

    6    tmp5454bxl3                        0x000055ff9b403e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824870
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    // The code here\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpewrnkv05/tmpewrnkv05.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83ff1d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83feeccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83feecc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83feecb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewrnkv05                        0x000055b0617001b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b83ff3c1460 __libc_start_main +
    245

    6    tmpewrnkv05                        0x000055b0616ffe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824870
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    if n < 3 {\n        return 0\n    }\n    var a = [Int](repeating: 0,\
    \ count: n)\n    for i in 1..<n {\n        a[i] = i * i - i + 1\n    }\n    var\
    \ result = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            for\
    \ k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n       \
    \             result += 1\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmprkup5aip/tmprkup5aip.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44558f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44555eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44555ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44555ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprkup5aip                        0x000055906bc724d0 <unavailable> + 5328

    5    libc.so.6                          0x00002b4455ae3460 __libc_start_main +
    245

    6    tmprkup5aip                        0x000055906bc72109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824870
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    let a = Array(1...n).map {$0 * $0 - $0 + 1}\n    var count = 0\n    for\
    \ i in 0..<a.count - 2 {\n        for j in i + 1..<a.count - 1 {\n           \
    \ for k in j + 1..<a.count {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824870
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    if n < 3 {\n        return 0\n    }\n    var a = [Int](repeating: 0,\
    \ count: n)\n    for i in 1...n {\n        a[i - 1] = i * i - i + 1\n    }\n \
    \   var ret = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n - 1 {\n\
    \            for k in j + 1..<n {\n                if a[i] + a[j] + a[k] % 3 ==\
    \ 0 {\n                    ret += 1\n                }\n            }\n      \
    \  }\n    }\n    return ret\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpb4ej1n6g/tmpb4ej1n6g.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10404dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10401d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10401d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10401d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb4ej1n6g                        0x000055c2e8551545 <unavailable> + 5445

    5    libc.so.6                          0x00002b10406ca460 __libc_start_main +
    245

    6    tmpb4ej1n6g                        0x000055c2e85511f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824870
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n\t// We need to check if the sum of 3 elements is divisible by 3\n\t// Since\
    \ the 3 elements are consecutive, their sum is 3x + y, where x and y are 2\n\t\
    // consecutive numbers. So, y must be 2 or 1.\n\tvar max_triples = 0\n\tfor i\
    \ in 1..<n-1 {\n\t\tlet y = i * i - i + 1\n\t\tif y % 3 == 0 {\n\t\t\tmax_triples\
    \ += 1\n\t\t}\n\t}\n\treturn max_triples\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpszkev37y/tmpszkev37y.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5415980c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5415677b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5415677988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54156767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpszkev37y                        0x000055c933eff3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b5415b6c460 __libc_start_main +
    245

    6    tmpszkev37y                        0x000055c933efefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824870
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var dp = Array(repeating: 0, count: n + 1)\n    for i in 2...n {\n  \
    \      dp[i] = dp[i - 1] + i * i - i + 1\n    }\n    var res = 0\n    for i in\
    \ 1..<n - 1 {\n        let cur = dp[i]\n        var left = i + 1\n        var\
    \ right = n\n        while left < right {\n            let sum = cur + dp[right]\
    \ + dp[left]\n            if sum == n * n {\n                res += 1\n      \
    \          left += 1\n                right -= 1\n            } else if sum <\
    \ n * n {\n                left += 1\n            } else {\n                right\
    \ -= 1\n            }\n        }\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp65y9fijt/tmp65y9fijt.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab73dd12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab73da09b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab73da09988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab73da087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp65y9fijt                        0x000055ee7b09f545 <unavailable> + 5445

    5    libc.so.6                          0x00002ab73defe460 __libc_start_main +
    245

    6    tmp65y9fijt                        0x000055ee7b09f1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824870
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    for i in 0..<n {\n        for j in (i + 1)..<n {\n\
    \            for k in (j + 1)..<n {\n                let sum = (i + 1) * (i +\
    \ 1) - (i + 1) + 1 + (j + 1) * (j + 1) - (j + 1) + 1 + (k + 1) * (k + 1) - (k\
    \ + 1) + 1\n                if sum % 3 == 0 {\n                    result += 1\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824870
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n\tvar res = 0\n\tvar arr = [Int]()\n\tfor i in 1...n {\n\t\tarr.append(i\
    \ * i - i + 1)\n\t}\n\tfor i in 0..<n {\n\t\tfor j in i+1..<n {\n\t\t\tfor k in\
    \ j+1..<n {\n\t\t\t\tif (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n\t\t\t\t\tres +=\
    \ 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn res\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824870
- exit_code: 1
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var res = 0\n    let end = n - 2\n    for i in 0...end {\n        for\
    \ j in (i + 1)...end {\n            for k in (j + 1)...end {\n               \
    \ if is_triple(num1: i, num2: j, num3: k) {\n                    res += 1\n  \
    \              }\n            }\n        }\n    }\n    return res\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: SyntaxError
  stderr: "/tmp/tmpayc69p0b.swift:18:20: error: cannot find 'is_triple' in scope\n\
    \                if is_triple(num1: i, num2: j, num3: k) {\n                 \
    \  ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824870
