name: HumanEval_155_even_odd_count
language: swift
prompt: "\n/// Given an integer. return a tuple that has the number of even and odd\
  \ digits respectively.\n/// Example:\n/// even_odd_count(-12) ==> (1, 1)\n/// even_odd_count(123)\
  \ ==> (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(even_odd_count(num: 7) == (0, 1))\nassert(even_odd_count(num:\
  \ -78) == (1, 1))\nassert(even_odd_count(num: 3452) == (2, 2))\nassert(even_odd_count(num:\
  \ 346211) == (3, 3))\nassert(even_odd_count(num: -345821) == (3, 3))\nassert(even_odd_count(num:\
  \ -2) == (1, 0))\nassert(even_odd_count(num: -45347) == (2, 3))\nassert(even_odd_count(num:\
  \ 0) == (1, 0))"
completions: ['    return (0, 0)', '    return (0, 0)', "    var sumOfEven = 0\n \
    \   var sumOfOdd = 0\n    var tempNum = num\n    if num < 0 {\n        tempNum\
    \ = -tempNum\n    }\n    for index in String(tempNum) {\n        if Int(String(index))!\
    \ % 2 == 0 {\n            sumOfEven += 1\n        } else {\n            sumOfOdd\
    \ += 1\n        }\n    }\n    return (sumOfEven, sumOfOdd)", "    var even = 0\n\
    \    var odd = 0\n    let t = String(num).flatMap { Int(String($0)) }\n    for\
    \ i in t {\n        if i % 2 == 0 {\n            even += 1\n        } else {\n\
    \            odd += 1\n        }\n    }\n    return (even, odd)", "    let digits\
    \ = String(num).map{Int(String($0))!}\n    var evenCount = 0\n    var oddCount\
    \ = 0\n    for digit in digits {\n        if digit % 2 == 0 {\n            evenCount\
    \ += 1\n        } else {\n            oddCount += 1\n        }\n    }\n    return\
    \ (evenCount, oddCount)", "    var num = num\n    var even_count = 0\n    var\
    \ odd_count = 0\n    while num != 0 {\n        let digit = num % 10\n        if\
    \ digit % 2 == 0 {\n            even_count += 1\n        } else {\n          \
    \  odd_count += 1\n        }\n        num /= 10\n    }\n    return (even_count,\
    \ odd_count)", "    var even = 0\n    var odd = 0\n    var num = num\n    if num\
    \ < 0 {\n        num = -num\n    }\n    while num > 0 {\n        let digit = num\
    \ % 10\n        if digit % 2 == 0 {\n            even += 1\n        } else {\n\
    \            odd += 1\n        }\n        num /= 10\n    }\n    return (even,\
    \ odd)", '    return (0, 0)', "    // CODE GOES HERE\n    var even_count = 0\n\
    \    var odd_count = 0\n    var number = abs(num)\n    while number > 0 {\n  \
    \      if number % 2 == 0 {\n            even_count += 1\n        } else {\n \
    \           odd_count += 1\n        }\n        number /= 10\n    }\n    return\
    \ (even_count, odd_count)", "    let digits = abs(num).description.characters.map{String($0)}\n\
    \    var evenCount = 0\n    var oddCount = 0\n    for c in digits {\n        if\
    \ Int(c)! % 2 == 0 {\n            evenCount += 1\n        } else {\n         \
    \   oddCount += 1\n        }\n    }\n    return (evenCount, oddCount)", "    let\
    \ digits = String(num).compactMap{ Int(String($0)) }\n    let even = digits.filter{\
    \ $0 % 2 == 0 }.count\n    let odd = digits.filter{ $0 % 2 != 0 }.count\n    return\
    \ (even, odd)", "    var even = 0\n    var odd = 0\n    var absNum = abs(num)\n\
    \    while absNum > 0 {\n        let digit = absNum % 10\n        if digit % 2\
    \ == 0 {\n            even += 1\n        } else {\n            odd += 1\n    \
    \    }\n        absNum /= 10\n    }\n    return (even, odd)", "    var even =\
    \ 0\n    var odd = 0\n    for i in String(num).compactMap({ Int(String($0)) })\
    \ {\n        if i % 2 == 0 {\n            even += 1\n        } else {\n      \
    \      odd += 1\n        }\n    }\n    return (even, odd)", "    let numString\
    \ = String(num)\n    var even = 0\n    var odd = 0\n    for char in numString\
    \ {\n        if String(char).toInt()! % 2 == 0 {\n            even++\n       \
    \ } else {\n            odd++\n        }\n    }\n    return (even, odd)", '    return
    (0, 0)', "  var evenCount = 0\n  var oddCount = 0\n  var numCopy = num\n  while\
    \ numCopy != 0 {\n    let r = numCopy % 10\n    if r % 2 == 0 {\n      evenCount\
    \ += 1\n    } else {\n      oddCount += 1\n    }\n    numCopy /= 10\n  }\n  return\
    \ (evenCount, oddCount)", "    var evenCount = 0\n    var oddCount = 0\n    var\
    \ number = num\n    if number < 0 {\n        number *= -1\n    }\n    while number\
    \ > 0 {\n        let remainder = number % 10\n        if remainder % 2 == 0 {\n\
    \            evenCount += 1\n        } else {\n            oddCount += 1\n   \
    \     }\n        number /= 10\n    }\n    return (evenCount, oddCount)", "   \
    \ var evenCount = 0\n    var oddCount = 0\n    for n in String(num).compactMap({Int(String($0))})\
    \ {\n        if n % 2 == 0 {\n            evenCount += 1\n        } else {\n \
    \           oddCount += 1\n        }\n    }\n    return (evenCount, oddCount)",
  "    var evens = 0\n    var odds = 0\n    for n in String(num).compactMap({ Int(String($0))\
    \ }) {\n        if n % 2 == 0 {\n            evens += 1\n        } else {\n  \
    \          odds += 1\n        }\n    }\n    return (evens, odds)", "    let evens\
    \ = num.magnitude.description.split(separator: \"\").filter({ Int(String($0))!\
    \ % 2 == 0 }).count\n    let odds = num.magnitude.description.split(separator:\
    \ \"\").filter({ Int(String($0))! % 2 != 0 }).count\n    return (evens, odds)"]
stop_tokens:
- "\n}"
