language: swift
name: HumanEval_33_sort_third
results:
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n/// to the\
    \ values of the corresponding indicies of l, but sorted.\n/// >>> sort_third([1,\
    \ 2, 3])\n/// [1, 2, 3]\n/// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n/// [2, 6,\
    \ 3, 4, 8, 9, 5]\nfunc sort_third(l: [Int]) -> [Int] {\n  var tmp = l\n  for i\
    \ in 0..<l.count/3 {\n    let range = i*3..<i*3+3\n    tmp[range] = l[range].sorted()\n\
    \  }\n  return tmp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_third(l: [5,\
    \ 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5])\nassert(sort_third(l: [5, 8, 3,\
    \ 4, 6, 9, 2]) == [2, 8, 3, 4, 6, 9, 5])\nassert(sort_third(l: [5, 6, 9, 4, 8,\
    \ 3, 2]) == [2, 6, 9, 4, 8, 3, 5])\nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2,\
    \ 1]) == [2, 6, 3, 4, 8, 9, 5, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1zel93xl.swift:13:27: error: cannot assign value of type '[Int]'\
    \ to subscript of type 'ArraySlice<Int>'\n    tmp[range] = l[range].sorted()\n\
    \                 ~~~~~~~~~^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824627
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n/// to the\
    \ values of the corresponding indicies of l, but sorted.\n/// >>> sort_third([1,\
    \ 2, 3])\n/// [1, 2, 3]\n/// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n/// [2, 6,\
    \ 3, 4, 8, 9, 5]\nfunc sort_third(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ i in stride(from: l.count - 1, through: 1, by: -3) {\n        for j in stride(from:\
    \ 0, to: i, by: 3) {\n            if l[j] > l[j + 3] {\n                swap(&l[j],\
    \ &l[j + 3])\n            }\n        }\n    }\n    return l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8,\
    \ 9, 5])\nassert(sort_third(l: [5, 8, 3, 4, 6, 9, 2]) == [2, 8, 3, 4, 6, 9, 5])\n\
    assert(sort_third(l: [5, 6, 9, 4, 8, 3, 2]) == [2, 6, 9, 4, 8, 3, 5])\nassert(sort_third(l:\
    \ [5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6, 3, 4, 8, 9, 5, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp4757a2q3.swift:14:22: error: overlapping accesses to 'l', but modification\
    \ requires exclusive access; consider calling MutableCollection.swapAt(_:_:)\n\
    \                swap(&l[j], &l[j + 3])\n                ~~~~~^~~~~~~~~~~~~~~~~\n\
    \                l.swapAt(j, j + 3)\n/tmp/tmp4757a2q3.swift:14:29: note: conflicting\
    \ access is here\n                swap(&l[j], &l[j + 3])\n                   \
    \         ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824627
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n/// to the\
    \ values of the corresponding indicies of l, but sorted.\n/// >>> sort_third([1,\
    \ 2, 3])\n/// [1, 2, 3]\n/// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n/// [2, 6,\
    \ 3, 4, 8, 9, 5]\nfunc sort_third(l: [Int]) -> [Int] {\n    var result = l\n \
    \   for i in 0..<l.count {\n        if i % 3 == 0 {\n            result[i] = l[i].sorted()[0]\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_third(l: [5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5])\nassert(sort_third(l:\
    \ [5, 8, 3, 4, 6, 9, 2]) == [2, 8, 3, 4, 6, 9, 5])\nassert(sort_third(l: [5, 6,\
    \ 9, 4, 8, 3, 2]) == [2, 6, 9, 4, 8, 3, 5])\nassert(sort_third(l: [5, 6, 3, 4,\
    \ 8, 9, 2, 1]) == [2, 6, 3, 4, 8, 9, 5, 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2r6d5__a.swift:13:26: error: no exact matches in call to subscript\
    \ \n            result[i] = l[i].sorted()[0]\n                         ^\nSwift.Array:17:23:\
    \ note: candidate expects value of type 'Range<Int>' for parameter #1 (got 'Int')\n\
    \    @inlinable public subscript(bounds: Range<Int>) -> ArraySlice<Element> {\
    \ get set }\n                      ^\nSwift.Collection:3:23: note: candidate expects\
    \ value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n \
    \                     ^\nSwift.MutableCollection:3:23: note: candidate expects\
    \ value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get set }\n\
    \                      ^\n"
  stdout: ''
  timestamp: 1659824627
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n/// to the\
    \ values of the corresponding indicies of l, but sorted.\n/// >>> sort_third([1,\
    \ 2, 3])\n/// [1, 2, 3]\n/// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n/// [2, 6,\
    \ 3, 4, 8, 9, 5]\nfunc sort_third(l: [Int]) -> [Int] {\n    let l3 = stride(from:\
    \ 0, to: l.count, by: 3).map {\n        Array(l[$0..<$0+3]).sorted()\n    }\n\
    \    var i = 0\n    var j = 0\n    return stride(from: 0, to: l.count, by: 1).map\
    \ { _ in\n        let retval = l3[i][j]\n        j += 1\n        if j == 3 {\n\
    \            i += 1\n            j = 0\n        }\n        return retval\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_third(l: [5, 6, 3, 4, 8,\
    \ 9, 2]) == [2, 6, 3, 4, 8, 9, 5])\nassert(sort_third(l: [5, 8, 3, 4, 6, 9, 2])\
    \ == [2, 8, 3, 4, 6, 9, 5])\nassert(sort_third(l: [5, 6, 9, 4, 8, 3, 2]) == [2,\
    \ 6, 9, 4, 8, 3, 5])\nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6,\
    \ 3, 4, 8, 9, 5, 1])"
  status: Exception
  stderr: 'Swift/Array.swift:418: Fatal error: Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b354addec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b354aad5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b354aad5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b354aad513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b354aad4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b354aabe196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002b354ad0f457 <unavailable> + 3769431

    7    libswiftCore.so                    0x00002b354aabe570 Array.subscript.getter
    + 20

    8    tmp0zxujhe_                        0x000055c96e69b12d <unavailable> + 8493

    9    tmp0zxujhe_                        0x000055c96e69b7af <unavailable> + 10159

    10   libswiftCore.so                    0x00002b354ab38880 Sequence.map<A>(_:)
    + 596

    11   tmp0zxujhe_                        0x000055c96e69aee3 <unavailable> + 7907

    12   tmp0zxujhe_                        0x000055c96e69a844 <unavailable> + 6212

    13   libc.so.6                          0x00002b354afca460 __libc_start_main +
    245

    14   tmp0zxujhe_                        0x000055c96e69a509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n/// to the\
    \ values of the corresponding indicies of l, but sorted.\n/// >>> sort_third([1,\
    \ 2, 3])\n/// [1, 2, 3]\n/// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n/// [2, 6,\
    \ 3, 4, 8, 9, 5]\nfunc sort_third(l: [Int]) -> [Int] {\n    let a: [Int] = l.filter{$0\
    \ % 3 == 0}\n    let b: [Int] = l.filter{$0 % 3 != 0}\n    return b + a.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2]) == [2, 6,\
    \ 3, 4, 8, 9, 5])\nassert(sort_third(l: [5, 8, 3, 4, 6, 9, 2]) == [2, 8, 3, 4,\
    \ 6, 9, 5])\nassert(sort_third(l: [5, 6, 9, 4, 8, 3, 2]) == [2, 6, 9, 4, 8, 3,\
    \ 5])\nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6, 3, 4, 8, 9, 5,\
    \ 1])"
  status: Exception
  stderr: 'tmpz33z68ml/tmpz33z68ml.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b612b680c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b612b377b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b612b377988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b612b3767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz33z68ml                        0x0000556b3c8d3664 <unavailable> + 5732

    5    libc.so.6                          0x00002b612b86c460 __libc_start_main +
    245

    6    tmpz33z68ml                        0x0000556b3c8d3229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n/// to the\
    \ values of the corresponding indicies of l, but sorted.\n/// >>> sort_third([1,\
    \ 2, 3])\n/// [1, 2, 3]\n/// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n/// [2, 6,\
    \ 3, 4, 8, 9, 5]\nfunc sort_third(l: [Int]) -> [Int] {\n    var l = l\n    var\
    \ index = 2\n    var end = l.count\n    while index < end {\n        var index2\
    \ = index\n        var index3 = index\n        while index2 > 0 && l[index2] <\
    \ l[index2 - 1] {\n            let temp = l[index2]\n            l[index2] = l[index2\
    \ - 1]\n            l[index2 - 1] = temp\n            index2 -= 1\n        }\n\
    \        while index3 > 1 && l[index3] < l[index3 - 2] {\n            let temp\
    \ = l[index3]\n            l[index3] = l[index3 - 2]\n            l[index3 - 2]\
    \ = temp\n            index3 -= 2\n        }\n        index += 3\n    }\n    return\
    \ l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_third(l: [5, 6, 3, 4, 8,\
    \ 9, 2]) == [2, 6, 3, 4, 8, 9, 5])\nassert(sort_third(l: [5, 8, 3, 4, 6, 9, 2])\
    \ == [2, 8, 3, 4, 6, 9, 5])\nassert(sort_third(l: [5, 6, 9, 4, 8, 3, 2]) == [2,\
    \ 6, 9, 4, 8, 3, 5])\nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6,\
    \ 3, 4, 8, 9, 5, 1])"
  status: Exception
  stderr: 'tmpvopnik1t/tmpvopnik1t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d424efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d421e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d421e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d421e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvopnik1t                        0x000055933ec18504 <unavailable> + 5380

    5    libc.so.6                          0x00002b7d426db460 __libc_start_main +
    245

    6    tmpvopnik1t                        0x000055933ec180c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n/// to the\
    \ values of the corresponding indicies of l, but sorted.\n/// >>> sort_third([1,\
    \ 2, 3])\n/// [1, 2, 3]\n/// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n/// [2, 6,\
    \ 3, 4, 8, 9, 5]\nfunc sort_third(l: [Int]) -> [Int] {\n    var l = l\n    for\
    \ index in stride(from: l.count - 1, through: 0, by: -3) {\n        var slice\
    \ = l[index - 2..<index + 1]\n        slice.sort()\n        l[index - 2..<index\
    \ + 1] = slice\n    }\n    return l\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_third(l: [5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5])\nassert(sort_third(l:\
    \ [5, 8, 3, 4, 6, 9, 2]) == [2, 8, 3, 4, 6, 9, 5])\nassert(sort_third(l: [5, 6,\
    \ 9, 4, 8, 3, 2]) == [2, 6, 9, 4, 8, 3, 5])\nassert(sort_third(l: [5, 6, 3, 4,\
    \ 8, 9, 2, 1]) == [2, 6, 3, 4, 8, 9, 5, 1])"
  status: Exception
  stderr: 'Swift/Array.swift:419: Fatal error: Negative Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b928e796c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b928e48d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b928e48d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b928e48d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b928e48cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b928e476196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002b928e6c744e <unavailable> + 3769422

    7    libswiftCore.so                    0x00002b928e476570 Array.subscript.getter
    + 20

    8    tmpt5ovkmdz                        0x0000559788953034 <unavailable> + 8244

    9    tmpt5ovkmdz                        0x0000559788952864 <unavailable> + 6244

    10   libc.so.6                          0x00002b928e982460 __libc_start_main +
    245

    11   tmpt5ovkmdz                        0x0000559788952529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n/// to the\
    \ values of the corresponding indicies of l, but sorted.\n/// >>> sort_third([1,\
    \ 2, 3])\n/// [1, 2, 3]\n/// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n/// [2, 6,\
    \ 3, 4, 8, 9, 5]\nfunc sort_third(l: [Int]) -> [Int] {\n    let x = l.enumerated().map\
    \ { $0.0 % 3 == 0 ? $0.1 : 0 }\n    let i = x.indices.filter { x[$0] != 0 }\n\
    \    let sorted = l.enumerated().map { (i, x) in return x }.filter { i.contains($0.0)\
    \ }.sorted(by: { $0.1 < $1.1 })\n    let ans = Array(sorted.enumerated().map {\
    \ (i, x) in return i.0 == $0.0 ? x.1 : l[$0.0] })\n    return ans\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2]) == [2, 6,\
    \ 3, 4, 8, 9, 5])\nassert(sort_third(l: [5, 8, 3, 4, 6, 9, 2]) == [2, 8, 3, 4,\
    \ 6, 9, 5])\nassert(sort_third(l: [5, 6, 9, 4, 8, 3, 2]) == [2, 6, 9, 4, 8, 3,\
    \ 5])\nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6, 3, 4, 8, 9, 5,\
    \ 1])"
  status: SyntaxError
  stderr: "/tmp/tmp363fbnw3.swift:13:71: error: anonymous closure arguments cannot\
    \ be used inside a closure that has explicit arguments; did you mean 'i'?\n  \
    \  let ans = Array(sorted.enumerated().map { (i, x) in return i.0 == $0.0 ? x.1\
    \ : l[$0.0] })\n                                                             \
    \         ^~\n                                                               \
    \       i\n/tmp/tmp363fbnw3.swift:13:86: error: anonymous closure arguments cannot\
    \ be used inside a closure that has explicit arguments; did you mean 'i'?\n  \
    \  let ans = Array(sorted.enumerated().map { (i, x) in return i.0 == $0.0 ? x.1\
    \ : l[$0.0] })\n                                                             \
    \                        ^~\n                                                \
    \                                     i\n/tmp/tmp363fbnw3.swift:12:83: error:\
    \ value of type 'Int' has no member '0'\n    let sorted = l.enumerated().map {\
    \ (i, x) in return x }.filter { i.contains($0.0) }.sorted(by: { $0.1 < $1.1 })\n\
    \                                                                            \
    \   ~~ ^\n/tmp/tmp363fbnw3.swift:12:104: error: value of type 'Int' has no member\
    \ '1'\n    let sorted = l.enumerated().map { (i, x) in return x }.filter { i.contains($0.0)\
    \ }.sorted(by: { $0.1 < $1.1 })\n                                            \
    \                                                        ~~ ^\n/tmp/tmp363fbnw3.swift:12:111:\
    \ error: value of type 'Int' has no member '1'\n    let sorted = l.enumerated().map\
    \ { (i, x) in return x }.filter { i.contains($0.0) }.sorted(by: { $0.1 < $1.1\
    \ })\n                                                                       \
    \                                    ~~ ^\n"
  stdout: ''
  timestamp: 1659824630
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n/// to the\
    \ values of the corresponding indicies of l, but sorted.\n/// >>> sort_third([1,\
    \ 2, 3])\n/// [1, 2, 3]\n/// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n/// [2, 6,\
    \ 3, 4, 8, 9, 5]\nfunc sort_third(l: [Int]) -> [Int] {\n    var l_copy = l\n \
    \   for i in stride(from: 2, to: l.count, by: 3) {\n        let third = l_copy[i]\n\
    \        l_copy[i] = l_copy[i-1]\n        l_copy[i-1] = third\n    }\n    return\
    \ l_copy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_third(l: [5, 6,\
    \ 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5])\nassert(sort_third(l: [5, 8, 3, 4,\
    \ 6, 9, 2]) == [2, 8, 3, 4, 6, 9, 5])\nassert(sort_third(l: [5, 6, 9, 4, 8, 3,\
    \ 2]) == [2, 6, 9, 4, 8, 3, 5])\nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2, 1])\
    \ == [2, 6, 3, 4, 8, 9, 5, 1])"
  status: Exception
  stderr: 'tmptr9mkm9x/tmptr9mkm9x.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24e737cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24e7073b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24e7073988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24e70727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptr9mkm9x                        0x00005616c1cbb714 <unavailable> + 5908

    5    libc.so.6                          0x00002b24e7568460 __libc_start_main +
    245

    6    tmptr9mkm9x                        0x00005616c1cbb2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n/// to the\
    \ values of the corresponding indicies of l, but sorted.\n/// >>> sort_third([1,\
    \ 2, 3])\n/// [1, 2, 3]\n/// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n/// [2, 6,\
    \ 3, 4, 8, 9, 5]\nfunc sort_third(l: [Int]) -> [Int] {\n    // code here\n   \
    \ return l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_third(l: [5, 6,\
    \ 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5])\nassert(sort_third(l: [5, 8, 3, 4,\
    \ 6, 9, 2]) == [2, 8, 3, 4, 6, 9, 5])\nassert(sort_third(l: [5, 6, 9, 4, 8, 3,\
    \ 2]) == [2, 6, 9, 4, 8, 3, 5])\nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2, 1])\
    \ == [2, 6, 3, 4, 8, 9, 5, 1])"
  status: Exception
  stderr: 'tmpsgcdr0eo/tmpsgcdr0eo.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d41e5ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d41b55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d41b55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d41b547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsgcdr0eo                        0x0000556682fb2404 <unavailable> + 5124

    5    libc.so.6                          0x00002b1d4204a460 __libc_start_main +
    245

    6    tmpsgcdr0eo                        0x0000556682fb1fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824627
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n/// to the\
    \ values of the corresponding indicies of l, but sorted.\n/// >>> sort_third([1,\
    \ 2, 3])\n/// [1, 2, 3]\n/// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n/// [2, 6,\
    \ 3, 4, 8, 9, 5]\nfunc sort_third(l: [Int]) -> [Int] {\n\tvar new_l = l\n\tfor\
    \ i in stride(from: 2, to: l.count, by: 3) {\n\t\tlet index = i\n\t\tnew_l.insert(contentsOf:\
    \ [l[index], l[index - 1], l[index - 2]].sorted(), at: index - 2)\n\t\tnew_l.removeSubrange(Range(uncheckedBounds:\
    \ (lower: index + 1, upper: index + 3)))\n\t}\n\treturn new_l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8,\
    \ 9, 5])\nassert(sort_third(l: [5, 8, 3, 4, 6, 9, 2]) == [2, 8, 3, 4, 6, 9, 5])\n\
    assert(sort_third(l: [5, 6, 9, 4, 8, 3, 2]) == [2, 6, 9, 4, 8, 3, 5])\nassert(sort_third(l:\
    \ [5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6, 3, 4, 8, 9, 5, 1])"
  status: Exception
  stderr: 'tmpd0rnqk0m/tmpd0rnqk0m.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5110cc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51109b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51109b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51109b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd0rnqk0m                        0x0000560eac012954 <unavailable> + 6484

    5    libc.so.6                          0x00002b5110eae460 __libc_start_main +
    245

    6    tmpd0rnqk0m                        0x0000560eac012519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n/// to the\
    \ values of the corresponding indicies of l, but sorted.\n/// >>> sort_third([1,\
    \ 2, 3])\n/// [1, 2, 3]\n/// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n/// [2, 6,\
    \ 3, 4, 8, 9, 5]\nfunc sort_third(l: [Int]) -> [Int] {\n  return l.enumerated().map({\
    \ (i, x) in i % 3 == 0 ? x.sorted() : x }).flatMap { $0 }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8,\
    \ 9, 5])\nassert(sort_third(l: [5, 8, 3, 4, 6, 9, 2]) == [2, 8, 3, 4, 6, 9, 5])\n\
    assert(sort_third(l: [5, 6, 9, 4, 8, 3, 2]) == [2, 6, 9, 4, 8, 3, 5])\nassert(sort_third(l:\
    \ [5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6, 3, 4, 8, 9, 5, 1])"
  status: SyntaxError
  stderr: "/tmp/tmpkjmq0jms.swift:10:56: error: value of type 'Int' has no member\
    \ 'sorted'\n  return l.enumerated().map({ (i, x) in i % 3 == 0 ? x.sorted() :\
    \ x }).flatMap { $0 }\n                                                     ~\
    \ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n/// to the\
    \ values of the corresponding indicies of l, but sorted.\n/// >>> sort_third([1,\
    \ 2, 3])\n/// [1, 2, 3]\n/// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n/// [2, 6,\
    \ 3, 4, 8, 9, 5]\nfunc sort_third(l: [Int]) -> [Int] {\n\tvar r: [Int] = l\n\t\
    for i in stride(from: 2, to: l.count, by: 3) {\n\t\tlet sub: [Int] = Array(l[i\
    \ - 2...i])\n\t\tlet sub_sorted: [Int] = sub.sorted()\n\t\tr[i - 2] = sub_sorted[0]\n\
    \t\tr[i - 1] = sub_sorted[1]\n\t\tr[i] = sub_sorted[2]\n\t}\n\treturn r\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2]) == [2, 6,\
    \ 3, 4, 8, 9, 5])\nassert(sort_third(l: [5, 8, 3, 4, 6, 9, 2]) == [2, 8, 3, 4,\
    \ 6, 9, 5])\nassert(sort_third(l: [5, 6, 9, 4, 8, 3, 2]) == [2, 6, 9, 4, 8, 3,\
    \ 5])\nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6, 3, 4, 8, 9, 5,\
    \ 1])"
  status: Exception
  stderr: 'tmpwurqbvvl/tmpwurqbvvl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1117919c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1117610b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1117610988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b111760f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwurqbvvl                        0x000055aebc7fca44 <unavailable> + 6724

    5    libc.so.6                          0x00002b1117b05460 __libc_start_main +
    245

    6    tmpwurqbvvl                        0x000055aebc7fc609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n/// to the\
    \ values of the corresponding indicies of l, but sorted.\n/// >>> sort_third([1,\
    \ 2, 3])\n/// [1, 2, 3]\n/// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n/// [2, 6,\
    \ 3, 4, 8, 9, 5]\nfunc sort_third(l: [Int]) -> [Int] {\n    /// - parameter l:\n\
    \    var l2 = l\n    for i in stride(from: 2, to: l.count, by: 3) {\n        l2.insert(l[i],\
    \ at: l2.count-1)\n        l2.remove(at: i)\n    }\n    return l2\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2]) == [2, 6,\
    \ 3, 4, 8, 9, 5])\nassert(sort_third(l: [5, 8, 3, 4, 6, 9, 2]) == [2, 8, 3, 4,\
    \ 6, 9, 5])\nassert(sort_third(l: [5, 6, 9, 4, 8, 3, 2]) == [2, 6, 9, 4, 8, 3,\
    \ 5])\nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6, 3, 4, 8, 9, 5,\
    \ 1])"
  status: Exception
  stderr: 'tmpbobxu1d8/tmpbobxu1d8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b265855bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2658252b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2658252988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26582517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbobxu1d8                        0x00005629d396b774 <unavailable> + 6004

    5    libc.so.6                          0x00002b2658747460 __libc_start_main +
    245

    6    tmpbobxu1d8                        0x00005629d396b339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n/// to the\
    \ values of the corresponding indicies of l, but sorted.\n/// >>> sort_third([1,\
    \ 2, 3])\n/// [1, 2, 3]\n/// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n/// [2, 6,\
    \ 3, 4, 8, 9, 5]\nfunc sort_third(l: [Int]) -> [Int] {\n  var list = l\n  for\
    \ i in stride(from: 2, to: l.count, by: 3) {\n    for j in stride(from: i - 2,\
    \ to: i, by: 1) {\n      if l[j] > l[j + 1] {\n        let t = l[j]\n        list[j]\
    \ = l[j + 1]\n        list[j + 1] = t\n      }\n    }\n  }\n  return list\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2]) == [2, 6,\
    \ 3, 4, 8, 9, 5])\nassert(sort_third(l: [5, 8, 3, 4, 6, 9, 2]) == [2, 8, 3, 4,\
    \ 6, 9, 5])\nassert(sort_third(l: [5, 6, 9, 4, 8, 3, 2]) == [2, 6, 9, 4, 8, 3,\
    \ 5])\nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6, 3, 4, 8, 9, 5,\
    \ 1])"
  status: Exception
  stderr: 'tmpyu_h6h5q/tmpyu_h6h5q.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30f8140c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30f7e37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30f7e37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30f7e367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyu_h6h5q                        0x0000558574a35714 <unavailable> + 5908

    5    libc.so.6                          0x00002b30f832c460 __libc_start_main +
    245

    6    tmpyu_h6h5q                        0x0000558574a352d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n/// to the\
    \ values of the corresponding indicies of l, but sorted.\n/// >>> sort_third([1,\
    \ 2, 3])\n/// [1, 2, 3]\n/// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n/// [2, 6,\
    \ 3, 4, 8, 9, 5]\nfunc sort_third(l: [Int]) -> [Int] {\n    var new_list: [Int]\
    \ = []\n    var first: [Int] = []\n    var second: [Int] = []\n    var third:\
    \ [Int] = []\n    var combined: [Int] = []\n    if l.count >= 3 {\n        first\
    \ = Array(l[0..<3])\n        first.sort()\n        second = Array(l[3..<6])\n\
    \        third = Array(l[6..<9])\n        if l.count > 9 {\n            var remaining\
    \ = l[9..<l.count]\n            remaining.sort()\n            new_list = [first[0],\
    \ first[1], first[2], second[0], second[1], second[2], third[0], third[1], third[2]]\
    \ + remaining\n        } else {\n            new_list = [first[0], first[1], first[2],\
    \ second[0], second[1], second[2], third[0], third[1], third[2]]\n        }\n\
    \    } else {\n        new_list = l\n    }\n    return new_list\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8,\
    \ 9, 5])\nassert(sort_third(l: [5, 8, 3, 4, 6, 9, 2]) == [2, 8, 3, 4, 6, 9, 5])\n\
    assert(sort_third(l: [5, 6, 9, 4, 8, 3, 2]) == [2, 6, 9, 4, 8, 3, 5])\nassert(sort_third(l:\
    \ [5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6, 3, 4, 8, 9, 5, 1])"
  status: Exception
  stderr: 'Swift/Array.swift:418: Fatal error: Array index is out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b41d1e59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41d1b50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b41d1b50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b41d1b5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b41d1b4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b41d1b39196 <unavailable> + 1339798

    6    libswiftCore.so                    0x00002b41d1d8a457 <unavailable> + 3769431

    7    libswiftCore.so                    0x00002b41d1b39570 Array.subscript.getter
    + 20

    8    tmpcsv92mmc                        0x000055f5660790a7 <unavailable> + 8359

    9    tmpcsv92mmc                        0x000055f566078854 <unavailable> + 6228

    10   libc.so.6                          0x00002b41d2045460 __libc_start_main +
    245

    11   tmpcsv92mmc                        0x000055f566078519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: 1
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n/// to the\
    \ values of the corresponding indicies of l, but sorted.\n/// >>> sort_third([1,\
    \ 2, 3])\n/// [1, 2, 3]\n/// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n/// [2, 6,\
    \ 3, 4, 8, 9, 5]\nfunc sort_third(l: [Int]) -> [Int] {\n    var ret = l\n    var\
    \ newlist = [Int]()\n    for i in 0..<l.count {\n        if i % 3 == 0 {\n   \
    \         newlist.append(l[i])\n        }\n    }\n    newlist.sortInPlace()\n\
    \    var j = 0\n    for i in 0..<l.count {\n        if i % 3 == 0 {\n        \
    \    ret[i] = newlist[j]\n            j += 1\n        }\n    }\n    return ret\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2]) == [2, 6,\
    \ 3, 4, 8, 9, 5])\nassert(sort_third(l: [5, 8, 3, 4, 6, 9, 2]) == [2, 8, 3, 4,\
    \ 6, 9, 5])\nassert(sort_third(l: [5, 6, 9, 4, 8, 3, 2]) == [2, 6, 9, 4, 8, 3,\
    \ 5])\nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6, 3, 4, 8, 9, 5,\
    \ 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxhsl6v58.swift:17:13: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    newlist.sortInPlace()\n    ~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824627
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n/// to the\
    \ values of the corresponding indicies of l, but sorted.\n/// >>> sort_third([1,\
    \ 2, 3])\n/// [1, 2, 3]\n/// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n/// [2, 6,\
    \ 3, 4, 8, 9, 5]\nfunc sort_third(l: [Int]) -> [Int] {\n    var new_l = l\n  \
    \  var index = 2\n    while index < l.count {\n        var i = index - 2\n   \
    \     var j = index\n        while i >= 0 && l[i] > l[j] {\n            var temp\
    \ = l[i]\n            new_l[i] = l[j]\n            new_l[j] = temp\n         \
    \   i -= 1\n            j -= 1\n        }\n        index += 3\n    }\n    return\
    \ new_l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_third(l: [5, 6, 3,\
    \ 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5])\nassert(sort_third(l: [5, 8, 3, 4, 6,\
    \ 9, 2]) == [2, 8, 3, 4, 6, 9, 5])\nassert(sort_third(l: [5, 6, 9, 4, 8, 3, 2])\
    \ == [2, 6, 9, 4, 8, 3, 5])\nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2, 1]) ==\
    \ [2, 6, 3, 4, 8, 9, 5, 1])"
  status: Exception
  stderr: 'tmpy42y2axt/tmpy42y2axt.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adfa7eabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adfa7ba2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adfa7ba2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adfa7ba17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy42y2axt                        0x000055a19d144504 <unavailable> + 5380

    5    libc.so.6                          0x00002adfa8097460 __libc_start_main +
    245

    6    tmpy42y2axt                        0x000055a19d1440c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n/// to the\
    \ values of the corresponding indicies of l, but sorted.\n/// >>> sort_third([1,\
    \ 2, 3])\n/// [1, 2, 3]\n/// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n/// [2, 6,\
    \ 3, 4, 8, 9, 5]\nfunc sort_third(l: [Int]) -> [Int] {\n    // STUB check if element\
    \ is divisible by 3\n    return [0]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_third(l: [5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8, 9, 5])\nassert(sort_third(l:\
    \ [5, 8, 3, 4, 6, 9, 2]) == [2, 8, 3, 4, 6, 9, 5])\nassert(sort_third(l: [5, 6,\
    \ 9, 4, 8, 3, 2]) == [2, 6, 9, 4, 8, 3, 5])\nassert(sort_third(l: [5, 6, 3, 4,\
    \ 8, 9, 2, 1]) == [2, 6, 3, 4, 8, 9, 5, 1])"
  status: Exception
  stderr: 'tmp_8d7rlyp/tmp_8d7rlyp.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7744862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7744559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7744559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77445587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_8d7rlyp                        0x00005562ee152404 <unavailable> + 5124

    5    libc.so.6                          0x00002b7744a4e460 __libc_start_main +
    245

    6    tmp_8d7rlyp                        0x00005562ee151fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824628
- exit_code: -4
  program: "\n/// This function takes a list l and returns a list l' such that\n///\
    \ l' is identical to l in the indicies that are not divisible by three, while\
    \ its values at the indicies that are divisible by three are equal\n/// to the\
    \ values of the corresponding indicies of l, but sorted.\n/// >>> sort_third([1,\
    \ 2, 3])\n/// [1, 2, 3]\n/// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n/// [2, 6,\
    \ 3, 4, 8, 9, 5]\nfunc sort_third(l: [Int]) -> [Int] {\n    return l.enumerated().map\
    \ { (i, e) in i % 3 == 0 ? l[i..<l.count].sorted()[0] : e }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_third(l: [5, 6, 3, 4, 8, 9, 2]) == [2, 6, 3, 4, 8,\
    \ 9, 5])\nassert(sort_third(l: [5, 8, 3, 4, 6, 9, 2]) == [2, 8, 3, 4, 6, 9, 5])\n\
    assert(sort_third(l: [5, 6, 9, 4, 8, 3, 2]) == [2, 6, 9, 4, 8, 3, 5])\nassert(sort_third(l:\
    \ [5, 6, 3, 4, 8, 9, 2, 1]) == [2, 6, 3, 4, 8, 9, 5, 1])"
  status: Exception
  stderr: 'tmp03g2zu9m/tmp03g2zu9m.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cdd328c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cdd01fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cdd01f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cdd01e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp03g2zu9m                        0x0000558c6e637854 <unavailable> + 6228

    5    libc.so.6                          0x00002b2cdd514460 __libc_start_main +
    245

    6    tmp03g2zu9m                        0x0000558c6e637419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824628
