name: HumanEval_60_sum_to_n
language: swift
prompt: "\n/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(30)\n\
  /// 465\n/// >>> sum_to_n(100)\n/// 5050\n/// >>> sum_to_n(5)\n/// 15\n/// >>> sum_to_n(10)\n\
  /// 55\n/// >>> sum_to_n(1)\n/// 1\nfunc sum_to_n(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(sum_to_n(n: 1) == 1)\nassert(sum_to_n(n:\
  \ 6) == 21)\nassert(sum_to_n(n: 11) == 66)\nassert(sum_to_n(n: 30) == 465)\nassert(sum_to_n(n:\
  \ 100) == 5050)"
completions: ["    var sum = 0\n    for i in 1...n {\n        sum += i\n    }\n  \
    \  return sum", "    var sum = 0\n    for i in 1...n {\n        sum += i\n   \
    \ }\n    return sum", "    // TODO: Write this function\n    var sum: Int = 0\n\
    \    for var i = 1; i <= n; i++ {\n        sum += i\n    }\n    return sum", " \
    \   if n == 1 {\n        return 1\n    }\n    return n + sum_to_n(n - 1)", '    return
    0', '    return 0', '    return 0', "    var i = 1\n    var total = 0\n    while\
    \ i <= n {\n        total += i\n        i += 1\n    }\n    return total", "  \
    \  var result = 0\n    var number = 1\n    while number <= n {\n        result\
    \ += number\n        number += 1\n    }\n    return result", '    return Int(0.5
    * Double(n) * Double(n + 1))', "    var x = 0\n    for i in 1...n {\n        x\
    \ += i\n    }\n    return x", "    var sum = 0\n    for i in 1...n {\n       \
    \ sum += i\n    }\n    return sum", '    return (1 + n) * n / 2', "    var sum\
    \ = 0\n    for i in 1...n {\n        sum += i\n    }\n    return sum", "    var\
    \ sum = 0\n    for i in 1...n {\n        sum += i\n    }\n    return sum", " \
    \   var sum = 0\n    for i in 1...n {\n        sum += i\n    }\n    return sum",
  "    if n == 1 {\n        return 1\n    }\n    return n + sum_to_n(n-1)", "    if\
    \ n <= 0 {\n        return 0\n    }\n    return n + sum_to_n(n-1)", "    // Put\
    \ your code here!\n    return n * (n + 1) / 2", "\treturn (n + 1) * n / 2"]
stop_tokens:
- "\n}"
