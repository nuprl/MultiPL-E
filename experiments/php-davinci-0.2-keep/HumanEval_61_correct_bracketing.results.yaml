name: HumanEval_61_correct_bracketing
language: php
results:
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $bracket_stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n        $bracket = $brackets[$i];\n        if ($bracket == \"(\") {\n   \
    \         array_push($bracket_stack, $bracket);\n        } else if ($bracket ==\
    \ \")\") {\n            if (count($bracket_stack) == 0) {\n                return\
    \ False;\n            } else {\n                array_pop($bracket_stack);\n \
    \           }\n        }\n    }\n    return count($bracket_stack) == 0;\n}\n\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $open_brackets = 0;\n  \
    \  foreach ($brackets_array as $bracket) {\n        if ($bracket == \"(\") {\n\
    \            $open_brackets++;\n        } elseif ($bracket == \")\") {\n     \
    \       $open_brackets--;\n        }\n        if ($open_brackets < 0) {\n    \
    \        return False;\n        }\n    }\n    if ($open_brackets == 0) {\n   \
    \     return True;\n    } else {\n        return False;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $opening = 0;\n    $closing = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $opening++;\n  \
    \      } elseif ($brackets[$i] == \")\") {\n            $closing++;\n        }\n\
    \    }\n    if ($opening == $closing) {\n        return True;\n    } else {\n\
    \        return False;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7jx8_ily.php:39\n\
    Stack trace:\n#0 /tmp/tmp7jx8_ily.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp7jx8_ily.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    $brackets = str_split($brackets);\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == \"(\") {\n            array_push($stack,\
    \ $bracket);\n        } elseif ($bracket == \")\") {\n            if (empty($stack))\
    \ {\n                return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return empty($stack);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_split($brackets);\n    $stack = [];\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == '(') {\n            array_push($stack,\
    \ $bracket);\n        } else {\n            if (count($stack) == 0) {\n      \
    \          return false;\n            }\n            array_pop($stack);\n    \
    \    }\n    }\n    return count($stack) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return false;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $open_brackets = 0;\n    for ($i = 0; $i < $brackets_count; $i++) {\n   \
    \     if ($brackets_array[$i] == \"(\") {\n            $open_brackets++;\n   \
    \     } else {\n            $open_brackets--;\n        }\n        if ($open_brackets\
    \ < 0) {\n            return false;\n        }\n    }\n    if ($open_brackets\
    \ == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $open_brackets = 0;\n  for ($i = 0; $i < strlen($brackets); $i++) {\n \
    \   if ($brackets[$i] == \"(\") {\n      $open_brackets++;\n    } else {\n   \
    \   $open_brackets--;\n    }\n    if ($open_brackets < 0) {\n      return False;\n\
    \    }\n  }\n  return $open_brackets == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n     \
    \   if ($brackets[$i] == \"(\") {\n            $count++;\n        } else {\n \
    \           $count--;\n        }\n        if ($count < 0) {\n            return\
    \ False;\n        }\n    }\n    return $count == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return False;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $open_brackets = 0;\n  \
    \  foreach ($brackets_array as $bracket) {\n        if ($bracket == \"(\") {\n\
    \            $open_brackets += 1;\n        } elseif ($bracket == \")\") {\n  \
    \          $open_brackets -= 1;\n        }\n        if ($open_brackets < 0) {\n\
    \            return False;\n        }\n    }\n    if ($open_brackets == 0) {\n\
    \        return True;\n    } else {\n        return False;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return false;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$brackets = str_split($brackets);\n\t$open = 0;\n\tforeach ($brackets as\
    \ $bracket) {\n\t\tif ($bracket == \"(\") {\n\t\t\t$open++;\n\t\t} elseif ($bracket\
    \ == \")\") {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\treturn False;\n\
    \t\t}\n\t}\n\treturn $open == 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_split($brackets);\n    $open = 0;\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == \"(\") {\n            $open++;\n   \
    \     } else {\n            $open--;\n        }\n        if ($open < 0) {\n  \
    \          return false;\n        }\n    }\n    return $open == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return False;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    $char = $brackets[$i];\n        if ($char == '(') {\n            array_push($stack,\
    \ $char);\n        } elseif ($char == ')') {\n            if (count($stack) ==\
    \ 0) {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $count = 0;\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    if ($brackets[$i]\
    \ == \"(\") {\n      $count++;\n    } else {\n      $count--;\n    }\n    if ($count\
    \ < 0) {\n      return False;\n    }\n  }\n  return $count == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_arr = str_split($brackets);\n    $open_brackets = 0;\n    foreach\
    \ ($brackets_arr as $bracket) {\n        if ($bracket == \"(\") {\n          \
    \  $open_brackets++;\n        } elseif ($bracket == \")\") {\n            $open_brackets--;\n\
    \        }\n        if ($open_brackets < 0) {\n            return false;\n   \
    \     }\n    }\n    return $open_brackets == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    if ($brackets[$i] == \"(\") {\n            array_push($stack, \"(\");\n \
    \       } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_split($brackets);\n    $open = 0;\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == \"(\") {\n            $open++;\n   \
    \     } elseif ($bracket == \")\") {\n            $open--;\n        }\n      \
    \  if ($open < 0) {\n            return false;\n        }\n    }\n    return $open\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return False;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return True;\n    } else {\n        return False;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $bracket_count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        if ($brackets[$i] == \"(\") {\n            $bracket_count++;\n      \
    \  } elseif ($brackets[$i] == \")\") {\n            $bracket_count--;\n      \
    \  }\n        if ($bracket_count < 0) {\n            return False;\n        }\n\
    \    }\n    return $bracket_count == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n     \
    \   if ($brackets[$i] == \"(\") {\n            $count++;\n        } else if ($brackets[$i]\
    \ == \")\") {\n            $count--;\n        }\n        if ($count < 0) {\n \
    \           return False;\n        }\n    }\n    return $count == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$brackets = str_split($brackets);\n\t$open = 0;\n\tforeach ($brackets as\
    \ $bracket) {\n\t\tif ($bracket == \"(\") {\n\t\t\t$open++;\n\t\t} elseif ($bracket\
    \ == \")\") {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\treturn False;\n\
    \t\t}\n\t}\n\treturn $open == 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return False;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return True;\n    } else {\n        return False;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$open_brackets = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\
    \tif ($brackets[$i] == \"(\") {\n\t\t\t$open_brackets++;\n\t\t} else {\n\t\t\t\
    $open_brackets--;\n\t\t}\n\t\tif ($open_brackets < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $open_brackets == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n     \
    \   if ($brackets[$i] == \"(\") {\n            $count++;\n        } else if ($brackets[$i]\
    \ == \")\") {\n            $count--;\n        }\n        if ($count < 0) {\n \
    \           return False;\n        }\n    }\n    return $count == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n     \
    \   if ($brackets[$i] == '(') {\n            $count++;\n        } else {\n   \
    \         $count--;\n        }\n        if ($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$brackets_array = str_split($brackets);\n\t$open_brackets = 0;\n\tforeach\
    \ ($brackets_array as $bracket) {\n\t\tif ($bracket == \"(\") {\n\t\t\t$open_brackets++;\n\
    \t\t} else {\n\t\t\t$open_brackets--;\n\t\t}\n\t\tif ($open_brackets < 0) {\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\tif ($open_brackets == 0) {\n\t\treturn true;\n\
    \t} else {\n\t\treturn false;\n\t}\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $open_brackets = 0;\n    $close_brackets = 0;\n    for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n        if ($brackets_array[$i] == \"(\") {\n            $open_brackets++;\n\
    \        } elseif ($brackets_array[$i] == \")\") {\n            $close_brackets++;\n\
    \        }\n    }\n    if ($open_brackets == $close_brackets) {\n        return\
    \ True;\n    } else {\n        return False;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2gtpqghv.php:41\n\
    Stack trace:\n#0 /tmp/tmp2gtpqghv.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp2gtpqghv.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $stack = [];\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    if ($brackets[$i]\
    \ == \"(\") {\n      array_push($stack, $brackets[$i]);\n    } else {\n      if\
    \ (count($stack) == 0) {\n        return false;\n      }\n      array_pop($stack);\n\
    \    }\n  }\n  return count($stack) == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $count = 0;\n    foreach\
    \ ($brackets_array as $bracket) {\n        if ($bracket == \"(\") {\n        \
    \    $count++;\n        } else {\n            $count--;\n        }\n        if\
    \ ($count < 0) {\n            return False;\n        }\n    }\n    if ($count\
    \ == 0) {\n        return True;\n    } else {\n        return False;\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_split($brackets);\n    $count = 0;\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == \"(\") {\n            $count++;\n  \
    \      } else {\n            $count--;\n        }\n        if ($count < 0) {\n\
    \            return False;\n        }\n    }\n    return $count == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $open_brackets = 0;\n  \
    \  foreach ($brackets_array as $bracket) {\n        if ($bracket == \"(\") {\n\
    \            $open_brackets++;\n        } elseif ($bracket == \")\") {\n     \
    \       $open_brackets--;\n        }\n        if ($open_brackets < 0) {\n    \
    \        return False;\n        }\n    }\n    if ($open_brackets == 0) {\n   \
    \     return True;\n    } else {\n        return False;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $open_brackets = 0;\n  \
    \  foreach ($brackets_array as $bracket) {\n        if ($bracket == \"(\") {\n\
    \            $open_brackets += 1;\n        } elseif ($bracket == \")\") {\n  \
    \          $open_brackets -= 1;\n        }\n        if ($open_brackets < 0) {\n\
    \            return False;\n        }\n    }\n    if ($open_brackets == 0) {\n\
    \        return True;\n    } else {\n        return False;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n     \
    \   if ($brackets[$i] == \"(\") {\n            $count++;\n        } else {\n \
    \           $count--;\n        }\n        if ($count < 0) {\n            return\
    \ False;\n        }\n    }\n    return $count == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_split($brackets);\n    $stack = array();\n    foreach\
    \ ($brackets as $bracket) {\n        if ($bracket == '(') {\n            array_push($stack,\
    \ $bracket);\n        } else {\n            if (empty($stack)) {\n           \
    \     return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return empty($stack);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $open_brackets = 0;\n  \
    \  foreach ($brackets_array as $bracket) {\n        if ($bracket == \"(\") {\n\
    \            $open_brackets += 1;\n        } elseif ($bracket == \")\") {\n  \
    \          $open_brackets -= 1;\n        }\n        if ($open_brackets < 0) {\n\
    \            return False;\n        }\n    }\n    if ($open_brackets == 0) {\n\
    \        return True;\n    } else {\n        return False;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n     \
    \   if ($brackets[$i] == \"(\") {\n            $count++;\n        } else {\n \
    \           $count--;\n        }\n        if ($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    if ($brackets[$i] == \"(\") {\n            array_push($stack, $brackets[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = str_split($brackets);\n  $stack = [];\n  foreach ($brackets\
    \ as $bracket) {\n    if ($bracket == \"(\") {\n      array_push($stack, $bracket);\n\
    \    } else {\n      if (empty($stack)) {\n        return False;\n      }\n  \
    \    array_pop($stack);\n    }\n  }\n  return empty($stack);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $open_brackets = 0;\n    for ($i = 0; $i < $brackets_count; $i++) {\n   \
    \     if ($brackets_array[$i] == \"(\") {\n            $open_brackets++;\n   \
    \     } else {\n            $open_brackets--;\n        }\n        if ($open_brackets\
    \ < 0) {\n            return false;\n        }\n    }\n    if ($open_brackets\
    \ == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $open_brackets = 0;\n  \
    \  foreach ($brackets_array as $bracket) {\n        if ($bracket == \"(\") {\n\
    \            $open_brackets++;\n        } elseif ($bracket == \")\") {\n     \
    \       $open_brackets--;\n        }\n        if ($open_brackets < 0) {\n    \
    \        return false;\n        }\n    }\n    if ($open_brackets == 0) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_count = 0;\n \
    \   foreach ($brackets_array as $bracket) {\n        if ($bracket == \"(\") {\n\
    \            $brackets_count++;\n        } elseif ($bracket == \")\") {\n    \
    \        $brackets_count--;\n        }\n        if ($brackets_count < 0) {\n \
    \           return false;\n        }\n    }\n    if ($brackets_count == 0) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$brackets = str_split($brackets);\n\t$open = 0;\n\tforeach ($brackets as\
    \ $bracket) {\n\t\tif ($bracket == \"(\") {\n\t\t\t$open++;\n\t\t} elseif ($bracket\
    \ == \")\") {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\treturn False;\n\
    \t\t}\n\t}\n\treturn $open == 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $open_brackets = 0;\n    $close_brackets = 0;\n    for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n        if ($brackets_array[$i] == \"(\") {\n            $open_brackets++;\n\
    \        } elseif ($brackets_array[$i] == \")\") {\n            $close_brackets++;\n\
    \        }\n    }\n    if ($open_brackets == $close_brackets) {\n        return\
    \ True;\n    } else {\n        return False;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpliox9s89.php:41\n\
    Stack trace:\n#0 /tmp/tmpliox9s89.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpliox9s89.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} elseif ($brackets[$i]\
    \ == \")\") {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ True;\n\t} else {\n\t\treturn False;\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpes7lc1pz.php:39\n\
    Stack trace:\n#0 /tmp/tmpes7lc1pz.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpes7lc1pz.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    $len = strlen($brackets);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $char = $brackets[$i];\n        if ($char == '(') {\n     \
    \       array_push($stack, $char);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open_brackets = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        if ($brackets[$i] == \"(\") {\n            $open_brackets++;\n      \
    \  } else {\n            $open_brackets--;\n        }\n        if ($open_brackets\
    \ < 0) {\n            return false;\n        }\n    }\n    return $open_brackets\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_arr = str_split($brackets);\n    $count = 0;\n    foreach ($brackets_arr\
    \ as $bracket) {\n        if ($bracket == \"(\") {\n            $count++;\n  \
    \      } else {\n            $count--;\n        }\n        if ($count < 0) {\n\
    \            return false;\n        }\n    }\n    return $count == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $open_brackets = 0;\n  \
    \  foreach ($brackets_array as $bracket) {\n        if ($bracket == \"(\") {\n\
    \            $open_brackets++;\n        } elseif ($bracket == \")\") {\n     \
    \       $open_brackets--;\n        }\n        if ($open_brackets < 0) {\n    \
    \        return false;\n        }\n    }\n    if ($open_brackets == 0) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$brackets = str_split($brackets);\n\t$count = 0;\n\tforeach ($brackets\
    \ as $bracket) {\n\t\tif ($bracket == \"(\") {\n\t\t\t$count++;\n\t\t} elseif\
    \ ($bracket == \")\") {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn $count == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $bracket_count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        if ($brackets[$i] == \"(\") {\n            $bracket_count++;\n      \
    \  } else {\n            $bracket_count--;\n        }\n        if ($bracket_count\
    \ < 0) {\n            return False;\n        }\n    }\n    return $bracket_count\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $open_brackets = 0;\n    for ($i = 0; $i < $brackets_count; $i++) {\n   \
    \     if ($brackets_array[$i] == \"(\") {\n            $open_brackets++;\n   \
    \     } else {\n            $open_brackets--;\n        }\n        if ($open_brackets\
    \ < 0) {\n            return false;\n        }\n    }\n    if ($open_brackets\
    \ == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open_count = 0;\n    $close_count = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open_count++;\n\
    \        } else {\n            $close_count++;\n        }\n        if ($close_count\
    \ > $open_count) {\n            return False;\n        }\n    }\n    if ($open_count\
    \ == $close_count) {\n        return True;\n    } else {\n        return False;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n     \
    \   if ($brackets[$i] == \"(\") {\n            $count++;\n        } else {\n \
    \           $count--;\n        }\n        if ($count < 0) {\n            return\
    \ False;\n        }\n    }\n    return $count == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    if ($brackets[$i] == \"(\") {\n            array_push($stack, \"(\");\n \
    \       } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    $char = $brackets[$i];\n        if ($char == \"(\") {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (count($stack) == 0) {\n         \
    \       return false;\n            }\n            array_pop($stack);\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $open = 0;\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    if ($brackets[$i]\
    \ == \"(\") {\n      $open++;\n    } else {\n      $open--;\n    }\n    if ($open\
    \ < 0) {\n      return False;\n    }\n  }\n  return $open == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return False;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$brackets = str_split($brackets);\n\t$open = 0;\n\tforeach ($brackets as\
    \ $bracket) {\n\t\tif ($bracket == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\
    \t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\treturn False;\n\t\t}\n\t}\n\treturn\
    \ $open == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return False;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open\
    \ < 0) {\n\t\t\treturn False;\n\t\t}\n\t}\n\treturn $open == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $brackets_stack = [];\n    for ($i = 0; $i < $brackets_count; $i++) {\n \
    \       if ($brackets_array[$i] == \"(\") {\n            array_push($brackets_stack,\
    \ $brackets_array[$i]);\n        } else {\n            if (count($brackets_stack)\
    \ == 0) {\n                return false;\n            } else {\n             \
    \   array_pop($brackets_stack);\n            }\n        }\n    }\n    if (count($brackets_stack)\
    \ == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_split($brackets);\n    $open = 0;\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == \"(\") {\n            $open++;\n   \
    \     } elseif ($bracket == \")\") {\n            $open--;\n        }\n      \
    \  if ($open < 0) {\n            return False;\n        }\n    }\n    return $open\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    $char = $brackets[$i];\n        if ($char == \"(\") {\n            array_push($stack,\
    \ $char);\n        } else if ($char == \")\") {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $open_brackets = 0;\n    $close_brackets = 0;\n    for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n        if ($brackets_array[$i] == \"(\") {\n            $open_brackets++;\n\
    \        } elseif ($brackets_array[$i] == \")\") {\n            $close_brackets++;\n\
    \        }\n    }\n    if ($open_brackets == $close_brackets) {\n        return\
    \ True;\n    } else {\n        return False;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv376wven.php:41\n\
    Stack trace:\n#0 /tmp/tmpv376wven.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpv376wven.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_split($brackets);\n    $stack = [];\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == '(') {\n            array_push($stack,\
    \ $bracket);\n        } else {\n            if (count($stack) == 0) {\n      \
    \          return false;\n            }\n            array_pop($stack);\n    \
    \    }\n    }\n    return count($stack) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    if ($brackets[$i] == \"(\") {\n            array_push($stack, $brackets[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $open_brackets = 0;\n  \
    \  foreach ($brackets_array as $bracket) {\n        if ($bracket == \"(\") {\n\
    \            $open_brackets++;\n        } else {\n            $open_brackets--;\n\
    \        }\n        if ($open_brackets < 0) {\n            return false;\n   \
    \     }\n    }\n    return $open_brackets == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    if ($brackets[$i] == '(') {\n            array_push($stack, '(');\n     \
    \   } else {\n            if (empty($stack)) {\n                return false;\n\
    \            }\n            array_pop($stack);\n        }\n    }\n    return empty($stack);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return False;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return True;\n    } else {\n        return False;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $open == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $bracket_count = 0;\n  for ($i = 0; $i < strlen($brackets); $i++) {\n \
    \   if ($brackets[$i] == \"(\") {\n      $bracket_count++;\n    } else {\n   \
    \   $bracket_count--;\n    }\n    if ($bracket_count < 0) {\n      return False;\n\
    \    }\n  }\n  return $bracket_count == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    $len = strlen($brackets);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $char = $brackets[$i];\n        if ($char == '(') {\n     \
    \       array_push($stack, $char);\n        } else {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n     \
    \   if ($brackets[$i] == \"(\") {\n            $count++;\n        } else {\n \
    \           $count--;\n        }\n        if ($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    if ($brackets[$i] == '(') {\n            array_push($stack, $brackets[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return False;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_split($brackets);\n    $stack = [];\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == '(') {\n            array_push($stack,\
    \ $bracket);\n        } else {\n            if (count($stack) == 0) {\n      \
    \          return false;\n            }\n            array_pop($stack);\n    \
    \    }\n    }\n    return count($stack) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return False;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\
    \t\t}\n\t\tif ($close > $open) {\n\t\t\treturn False;\n\t\t}\n\t}\n\tif ($open\
    \ == $close) {\n\t\treturn True;\n\t} else {\n\t\treturn False;\n\t}\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_stack = array();\n\
    \    foreach ($brackets_array as $bracket) {\n        if ($bracket == \"(\") {\n\
    \            array_push($brackets_stack, $bracket);\n        } elseif ($bracket\
    \ == \")\") {\n            if (count($brackets_stack) == 0) {\n              \
    \  return false;\n            } else {\n                array_pop($brackets_stack);\n\
    \            }\n        }\n    }\n    if (count($brackets_stack) == 0) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $open_brackets = 0;\n  \
    \  foreach ($brackets_array as $bracket) {\n        if ($bracket == \"(\") {\n\
    \            $open_brackets += 1;\n        } elseif ($bracket == \")\") {\n  \
    \          $open_brackets -= 1;\n        }\n        if ($open_brackets < 0) {\n\
    \            return False;\n        }\n    }\n    if ($open_brackets == 0) {\n\
    \        return True;\n    } else {\n        return False;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return False;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_split($brackets);\n    $open = 0;\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == '(') {\n            $open++;\n     \
    \   } else {\n            $open--;\n        }\n        if ($open < 0) {\n    \
    \        return False;\n        }\n    }\n    return $open == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return False;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_split($brackets);\n    $count = 0;\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == \"(\") {\n            $count++;\n  \
    \      } elseif ($bracket == \")\") {\n            $count--;\n        }\n    \
    \    if ($count < 0) {\n            return False;\n        }\n    }\n    return\
    \ $count == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else if ($brackets[$i]\
    \ == \")\") {\n            $open--;\n        }\n        if ($open < 0) {\n   \
    \         return False;\n        }\n    }\n    return $open == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open\
    \ < 0) {\n\t\t\treturn False;\n\t\t}\n\t}\n\treturn $open == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return False;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $brackets_count_half = $brackets_count / 2;\n    $brackets_count_half_int\
    \ = intval($brackets_count_half);\n    $brackets_count_half_int_plus_one = $brackets_count_half_int\
    \ + 1;\n    $brackets_count_half_int_minus_one = $brackets_count_half_int - 1;\n\
    \    $brackets_count_half_int_minus_two = $brackets_count_half_int - 2;\n    $brackets_count_half_int_minus_three\
    \ = $brackets_count_half_int - 3;\n    $brackets_count_half_int_minus_four = $brackets_count_half_int\
    \ - 4;\n    $brackets_count_half_int_minus_five = $brackets_count_half_int - 5;\n\
    \    $brackets_count_half_int_minus_six = $brackets_count_half_int - 6;\n    $brackets_count_half_int_minus_seven\
    \ = $brackets_count_half_int - 7;\n    $brackets_count_half_int_minus_eight =\
    \ $brackets_count_half_int - 8;\n    $brackets_count_half_int_minus_nine = $brackets_count_half_int\
    \ - 9;\n    $brackets_count_half_int_minus_ten = $brackets_count_half_int - 10;\n\
    \    $brackets_count_half_int_minus_eleven = $brackets_count_half_int - 11;\n\
    \    $brackets_count_half_int_minus_twelve = $brackets_count_half_int - 12;\n\
    \    $brackets_count_half_int_minus_thirteen = $brackets_count_half_int - 13;\n\
    \    $brackets_count_half_int_minus_fourteen = $brackets_count_half_int - 14;\n\
    \    $brackets_count_half_int_minus_fifteen = $\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ variable or \"{\" or \"$\" in /tmp/tmphzkqaca7.php on line 33\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $open_brackets = 0;\n    for ($i = 0; $i < $brackets_count; $i++) {\n   \
    \     if ($brackets_array[$i] == \"(\") {\n            $open_brackets++;\n   \
    \     } elseif ($brackets_array[$i] == \")\") {\n            $open_brackets--;\n\
    \        }\n        if ($open_brackets < 0) {\n            return false;\n   \
    \     }\n    }\n    if ($open_brackets == 0) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $open_brackets = 0;\n    for ($i = 0; $i < $brackets_count; $i++) {\n   \
    \     if ($brackets_array[$i] == \"(\") {\n            $open_brackets++;\n   \
    \     } elseif ($brackets_array[$i] == \")\") {\n            $open_brackets--;\n\
    \        }\n        if ($open_brackets < 0) {\n            return False;\n   \
    \     }\n    }\n    if ($open_brackets == 0) {\n        return True;\n    } else\
    \ {\n        return False;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$brackets_array = str_split($brackets);\n\t$brackets_count = count($brackets_array);\n\
    \t$brackets_open = 0;\n\t$brackets_close = 0;\n\tfor ($i = 0; $i < $brackets_count;\
    \ $i++) {\n\t\tif ($brackets_array[$i] == \"(\") {\n\t\t\t$brackets_open++;\n\t\
    \t} elseif ($brackets_array[$i] == \")\") {\n\t\t\t$brackets_close++;\n\t\t}\n\
    \t}\n\tif ($brackets_open == $brackets_close) {\n\t\treturn True;\n\t} else {\n\
    \t\treturn False;\n\t}\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvttf5u8v.php:40\n\
    Stack trace:\n#0 /tmp/tmpvttf5u8v.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpvttf5u8v.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return false;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return False;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return True;\n    } else {\n        return False;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return False;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $open_brackets = 0;\n  for ($i = 0; $i < strlen($brackets); $i++) {\n \
    \   if ($brackets[$i] == \"(\") {\n      $open_brackets++;\n    } else {\n   \
    \   $open_brackets--;\n    }\n    if ($open_brackets < 0) {\n      return False;\n\
    \    }\n  }\n  return $open_brackets == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = array();\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        $char = $brackets[$i];\n        if ($char == '(') {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (count($stack) == 0) {\n         \
    \       return false;\n            }\n            array_pop($stack);\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_split($brackets);\n    $open = 0;\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == \"(\") {\n            $open++;\n   \
    \     } else {\n            $open--;\n        }\n        if ($open < 0) {\n  \
    \          return false;\n        }\n    }\n    return $open == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n     \
    \   if ($brackets[$i] == \"(\") {\n            $count++;\n        } else {\n \
    \           $count--;\n        }\n        if ($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return False;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $open_brackets = 0;\n  \
    \  foreach ($brackets_array as $bracket) {\n        if ($bracket == \"(\") {\n\
    \            $open_brackets++;\n        } elseif ($bracket == \")\") {\n     \
    \       $open_brackets--;\n        }\n        if ($open_brackets < 0) {\n    \
    \        return false;\n        }\n    }\n    if ($open_brackets == 0) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n     \
    \   if ($brackets[$i] == \"(\") {\n            $count++;\n        } else {\n \
    \           $count--;\n        }\n        if ($count < 0) {\n            return\
    \ False;\n        }\n    }\n    return $count == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $open_brackets = 0;\n  \
    \  foreach ($brackets_array as $bracket) {\n        if ($bracket == \"(\") {\n\
    \            $open_brackets++;\n        } elseif ($bracket == \")\") {\n     \
    \       $open_brackets--;\n        }\n        if ($open_brackets < 0) {\n    \
    \        return False;\n        }\n    }\n    if ($open_brackets == 0) {\n   \
    \     return True;\n    } else {\n        return False;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    if ($brackets[$i] == '(') {\n            array_push($stack, $brackets[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $stack = [];\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    $bracket\
    \ = $brackets[$i];\n    if ($bracket == \"(\") {\n      array_push($stack, $bracket);\n\
    \    } else {\n      if (count($stack) == 0) {\n        return False;\n      }\n\
    \      array_pop($stack);\n    }\n  }\n  return count($stack) == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $bracket_count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        if ($brackets[$i] == \"(\") {\n            $bracket_count++;\n      \
    \  } else {\n            $bracket_count--;\n        }\n        if ($bracket_count\
    \ < 0) {\n            return False;\n        }\n    }\n    return $bracket_count\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$open_brackets = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\
    \tif ($brackets[$i] == \"(\") {\n\t\t\t$open_brackets++;\n\t\t} else {\n\t\t\t\
    $open_brackets--;\n\t\t}\n\t\tif ($open_brackets < 0) {\n\t\t\treturn False;\n\
    \t\t}\n\t}\n\treturn $open_brackets == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return False;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"(\") {\n\t\t\t$count++;\n\t\t} else if ($brackets[$i] == \")\") {\n\t\t\
    \t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn False;\n\t\t}\n\t}\n\t\
    return $count == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$brackets = str_split($brackets);\n\t$open = 0;\n\tforeach ($brackets as\
    \ $bracket) {\n\t\tif ($bracket == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\
    \t$open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\treturn False;\n\t\t}\n\t}\n\treturn\
    \ $open == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    $char = $brackets[$i];\n        if ($char == \"(\") {\n            array_push($stack,\
    \ $char);\n        } else if ($char == \")\") {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return False;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } elseif ($brackets[$i] == \")\") {\n            $close++;\n        }\n  \
    \  }\n    if ($open == $close) {\n        return True;\n    } else {\n       \
    \ return False;\n    }\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5zbpy_ij.php:39\n\
    Stack trace:\n#0 /tmp/tmp5zbpy_ij.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp5zbpy_ij.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"(\") {\n\t\t\tarray_push($stack, $brackets[$i]);\n\t\t} else {\n\t\t\t\
    if (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn true;\n\t} else {\n\t\t\
    return false;\n\t}\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $stack = [];\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    $char\
    \ = $brackets[$i];\n    if ($char == \"(\") {\n      array_push($stack, $char);\n\
    \    } else {\n      if (count($stack) == 0) {\n        return false;\n      }\n\
    \      array_pop($stack);\n    }\n  }\n  return count($stack) == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else if ($brackets[$i]\
    \ == \")\") {\n            $open--;\n        }\n        if ($open < 0) {\n   \
    \         return False;\n        }\n    }\n    return $open == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return False;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $brackets_stack = array();\n    for ($i = 0; $i < $brackets_count; $i++)\
    \ {\n        if ($brackets_array[$i] == \"(\") {\n            array_push($brackets_stack,\
    \ $brackets_array[$i]);\n        } elseif ($brackets_array[$i] == \")\") {\n \
    \           if (count($brackets_stack) == 0) {\n                return False;\n\
    \            } else {\n                array_pop($brackets_stack);\n         \
    \   }\n        }\n    }\n    if (count($brackets_stack) == 0) {\n        return\
    \ True;\n    } else {\n        return False;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $count = 0;\n    foreach\
    \ ($brackets_array as $bracket) {\n        if ($bracket == \"(\") {\n        \
    \    $count++;\n        } else {\n            $count--;\n        }\n        if\
    \ ($count < 0) {\n            return false;\n        }\n    }\n    if ($count\
    \ == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$brackets_array = str_split($brackets);\n\t$brackets_count = count($brackets_array);\n\
    \t$open_brackets = 0;\n\t$close_brackets = 0;\n\tfor ($i = 0; $i < $brackets_count;\
    \ $i++) {\n\t\tif ($brackets_array[$i] == \"(\") {\n\t\t\t$open_brackets++;\n\t\
    \t} elseif ($brackets_array[$i] == \")\") {\n\t\t\t$close_brackets++;\n\t\t}\n\
    \t}\n\tif ($open_brackets == $close_brackets) {\n\t\treturn True;\n\t} else {\n\
    \t\treturn False;\n\t}\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb2pu1mgl.php:41\n\
    Stack trace:\n#0 /tmp/tmpb2pu1mgl.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpb2pu1mgl.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets_array = str_split($brackets);\n  $brackets_count = count($brackets_array);\n\
    \  $open_brackets = 0;\n  for ($i = 0; $i < $brackets_count; $i++) {\n    if ($brackets_array[$i]\
    \ == \"(\") {\n      $open_brackets++;\n    } elseif ($brackets_array[$i] == \"\
    )\") {\n      $open_brackets--;\n    }\n    if ($open_brackets < 0) {\n      return\
    \ False;\n    }\n  }\n  if ($open_brackets == 0) {\n    return True;\n  } else\
    \ {\n    return False;\n  }\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $open_brackets = 0;\n  $close_brackets = 0;\n  for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n    if ($brackets[$i] == \"(\") {\n      $open_brackets++;\n    } else\
    \ {\n      $close_brackets++;\n    }\n    if ($close_brackets > $open_brackets)\
    \ {\n      return False;\n    }\n  }\n  if ($open_brackets == $close_brackets)\
    \ {\n    return True;\n  } else {\n    return False;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$brackets_array = str_split($brackets);\n\t$brackets_count = count($brackets_array);\n\
    \t$brackets_stack = array();\n\tfor ($i = 0; $i < $brackets_count; $i++) {\n\t\
    \tif ($brackets_array[$i] == \"(\") {\n\t\t\tarray_push($brackets_stack, $brackets_array[$i]);\n\
    \t\t} elseif ($brackets_array[$i] == \")\") {\n\t\t\tif (count($brackets_stack)\
    \ == 0) {\n\t\t\t\treturn False;\n\t\t\t} else {\n\t\t\t\tarray_pop($brackets_stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($brackets_stack) == 0) {\n\t\treturn True;\n\t\
    } else {\n\t\treturn False;\n\t}\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return False;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return True;\n    } else {\n        return False;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return False;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $stack = [];\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    $char\
    \ = $brackets[$i];\n    if ($char == \"(\") {\n      array_push($stack, $char);\n\
    \    } else {\n      if (empty($stack)) {\n        return false;\n      }\n  \
    \    array_pop($stack);\n    }\n  }\n  return empty($stack);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $open_brackets = 0;\n    for ($i = 0; $i < $brackets_count; $i++) {\n   \
    \     if ($brackets_array[$i] == \"(\") {\n            $open_brackets++;\n   \
    \     } else {\n            $open_brackets--;\n        }\n        if ($open_brackets\
    \ < 0) {\n            return false;\n        }\n    }\n    if ($open_brackets\
    \ == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\
    \t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open\
    \ == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open\
    \ < 0) {\n\t\t\treturn False;\n\t\t}\n\t}\n\treturn $open == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$left = 0;\n\t$right = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$left++;\n\t\t} else {\n\t\t\t$right++;\n\
    \t\t}\n\t\tif ($right > $left) {\n\t\t\treturn False;\n\t\t}\n\t}\n\tif ($left\
    \ == $right) {\n\t\treturn True;\n\t} else {\n\t\treturn False;\n\t}\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets_array = str_split($brackets);\n  $open_brackets = 0;\n  foreach\
    \ ($brackets_array as $bracket) {\n    if ($bracket == \"(\") {\n      $open_brackets\
    \ += 1;\n    } elseif ($bracket == \")\") {\n      $open_brackets -= 1;\n    }\n\
    \    if ($open_brackets < 0) {\n      return False;\n    }\n  }\n  if ($open_brackets\
    \ == 0) {\n    return True;\n  } else {\n    return False;\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    if ($brackets[$i] == \"(\") {\n            array_push($stack, $brackets[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    if ($brackets[$i] == \"(\") {\n            array_push($stack, \"(\");\n \
    \       } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } elseif ($brackets[$i] == \")\") {\n            $close++;\n        }\n  \
    \  }\n    if ($open == $close) {\n        return True;\n    } else {\n       \
    \ return False;\n    }\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzgjo39dl.php:39\n\
    Stack trace:\n#0 /tmp/tmpzgjo39dl.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpzgjo39dl.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $stack = [];\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    $char\
    \ = $brackets[$i];\n    if ($char == \"(\") {\n      array_push($stack, $char);\n\
    \    } else {\n      if (count($stack) == 0) {\n        return false;\n      }\n\
    \      array_pop($stack);\n    }\n  }\n  return count($stack) == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } elseif ($brackets[$i] == \")\") {\n            $close++;\n        }\n  \
    \  }\n    if ($open == $close) {\n        return True;\n    } else {\n       \
    \ return False;\n    }\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7z5eqbbb.php:39\n\
    Stack trace:\n#0 /tmp/tmp7z5eqbbb.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp7z5eqbbb.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_split($brackets);\n    $stack = [];\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == \"(\") {\n            array_push($stack,\
    \ $bracket);\n        } else {\n            if (empty($stack)) {\n           \
    \     return false;\n            }\n            array_pop($stack);\n        }\n\
    \    }\n    return empty($stack);\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$brackets_array = str_split($brackets);\n\t$brackets_count = count($brackets_array);\n\
    \t$open_count = 0;\n\t$close_count = 0;\n\tfor ($i = 0; $i < $brackets_count;\
    \ $i++) {\n\t\tif ($brackets_array[$i] == \"(\") {\n\t\t\t$open_count++;\n\t\t\
    } elseif ($brackets_array[$i] == \")\") {\n\t\t\t$close_count++;\n\t\t}\n\t}\n\
    \tif ($open_count == $close_count) {\n\t\treturn True;\n\t} else {\n\t\treturn\
    \ False;\n\t}\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp063t4z72.php:41\n\
    Stack trace:\n#0 /tmp/tmp063t4z72.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp063t4z72.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    if ($brackets[$i] == \"(\") {\n            array_push($stack, \"(\");\n \
    \       } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} elseif ($brackets[$i]\
    \ == \")\") {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ True;\n\t} else {\n\t\treturn False;\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgvmtgg4v.php:39\n\
    Stack trace:\n#0 /tmp/tmpgvmtgg4v.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpgvmtgg4v.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return false;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open\
    \ < 0) {\n\t\t\treturn False;\n\t\t}\n\t}\n\treturn $open == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$open--;\n\t\t}\n\t\tif ($open\
    \ < 0) {\n\t\t\treturn False;\n\t\t}\n\t}\n\treturn $open == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return false;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $open_brackets = 0;\n    $close_brackets = 0;\n    for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n        if ($brackets_array[$i] == \"(\") {\n            $open_brackets++;\n\
    \        } elseif ($brackets_array[$i] == \")\") {\n            $close_brackets++;\n\
    \        }\n    }\n    if ($open_brackets == $close_brackets) {\n        return\
    \ True;\n    } else {\n        return False;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpo4kwr5oo.php:41\n\
    Stack trace:\n#0 /tmp/tmpo4kwr5oo.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpo4kwr5oo.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    if ($brackets[$i] == \"(\") {\n            array_push($stack, $brackets[$i]);\n\
    \        } else {\n            if (empty($stack)) {\n                return false;\n\
    \            } else {\n                array_pop($stack);\n            }\n   \
    \     }\n    }\n    return empty($stack);\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open_brackets = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        if ($brackets[$i] == \"(\") {\n            $open_brackets++;\n      \
    \  } else if ($brackets[$i] == \")\") {\n            $open_brackets--;\n     \
    \   }\n        if ($open_brackets < 0) {\n            return False;\n        }\n\
    \    }\n    return $open_brackets == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $open_brackets = 0;\n    for ($i = 0; $i < $brackets_count; $i++) {\n   \
    \     if ($brackets_array[$i] == \"(\") {\n            $open_brackets++;\n   \
    \     } elseif ($brackets_array[$i] == \")\") {\n            $open_brackets--;\n\
    \        }\n        if ($open_brackets < 0) {\n            return False;\n   \
    \     }\n    }\n    if ($open_brackets == 0) {\n        return True;\n    } else\
    \ {\n        return False;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_split($brackets);\n    $stack = array();\n    foreach\
    \ ($brackets as $bracket) {\n        if ($bracket == \"(\") {\n            array_push($stack,\
    \ $bracket);\n        } else {\n            if (count($stack) == 0) {\n      \
    \          return false;\n            }\n            array_pop($stack);\n    \
    \    }\n    }\n    return count($stack) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return False;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return True;\n    } else {\n        return False;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return False;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"(\") {\n            $open++;\n     \
    \   } else {\n            $close++;\n        }\n        if ($close > $open) {\n\
    \            return False;\n        }\n    }\n    if ($open == $close) {\n   \
    \     return True;\n    } else {\n        return False;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets_array = str_split($brackets);\n  $brackets_count = count($brackets_array);\n\
    \  $open_brackets = 0;\n  $close_brackets = 0;\n  for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n    if ($brackets_array[$i] == \"(\") {\n      $open_brackets++;\n\
    \    } elseif ($brackets_array[$i] == \")\") {\n      $close_brackets++;\n   \
    \ }\n  }\n  if ($open_brackets == $close_brackets) {\n    return True;\n  } else\
    \ {\n    return False;\n  }\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpusf7fl9q.php:41\n\
    Stack trace:\n#0 /tmp/tmpusf7fl9q.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpusf7fl9q.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $open = 0;\n  for ($i = 0; $i < strlen($brackets); $i++) {\n    if ($brackets[$i]\
    \ == \"(\") {\n      $open++;\n    } else {\n      $open--;\n    }\n    if ($open\
    \ < 0) {\n      return False;\n    }\n  }\n  return $open == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $open_brackets = 0;\n    for ($i = 0; $i < $brackets_count; $i++) {\n   \
    \     if ($brackets_array[$i] == \"(\") {\n            $open_brackets++;\n   \
    \     } else {\n            $open_brackets--;\n        }\n        if ($open_brackets\
    \ < 0) {\n            return false;\n        }\n    }\n    if ($open_brackets\
    \ == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return False;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return False;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    $char = $brackets[$i];\n        if ($char == '(') {\n            array_push($stack,\
    \ $char);\n        } else {\n            if (count($stack) == 0) {\n         \
    \       return false;\n            }\n            array_pop($stack);\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    $char = $brackets[$i];\n        if ($char == \"(\") {\n            array_push($stack,\
    \ $char);\n        } else if ($char == \")\") {\n            if (empty($stack))\
    \ {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return empty($stack);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $open_brackets = 0;\n    $close_brackets = 0;\n    for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n        if ($brackets_array[$i] == '(') {\n            $open_brackets++;\n\
    \        } elseif ($brackets_array[$i] == ')') {\n            $close_brackets++;\n\
    \        }\n    }\n    if ($open_brackets == $close_brackets) {\n        return\
    \ True;\n    } else {\n        return False;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdub654_2.php:41\n\
    Stack trace:\n#0 /tmp/tmpdub654_2.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpdub654_2.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open_brackets = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        if ($brackets[$i] == \"(\") {\n            $open_brackets++;\n      \
    \  } else {\n            $open_brackets--;\n        }\n        if ($open_brackets\
    \ < 0) {\n            return false;\n        }\n    }\n    return $open_brackets\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$bracket_count = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\
    \tif ($brackets[$i] == \"(\") {\n\t\t\t$bracket_count++;\n\t\t} else {\n\t\t\t\
    $bracket_count--;\n\t\t}\n\t\tif ($bracket_count < 0) {\n\t\t\treturn False;\n\
    \t\t}\n\t}\n\treturn $bracket_count == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    if ($brackets[$i] == \"(\") {\n            array_push($stack, $brackets[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $open_brackets = 0;\n  for ($i = 0; $i < strlen($brackets); $i++) {\n \
    \   if ($brackets[$i] == \"(\") {\n      $open_brackets++;\n    } else {\n   \
    \   $open_brackets--;\n    }\n    if ($open_brackets < 0) {\n      return False;\n\
    \    }\n  }\n  return $open_brackets == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_stack = [];\n\
    \    foreach ($brackets_array as $bracket) {\n        if ($bracket == '(') {\n\
    \            array_push($brackets_stack, $bracket);\n        } elseif ($bracket\
    \ == ')') {\n            if (empty($brackets_stack)) {\n                return\
    \ false;\n            } else {\n                array_pop($brackets_stack);\n\
    \            }\n        }\n    }\n    if (empty($brackets_stack)) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $open_brackets = 0;\n    for ($i = 0; $i < $brackets_count; $i++) {\n   \
    \     if ($brackets_array[$i] == \"(\") {\n            $open_brackets++;\n   \
    \     } else {\n            $open_brackets--;\n        }\n        if ($open_brackets\
    \ < 0) {\n            return False;\n        }\n    }\n    if ($open_brackets\
    \ == 0) {\n        return True;\n    } else {\n        return False;\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$brackets_array = str_split($brackets);\n\t$brackets_count = count($brackets_array);\n\
    \t$open_brackets = 0;\n\t$close_brackets = 0;\n\tfor ($i = 0; $i < $brackets_count;\
    \ $i++) {\n\t\tif ($brackets_array[$i] == \"(\") {\n\t\t\t$open_brackets++;\n\t\
    \t} elseif ($brackets_array[$i] == \")\") {\n\t\t\t$close_brackets++;\n\t\t}\n\
    \t}\n\tif ($open_brackets == $close_brackets) {\n\t\treturn True;\n\t} else {\n\
    \t\treturn False;\n\t}\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpglky0kwp.php:41\n\
    Stack trace:\n#0 /tmp/tmpglky0kwp.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpglky0kwp.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_split($brackets);\n    $open = 0;\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == \"(\") {\n            $open++;\n   \
    \     } elseif ($bracket == \")\") {\n            $open--;\n        }\n      \
    \  if ($open < 0) {\n            return False;\n        }\n    }\n    return $open\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $open_brackets = 0;\n  for ($i = 0; $i < strlen($brackets); $i++) {\n \
    \   if ($brackets[$i] == \"(\") {\n      $open_brackets++;\n    } else {\n   \
    \   $open_brackets--;\n    }\n    if ($open_brackets < 0) {\n      return False;\n\
    \    }\n  }\n  return $open_brackets == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_stack = array();\n\
    \    foreach ($brackets_array as $bracket) {\n        if ($bracket == \"(\") {\n\
    \            array_push($brackets_stack, $bracket);\n        } else {\n      \
    \      if (count($brackets_stack) == 0) {\n                return False;\n   \
    \         } else {\n                array_pop($brackets_stack);\n            }\n\
    \        }\n    }\n    if (count($brackets_stack) == 0) {\n        return True;\n\
    \    } else {\n        return False;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $brackets_count = count($brackets_array);\n\
    \    $open_brackets = 0;\n    $close_brackets = 0;\n    for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n        if ($brackets_array[$i] == \"(\") {\n            $open_brackets++;\n\
    \        } else {\n            $close_brackets++;\n        }\n        if ($close_brackets\
    \ > $open_brackets) {\n            return false;\n        }\n    }\n    if ($open_brackets\
    \ == $close_brackets) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return False;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_split($brackets);\n    $open = 0;\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == \"(\") {\n            $open++;\n   \
    \     } else {\n            $open--;\n        }\n        if ($open < 0) {\n  \
    \          return False;\n        }\n    }\n    return $open == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = array();\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        if ($brackets[$i] == \"(\") {\n            array_push($stack, $brackets[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    if (count($stack) == 0) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $open_brackets = 0;\n  \
    \  foreach ($brackets_array as $bracket) {\n        if ($bracket == \"(\") {\n\
    \            $open_brackets += 1;\n        } elseif ($bracket == \")\") {\n  \
    \          $open_brackets -= 1;\n        }\n        if ($open_brackets < 0) {\n\
    \            return False;\n        }\n    }\n    if ($open_brackets == 0) {\n\
    \        return True;\n    } else {\n        return False;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else if ($brackets[$i]\
    \ == \")\") {\n            $open--;\n        }\n        if ($open < 0) {\n   \
    \         return False;\n        }\n    }\n    return $open == 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $bracket_count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n\
    \        if ($brackets[$i] == \"(\") {\n            $bracket_count++;\n      \
    \  } else {\n            $bracket_count--;\n        }\n        if ($bracket_count\
    \ < 0) {\n            return False;\n        }\n    }\n    return $bracket_count\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n     \
    \   if ($brackets[$i] == \"(\") {\n            $count++;\n        } else {\n \
    \           $count--;\n        }\n        if ($count < 0) {\n            return\
    \ False;\n        }\n    }\n    return $count == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $count = 0;\n    foreach\
    \ ($brackets_array as $bracket) {\n        if ($bracket == \"(\") {\n        \
    \    $count++;\n        } else {\n            $count--;\n        }\n        if\
    \ ($count < 0) {\n            return False;\n        }\n    }\n    if ($count\
    \ == 0) {\n        return True;\n    } else {\n        return False;\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_split($brackets);\n    $stack = array();\n    foreach\
    \ ($brackets as $bracket) {\n        if ($bracket == \"(\") {\n            array_push($stack,\
    \ $bracket);\n        } else {\n            if (empty($stack)) {\n           \
    \     return False;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return empty($stack);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return False;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $open = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n      \
    \  if ($brackets[$i] == \"(\") {\n            $open++;\n        } else {\n   \
    \         $open--;\n        }\n        if ($open < 0) {\n            return false;\n\
    \        }\n    }\n    return $open == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets_array = str_split($brackets);\n    $count = 0;\n    foreach\
    \ ($brackets_array as $bracket) {\n        if ($bracket == \"(\") {\n        \
    \    $count++;\n        } elseif ($bracket == \")\") {\n            $count--;\n\
    \        }\n        if ($count < 0) {\n            return False;\n        }\n\
    \    }\n    if ($count == 0) {\n        return True;\n    } else {\n        return\
    \ False;\n    }\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $open = 0;\n  $close = 0;\n  for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n    if ($brackets[$i] == \"(\") {\n      $open++;\n    } else {\n      $close++;\n\
    \    }\n    if ($close > $open) {\n      return False;\n    }\n  }\n  if ($open\
    \ == $close) {\n    return True;\n  } else {\n    return False;\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    $char = $brackets[$i];\n        if ($char == \"(\") {\n            array_push($stack,\
    \ $char);\n        } else if ($char == \")\") {\n            if (count($stack)\
    \ == 0) {\n                return false;\n            }\n            array_pop($stack);\n\
    \        }\n    }\n    return count($stack) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n    \
    \    if ($brackets[$i] == \"(\") {\n            array_push($stack, \"(\");\n \
    \       } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            }\n            array_pop($stack);\n        }\n    }\n  \
    \  return count($stack) == 0;\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$open = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\tif ($brackets[$i]\
    \ == \"(\") {\n\t\t\t$open++;\n\t\t} else if ($brackets[$i] == \")\") {\n\t\t\t\
    $open--;\n\t\t}\n\t\tif ($open < 0) {\n\t\t\treturn False;\n\t\t}\n\t}\n\treturn\
    \ $open == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $count = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n     \
    \   if ($brackets[$i] == \"(\") {\n            $count++;\n        } else {\n \
    \           $count--;\n        }\n        if ($count < 0) {\n            return\
    \ false;\n        }\n    }\n    return $count == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n\t\tif ($brackets[$i] == \"(\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\
    \t\t}\n\t\tif ($close > $open) {\n\t\t\treturn False;\n\t\t}\n\t}\n\tif ($open\
    \ == $close) {\n\t\treturn True;\n\t} else {\n\t\treturn False;\n\t}\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
