name: HumanEval_100_make_a_pile
language: php
results:
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    $n = ($n % 2 === 0) ? $n / 2 : ($n\
    \ + 1) / 2;\n    $result[] = $n * 2 - 1;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpaq13w5nk.php:26\n\
    Stack trace:\n#0 /tmp/tmpaq13w5nk.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpaq13w5nk.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    for ($i = 0; $i < $n; $i++) {\n        if ($i == 0) {\n\
    \            $pile[] = $n;\n        } else {\n            $pile[] = $pile[$i -\
    \ 1] + 2;\n        }\n    }\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [$n];\n    $i = 0;\n    while ($pile[$i] > 1) {\n        $pile[]\
    \ = $pile[$i] % 2 == 0 ? $pile[$i] - 1 : $pile[$i] - 2;\n        $i++;\n    }\n\
    \    return $pile;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdl98goeg.php:27\n\
    Stack trace:\n#0 /tmp/tmpdl98goeg.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpdl98goeg.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    $n = $n % 2 ? $n + 2 : $n + 1;\n \
    \   $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    $n = ($n % 2) ? $n + 2 : $n + 1;\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    $n = $n % 2 ? $n + 2 : $n + 1;\n \
    \   $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    for ($i = 0; $i < $n; $i++) {\n        $pile[] = $n + 2\
    \ * $i;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n\
    \        $n = $n % 2 ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    $n = $n % 2 == 0 ? $n / 2 : $n * 3\
    \ + 1;\n    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpd2rp4sx0.php:26\n\
    Stack trace:\n#0 /tmp/tmpd2rp4sx0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpd2rp4sx0.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n\
    \ / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[] = $n;\n \
    \ }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwi0eky6f.php:30\n\
    Stack trace:\n#0 /tmp/tmpwi0eky6f.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpwi0eky6f.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n\
    \ + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n +\
    \ 1;\n        $pile[] = $n;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = ($n % 2) ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n + ($i *\
    \ 2);\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpytd6ou4x.php:31\n\
    Stack trace:\n#0 /tmp/tmpytd6ou4x.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpytd6ou4x.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n\
    \ / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[] = $n;\n \
    \ }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmperfzgx9u.php:30\n\
    Stack trace:\n#0 /tmp/tmperfzgx9u.php(37): test()\n#1 {main}\n  thrown in /tmp/tmperfzgx9u.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n\
    \ + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n     \
    \       $n = $n / 2;\n        } else {\n            $n = ($n - 1) / 2;\n     \
    \   }\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptnavujis.php:30\n\
    Stack trace:\n#0 /tmp/tmptnavujis.php(37): test()\n#1 {main}\n  thrown in /tmp/tmptnavujis.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n\
    \ + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [];\n    for ($i = 0; $i < $n; $i++) {\n        $pile[] = $n + 2\
    \ * $i;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n     \
    \       $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n     \
    \   }\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplnna6l2i.php:30\n\
    Stack trace:\n#0 /tmp/tmplnna6l2i.php(37): test()\n#1 {main}\n  thrown in /tmp/tmplnna6l2i.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n\
    \        $n += $n % 2 ? 2 : 1;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 == 0 ? $n / 2\
    \ : ($n + 1) / 2;\n        $result[] = $n;\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxnxhka4r.php:26\n\
    Stack trace:\n#0 /tmp/tmpxnxhka4r.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxnxhka4r.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n\
    \ / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[] = $n;\n \
    \ }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph97snc46.php:30\n\
    Stack trace:\n#0 /tmp/tmph97snc46.php(37): test()\n#1 {main}\n  thrown in /tmp/tmph97snc46.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n + 2 * $i;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n     \
    \       $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n     \
    \   }\n        $result[] = $n;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr6_exjvj.php:29\n\
    Stack trace:\n#0 /tmp/tmpr6_exjvj.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpr6_exjvj.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 === 0 ? $n / 2\
    \ : ($n + 1) / 2;\n        $result[] = $n;\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx282d0ar.php:26\n\
    Stack trace:\n#0 /tmp/tmpx282d0ar.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpx282d0ar.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    $n = $n % 2 ? $n + 2 : $n + 1;\n \
    \   $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0)\
    \ {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[]\
    \ = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsfswdu65.php:31\n\
    Stack trace:\n#0 /tmp/tmpsfswdu65.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpsfswdu65.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n * 2 - 1;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwe47pa9u.php:31\n\
    Stack trace:\n#0 /tmp/tmpwe47pa9u.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwe47pa9u.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n     \
    \       $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n     \
    \   }\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmeneaodv.php:30\n\
    Stack trace:\n#0 /tmp/tmpmeneaodv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpmeneaodv.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    $n = $n % 2 ? $n + 2 : $n + 1;\n \
    \   $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0)\
    \ {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[]\
    \ = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppu9_e2as.php:31\n\
    Stack trace:\n#0 /tmp/tmppu9_e2as.php(38): test()\n#1 {main}\n  thrown in /tmp/tmppu9_e2as.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n     \
    \       $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n     \
    \   }\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4navpfrt.php:30\n\
    Stack trace:\n#0 /tmp/tmp4navpfrt.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp4navpfrt.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    while ($n > 0) {\n        $result[] = $n;\n        $n\
    \ = $n % 2 ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n + 2 * $i;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    $n = $n % 2 == 0 ? $n / 2 : ($n +\
    \ 1) / 2;\n    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb062g9v2.php:26\n\
    Stack trace:\n#0 /tmp/tmpb062g9v2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpb062g9v2.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 === 0 ? $n - 1\
    \ : $n - 2;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph_r78eo7.php:26\n\
    Stack trace:\n#0 /tmp/tmph_r78eo7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmph_r78eo7.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0)\
    \ {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[]\
    \ = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyp4ngwkn.php:31\n\
    Stack trace:\n#0 /tmp/tmpyp4ngwkn.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpyp4ngwkn.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n\
    \ + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n\
    \ + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 0) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 == 0 ? $n - 1\
    \ : $n + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n     \
    \       $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n     \
    \   }\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdj_qk2ap.php:30\n\
    Stack trace:\n#0 /tmp/tmpdj_qk2ap.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpdj_qk2ap.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = ($n % 2) ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n + ($i *\
    \ 2);\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 == 0 ? $n / 2\
    \ : ($n + 1) / 2;\n        $result[] = $n;\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjzxpipw6.php:26\n\
    Stack trace:\n#0 /tmp/tmpjzxpipw6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpjzxpipw6.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc9k9x1dx.php:31\n\
    Stack trace:\n#0 /tmp/tmpc9k9x1dx.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpc9k9x1dx.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = ($n % 2) ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    $n = $n % 2 ? $n + 2 : $n + 1;\n \
    \   $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0)\
    \ {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[]\
    \ = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr4jvoeg8.php:31\n\
    Stack trace:\n#0 /tmp/tmpr4jvoeg8.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpr4jvoeg8.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n     \
    \       $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n     \
    \   }\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdyix1lcg.php:30\n\
    Stack trace:\n#0 /tmp/tmpdyix1lcg.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpdyix1lcg.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n\
    \ / 2;\n    } else {\n      $n = ($n - 1) / 2;\n    }\n    $result[] = $n * 2\
    \ + 1;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu0nof46_.php:30\n\
    Stack trace:\n#0 /tmp/tmpu0nof46_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpu0nof46_.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv9575ve0.php:31\n\
    Stack trace:\n#0 /tmp/tmpv9575ve0.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpv9575ve0.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0)\
    \ {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[]\
    \ = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7cs5s6b2.php:31\n\
    Stack trace:\n#0 /tmp/tmp7cs5s6b2.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7cs5s6b2.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n       \
    \     $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n       \
    \ }\n        $pile[] = $n;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4lvqm5a7.php:30\n\
    Stack trace:\n#0 /tmp/tmp4lvqm5a7.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp4lvqm5a7.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 == 0 ? $n / 2\
    \ : ($n + 1) / 2;\n        $result[] = $n * 2 - 1;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy8rn0t6t.php:26\n\
    Stack trace:\n#0 /tmp/tmpy8rn0t6t.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpy8rn0t6t.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0)\
    \ {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[]\
    \ = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpji04bso1.php:31\n\
    Stack trace:\n#0 /tmp/tmpji04bso1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpji04bso1.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3b6stpxx.php:31\n\
    Stack trace:\n#0 /tmp/tmp3b6stpxx.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp3b6stpxx.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n\
    \ + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        $n = $n\
    \ % 2 == 0 ? $n - 1 : $n + 1;\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n\
    \ + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = ($n % 2 == 0) ? $n -\
    \ 1 : $n - 2;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpaisqbg0m.php:26\n\
    Stack trace:\n#0 /tmp/tmpaisqbg0m.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpaisqbg0m.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzsgyw_0s.php:31\n\
    Stack trace:\n#0 /tmp/tmpzsgyw_0s.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpzsgyw_0s.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n;\n    $n\
    \ = ($n % 2 === 0) ? $n + 2 : $n + 1;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $pile = [$n];\n  while ($n > 1) {\n    $n = ($n % 2 == 0) ? $n / 2 : ($n +\
    \ 1) / 2;\n    $pile[] = $n;\n  }\n  return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpenpw32vy.php:26\n\
    Stack trace:\n#0 /tmp/tmpenpw32vy.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpenpw32vy.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = ($n % 2 == 0) ? $n -\
    \ 1 : $n - 2;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7aosjrlx.php:26\n\
    Stack trace:\n#0 /tmp/tmp7aosjrlx.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7aosjrlx.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        $n = $n\
    \ % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqd2mzvg8.php:27\n\
    Stack trace:\n#0 /tmp/tmpqd2mzvg8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpqd2mzvg8.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 == 0 ? $n / 2\
    \ : ($n + 1) / 2;\n        $result[] = $n;\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpp_fjp6qk.php:25\n\
    Stack trace:\n#0 /tmp/tmpp_fjp6qk.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpp_fjp6qk.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwox1t6vq.php:31\n\
    Stack trace:\n#0 /tmp/tmpwox1t6vq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwox1t6vq.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 == 0 ? $n / 2\
    \ : ($n + 1) / 2;\n        $result[] = $n * 2 - 1;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1w5yp8vm.php:26\n\
    Stack trace:\n#0 /tmp/tmp1w5yp8vm.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1w5yp8vm.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbiy9an7s.php:31\n\
    Stack trace:\n#0 /tmp/tmpbiy9an7s.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbiy9an7s.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n     \
    \       $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n     \
    \   }\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpivlol42v.php:30\n\
    Stack trace:\n#0 /tmp/tmpivlol42v.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpivlol42v.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $pile = [$n];\n  while ($n > 1) {\n    $n = ($n % 2) ? $n + 2 : $n + 1;\n \
    \   $pile[] = $n;\n  }\n  return $pile;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  while ($n > 0) {\n    $result[] = $n;\n    $n = $n % 2 ==\
    \ 0 ? $n + 2 : $n + 1;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n;\n    $n\
    \ = $n % 2 == 0 ? $n + 2 : $n + 1;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $i = 0;\n    while ($n > 0) {\n        $result[$i] = $n;\n\
    \        $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n        $i++;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n     \
    \       $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n     \
    \   }\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5t1tqumn.php:30\n\
    Stack trace:\n#0 /tmp/tmp5t1tqumn.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5t1tqumn.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpznwsokv4.php:31\n\
    Stack trace:\n#0 /tmp/tmpznwsokv4.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpznwsokv4.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    $n = $n % 2 == 0 ? $n / 2 : ($n +\
    \ 1) / 2;\n    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp74ag_m27.php:26\n\
    Stack trace:\n#0 /tmp/tmp74ag_m27.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp74ag_m27.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n     \
    \       $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n     \
    \   }\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplxl2mf6x.php:30\n\
    Stack trace:\n#0 /tmp/tmplxl2mf6x.php(37): test()\n#1 {main}\n  thrown in /tmp/tmplxl2mf6x.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n     \
    \       $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n     \
    \   }\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppfhn4633.php:30\n\
    Stack trace:\n#0 /tmp/tmppfhn4633.php(37): test()\n#1 {main}\n  thrown in /tmp/tmppfhn4633.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0)\
    \ {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[]\
    \ = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuh01mins.php:31\n\
    Stack trace:\n#0 /tmp/tmpuh01mins.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpuh01mins.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyrcmibz5.php:31\n\
    Stack trace:\n#0 /tmp/tmpyrcmibz5.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpyrcmibz5.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    while ($n > 0) {\n        $result[] = $n;\n        $n\
    \ = $n % 2 == 0 ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $stones = [$n];\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n\
    \ / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $stones[] = $n;\n \
    \ }\n  return $stones;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpolo4oma1.php:30\n\
    Stack trace:\n#0 /tmp/tmpolo4oma1.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpolo4oma1.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n     \
    \       $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n     \
    \   }\n        $result[] = $n * 2 - 1;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzsehlron.php:30\n\
    Stack trace:\n#0 /tmp/tmpzsehlron.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpzsehlron.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n + 2 * $i;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n       \
    \     $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n       \
    \ }\n        $pile[] = $n;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp20wyos9a.php:30\n\
    Stack trace:\n#0 /tmp/tmp20wyos9a.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp20wyos9a.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $pile = [$n];\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n /\
    \ 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $pile[] = $n;\n  }\n\
    \  return $pile;\n}\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm1s0p2h0.php:29\n\
    Stack trace:\n#0 /tmp/tmpm1s0p2h0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpm1s0p2h0.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 0) {\n        if ($n % 2 === 0) {\n    \
    \        $n = $n / 2;\n        } else {\n            $n = ($n - 1) / 2;\n    \
    \    }\n        array_push($result, $n);\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq6ts6tot.php:30\n\
    Stack trace:\n#0 /tmp/tmpq6ts6tot.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpq6ts6tot.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzelmy35l.php:31\n\
    Stack trace:\n#0 /tmp/tmpzelmy35l.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpzelmy35l.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n     \
    \       $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n     \
    \   }\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe37ntdp0.php:30\n\
    Stack trace:\n#0 /tmp/tmpe37ntdp0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpe37ntdp0.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 == 0 ? $n / 2\
    \ : ($n + 1) / 2;\n        $result[] = $n;\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdgyoj2zp.php:26\n\
    Stack trace:\n#0 /tmp/tmpdgyoj2zp.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdgyoj2zp.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n\
    \        $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n\
    print_r(make_a_pile(3));\nprint_r(make_a_pile(4));\nprint_r(make_a_pile(5));\n\
    print_r(make_a_pile(6));\nprint_r(make_a_pile(7));\nprint_r(make_a_pile(8));\n\
    print_r(make_a_pile(9));\nprint_r(make_a_pile(10));\nprint_r(make_a_pile(11));\n\
    print_r(make_a_pile(12));\nprint_r(make_a_pile(13));\nprint_r(make_a_pile(14));\n\
    print_r(make_a_pile(15));\nprint_r(make_a_pile(16));\nprint_r(make_a_pile(17));\n\
    print_r(make_a_pile(18));\nprint_r(make_a_pile(19));\nprint_r(make_a_pile(20));\n\
    print_r(make_a_pile(21));\nprint_r(make_a_pile(22));\nprint_r(make_a_pile(23));\n\
    print_r(make_a_pile(24));\nprint_r(make_a_pile(25));\nprint_r(make_a_pile(26));\n\
    print_r(make_a_pile(27));\nprint_r(make_a_pile(28));\nprint_r(make_a_pile(29));\n\
    print_r(make_a_pile(30));\nprint_r(make_a_pile(31));\nprint_r(make_a_pile(32));\n\
    print_r(make_a_pile(33));\nprint_r(make_a_pile(\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmp3edfibtk.php on line 52\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    $n = $n % 2 == 0 ? $n - 1 : $n - 2;\n\
    \    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpin74kz8y.php:26\n\
    Stack trace:\n#0 /tmp/tmpin74kz8y.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpin74kz8y.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    $n = $n % 2 == 0 ? $n / 2 : ($n +\
    \ 1) / 2;\n    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj9x_qm2_.php:26\n\
    Stack trace:\n#0 /tmp/tmpj9x_qm2_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpj9x_qm2_.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n     \
    \       $n /= 2;\n        } else {\n            $n = ($n + 1) / 2;\n        }\n\
    \        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp27j6wkkq.php:30\n\
    Stack trace:\n#0 /tmp/tmp27j6wkkq.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp27j6wkkq.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    $n = ($n % 2 == 0) ? $n / 2 : ($n\
    \ + 1) / 2;\n    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpp6yvn9f0.php:26\n\
    Stack trace:\n#0 /tmp/tmpp6yvn9f0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpp6yvn9f0.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6bhh76jd.php:31\n\
    Stack trace:\n#0 /tmp/tmp6bhh76jd.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6bhh76jd.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n\
    \ + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n\
    \ + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n\
    \ / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[] = $n;\n \
    \ }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpws8dvnh9.php:30\n\
    Stack trace:\n#0 /tmp/tmpws8dvnh9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpws8dvnh9.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n + $i * 2;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n     \
    \       $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n     \
    \   }\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjutur1x9.php:30\n\
    Stack trace:\n#0 /tmp/tmpjutur1x9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpjutur1x9.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    $n = $n % 2 == 0\
    \ ? $n / 2 : ($n + 1) / 2;\n    $result[] = $n * 2 - 1;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphk2mlhta.php:27\n\
    Stack trace:\n#0 /tmp/tmphk2mlhta.php(34): test()\n#1 {main}\n  thrown in /tmp/tmphk2mlhta.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n\
    \ + 2 * $i;\n    }\n    return $result;\n}\nprint_r(make_a_pile(3));\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 5\n    [2] => 7\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0)\
    \ {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[]\
    \ = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxkzd4y1k.php:31\n\
    Stack trace:\n#0 /tmp/tmpxkzd4y1k.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpxkzd4y1k.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    $next = $n % 2 == 0 ? $n + 2 : $n + 1;\n    while ($next\
    \ <= $n * 2) {\n        $result[] = $next;\n        $next += 2;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeba75upa.php:27\n\
    Stack trace:\n#0 /tmp/tmpeba75upa.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpeba75upa.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        if ($i == 0) {\n\
    \            $result[] = $n;\n        } else {\n            $result[] = $result[$i\
    \ - 1] + 2;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0)\
    \ {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[]\
    \ = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbi8wdrgg.php:31\n\
    Stack trace:\n#0 /tmp/tmpbi8wdrgg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbi8wdrgg.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\necho implode(',\
    \ ', make_a_pile(3)) . \"\\n\";\necho implode(', ', make_a_pile(4)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(5)) . \"\\n\";\necho implode(', ', make_a_pile(6))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(7)) . \"\\n\";\necho implode(', ',\
    \ make_a_pile(8)) . \"\\n\";\necho implode(', ', make_a_pile(9)) . \"\\n\";\n\
    echo implode(', ', make_a_pile(10)) . \"\\n\";\necho implode(', ', make_a_pile(11))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(12)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(13)) . \"\\n\";\necho implode(', ', make_a_pile(14)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(15)) . \"\\n\";\necho implode(', ', make_a_pile(16))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(17)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(18)) . \"\\n\";\necho implode(', ', make_a_pile(19)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(20)) . \"\\n\";\necho implode(', ', make_a_pile(21))\
    \ . \"\\n\";\necho implode(', ', make_a_pile(22)) . \"\\n\";\necho implode(',\
    \ ', make_a_pile(23)) . \"\\n\";\necho implode(', ', make_a_pile(24)) . \"\\n\"\
    ;\necho implode(', ', make_a_pile(\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmpe6luyg34.php on line 43\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    $n = ($n % 2 == 0)\
    \ ? $n - 1 : $n - 2;\n    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2691in8z.php:27\n\
    Stack trace:\n#0 /tmp/tmp2691in8z.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2691in8z.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    $n = $n % 2 ? $n + 2 : $n + 1;\n \
    \   $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n\
    \ + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 == 0 ? $n / 2\
    \ : ($n + 1) / 2;\n        $result[] = $n;\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9n4yneoh.php:26\n\
    Stack trace:\n#0 /tmp/tmp9n4yneoh.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9n4yneoh.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n\
    \ + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    $n = $n % 2 == 0 ? $n / 2 : ($n +\
    \ 1) / 2;\n    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuu47v4ln.php:26\n\
    Stack trace:\n#0 /tmp/tmpuu47v4ln.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpuu47v4ln.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n     \
    \       $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n     \
    \   }\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy03r98jr.php:30\n\
    Stack trace:\n#0 /tmp/tmpy03r98jr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpy03r98jr.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $pile = [$n];\n  while ($n > 1) {\n    $n = $n % 2 == 0 ? $n / 2 : ($n + 1)\
    \ / 2;\n    $pile[] = $n * 2 - 1;\n  }\n  return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkvt47qnp.php:26\n\
    Stack trace:\n#0 /tmp/tmpkvt47qnp.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpkvt47qnp.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 == 0 ? $n / 2\
    \ : ($n + 1) / 2;\n        $result[] = $n;\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr8p1f_3b.php:26\n\
    Stack trace:\n#0 /tmp/tmpr8p1f_3b.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpr8p1f_3b.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n + 2 * $i;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    $n = $n % 2 ? $n + 2 : $n + 1;\n \
    \   $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0jsswe2o.php:30\n\
    Stack trace:\n#0 /tmp/tmp0jsswe2o.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp0jsswe2o.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(5));\nprint_r(make_a_pile(7));\n\
    print_r(make_a_pile(9));\nprint_r(make_a_pile(11));\nprint_r(make_a_pile(13));\n\
    print_r(make_a_pile(15));\nprint_r(make_a_pile(17));\nprint_r(make_a_pile(19));\n\
    print_r(make_a_pile(21));\nprint_r(make_a_pile(23));\nprint_r(make_a_pile(25));\n\
    print_r(make_a_pile(27));\nprint_r(make_a_pile(29));\nprint_r(make_a_pile(31));\n\
    print_r(make_a_pile(33));\nprint_r(make_a_pile(35));\nprint_r(make_a_pile(37));\n\
    print_r(make_a_pile(39));\nprint_r(make_a_pile(41));\nprint_r(make_a_pile(43));\n\
    print_r(make_a_pile(45));\nprint_r(make_a_pile(47));\nprint_r(make_a_pile(49));\n\
    print_r(make_a_pile(51));\nprint_r(make_a_pile(53));\nprint_r(make_a_pile(55));\n\
    print_r(make_a_pile(57));\nprint_r(make_a_pile(59));\nprint_r(make_a_pile(61));\n\
    print_r(\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmpcftj6ri0.php on line 57\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprhvqlxe4.php:31\n\
    Stack trace:\n#0 /tmp/tmprhvqlxe4.php(38): test()\n#1 {main}\n  thrown in /tmp/tmprhvqlxe4.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n + 2 * $i;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk62ugg_l.php:31\n\
    Stack trace:\n#0 /tmp/tmpk62ugg_l.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpk62ugg_l.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt3b9iub3.php:31\n\
    Stack trace:\n#0 /tmp/tmpt3b9iub3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpt3b9iub3.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n + 2 * $i;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $pile = [$n];\n  while ($n > 1) {\n    $n = ($n % 2 == 0) ? $n / 2 : ($n +\
    \ 1) / 2;\n    $pile[] = $n;\n  }\n  return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpujz_9dhl.php:26\n\
    Stack trace:\n#0 /tmp/tmpujz_9dhl.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpujz_9dhl.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    $n = $n % 2 ? $n\
    \ + 2 : $n + 1;\n    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n + 2 * $i;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    $n = $n % 2 == 0 ? $n / 2 : ($n +\
    \ 1) / 2;\n    $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9zhjcop9.php:26\n\
    Stack trace:\n#0 /tmp/tmp9zhjcop9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9zhjcop9.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n\
    \        $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfx511ctr.php:31\n\
    Stack trace:\n#0 /tmp/tmpfx511ctr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpfx511ctr.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    while ($n > 0) {\n        $result[] = $n;\n        $n\
    \ = ($n % 2 == 0) ? $n - 1 : $n - 2;\n    }\n    return $result;\n}\nprint_r(make_a_pile(3));\n\
    print_r(make_a_pile(4));\nprint_r(make_a_pile(5));\nprint_r(make_a_pile(6));\n\
    print_r(make_a_pile(7));\nprint_r(make_a_pile(8));\nprint_r(make_a_pile(9));\n\
    print_r(make_a_pile(10));\nprint_r(make_a_pile(11));\nprint_r(make_a_pile(12));\n\
    print_r(make_a_pile(13));\nprint_r(make_a_pile(14));\nprint_r(make_a_pile(15));\n\
    print_r(make_a_pile(16));\nprint_r(make_a_pile(17));\nprint_r(make_a_pile(18));\n\
    print_r(make_a_pile(19));\nprint_r(make_a_pile(20));\nprint_r(make_a_pile(21));\n\
    print_r(make_a_pile(22));\nprint_r(make_a_pile(23));\nprint_r(make_a_pile(24));\n\
    print_r(make_a_pile(25));\nprint_r(make_a_pile(26));\nprint_r(make_a_pile(27));\n\
    print_r(make_a_pile(28));\nprint_r(make_a_pile(29));\nprint_r(make_a_pile(30));\n\
    print_r(make_a_pile(31));\nprint_r(make_a_pile(32));\nprint_r(make_a_pile(33));\n\
    print_r(make_a_pile(34));\nprint_r(make\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \")\" in /tmp/tmpzn0kzfpr.php on line 53\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0)\
    \ {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[]\
    \ = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzf9c77qo.php:31\n\
    Stack trace:\n#0 /tmp/tmpzf9c77qo.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpzf9c77qo.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n       \
    \     $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n       \
    \ }\n        $pile[] = $n;\n    }\n    return $pile;\n}\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp36z4k2y9.php:29\n\
    Stack trace:\n#0 /tmp/tmp36z4k2y9.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp36z4k2y9.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $stones = [$n];\n  while ($n > 1) {\n    $n = $n % 2 ? $n + 2 : $n + 1;\n \
    \   $stones[] = $n;\n  }\n  return $stones;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    $n = $n % 2 ? $n + 2 : $n + 1;\n \
    \   $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n\
    \ + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = ($n % 2) ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n + 2 * $i;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp96q4ui69.php:31\n\
    Stack trace:\n#0 /tmp/tmp96q4ui69.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp96q4ui69.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0)\
    \ {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[]\
    \ = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpco0d7yq8.php:31\n\
    Stack trace:\n#0 /tmp/tmpco0d7yq8.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpco0d7yq8.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq3tekfsu.php:31\n\
    Stack trace:\n#0 /tmp/tmpq3tekfsu.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpq3tekfsu.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    $n = $n % 2 ? $n + 2 : $n + 1;\n \
    \   $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0)\
    \ {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[]\
    \ = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx00_7t8b.php:31\n\
    Stack trace:\n#0 /tmp/tmpx00_7t8b.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpx00_7t8b.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $pile = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n +\
    \ 1;\n        $pile[] = $n;\n    }\n    return $pile;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n\
    \ + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n\
    \ + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n + 2 * $i;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n     \
    \       $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n     \
    \   }\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbeqvrf_h.php:30\n\
    Stack trace:\n#0 /tmp/tmpbeqvrf_h.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpbeqvrf_h.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbkkljcfw.php:31\n\
    Stack trace:\n#0 /tmp/tmpbkkljcfw.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbkkljcfw.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $pile = [$n];\n  while ($n > 1) {\n    $n = $n % 2 ? $n - 1 : $n / 2;\n   \
    \ $pile[] = $n;\n  }\n  return $pile;\n}\n\nfunction candidate(...$args) {\n \
    \   return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsaw5yyiq.php:26\n\
    Stack trace:\n#0 /tmp/tmpsaw5yyiq.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpsaw5yyiq.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    $n = $n % 2 ? $n + 2 : $n + 1;\n \
    \   $result[] = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0)\
    \ {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[]\
    \ = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyub39aa2.php:31\n\
    Stack trace:\n#0 /tmp/tmpyub39aa2.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpyub39aa2.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    $n = $n % 2 == 0\
    \ ? $n / 2 : ($n + 1) / 2;\n    $result[] = $n * 2 - 1;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpovi_wmxg.php:27\n\
    Stack trace:\n#0 /tmp/tmpovi_wmxg.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpovi_wmxg.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 == 0 ? $n - 1\
    \ : $n + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6rki1v02.php:31\n\
    Stack trace:\n#0 /tmp/tmp6rki1v02.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6rki1v02.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    $n = ($n % 2 === 0) ? $n / 2 : ($n\
    \ + 1) / 2;\n    $result[] = $n * 2 - 1;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppznjffkh.php:26\n\
    Stack trace:\n#0 /tmp/tmppznjffkh.php(33): test()\n#1 {main}\n  thrown in /tmp/tmppznjffkh.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n + 2 * $i;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0)\
    \ {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[]\
    \ = $n;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfqak9mdo.php:31\n\
    Stack trace:\n#0 /tmp/tmpfqak9mdo.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpfqak9mdo.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdnaf7amm.php:31\n\
    Stack trace:\n#0 /tmp/tmpdnaf7amm.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpdnaf7amm.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [$n];\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n\
    \ / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[] = $n;\n \
    \ }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt_0ianhl.php:30\n\
    Stack trace:\n#0 /tmp/tmpt_0ianhl.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpt_0ianhl.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n    $n = $n % 2 == 0\
    \ ? $n / 2 : ($n + 1) / 2;\n    $result[] = $n;\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp12liysaa.php:27\n\
    Stack trace:\n#0 /tmp/tmp12liysaa.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp12liysaa.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        $n = $n\
    \ % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8,\
    \ 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsynx6ybh.php:27\n\
    Stack trace:\n#0 /tmp/tmpsynx6ybh.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsynx6ybh.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 === 0 ? $n - 1\
    \ : $n - 2;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptuqjs2yd.php:26\n\
    Stack trace:\n#0 /tmp/tmptuqjs2yd.php(33): test()\n#1 {main}\n  thrown in /tmp/tmptuqjs2yd.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [$n];\n    while ($n > 1) {\n        $n = $n % 2 ? $n + 2 : $n\
    \ + 1;\n        $result[] = $n;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n\
    \ + 2 * $i;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return make_a_pile(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(3, 5, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(4, 6, 8, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(5, 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(6) !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(5,\
    \ 7, 9, 11, 13)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(6, 8, 10, 12, 14, 16)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(8) !== array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9ribcrtf.php:31\n\
    Stack trace:\n#0 /tmp/tmp9ribcrtf.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp9ribcrtf.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n// The first level has n stones.\n// The number of stones in the\
    \ next level is:\n// - the next odd number if n is odd.\n// - the next even number\
    \ if n is even.\n// Return the number of stones in each level in a list, where\
    \ element at index\n// i represents the number of stones in the level (i+1).\n\
    // Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile($n) {\n\
    \    $result = [];\n    while ($n > 0) {\n        $result[] = $n;\n        $n\
    \ = ($n % 2 == 0) ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12,\
    \ 14, 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ array(8, 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
