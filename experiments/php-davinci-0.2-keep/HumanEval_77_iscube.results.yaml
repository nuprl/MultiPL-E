name: HumanEval_77_iscube
language: php
results:
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow($a,\
    \ 1/3);\n}\n\necho iscube(1) . PHP_EOL;\necho iscube(2) . PHP_EOL;\necho iscube(-1)\
    \ . PHP_EOL;\necho iscube(64) . PHP_EOL;\necho iscube(0) . PHP_EOL;\necho iscube(180)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\n\n\n\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqrak8t3m.php:29\n\
    Stack trace:\n#0 /tmp/tmpqrak8t3m.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpqrak8t3m.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 64 || $a == -64;\n}\necho iscube(1) . \"\\n\";\n\
    echo iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\\
    n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0d2o7pc3.php:31\n\
    Stack trace:\n#0 /tmp/tmp0d2o7pc3.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0d2o7pc3.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || ($a > 0 && pow(round(pow($a, 1/3)), 3) == $a);\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3ngs_8aw.php:23\n\
    Stack trace:\n#0 /tmp/tmp3ngs_8aw.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3ngs_8aw.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpk622kmqg.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       $a = -$a;\n    }\n    $i = 0;\n    while ($i * $i * $i < $a) {\n     \
    \   $i++;\n    }\n    return $i * $i * $i == $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return is_int(cbrt($a));\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function cbrt() in\
    \ /tmp/tmpo_ogz55o.php:13\nStack trace:\n#0 /tmp/tmpo_ogz55o.php(17): iscube()\n\
    #1 /tmp/tmpo_ogz55o.php(21): candidate()\n#2 /tmp/tmpo_ogz55o.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmpo_ogz55o.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a == 1 ? true : $a == -1 ? true : $a == pow(round(pow($a, 1/3)), 3)\
    \ ? true : false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpyza3apcb.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return is_int(pow($a,\
    \ 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqfe9f8ys.php:21\n\
    Stack trace:\n#0 /tmp/tmpqfe9f8ys.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqfe9f8ys.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return is_int(pow($a,\
    \ 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5bf_8kus.php:21\n\
    Stack trace:\n#0 /tmp/tmp5bf_8kus.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp5bf_8kus.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $cube = round(pow($a,\
    \ 1/3));\n    return $cube * $cube * $cube == $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1bx1ue_a.php:24\n\
    Stack trace:\n#0 /tmp/tmp1bx1ue_a.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp1bx1ue_a.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 64 || $a == -64 ? true : false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw149db4k.php:26\n\
    Stack trace:\n#0 /tmp/tmpw149db4k.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpw149db4k.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 64 ? true : false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1eqcms3j.php:26\n\
    Stack trace:\n#0 /tmp/tmp1eqcms3j.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp1eqcms3j.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if ($a == 0) {\n  \
    \  return true;\n  }\n  if ($a < 0) {\n    $a = -$a;\n  }\n  for ($i = 1; $i <=\
    \ $a; $i++) {\n    if ($i * $i * $i == $a) {\n      return true;\n    }\n  }\n\
    \  return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 0) {\n\
    \        return true;\n    }\n    if ($a < 0) {\n        $a = -$a;\n    }\n  \
    \  $i = 1;\n    while ($i * $i * $i < $a) {\n        $i++;\n    }\n    if ($i\
    \ * $i * $i == $a) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == 0 || $a\
    \ == 1 || $a == -1 || $a == 64 || $a == -64 ? true : false;\n}\n\necho iscube(1)\
    \ . \"<br>\";\necho iscube(2) . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64)\
    \ . \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: 1<br><br>1<br>1<br>1<br><br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpluqfxbwe.php:32\n\
    Stack trace:\n#0 /tmp/tmpluqfxbwe.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpluqfxbwe.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $cube = round(pow($a,\
    \ 1/3));\n    return pow($cube, 3) == $a;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprxmhjyr_.php:24\n\
    Stack trace:\n#0 /tmp/tmprxmhjyr_.php(32): test()\n#1 {main}\n  thrown in /tmp/tmprxmhjyr_.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a > 0 ? is_int(cbrt($a)) : is_int(cbrt(abs($a)));\n}\n\necho iscube(1)\
    \ . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpmw8rbi9_.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow($a,\
    \ 1/3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp822vncdp.php:23\n\
    Stack trace:\n#0 /tmp/tmp822vncdp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp822vncdp.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpplt643mv.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 64 || $a == -64 ? true : false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8frp4gl5.php:26\n\
    Stack trace:\n#0 /tmp/tmp8frp4gl5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8frp4gl5.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvjq0snpq.php:23\n\
    Stack trace:\n#0 /tmp/tmpvjq0snpq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpvjq0snpq.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 64 || $a == -64 ? true : false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsm4lekjp.php:26\n\
    Stack trace:\n#0 /tmp/tmpsm4lekjp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpsm4lekjp.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == 0 || $a\
    \ == 1 || $a == -1 || $a == 8 || $a == 27 || $a == 64 || $a == 125 || $a == 216\
    \ || $a == 343 || $a == 512 || $a == 729 || $a == 1000 || $a == 1331 || $a ==\
    \ 1728 || $a == 2197 || $a == 2744 || $a == 3375 || $a == 4096 || $a == 4913 ||\
    \ $a == 5832 || $a == 6859 || $a == 8000 || $a == 9261 || $a == 10648 || $a ==\
    \ 12167 || $a == 13824 || $a == 15625 || $a == 17576 || $a == 19683 || $a == 21952\
    \ || $a == 24389 || $a == 27000 || $a == 29791 || $a == 32768 || $a == 35937 ||\
    \ $a == 39304 || $a == 42875 || $a == 46656 || $a == 50653 || $a == 54872 || $a\
    \ == 59319 || $a == 64000 || $a == 68921 || $a == 74088 || $a == 79507 || $a ==\
    \ 85184 || $a == 91125 || $a == 97336 || $a == 103823 || $a == 110592 || $a ==\
    \ 117649 || $a == 125000 || $a == 132651 || $a == 140608 || $a == 148877 || $a\
    \ == 157464 || $a == 166375 || $a == 175616 || $a == 185193 || $a == 195112 ||\
    \ $a == 205379 || $a == 216000 || $a == 226981 || $a == 238328 || $a == 250047\
    \ || $a == 262144 || $a == 274625 || $a == 287496 || $a == 300763 || $a == 314432\
    \ || $a == 328509 || $a == 343000 || $a == 357911 || $a == 373248 || $a == 389017\
    \ || $a == 405224 || $a == 421875 || $a == 438976 || $a == 456533 || $a == 474552\
    \ || $a == 493039 || $a == 512000 || $a == 531441\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \";\" in /tmp/tmp9vsrt_aq.php on line 14\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpax7alefp.php:23\n\
    Stack trace:\n#0 /tmp/tmpax7alefp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpax7alefp.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 0) {\n\
    \        return true;\n    }\n    if ($a < 0) {\n        $a = -$a;\n    }\n  \
    \  $i = 0;\n    while ($i * $i * $i < $a) {\n        $i++;\n    }\n    return\
    \ $i * $i * $i == $a;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\"\
    ;\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\
    \\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcy8edzxj.php:23\n\
    Stack trace:\n#0 /tmp/tmpcy8edzxj.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcy8edzxj.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho\
    \ iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\"\
    ;\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\n\n\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3hzp33mw.php:29\n\
    Stack trace:\n#0 /tmp/tmp3hzp33mw.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp3hzp33mw.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk5fjhs0a.php:23\n\
    Stack trace:\n#0 /tmp/tmpk5fjhs0a.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpk5fjhs0a.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       $a = -$a;\n    }\n    $result = false;\n    for ($i = 0; $i <= $a; $i++)\
    \ {\n        if ($i * $i * $i == $a) {\n            $result = true;\n        \
    \    break;\n        }\n    }\n    return $result;\n}\necho iscube(1) . \"\\n\"\
    ;\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\
    \\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho\
    \ iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\"\
    ;\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\n\n\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjjluqm0q.php:29\n\
    Stack trace:\n#0 /tmp/tmpjjluqm0q.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpjjluqm0q.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkwjaekis.php:23\n\
    Stack trace:\n#0 /tmp/tmpkwjaekis.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkwjaekis.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvkcdko52.php:23\n\
    Stack trace:\n#0 /tmp/tmpvkcdko52.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpvkcdko52.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return is_int(pow($a,\
    \ 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplpoce2_2.php:21\n\
    Stack trace:\n#0 /tmp/tmplpoce2_2.php(31): test()\n#1 {main}\n  thrown in /tmp/tmplpoce2_2.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptmbmd312.php:23\n\
    Stack trace:\n#0 /tmp/tmptmbmd312.php(31): test()\n#1 {main}\n  thrown in /tmp/tmptmbmd312.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmp1dz0_jas.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return is_int(cbrt($a));\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function cbrt() in\
    \ /tmp/tmp130qrq5k.php:13\nStack trace:\n#0 /tmp/tmp130qrq5k.php(17): iscube()\n\
    #1 /tmp/tmp130qrq5k.php(21): candidate()\n#2 /tmp/tmp130qrq5k.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmp130qrq5k.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\t$result = false;\n\t\
    if ($a > 0) {\n\t\t$result = is_int(pow($a, 1/3));\n\t} elseif ($a < 0) {\n\t\t\
    $result = is_int(pow(abs($a), 1/3));\n\t} else {\n\t\t$result = true;\n\t}\n\t\
    return $result;\n}\necho iscube(1) . PHP_EOL;\necho iscube(2) . PHP_EOL;\necho\
    \ iscube(-1) . PHP_EOL;\necho iscube(64) . PHP_EOL;\necho iscube(0) . PHP_EOL;\n\
    echo iscube(180) . PHP_EOL;\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\n\n\n\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9w9o7l8v.php:34\n\
    Stack trace:\n#0 /tmp/tmp9w9o7l8v.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp9w9o7l8v.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || (pow($a, 1/3) == round(pow($a, 1/3)));\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy5wy3jll.php:24\n\
    Stack trace:\n#0 /tmp/tmpy5wy3jll.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpy5wy3jll.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || (int)pow($a, 1/3) == pow($a, 1/3);\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpluzx04lk.php:24\n\
    Stack trace:\n#0 /tmp/tmpluzx04lk.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpluzx04lk.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeiam1u0b.php:23\n\
    Stack trace:\n#0 /tmp/tmpeiam1u0b.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpeiam1u0b.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || is_int(pow($a, 1/3));\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8knqcfab.php:24\n\
    Stack trace:\n#0 /tmp/tmp8knqcfab.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8knqcfab.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr4gbsx6y.php:23\n\
    Stack trace:\n#0 /tmp/tmpr4gbsx6y.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpr4gbsx6y.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn $a == 0 || $a\
    \ == 1 || $a == -1 || ($a > 0 && $a == round(pow($a, 1/3)));\n}\necho iscube(1)\
    \ . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "1\n\n1\n\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph6vtmmgc.php:29\n\
    Stack trace:\n#0 /tmp/tmph6vtmmgc.php(36): test()\n#1 {main}\n  thrown in /tmp/tmph6vtmmgc.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || is_int(pow($a, 1/3));\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcw1ce45s.php:24\n\
    Stack trace:\n#0 /tmp/tmpcw1ce45s.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcw1ce45s.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\necho iscube(1) . \"<br>\";\necho iscube(2) . \"<br>\";\necho\
    \ iscube(-1) . \"<br>\";\necho iscube(64) . \"<br>\";\necho iscube(0) . \"<br>\"\
    ;\necho iscube(180) . \"<br>\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: 1<br><br><br>1<br>1<br><br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyc2lahfj.php:29\n\
    Stack trace:\n#0 /tmp/tmpyc2lahfj.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpyc2lahfj.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 64 || $a == -64 || $a == 125 || $a == -125 || $a\
    \ == 216 || $a == -216 || $a == 343 || $a == -343 || $a == 512 || $a == -512 ||\
    \ $a == 729 || $a == -729 || $a == 1000 || $a == -1000 || $a == 1331 || $a ==\
    \ -1331 || $a == 1728 || $a == -1728 || $a == 2197 || $a == -2197 || $a == 2744\
    \ || $a == -2744 || $a == 3375 || $a == -3375 || $a == 4096 || $a == -4096 ||\
    \ $a == 4913 || $a == -4913 || $a == 5832 || $a == -5832 || $a == 6859 || $a ==\
    \ -6859 || $a == 8000 || $a == -8000 || $a == 9261 || $a == -9261 || $a == 10648\
    \ || $a == -10648 || $a == 12167 || $a == -12167 || $a == 13824 || $a == -13824\
    \ || $a == 15625 || $a == -15625 || $a == 17576 || $a == -17576 || $a == 19683\
    \ || $a == -19683 || $a == 21952 || $a == -21952 || $a == 24389 || $a == -24389\
    \ || $a == 27000 || $a == -27000 || $a == 29791 || $a == -29791 || $a == 32768\
    \ || $a == -32768 || $a == 35937 || $a == -35937 || $a == 39304 || $a == -39304\
    \ || $a == 42875 || $a == -42875 || $a == 46656 || $a == -46656 || $a == 50653\
    \ || $a == -50653 || $a == 54872 || $a == -54872 || $a == 59319 || $a == -59319\
    \ || $a == 64000 || $a == -64000 || $a == 68921 || $a == -68921 || $a == 74088\
    \ || $a\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \";\" in /tmp/tmptowrunzt.php on line 14\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\t\
    return true;\n\t}\n\tif ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$i = 1;\n\twhile ($i\
    \ * $i * $i < $a) {\n\t\t$i++;\n\t}\n\tif ($i * $i * $i == $a) {\n\t\treturn true;\n\
    \t}\n\treturn false;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\"\
    ;\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\
    \\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 8 || $a == 27 || $a == 64 || $a == 125 || $a ==\
    \ 216 || $a == 343 || $a == 512 || $a == 729 || $a == 1000 || $a == 1331 || $a\
    \ == 1728 || $a == 2197 || $a == 2744 || $a == 3375 || $a == 4096 || $a == 4913\
    \ || $a == 5832 || $a == 6859 || $a == 8000 || $a == 9261 || $a == 10648 || $a\
    \ == 12167 || $a == 13824 || $a == 15625 || $a == 17576 || $a == 19683 || $a ==\
    \ 21952 || $a == 24389 || $a == 27000 || $a == 29791 || $a == 32768 || $a == 35937\
    \ || $a == 39304 || $a == 42875 || $a == 46656 || $a == 50653 || $a == 54872 ||\
    \ $a == 59319 || $a == 64000 || $a == 68921 || $a == 74088 || $a == 79507 || $a\
    \ == 85184 || $a == 91125 || $a == 97336 || $a == 103823 || $a == 110592 || $a\
    \ == 117649 || $a == 125000 || $a == 132651 || $a == 140608 || $a == 148877 ||\
    \ $a == 157464 || $a == 166375 || $a == 175616 || $a == 185193 || $a == 195112\
    \ || $a == 205379 || $a == 216000 || $a == 226981 || $a == 238328 || $a == 250047\
    \ || $a == 262144 || $a == 274625 || $a == 287496 || $a == 300763 || $a == 314432\
    \ || $a == 328509 || $a == 343000 || $a == 357911 || $a == 373248 || $a == 389017\
    \ || $a == 405224 || $a == 421875 || $a == 438976 || $a == 456533 || $a == 474552\
    \ || $a == 493039 || $a == 512000 || $a == 531441\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \";\" in /tmp/tmpzfw9hj8t.php on line 14\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn $a == 0 ? true\
    \ : $a == 1 ? true : $a == -1 ? true : $a == 64 ? true : false;\n}\n\necho iscube(1)\
    \ . \"<br>\";\necho iscube(2) . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64)\
    \ . \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmp9ncvxhqb.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a > 0 ? (int)pow($a, 1/3) == pow($a, 1/3) : (int)pow(abs($a), 1/3) ==\
    \ pow(abs($a), 1/3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpqs1z7apa.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return is_numeric(pow($a,\
    \ 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps9gd7b1h.php:22\n\
    Stack trace:\n#0 /tmp/tmps9gd7b1h.php(31): test()\n#1 {main}\n  thrown in /tmp/tmps9gd7b1h.php\
    \ on line 22\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return is_int(pow($a,\
    \ 1/3));\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\n\
    echo iscube(0);\necho iscube(180);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp37y_6oq0.php:26\n\
    Stack trace:\n#0 /tmp/tmp37y_6oq0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp37y_6oq0.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if ($a == 0) {\n  \
    \  return true;\n  }\n  if ($a < 0) {\n    $a = -$a;\n  }\n  $i = 1;\n  while\
    \ ($i * $i * $i < $a) {\n    $i++;\n  }\n  return $i * $i * $i == $a;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == 0 || $a\
    \ == 1 || $a == -1 || (int)pow($a, 1/3) == pow($a, 1/3);\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkmwdnx3l.php:24\n\
    Stack trace:\n#0 /tmp/tmpkmwdnx3l.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkmwdnx3l.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return is_int(pow($a,\
    \ 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbkkihbe1.php:21\n\
    Stack trace:\n#0 /tmp/tmpbkkihbe1.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbkkihbe1.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       $a = -$a;\n    }\n    $root = round(pow($a, 1/3));\n    return $root *\
    \ $root * $root == $a;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\\
    n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) .\
    \ \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 64 || $a == -64;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbiuuhyqo.php:26\n\
    Stack trace:\n#0 /tmp/tmpbiuuhyqo.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbiuuhyqo.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkghy_sal.php:23\n\
    Stack trace:\n#0 /tmp/tmpkghy_sal.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkghy_sal.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpx3y_x55d.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\necho iscube(1) ? 'True' : 'False';\necho '<br>';\necho iscube(2)\
    \ ? 'True' : 'False';\necho '<br>';\necho iscube(-1) ? 'True' : 'False';\necho\
    \ '<br>';\necho iscube(64) ? 'True' : 'False';\necho '<br>';\necho iscube(0) ?\
    \ 'True' : 'False';\necho '<br>';\necho iscube(180) ? 'True' : 'False';\necho\
    \ '<br>';\necho iscube(27) ? 'True' : 'False';\necho '<br>';\necho iscube(125)\
    \ ? 'True' : 'False';\necho '<br>';\necho iscube(216) ? 'True' : 'False';\necho\
    \ '<br>';\necho iscube(1000) ? 'True' : 'False';\necho '<br>';\necho iscube(729)\
    \ ? 'True' : 'False';\necho '<br>';\necho iscube(343) ? 'True' : 'False';\necho\
    \ '<br>';\necho iscube(512) ? 'True' : 'False';\necho '<br>';\necho iscube(1000)\
    \ ? 'True' : 'False';\necho '<br>';\necho iscube(1000000) ? 'True' : 'False';\n\
    echo '<br>';\necho iscube(10000000000) ? 'True' : 'False';\necho '<br>';\necho\
    \ iscube(1000000000000) ? 'True' : 'False';\necho '<br>';\necho iscube(100000000000000)\
    \ ? 'True' : 'False';\necho '<br>';\necho iscube(1000000000000000000) ? 'True'\
    \ : 'False';\necho '<br>';\necho iscube(100000000000000000000) ? 'True' : 'False';\n\
    echo '<br>';\necho iscube(10000000000000000000000) ? 'True' : 'False';\necho '<br>';\n\
    echo iscube(1000000000000000000000000) ? 'True' :\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmprd5b20i_.php on line 58\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 64 || $a == -64 ? true : false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6b29vn0h.php:26\n\
    Stack trace:\n#0 /tmp/tmp6b29vn0h.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp6b29vn0h.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return is_int(pow($a,\
    \ 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp56gn84u_.php:21\n\
    Stack trace:\n#0 /tmp/tmp56gn84u_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp56gn84u_.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return is_int(pow($a,\
    \ 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg95qutgz.php:21\n\
    Stack trace:\n#0 /tmp/tmpg95qutgz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpg95qutgz.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmp9by__aus.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       $a = -$a;\n    }\n    if ($a == 0) {\n        return true;\n    }\n  \
    \  $i = 1;\n    while ($i * $i * $i < $a) {\n        $i++;\n    }\n    if ($i\
    \ * $i * $i == $a) {\n        return true;\n    }\n    return false;\n}\n\necho\
    \ iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\n\
    echo iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpbhto0m1l.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6j_scp1a.php:23\n\
    Stack trace:\n#0 /tmp/tmp6j_scp1a.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp6j_scp1a.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || (int)pow($a, 1/3) == pow($a, 1/3);\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqb35ic0y.php:24\n\
    Stack trace:\n#0 /tmp/tmpqb35ic0y.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqb35ic0y.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjs9hkrki.php:23\n\
    Stack trace:\n#0 /tmp/tmpjs9hkrki.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpjs9hkrki.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || (int)pow($a, 1/3) == pow($a, 1/3);\n}\n\necho iscube(1)\
    \ . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "1\n\n1\n\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmgm7v4i5.php:30\n\
    Stack trace:\n#0 /tmp/tmpmgm7v4i5.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpmgm7v4i5.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || is_int(pow($a, 1/3));\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpd66a6hjq.php:24\n\
    Stack trace:\n#0 /tmp/tmpd66a6hjq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpd66a6hjq.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 8 || $a == 27 || $a == 64 || $a == 125 || $a ==\
    \ 216 || $a == 343 || $a == 512 || $a == 729 || $a == 1000 || $a == 1331 || $a\
    \ == 1728 || $a == 2197 || $a == 2744 || $a == 3375 || $a == 4096 || $a == 4913\
    \ || $a == 5832 || $a == 6859 || $a == 8000 || $a == 9261 || $a == 10648 || $a\
    \ == 12167 || $a == 13824 || $a == 15625 || $a == 17576 || $a == 19683 || $a ==\
    \ 21952 || $a == 24389 || $a == 27000 || $a == 29791 || $a == 32768 || $a == 35937\
    \ || $a == 39304 || $a == 42875 || $a == 46656 || $a == 50653 || $a == 54872 ||\
    \ $a == 59319 || $a == 64000 || $a == 68921 || $a == 74088 || $a == 79507 || $a\
    \ == 85184 || $a == 91125 || $a == 97336 || $a == 103823 || $a == 110592 || $a\
    \ == 117649 || $a == 125000 || $a == 132651 || $a == 140608 || $a == 148877 ||\
    \ $a == 157464 || $a == 166375 || $a == 175616 || $a == 185193 || $a == 195112\
    \ || $a == 205379 || $a == 216000 || $a == 226981 || $a == 238328 || $a == 250047\
    \ || $a == 262144 || $a == 274625 || $a == 287496 || $a == 300763 || $a == 314432\
    \ || $a == 328509 || $a == 343000 || $a == 357911 || $a == 373248 || $a == 389017\
    \ || $a == 405224 || $a == 421875 || $a == 438976 || $a == 456533 || $a == 474552\
    \ || $a == 493039 || $a == 512000 || $a == 531441\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \";\" in /tmp/tmpohpwt3r1.php on line 14\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return (bool)pow($a,\
    \ 1/3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnbz7xlxo.php:22\n\
    Stack trace:\n#0 /tmp/tmpnbz7xlxo.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpnbz7xlxo.php\
    \ on line 22\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\t\
    return true;\n\t} elseif ($a < 0) {\n\t\t$a = abs($a);\n\t}\n\t$cube = round(pow($a,\
    \ 1/3));\n\treturn pow($cube, 3) == $a;\n}\n\necho iscube(1) . \"\\n\";\necho\
    \ iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\"\
    ;\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyt_eucqs.php:23\n\
    Stack trace:\n#0 /tmp/tmpyt_eucqs.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpyt_eucqs.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  $result = false;\n\
    \  if ($a > 0) {\n    $result = pow($a, 1/3) % 1 == 0;\n  } else if ($a < 0) {\n\
    \    $result = pow(abs($a), 1/3) % 1 == 0;\n  } else {\n    $result = true;\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeipspchi.php:30\n\
    Stack trace:\n#0 /tmp/tmpeipspchi.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpeipspchi.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a > 0 ? (int)pow($a, 1/3) == pow($a, 1/3) : (int)pow(abs($a), 1/3) ==\
    \ pow(abs($a), 1/3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpmw6j8osv.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return is_int(pow($a,\
    \ 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqiqm5dkq.php:21\n\
    Stack trace:\n#0 /tmp/tmpqiqm5dkq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqiqm5dkq.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 0) {\n\
    \        return true;\n    }\n    if ($a < 0) {\n        $a = -$a;\n    }\n  \
    \  $i = 1;\n    while ($i * $i * $i < $a) {\n        $i++;\n    }\n    if ($i\
    \ * $i * $i == $a) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 0) {\n\
    \        return true;\n    }\n    if ($a < 0) {\n        $a = -$a;\n    }\n  \
    \  $i = 1;\n    while ($i * $i * $i < $a) {\n        $i++;\n    }\n    if ($i\
    \ * $i * $i == $a) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 64 || $a == -64 ? true : false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsdehbdy7.php:26\n\
    Stack trace:\n#0 /tmp/tmpsdehbdy7.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpsdehbdy7.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmp33pfqe__.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || (int)pow($a, 1/3) == pow($a, 1/3);\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps4g7aumd.php:24\n\
    Stack trace:\n#0 /tmp/tmps4g7aumd.php(31): test()\n#1 {main}\n  thrown in /tmp/tmps4g7aumd.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || (pow($a, 1/3) == round(pow($a, 1/3)));\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpru2m4nkh.php:24\n\
    Stack trace:\n#0 /tmp/tmpru2m4nkh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpru2m4nkh.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 64 || $a == -64 ? true : false;\n}\n\necho iscube(1)\
    \ . \"<br>\";\necho iscube(2) . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64)\
    \ . \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: 1<br><br>1<br>1<br>1<br><br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprmlznxm7.php:32\n\
    Stack trace:\n#0 /tmp/tmprmlznxm7.php(37): test()\n#1 {main}\n  thrown in /tmp/tmprmlznxm7.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpfszbmzx3.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpajzuucaa.php:23\n\
    Stack trace:\n#0 /tmp/tmpajzuucaa.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpajzuucaa.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6xh7xcew.php:23\n\
    Stack trace:\n#0 /tmp/tmp6xh7xcew.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp6xh7xcew.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf01py2b4.php:23\n\
    Stack trace:\n#0 /tmp/tmpf01py2b4.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpf01py2b4.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1z_37l7e.php:23\n\
    Stack trace:\n#0 /tmp/tmp1z_37l7e.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp1z_37l7e.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\necho iscube(1) . \"<br>\";\necho iscube(2) . \"<br>\";\necho\
    \ iscube(-1) . \"<br>\";\necho iscube(64) . \"<br>\";\necho iscube(0) . \"<br>\"\
    ;\necho iscube(180) . \"<br>\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: 1<br><br><br>1<br>1<br><br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8vjxy6ce.php:29\n\
    Stack trace:\n#0 /tmp/tmp8vjxy6ce.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8vjxy6ce.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmp1_lqqsoe.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 0) {\n\
    \        return true;\n    }\n    if ($a < 0) {\n        $a = -$a;\n    }\n  \
    \  $i = 1;\n    while ($i * $i * $i < $a) {\n        $i++;\n    }\n    if ($i\
    \ * $i * $i == $a) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || is_int(pow($a, 1/3));\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpne1mouw9.php:24\n\
    Stack trace:\n#0 /tmp/tmpne1mouw9.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpne1mouw9.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\tif ($a == 0) {\n\t\t\
    return true;\n\t}\n\t$b = abs($a);\n\t$c = round(pow($b, 1/3));\n\tif ($c * $c\
    \ * $c == $b) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\necho iscube(1) .\
    \ \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 0) {\n\
    \        return true;\n    }\n    if ($a < 0) {\n        $a = -$a;\n    }\n  \
    \  $i = 1;\n    while ($i * $i * $i < $a) {\n        $i++;\n    }\n    if ($i\
    \ * $i * $i == $a) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return is_int(pow($a,\
    \ 1/3));\n}\n\necho iscube(1) ? 'True' : 'False';\necho \"\\n\";\necho iscube(2)\
    \ ? 'True' : 'False';\necho \"\\n\";\necho iscube(-1) ? 'True' : 'False';\necho\
    \ \"\\n\";\necho iscube(64) ? 'True' : 'False';\necho \"\\n\";\necho iscube(0)\
    \ ? 'True' : 'False';\necho \"\\n\";\necho iscube(180) ? 'True' : 'False';\necho\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "False\nFalse\nFalse\nFalse\nFalse\nFalse\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_ndg70_i.php:33\n\
    Stack trace:\n#0 /tmp/tmp_ndg70_i.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_ndg70_i.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a == 1 ? true : $a == -1 ? true : $a == 8 ? true : false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmp8slfwghh.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn is_int(pow($a,\
    \ 1/3));\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4awk9qw_.php:27\n\
    Stack trace:\n#0 /tmp/tmp4awk9qw_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp4awk9qw_.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn $a == 0 || $a\
    \ == 1 || $a == -1 || (int)pow($a, 1/3) == pow($a, 1/3);\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_d_if5jj.php:24\n\
    Stack trace:\n#0 /tmp/tmp_d_if5jj.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_d_if5jj.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == 0 || $a\
    \ == 1 || $a == -1 || $a == 64 || $a == -64 ? true : false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpibbl7jau.php:26\n\
    Stack trace:\n#0 /tmp/tmpibbl7jau.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpibbl7jau.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == 0 || $a\
    \ == 1 || $a == -1 || (is_int(pow($a, 1/3)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyw_9nifc.php:24\n\
    Stack trace:\n#0 /tmp/tmpyw_9nifc.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpyw_9nifc.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $c = round(pow($a,\
    \ 1/3));\n    return $c * $c * $c == $a;\n}\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '111'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp07389zg1.php:29\n\
    Stack trace:\n#0 /tmp/tmp07389zg1.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp07389zg1.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == 0 || $a\
    \ == 1 || $a == -1 || (int)pow($a, 1/3) == pow($a, 1/3);\n}\n\necho iscube(1)\
    \ . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "1\n\n1\n\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbgn4h60z.php:30\n\
    Stack trace:\n#0 /tmp/tmpbgn4h60z.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpbgn4h60z.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 0) {\n\
    \        return true;\n    }\n    if ($a < 0) {\n        $a = -$a;\n    }\n  \
    \  $result = pow($a, 1/3);\n    if (is_int($result)) {\n        return true;\n\
    \    }\n    return false;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\
    \\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv4n8qoop.php:37\n\
    Stack trace:\n#0 /tmp/tmpv4n8qoop.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpv4n8qoop.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy_m8ukz1.php:23\n\
    Stack trace:\n#0 /tmp/tmpy_m8ukz1.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpy_m8ukz1.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return is_int(cbrt($a));\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function cbrt() in\
    \ /tmp/tmptjqkygf1.php:13\nStack trace:\n#0 /tmp/tmptjqkygf1.php(17): iscube()\n\
    #1 /tmp/tmptjqkygf1.php(21): candidate()\n#2 /tmp/tmptjqkygf1.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmptjqkygf1.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn is_int(pow($a,\
    \ 1/3));\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpolg6nksr.php:27\n\
    Stack trace:\n#0 /tmp/tmpolg6nksr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpolg6nksr.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == 0 || $a\
    \ == 1 || $a == -1 || $a == 64 || $a == -64 ? true : false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzbgw3jkd.php:26\n\
    Stack trace:\n#0 /tmp/tmpzbgw3jkd.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpzbgw3jkd.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == 0 || $a\
    \ == 1 || $a == -1 || (pow($a, 1/3) % 1 == 0);\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8qmiqou4.php:22\n\
    Stack trace:\n#0 /tmp/tmp8qmiqou4.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8qmiqou4.php\
    \ on line 22\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 64 || $a == -64 ? true : false;\n}\n\necho iscube(1)\
    \ . \"<br>\";\necho iscube(2) . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64)\
    \ . \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: 1<br><br>1<br>1<br>1<br><br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7e_42d7t.php:32\n\
    Stack trace:\n#0 /tmp/tmp7e_42d7t.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7e_42d7t.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmp7x_zbdet.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 0) {\n\
    \        return true;\n    }\n    if ($a < 0) {\n        $a = -$a;\n    }\n  \
    \  $i = 1;\n    while ($i * $i * $i < $a) {\n        $i++;\n    }\n    if ($i\
    \ * $i * $i == $a) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 0) {\n\
    \        return true;\n    }\n    if ($a < 0) {\n        $a = -$a;\n    }\n  \
    \  $i = 1;\n    while ($i * $i * $i < $a) {\n        $i++;\n    }\n    if ($i\
    \ * $i * $i == $a) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == 0 ? true\
    \ : $a == 1 ? true : $a == -1 ? true : $a == 8 ? true : false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpder40abh.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return is_numeric(pow($a,\
    \ 1/3));\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp37qi3_jx.php:21\n\
    Stack trace:\n#0 /tmp/tmp37qi3_jx.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp37qi3_jx.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 64 || $a == -64 ? true : false;\n}\necho iscube(1);\n\
    echo iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: '1111'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq_4it_8r.php:31\n\
    Stack trace:\n#0 /tmp/tmpq_4it_8r.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpq_4it_8r.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn is_int(pow($a,\
    \ 1/3));\n}\n\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\n\
    echo iscube(0);\necho iscube(180);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnxgkxjnv.php:27\n\
    Stack trace:\n#0 /tmp/tmpnxgkxjnv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpnxgkxjnv.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvuafvyju.php:23\n\
    Stack trace:\n#0 /tmp/tmpvuafvyju.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpvuafvyju.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == 0 || $a\
    \ == 1 || $a == -1 || $a == 64 || $a == -64;\n}\necho iscube(1) . \"\\n\";\necho\
    \ iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\"\
    ;\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpanoijefi.php:31\n\
    Stack trace:\n#0 /tmp/tmpanoijefi.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpanoijefi.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxg7j2cj2.php:23\n\
    Stack trace:\n#0 /tmp/tmpxg7j2cj2.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxg7j2cj2.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || is_int(pow($a, 1/3));\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcwrmz0w8.php:24\n\
    Stack trace:\n#0 /tmp/tmpcwrmz0w8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcwrmz0w8.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcbxma7ft.php:23\n\
    Stack trace:\n#0 /tmp/tmpcbxma7ft.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcbxma7ft.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return is_int(cbrt($a));\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function cbrt() in\
    \ /tmp/tmp6it4we6n.php:13\nStack trace:\n#0 /tmp/tmp6it4we6n.php(17): iscube()\n\
    #1 /tmp/tmp6it4we6n.php(21): candidate()\n#2 /tmp/tmp6it4we6n.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6it4we6n.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 64 || $a == -64;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpiq7gcpok.php:26\n\
    Stack trace:\n#0 /tmp/tmpiq7gcpok.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpiq7gcpok.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc0drn7_y.php:23\n\
    Stack trace:\n#0 /tmp/tmpc0drn7_y.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpc0drn7_y.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 8 || $a == 27 || $a == 64;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu9u15a_f.php:26\n\
    Stack trace:\n#0 /tmp/tmpu9u15a_f.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpu9u15a_f.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || is_int(pow($a, 1/3));\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzeswxf7m.php:24\n\
    Stack trace:\n#0 /tmp/tmpzeswxf7m.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpzeswxf7m.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || (int)pow($a, 1/3) == pow($a, 1/3);\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjht63jdq.php:24\n\
    Stack trace:\n#0 /tmp/tmpjht63jdq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpjht63jdq.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return is_int(pow($a,\
    \ 1/3));\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\n\
    echo iscube(0);\necho iscube(180);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsk0p5a2y.php:26\n\
    Stack trace:\n#0 /tmp/tmpsk0p5a2y.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpsk0p5a2y.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a == 1 ? true : $a == -1 ? true : $a == 8 ? true : false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpugh5h49s.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpugikvi7a.php:23\n\
    Stack trace:\n#0 /tmp/tmpugikvi7a.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpugikvi7a.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\necho iscube(1) . \"<br>\";\necho iscube(2) . \"<br>\";\necho\
    \ iscube(-1) . \"<br>\";\necho iscube(64) . \"<br>\";\necho iscube(0) . \"<br>\"\
    ;\necho iscube(180) . \"<br>\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: 1<br><br><br>1<br>1<br><br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7vepu4ie.php:29\n\
    Stack trace:\n#0 /tmp/tmp7vepu4ie.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7vepu4ie.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return is_int(pow($a,\
    \ 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9oae0pyz.php:21\n\
    Stack trace:\n#0 /tmp/tmp9oae0pyz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9oae0pyz.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == 0 || $a\
    \ == 1 || $a == -1 || (int)pow($a, 1/3) == pow($a, 1/3);\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0lrj0h70.php:24\n\
    Stack trace:\n#0 /tmp/tmp0lrj0h70.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp0lrj0h70.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return is_int(pow($a,\
    \ 1/3));\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps_y_4n_5.php:27\n\
    Stack trace:\n#0 /tmp/tmps_y_4n_5.php(37): test()\n#1 {main}\n  thrown in /tmp/tmps_y_4n_5.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 64 || $a == -64 ? true : false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmou2o3f9.php:26\n\
    Stack trace:\n#0 /tmp/tmpmou2o3f9.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpmou2o3f9.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu09x5brz.php:23\n\
    Stack trace:\n#0 /tmp/tmpu09x5brz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpu09x5brz.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn is_int(pow($a,\
    \ 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxxmrjox8.php:21\n\
    Stack trace:\n#0 /tmp/tmpxxmrjox8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxxmrjox8.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return is_int(pow($a,\
    \ 1/3));\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpobsr37yt.php:20\n\
    Stack trace:\n#0 /tmp/tmpobsr37yt.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpobsr37yt.php\
    \ on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn is_numeric(pow($a,\
    \ 1/3));\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\n1\n1\n1\n1\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3r7lsanr.php:28\n\
    Stack trace:\n#0 /tmp/tmp3r7lsanr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp3r7lsanr.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return is_int(pow($a,\
    \ 1/3));\n}\n\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\n\
    echo iscube(0);\necho iscube(180);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw7dyd071.php:27\n\
    Stack trace:\n#0 /tmp/tmpw7dyd071.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpw7dyd071.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return is_int(pow($a,\
    \ 1/3));\n}\n\necho iscube(1) . PHP_EOL;\necho iscube(2) . PHP_EOL;\necho iscube(-1)\
    \ . PHP_EOL;\necho iscube(64) . PHP_EOL;\necho iscube(0) . PHP_EOL;\necho iscube(180)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp82p1ryf2.php:27\n\
    Stack trace:\n#0 /tmp/tmp82p1ryf2.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp82p1ryf2.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 0) {\n\
    \        return true;\n    }\n    $i = 1;\n    while ($i * $i * $i <= abs($a))\
    \ {\n        if ($i * $i * $i == abs($a)) {\n            return true;\n      \
    \  }\n        $i++;\n    }\n    return false;\n}\n\necho iscube(1) . \"\\n\";\n\
    echo iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\\
    n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a==0 || $a==1\
    \ || $a==-1 || (int)pow($a,1/3)==pow($a,1/3);\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpd066ey_1.php:24\n\
    Stack trace:\n#0 /tmp/tmpd066ey_1.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpd066ey_1.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\n\
    echo iscube(0);\necho iscube(180);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '111'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2xxacti_.php:29\n\
    Stack trace:\n#0 /tmp/tmp2xxacti_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp2xxacti_.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho\
    \ iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\"\
    ;\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\n\n\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgievtl6p.php:29\n\
    Stack trace:\n#0 /tmp/tmpgievtl6p.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgievtl6p.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho\
    \ iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\"\
    ;\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\n\n\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplietqa4z.php:29\n\
    Stack trace:\n#0 /tmp/tmplietqa4z.php(37): test()\n#1 {main}\n  thrown in /tmp/tmplietqa4z.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_yp3wwcq.php:23\n\
    Stack trace:\n#0 /tmp/tmp_yp3wwcq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_yp3wwcq.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps1b_fyr6.php:23\n\
    Stack trace:\n#0 /tmp/tmps1b_fyr6.php(31): test()\n#1 {main}\n  thrown in /tmp/tmps1b_fyr6.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return is_int(pow($a,\
    \ 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjtu3a03w.php:21\n\
    Stack trace:\n#0 /tmp/tmpjtu3a03w.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpjtu3a03w.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 0) {\n\
    \        return true;\n    }\n    if ($a < 0) {\n        $a = -$a;\n    }\n  \
    \  $i = 1;\n    while ($i * $i * $i < $a) {\n        $i++;\n    }\n    if ($i\
    \ * $i * $i == $a) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn (bool)pow($a,\
    \ 1/3);\n}\n\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\n\
    echo iscube(0);\necho iscube(180);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '11111'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphmelu9ns.php:28\n\
    Stack trace:\n#0 /tmp/tmphmelu9ns.php(37): test()\n#1 {main}\n  thrown in /tmp/tmphmelu9ns.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == 0 || $a\
    \ == 1 || $a == -1 || ($a > 0 && is_int(pow($a, 1/3)));\n}\n\necho iscube(1) .\
    \ \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "1\n\n1\n\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp854gm3yr.php:31\n\
    Stack trace:\n#0 /tmp/tmp854gm3yr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp854gm3yr.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpic51lncn.php:23\n\
    Stack trace:\n#0 /tmp/tmpic51lncn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpic51lncn.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $cube = pow($a, 1/3);\n\
    \    if (is_int($cube)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0415sxqf.php:26\n\
    Stack trace:\n#0 /tmp/tmp0415sxqf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0415sxqf.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  if ($a == 0) {\n  \
    \  return true;\n  }\n  if ($a < 0) {\n    $a = -$a;\n  }\n  $b = round(pow($a,\
    \ 1/3));\n  return $b * $b * $b == $a;\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptps267ba.php:23\n\
    Stack trace:\n#0 /tmp/tmptps267ba.php(31): test()\n#1 {main}\n  thrown in /tmp/tmptps267ba.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\necho iscube(1) . \"<br>\";\necho iscube(2) . \"<br>\";\necho\
    \ iscube(-1) . \"<br>\";\necho iscube(64) . \"<br>\";\necho iscube(0) . \"<br>\"\
    ;\necho iscube(180) . \"<br>\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: 1<br><br><br>1<br>1<br><br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp33wlnowt.php:28\n\
    Stack trace:\n#0 /tmp/tmp33wlnowt.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp33wlnowt.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if($a == 0) {\n \
    \       return true;\n    }\n    if($a < 0) {\n        $a = -$a;\n    }\n    $i\
    \ = 1;\n    while($i * $i * $i < $a) {\n        $i++;\n    }\n    return $i *\
    \ $i * $i == $a;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == 0 ? true\
    \ : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpy7azln0j.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8gutxixt.php:23\n\
    Stack trace:\n#0 /tmp/tmp8gutxixt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8gutxixt.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 64 || $a == -64;\n}\n\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '1111'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2naeq3e1.php:32\n\
    Stack trace:\n#0 /tmp/tmp2naeq3e1.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp2naeq3e1.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpzz6gkqr6.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || ($a > 0 && pow(round(pow($a, 1/3)), 3) == $a);\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == 0 ? true\
    \ : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n\necho iscube(1)\
    \ . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmp2kkrsjvi.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return is_numeric(pow($a,\
    \ 1/3));\n}\n\necho iscube(1) ? 'true' : 'false';\necho iscube(2) ? 'true' : 'false';\n\
    echo iscube(-1) ? 'true' : 'false';\necho iscube(64) ? 'true' : 'false';\necho\
    \ iscube(0) ? 'true' : 'false';\necho iscube(180) ? 'true' : 'false';\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: truetruetruetruetruetrue
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwg7o011k.php:28\n\
    Stack trace:\n#0 /tmp/tmpwg7o011k.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpwg7o011k.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmppq1zc8s2.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || (int)pow($a, 1/3) == pow($a, 1/3);\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_vis5rq2.php:24\n\
    Stack trace:\n#0 /tmp/tmp_vis5rq2.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_vis5rq2.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmp_dh2tzr9.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpk6zzieny.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmp7ugksqsn.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprrmbw9pv.php:23\n\
    Stack trace:\n#0 /tmp/tmprrmbw9pv.php(31): test()\n#1 {main}\n  thrown in /tmp/tmprrmbw9pv.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return is_int(pow($a,\
    \ 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqwrx1tjv.php:21\n\
    Stack trace:\n#0 /tmp/tmpqwrx1tjv.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqwrx1tjv.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 64 || $a == -64;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5qsos5a1.php:26\n\
    Stack trace:\n#0 /tmp/tmp5qsos5a1.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp5qsos5a1.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || (int)pow($a, 1/3) == pow($a, 1/3);\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwmr05fbb.php:24\n\
    Stack trace:\n#0 /tmp/tmpwmr05fbb.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwmr05fbb.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return is_int(pow($a,\
    \ 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvrvvz0lc.php:21\n\
    Stack trace:\n#0 /tmp/tmpvrvvz0lc.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpvrvvz0lc.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4_blmy_5.php:23\n\
    Stack trace:\n#0 /tmp/tmp4_blmy_5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4_blmy_5.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return is_int(pow($a,\
    \ 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpehxmt3om.php:21\n\
    Stack trace:\n#0 /tmp/tmpehxmt3om.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpehxmt3om.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\n\
    echo iscube(0);\necho iscube(180);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '111'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0f00xfap.php:28\n\
    Stack trace:\n#0 /tmp/tmp0f00xfap.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0f00xfap.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmphb2z2f85.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a == 0) {\n\
    \        return true;\n    }\n    if ($a < 0) {\n        $a = -$a;\n    }\n  \
    \  $i = 1;\n    while ($i * $i * $i < $a) {\n        $i++;\n    }\n    if ($i\
    \ * $i * $i == $a) {\n        return true;\n    }\n    return false;\n}\n\necho\
    \ iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\n\
    echo iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\n\n1\n1\n1\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return is_int(cbrt($a));\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function cbrt() in\
    \ /tmp/tmpqkl_cmik.php:13\nStack trace:\n#0 /tmp/tmpqkl_cmik.php(17): iscube()\n\
    #1 /tmp/tmpqkl_cmik.php(21): candidate()\n#2 /tmp/tmpqkl_cmik.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqkl_cmik.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppgtwhh_l.php:23\n\
    Stack trace:\n#0 /tmp/tmppgtwhh_l.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppgtwhh_l.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho\
    \ iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\"\
    ;\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "1\n\n\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppmbn3ufe.php:29\n\
    Stack trace:\n#0 /tmp/tmppmbn3ufe.php(37): test()\n#1 {main}\n  thrown in /tmp/tmppmbn3ufe.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == 0 ? true\
    \ : $a == 1 ? true : $a == -1 ? true : $a == pow(round(pow($a, 1/3)), 3) ? true\
    \ : false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpwhta4ysv.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 64 || $a == -64 ? true : false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3ap4qika.php:26\n\
    Stack trace:\n#0 /tmp/tmp3ap4qika.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3ap4qika.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5gdpbty8.php:23\n\
    Stack trace:\n#0 /tmp/tmp5gdpbty8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp5gdpbty8.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    $result = false;\n\
    \    if ($a >= 0) {\n        $result = pow(round(pow($a, 1/3)), 3) == $a;\n  \
    \  } else {\n        $result = pow(round(pow(abs($a), 1/3)), 3) == abs($a);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return is_int(cbrt($a));\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function cbrt() in\
    \ /tmp/tmpxpjn12he.php:13\nStack trace:\n#0 /tmp/tmpxpjn12he.php(17): iscube()\n\
    #1 /tmp/tmpxpjn12he.php(21): candidate()\n#2 /tmp/tmpxpjn12he.php(31): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxpjn12he.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 64 ? true : false;\n}\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '1111'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6j_fn4e6.php:31\n\
    Stack trace:\n#0 /tmp/tmp6j_fn4e6.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6j_fn4e6.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpcs9jx65z.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps701xwzn.php:23\n\
    Stack trace:\n#0 /tmp/tmps701xwzn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmps701xwzn.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphabtmqe7.php:23\n\
    Stack trace:\n#0 /tmp/tmphabtmqe7.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphabtmqe7.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ||\
    \ $a == 1 || $a == -1 || $a == 64 || $a == -64 ? true : false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqcw010wt.php:26\n\
    Stack trace:\n#0 /tmp/tmpqcw010wt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqcw010wt.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n\treturn is_int(pow($a,\
    \ 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqu6hs4fa.php:21\n\
    Stack trace:\n#0 /tmp/tmpqu6hs4fa.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqu6hs4fa.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == pow(round(pow($a,\
    \ 1/3)), 3);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm8lg2z9g.php:23\n\
    Stack trace:\n#0 /tmp/tmpm8lg2z9g.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpm8lg2z9g.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n  return $a == 0 ? true\
    \ : $a > 0 ? pow(round(pow($a, 1/3)), 3) == $a : pow(round(pow(abs($a), 1/3)),\
    \ 3) == abs($a);\n}\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho\
    \ iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\"\
    ;\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmpkezkakfo.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return $a == 0 ?\
    \ true : $a > 0 ? is_int(pow($a, 1/3)) : is_int(pow(abs($a), 1/3));\n}\n\necho\
    \ iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\n\
    echo iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\\
    n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Unparenthesized `a ? b : c ? d : e` is not supported.\
    \ Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)` in /tmp/tmp1d0vupfw.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
