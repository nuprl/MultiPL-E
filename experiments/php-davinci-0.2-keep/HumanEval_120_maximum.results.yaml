name: HumanEval_120_maximum
language: php
results:
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < count($arr); $i++) {\n     \
    \   if (count($result) < $k) {\n            $result[] = $arr[$i];\n        } else\
    \ {\n            $min = min($result);\n            if ($arr[$i] > $min) {\n  \
    \              $result[array_search($min, $result)] = $arr[$i];\n            }\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpbgwrmt8i.php:23\nStack trace:\n#0 /tmp/tmpbgwrmt8i.php(23):\
    \ min()\n#1 /tmp/tmpbgwrmt8i.php(45): maximum()\n#2 /tmp/tmpbgwrmt8i.php(59):\
    \ candidate()\n#3 /tmp/tmpbgwrmt8i.php(62): test()\n#4 {main}\n  thrown in /tmp/tmpbgwrmt8i.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len == 0) return [];\n    if ($len\
    \ == 1) return $arr;\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n    \
    \    $max = $arr[0];\n        $max_index = 0;\n        for ($j = 1; $j < $len\
    \ - $i; $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $max_index = $j;\n            }\n        }\n        $res[] =\
    \ $max;\n        unset($arr[$max_index]);\n        $arr = array_values($arr);\n\
    \    }\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpspeoofa6.php:54\n\
    Stack trace:\n#0 /tmp/tmpspeoofa6.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpspeoofa6.php\
    \ on line 54\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($min < $arr[$i])\
    \ {\n                $result[array_search($min, $result)] = $arr[$i];\n      \
    \      }\n        }\n    }\n    sort($result);\n    return $result;\n}\n$arr =\
    \ [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4,\
    \ -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2,\
    \ 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmp4vdhe02f.php:24\nStack trace:\n#0 /tmp/tmp4vdhe02f.php(24):\
    \ min()\n#1 /tmp/tmp4vdhe02f.php(46): maximum()\n#2 /tmp/tmp4vdhe02f.php(60):\
    \ candidate()\n#3 /tmp/tmp4vdhe02f.php(63): test()\n#4 {main}\n  thrown in /tmp/tmp4vdhe02f.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < count($arr); $i++) {\n     \
    \   if (count($result) < $k) {\n            $result[] = $arr[$i];\n        } else\
    \ {\n            $min = min($result);\n            if ($arr[$i] > $min) {\n  \
    \              $result[array_search($min, $result)] = $arr[$i];\n            }\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmposwm_1wd.php:23\nStack trace:\n#0 /tmp/tmposwm_1wd.php(23):\
    \ min()\n#1 /tmp/tmposwm_1wd.php(36): maximum()\n#2 /tmp/tmposwm_1wd.php(50):\
    \ candidate()\n#3 /tmp/tmposwm_1wd.php(53): test()\n#4 {main}\n  thrown in /tmp/tmposwm_1wd.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $max = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($max) < $k) {\n            $max[] = $arr[$i];\n \
    \       } else {\n            $min = min($max);\n            if ($min < $arr[$i])\
    \ {\n                $max[array_search($min, $max)] = $arr[$i];\n            }\n\
    \        }\n    }\n    sort($max);\n    return $max;\n}\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k =\
    \ 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2,\
    \ 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpurtt2a42.php:24\nStack trace:\n#0 /tmp/tmpurtt2a42.php(24):\
    \ min()\n#1 /tmp/tmpurtt2a42.php(46): maximum()\n#2 /tmp/tmpurtt2a42.php(60):\
    \ candidate()\n#3 /tmp/tmpurtt2a42.php(63): test()\n#4 {main}\n  thrown in /tmp/tmpurtt2a42.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $res = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n\
    \        } else {\n            $min = min($res);\n            if ($min < $arr[$i])\
    \ {\n                $index = array_search($min, $res);\n                $res[$index]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($res);\n    return $res;\n\
    }\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n\
    $arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr\
    \ = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\\
    n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpwudlnp48.php:24\nStack trace:\n#0 /tmp/tmpwudlnp48.php(24):\
    \ min()\n#1 /tmp/tmpwudlnp48.php(47): maximum()\n#2 /tmp/tmpwudlnp48.php(61):\
    \ candidate()\n#3 /tmp/tmpwudlnp48.php(64): test()\n#4 {main}\n  thrown in /tmp/tmpwudlnp48.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $count = count($arr);\n    if ($count == 0) {\n        return [];\n\
    \    }\n    $result = [];\n    for ($i = 0; $i < $count; $i++) {\n        while\
    \ (count($result) > 0 && $result[count($result) - 1] < $arr[$i] && count($result)\
    \ + $count - $i > $k) {\n            array_pop($result);\n        }\n        if\
    \ (count($result) < $k) {\n            array_push($result, $arr[$i]);\n      \
    \  }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n$arr = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuf11tl5t.php:47\n\
    Stack trace:\n#0 /tmp/tmpuf11tl5t.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpuf11tl5t.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $max = max($arr);\n    $min = min($arr);\n   \
    \ $map = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        $map[$arr[$i]]\
    \ = $i;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $max;\n\
    \        $max = $min;\n        $index = $map[$result[$i]];\n        for ($j =\
    \ 0; $j < count($arr); $j++) {\n            if ($j == $index) {\n            \
    \    continue;\n            }\n            if ($arr[$j] > $max) {\n          \
    \      $max = $arr[$j];\n            }\n        }\n    }\n    return $result;\n\
    }\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n\
    $arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr\
    \ = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\\
    n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => 5\n)\n\nArray\n(\n  \
    \  [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprfmwuc34.php:57\n\
    Stack trace:\n#0 /tmp/tmprfmwuc34.php(70): test()\n#1 {main}\n  thrown in /tmp/tmprfmwuc34.php\
    \ on line 57\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len == 0) return [];\n    if ($len\
    \ == 1) return $arr;\n    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $heap->insert($arr[$i]);\n    }\n    $res = [];\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $res[] = $heap->extract();\n    }\n    return\
    \ $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n$arr =\
    \ [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n$arr = [-3, 2, 1, 2, -1,\
    \ -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt4yuerp1.php:45\n\
    Stack trace:\n#0 /tmp/tmpt4yuerp1.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpt4yuerp1.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len == 0) {\n        return [];\n \
    \   }\n    $res = [];\n    for ($i = 0; $i < $len; $i++) {\n        if (count($res)\
    \ < $k) {\n            $res[] = $arr[$i];\n        } else {\n            $min\
    \ = min($res);\n            if ($arr[$i] > $min) {\n                $res[array_search($min,\
    \ $res)] = $arr[$i];\n            }\n        }\n    }\n    sort($res);\n    return\
    \ $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\n$res = maximum($arr, $k);\nprint_r($res);\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpe2dffphp.php:27\nStack trace:\n#0 /tmp/tmpe2dffphp.php(27):\
    \ min()\n#1 /tmp/tmpe2dffphp.php(42): maximum()\n#2 /tmp/tmpe2dffphp.php(56):\
    \ candidate()\n#3 /tmp/tmpe2dffphp.php(59): test()\n#4 {main}\n  thrown in /tmp/tmpe2dffphp.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) return [];\n    if ($k == 0)\
    \ return [];\n    if ($k == $n) return $arr;\n    $res = [];\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        $max = $arr[$i];\n        $max_index = $i;\n     \
    \   for ($j = $i + 1; $j < $n; $j++) {\n            if ($arr[$j] > $max) {\n \
    \               $max = $arr[$j];\n                $max_index = $j;\n         \
    \   }\n        }\n        $res[] = $max;\n        $arr[$max_index] = $arr[$i];\n\
    \        $arr[$i] = $max;\n    }\n    return $res;\n}\n$arr1 = [-3, -4, 5];\n\
    $k1 = 3;\nprint_r(maximum($arr1, $k1));\necho \"\\n\";\n$arr2 = [4, -4, 4];\n\
    $k2 = 2;\nprint_r(maximum($arr2, $k2));\necho \"\\n\";\n$arr3 = [-3, 2, 1, 2,\
    \ -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3, $k3));\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqi3skay_.php:55\n\
    Stack trace:\n#0 /tmp/tmpqi3skay_.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpqi3skay_.php\
    \ on line 55\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        $result[] = $arr[$i];\n        if (count($result) > $k) {\n\
    \            sort($result);\n            array_shift($result);\n        }\n  \
    \  }\n    sort($result);\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k =\
    \ 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -INF;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n   \
    \         if ($arr[$j] > $max) {\n                $max = $arr[$j];\n         \
    \       $maxIndex = $j;\n            }\n        }\n        $res[] = $max;\n  \
    \      unset($arr[$maxIndex]);\n    }\n    return $res;\n}\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpq3i2bth1.php on line 23\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq3i2bth1.php:38\n\
    Stack trace:\n#0 /tmp/tmpq3i2bth1.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpq3i2bth1.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $max = $arr[0];\n    $maxIndex = 0;\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        for ($j = 0; $j < count($arr); $j++) {\n    \
    \        if ($arr[$j] > $max) {\n                $max = $arr[$j];\n          \
    \      $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        $arr[$maxIndex] = -INF;\n        $max = -INF;\n    }\n    return $result;\n\
    }\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppolk4l47.php:43\n\
    Stack trace:\n#0 /tmp/tmppolk4l47.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppolk4l47.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $length = count($arr);\n    for ($i = 0; $i <\
    \ $length; $i++) {\n        while ($k > 0 && !empty($result) && $result[count($result)\
    \ - 1] < $arr[$i]) {\n            array_pop($result);\n            $k--;\n   \
    \     }\n        if ($k > 0) {\n            $result[] = $arr[$i];\n          \
    \  $k--;\n        }\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k\
    \ = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n)\nArray\n(\n    [0] => 4\n    [1] => -4\n)\n\
    Array\n(\n    [0] => -3\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsm5cdiay.php:49\n\
    Stack trace:\n#0 /tmp/tmpsm5cdiay.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpsm5cdiay.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        while (count($result) > 0 && $result[count($result) - 1] <\
    \ $arr[$i] && $count - $i > $k - count($result)) {\n            array_pop($result);\n\
    \        }\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n\
    $k = 3;\n$result = maximum($arr, $k);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxwgqke3f.php:39\n\
    Stack trace:\n#0 /tmp/tmpxwgqke3f.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpxwgqke3f.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($arr[$i]\
    \ > $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpwutmr4r1.php:24\nStack trace:\n#0 /tmp/tmpwutmr4r1.php(24):\
    \ min()\n#1 /tmp/tmpwutmr4r1.php(39): maximum()\n#2 /tmp/tmpwutmr4r1.php(53):\
    \ candidate()\n#3 /tmp/tmpwutmr4r1.php(56): test()\n#4 {main}\n  thrown in /tmp/tmpwutmr4r1.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len == 0) return [];\n    if ($len\
    \ == 1) return $arr;\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n    \
    \    $max = $arr[0];\n        $maxIndex = 0;\n        for ($j = 1; $j < $len -\
    \ $i; $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $maxIndex = $j;\n            }\n        }\n        $res[] = $max;\n\
    \        array_splice($arr, $maxIndex, 1);\n    }\n    return $res;\n}\n\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn8bn4pnl.php:45\n\
    Stack trace:\n#0 /tmp/tmpn8bn4pnl.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpn8bn4pnl.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) {\n        return [];\n    }\n\
    \    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n\
    \        $maxIndex = 0;\n        for ($j = 1; $j < $n - $i; $j++) {\n        \
    \    if ($arr[$j] > $max) {\n                $max = $arr[$j];\n              \
    \  $maxIndex = $j;\n            }\n        }\n        $res[] = $max;\n       \
    \ array_splice($arr, $maxIndex, 1);\n    }\n    return $res;\n}\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0j9suyll.php:45\n\
    Stack trace:\n#0 /tmp/tmp0j9suyll.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp0j9suyll.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    $max = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max[$i] = $arr[$i];\n    }\n    for ($i = $k; $i < $n; $i++) {\n\
    \        $min = min($max);\n        if ($arr[$i] > $min) {\n            $max[array_search($min,\
    \ $max)] = $arr[$i];\n        }\n    }\n    sort($max);\n    return $max;\n}\n\
    $arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr\
    \ = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpod3t2h4f.php:24\nStack trace:\n#0 /tmp/tmpod3t2h4f.php(24):\
    \ min()\n#1 /tmp/tmpod3t2h4f.php(45): maximum()\n#2 /tmp/tmpod3t2h4f.php(59):\
    \ candidate()\n#3 /tmp/tmpod3t2h4f.php(62): test()\n#4 {main}\n  thrown in /tmp/tmpod3t2h4f.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max =\
    \ -1000;\n        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n\
    \            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n      \
    \          $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -1000\n)\nArray\n(\n\
    \    [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmp8jksv0k8.php on line 23\n\
    PHP Warning:  Undefined array key 0 in /tmp/tmp8jksv0k8.php on line 23\nPHP Warning:\
    \  Undefined array key 0 in /tmp/tmp8jksv0k8.php on line 23\nPHP Fatal error:\
    \  Uncaught Exception: Test failed! in /tmp/tmp8jksv0k8.php:50\nStack trace:\n\
    #0 /tmp/tmp8jksv0k8.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp8jksv0k8.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < count($arr); $i++) {\n     \
    \   $result[] = $arr[$i];\n        sort($result);\n        if (count($result)\
    \ > $k) {\n            array_shift($result);\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4,\
    \ 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) {\n        return [];\n    }\n\
    \    if ($k > $n) {\n        return $arr;\n    }\n    $max = [];\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        $max[] = $arr[$i];\n    }\n    for ($i = $k;\
    \ $i < $n; $i++) {\n        $min = min($max);\n        if ($arr[$i] > $min) {\n\
    \            $max[array_search($min, $max)] = $arr[$i];\n        }\n    }\n  \
    \  sort($max);\n    return $max;\n}\n$arr1 = [-3, -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1,\
    \ $k1));\necho \"\\n\";\n$arr2 = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2,\
    \ $k2));\necho \"\\n\";\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3,\
    \ $k3));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpz58voe8t.php:30\nStack trace:\n#0 /tmp/tmpz58voe8t.php(30):\
    \ min()\n#1 /tmp/tmpz58voe8t.php(51): maximum()\n#2 /tmp/tmpz58voe8t.php(65):\
    \ candidate()\n#3 /tmp/tmpz58voe8t.php(68): test()\n#4 {main}\n  thrown in /tmp/tmpz58voe8t.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len < $k) {\n        return $arr;\n\
    \    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n\
    \        $maxIndex = -1;\n        for ($j = 0; $j < $len; $j++) {\n          \
    \  if ($arr[$j] > $max) {\n                $max = $arr[$j];\n                $maxIndex\
    \ = $j;\n            }\n        }\n        $res[] = $max;\n        $arr[$maxIndex]\
    \ = -1001;\n    }\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnc3sr014.php:46\n\
    Stack trace:\n#0 /tmp/tmpnc3sr014.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpnc3sr014.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $length = count($arr);\n    for ($i = 0; $i <\
    \ $length; $i++) {\n        $result[] = $arr[$i];\n        if (count($result)\
    \ > $k) {\n            sort($result);\n            array_shift($result);\n   \
    \     }\n    }\n    sort($result);\n    return $result;\n}\n$arr = [-3, -4, 5];\n\
    $k = 3;\necho implode(',', maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4,\
    \ 4];\n$k = 2;\necho implode(',', maximum($arr, $k));\necho \"\\n\";\n$arr = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k = 1;\necho implode(',', maximum($arr, $k));\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "-4,-3,5\n4,4\n2\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len == 0) {\n        return [];\n \
    \   }\n    if ($len <= $k) {\n        return $arr;\n    }\n    $res = [];\n  \
    \  for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    for ($i\
    \ = $k; $i < $len; $i++) {\n        $res = insert($res, $arr[$i]);\n    }\n  \
    \  return $res;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_1v494e6.php:39\n\
    Stack trace:\n#0 /tmp/tmp_1v494e6.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp_1v494e6.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) return [];\n    if ($k == 0)\
    \ return [];\n    if ($k == $n) return $arr;\n    $res = [];\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        $max = -1000;\n        $max_index = -1;\n        for\
    \ ($j = 0; $j < $n; $j++) {\n            if ($arr[$j] > $max) {\n            \
    \    $max = $arr[$j];\n                $max_index = $j;\n            }\n     \
    \   }\n        $res[] = $max;\n        $arr[$max_index] = -1000;\n    }\n    return\
    \ $res;\n}\n$arr1 = [-3, -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1, $k1));\necho\
    \ \"\\n\";\n$arr2 = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2, $k2));\necho\
    \ \"\\n\";\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3,\
    \ $k3));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpss9cp1n0.php:54\n\
    Stack trace:\n#0 /tmp/tmpss9cp1n0.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpss9cp1n0.php\
    \ on line 54\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    $max = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max[$i] = $arr[$i];\n    }\n    for ($i = $k; $i < $n; $i++) {\n\
    \        $min = PHP_INT_MAX;\n        $min_index = 0;\n        for ($j = 0; $j\
    \ < $k; $j++) {\n            if ($max[$j] < $min) {\n                $min = $max[$j];\n\
    \                $min_index = $j;\n            }\n        }\n        if ($arr[$i]\
    \ > $min) {\n            $max[$min_index] = $arr[$i];\n        }\n    }\n    return\
    \ $max;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\
    \\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\"\
    ;\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi34mz3uc.php:55\n\
    Stack trace:\n#0 /tmp/tmpi34mz3uc.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpi34mz3uc.php\
    \ on line 55\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($arr[$i]\
    \ > $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4,\
    \ 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpjgk0lw5u.php:24\nStack trace:\n#0 /tmp/tmpjgk0lw5u.php(24):\
    \ min()\n#1 /tmp/tmpjgk0lw5u.php(46): maximum()\n#2 /tmp/tmpjgk0lw5u.php(60):\
    \ candidate()\n#3 /tmp/tmpjgk0lw5u.php(63): test()\n#4 {main}\n  thrown in /tmp/tmpjgk0lw5u.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $res = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        while\
    \ (count($res) > 0 && $res[count($res) - 1] < $arr[$i] && count($res) + count($arr)\
    \ - $i > $k) {\n            array_pop($res);\n        }\n        if (count($res)\
    \ < $k) {\n            array_push($res, $arr[$i]);\n        }\n    }\n    return\
    \ $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n$arr =\
    \ [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n$arr = [-3, 2, 1, 2, -1,\
    \ -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdqljuhlv.php:43\n\
    Stack trace:\n#0 /tmp/tmpdqljuhlv.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpdqljuhlv.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        while (count($result) > 0 && $result[count($result) - 1] <\
    \ $arr[$i] && $size - $i > $k - count($result)) {\n            array_pop($result);\n\
    \        }\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6rbvvr0r.php:44\n\
    Stack trace:\n#0 /tmp/tmp6rbvvr0r.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp6rbvvr0r.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        while (count($result) && $result[count($result) - 1] < $arr[$i] &&\
    \ count($result) + $n - $i > $k) {\n            array_pop($result);\n        }\n\
    \        if (count($result) < $k) {\n            array_push($result, $arr[$i]);\n\
    \        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n$arr = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl2m6ioe6.php:44\n\
    Stack trace:\n#0 /tmp/tmpl2m6ioe6.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpl2m6ioe6.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) return [];\n    if ($k == 0)\
    \ return [];\n    if ($k == $n) return $arr;\n    $res = [];\n    $i = 0;\n  \
    \  while ($i < $k) {\n        $max = $arr[$i];\n        $max_index = $i;\n   \
    \     for ($j = $i + 1; $j < $n; $j++) {\n            if ($arr[$j] > $max) {\n\
    \                $max = $arr[$j];\n                $max_index = $j;\n        \
    \    }\n        }\n        $res[] = $max;\n        $arr[$max_index] = $arr[$i];\n\
    \        $arr[$i] = $max;\n        $i++;\n    }\n    return $res;\n}\n$arr1 =\
    \ [-3, -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1, $k1));\necho \"\\n\";\n$arr2\
    \ = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2, $k2));\necho \"\\n\";\n$arr3\
    \ = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3, $k3));\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1z6pp4og.php:57\n\
    Stack trace:\n#0 /tmp/tmp1z6pp4og.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp1z6pp4og.php\
    \ on line 57\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    if ($count == $k) {\n\
    \        return $arr;\n    }\n    $max = max($arr);\n    $result[] = $max;\n \
    \   $index = array_search($max, $arr);\n    unset($arr[$index]);\n    $count--;\n\
    \    while (count($result) < $k) {\n        $max = max($arr);\n        $result[]\
    \ = $max;\n        $index = array_search($max, $arr);\n        unset($arr[$index]);\n\
    \        $count--;\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp02z1dv3a.php:54\n\
    Stack trace:\n#0 /tmp/tmp02z1dv3a.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp02z1dv3a.php\
    \ on line 54\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($min < $arr[$i])\
    \ {\n                $index = array_search($min, $result);\n                $result[$index]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpj2pzmbdh.php:24\nStack trace:\n#0 /tmp/tmpj2pzmbdh.php(24):\
    \ min()\n#1 /tmp/tmpj2pzmbdh.php(39): maximum()\n#2 /tmp/tmpj2pzmbdh.php(53):\
    \ candidate()\n#3 /tmp/tmpj2pzmbdh.php(56): test()\n#4 {main}\n  thrown in /tmp/tmpj2pzmbdh.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    if ($count == 0) {\n\
    \        return $result;\n    }\n    if ($count == 1) {\n        return $arr;\n\
    \    }\n    $max = $arr[0];\n    $min = $arr[0];\n    for ($i = 1; $i < $count;\
    \ $i++) {\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n    \
    \    }\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n       \
    \ }\n    }\n    $bucket = [];\n    $bucket_count = $max - $min + 1;\n    for ($i\
    \ = 0; $i < $bucket_count; $i++) {\n        $bucket[$i] = [];\n    }\n    for\
    \ ($i = 0; $i < $count; $i++) {\n        $index = $arr[$i] - $min;\n        $bucket[$index][]\
    \ = $arr[$i];\n    }\n    for ($i = $bucket_count - 1; $i >= 0; $i--) {\n    \
    \    if (count($bucket[$i]) > 0) {\n            $result = array_merge($result,\
    \ $bucket[$i]);\n            if (count($result) >= $k) {\n                break;\n\
    \            }\n        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n\
    $k = 3;\n$result = maximum($arr, $k);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc7itj6l0.php:64\n\
    Stack trace:\n#0 /tmp/tmpc7itj6l0.php(77): test()\n#1 {main}\n  thrown in /tmp/tmpc7itj6l0.php\
    \ on line 64\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len == 0) {\n        return [];\n \
    \   }\n    if ($len <= $k) {\n        return $arr;\n    }\n    $res = [];\n  \
    \  for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $maxHeap\
    \ = new SplMaxHeap();\n    foreach ($res as $val) {\n        $maxHeap->insert($val);\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i] > $maxHeap->top())\
    \ {\n            $maxHeap->extract();\n            $maxHeap->insert($arr[$i]);\n\
    \        }\n    }\n    return iterator_to_array($maxHeap);\n}\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1,\
    \ -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [1] => 4\n    [0] => -4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4dxcfrf6.php:58\n\
    Stack trace:\n#0 /tmp/tmp4dxcfrf6.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp4dxcfrf6.php\
    \ on line 58\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < count($arr); $i++) {\n     \
    \   if (count($result) < $k) {\n            array_push($result, $arr[$i]);\n \
    \       } else {\n            $min = min($result);\n            if ($arr[$i] >\
    \ $min) {\n                $index = array_search($min, $result);\n           \
    \     $result[$index] = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpbjle2klr.php:23\nStack trace:\n#0 /tmp/tmpbjle2klr.php(23):\
    \ min()\n#1 /tmp/tmpbjle2klr.php(46): maximum()\n#2 /tmp/tmpbjle2klr.php(60):\
    \ candidate()\n#3 /tmp/tmpbjle2klr.php(63): test()\n#4 {main}\n  thrown in /tmp/tmpbjle2klr.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $max = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max[$i] =\
    \ $arr[$i];\n    }\n    for ($i = $k; $i < count($arr); $i++) {\n        $min\
    \ = min($max);\n        if ($arr[$i] > $min) {\n            $max[array_search($min,\
    \ $max)] = $arr[$i];\n        }\n    }\n    sort($max);\n    return $max;\n}\n\
    \n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4,\
    \ 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpdejgfp_e.php:23\nStack trace:\n#0 /tmp/tmpdejgfp_e.php(23):\
    \ min()\n#1 /tmp/tmpdejgfp_e.php(44): maximum()\n#2 /tmp/tmpdejgfp_e.php(58):\
    \ candidate()\n#3 /tmp/tmpdejgfp_e.php(61): test()\n#4 {main}\n  thrown in /tmp/tmpdejgfp_e.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $max = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max[$i] =\
    \ $arr[$i];\n    }\n    for ($i = $k; $i < count($arr); $i++) {\n        $j =\
    \ 0;\n        while ($j < $k && $arr[$i] > $max[$j]) {\n            $j++;\n  \
    \      }\n        if ($j < $k) {\n            for ($l = $k - 1; $l > $j; $l--)\
    \ {\n                $max[$l] = $max[$l - 1];\n            }\n            $max[$j]\
    \ = $arr[$i];\n        }\n    }\n    return $max;\n}\n$arr = [-3, -4, 5];\n$k\
    \ = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\n\
    print_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => -3\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcpe4d1zl.php:53\n\
    Stack trace:\n#0 /tmp/tmpcpe4d1zl.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpcpe4d1zl.php\
    \ on line 53\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        while ($result && $result[0] < $arr[$i] && count($result) +\
    \ $len - $i > $k) {\n            array_shift($result);\n        }\n        if\
    \ (count($result) < $k) {\n            array_push($result, $arr[$i]);\n      \
    \  }\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwg4rjcov.php:39\n\
    Stack trace:\n#0 /tmp/tmpwg4rjcov.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpwg4rjcov.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) return [];\n    if ($k == 0)\
    \ return [];\n    if ($k == $n) return $arr;\n    $res = [];\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        $max = -INF;\n        $maxIndex = -1;\n        for\
    \ ($j = 0; $j < $n; $j++) {\n            if ($arr[$j] > $max) {\n            \
    \    $max = $arr[$j];\n                $maxIndex = $j;\n            }\n      \
    \  }\n        $res[] = $max;\n        $arr[$maxIndex] = -INF;\n    }\n    return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp331e8l_k.php:43\n\
    Stack trace:\n#0 /tmp/tmp331e8l_k.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp331e8l_k.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($min < $arr[$i])\
    \ {\n                $index = array_search($min, $result);\n                $result[$index]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\n$result = maximum($arr, $k);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpt12_myw1.php:24\nStack trace:\n#0 /tmp/tmpt12_myw1.php(24):\
    \ min()\n#1 /tmp/tmpt12_myw1.php(40): maximum()\n#2 /tmp/tmpt12_myw1.php(54):\
    \ candidate()\n#3 /tmp/tmpt12_myw1.php(57): test()\n#4 {main}\n  thrown in /tmp/tmpt12_myw1.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        while ($result && $result[0] < $arr[$i] && $len - $i > $k -\
    \ count($result)) {\n            array_shift($result);\n        }\n        if\
    \ (count($result) < $k) {\n            array_push($result, $arr[$i]);\n      \
    \  }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n$arr = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3a725yk2.php:44\n\
    Stack trace:\n#0 /tmp/tmp3a725yk2.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp3a725yk2.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) return [];\n    $res = [];\n\
    \    for ($i = 0; $i < $n; $i++) {\n        while (count($res) > 0 && $res[count($res)\
    \ - 1] < $arr[$i] && $n - $i > $k - count($res)) {\n            array_pop($res);\n\
    \        }\n        if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n\
    \        }\n    }\n    return $res;\n}\n$arr1 = [-3, -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1,\
    \ $k1));\necho \"\\n\";\n$arr2 = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2,\
    \ $k2));\necho \"\\n\";\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3,\
    \ $k3));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3qxhw98c.php:48\n\
    Stack trace:\n#0 /tmp/tmp3qxhw98c.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp3qxhw98c.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $res = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if ($i < $k) {\n            $res[] = $arr[$i];\n        } else\
    \ {\n            $min = min($res);\n            if ($arr[$i] > $min) {\n     \
    \           $res[array_search($min, $res)] = $arr[$i];\n            }\n      \
    \  }\n    }\n    sort($res);\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k =\
    \ 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpbt_m7tbz.php:24\nStack trace:\n#0 /tmp/tmpbt_m7tbz.php(24):\
    \ min()\n#1 /tmp/tmpbt_m7tbz.php(38): maximum()\n#2 /tmp/tmpbt_m7tbz.php(52):\
    \ candidate()\n#3 /tmp/tmpbt_m7tbz.php(55): test()\n#4 {main}\n  thrown in /tmp/tmpbt_m7tbz.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $count = count($arr);\n    $result = [];\n    if ($count == 0) {\n\
    \        return $result;\n    }\n    if ($count == 1) {\n        return $arr;\n\
    \    }\n    $result = array_slice($arr, 0, $k);\n    for ($i = $k; $i < $count;\
    \ $i++) {\n        for ($j = 0; $j < $k; $j++) {\n            if ($arr[$i] > $result[$j])\
    \ {\n                array_splice($result, $j, 0, $arr[$i]);\n               \
    \ array_pop($result);\n                break;\n            }\n        }\n    }\n\
    \    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps1dsztuk.php:48\n\
    Stack trace:\n#0 /tmp/tmps1dsztuk.php(61): test()\n#1 {main}\n  thrown in /tmp/tmps1dsztuk.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    $heap = new SplMaxHeap();\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        $heap->insert($arr[$i]);\n    }\n    $res = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $res[] = $heap->extract();\n    }\n\
    \    return $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho\
    \ \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphafoepa3.php:46\n\
    Stack trace:\n#0 /tmp/tmphafoepa3.php(59): test()\n#1 {main}\n  thrown in /tmp/tmphafoepa3.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        while (count($result) > 0 && $result[count($result) - 1] <\
    \ $arr[$i] && $size - $i > $k - count($result)) {\n            array_pop($result);\n\
    \        }\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        }\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8iznhwpl.php:47\n\
    Stack trace:\n#0 /tmp/tmp8iznhwpl.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp8iznhwpl.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    $heap = new SplMaxHeap();\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        $heap->insert($arr[$i]);\n    }\n    $res = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $res[] = $heap->extract();\n    }\n\
    \    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm44w70pm.php:38\n\
    Stack trace:\n#0 /tmp/tmpm44w70pm.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpm44w70pm.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len == 0) return [];\n    if ($len\
    \ == 1) return $arr;\n    $res = [];\n    $max = $arr[0];\n    $max_index = 0;\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n        $max_index\
    \ = $i;\n        for ($j = $i + 1; $j < $len; $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $res[] = $max;\n        $arr[$max_index] =\
    \ $arr[$i];\n        $arr[$i] = $max;\n    }\n    return $res;\n}\n$arr = [-3,\
    \ -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4,\
    \ 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2, 1,\
    \ 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgt_5o44i.php:56\n\
    Stack trace:\n#0 /tmp/tmpgt_5o44i.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpgt_5o44i.php\
    \ on line 56\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    $max = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max[$i] = $arr[$i];\n    }\n    for ($i = $k; $i < $len; $i++) {\n\
    \        $min = min($max);\n        if ($arr[$i] > $min) {\n            $max[array_search($min,\
    \ $max)] = $arr[$i];\n        }\n    }\n    return $max;\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvgo7r5mp.php:48\n\
    Stack trace:\n#0 /tmp/tmpvgo7r5mp.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpvgo7r5mp.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    if ($count == 0) {\n\
    \        return $result;\n    }\n    if ($count == 1) {\n        return [$arr[0]];\n\
    \    }\n    if ($count == $k) {\n        return $arr;\n    }\n    $max = $arr[0];\n\
    \    $maxIndex = 0;\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ > $max) {\n            $max = $arr[$i];\n            $maxIndex = $i;\n     \
    \   }\n    }\n    $result[] = $max;\n    $left = [];\n    $right = [];\n    for\
    \ ($i = 0; $i < $count; $i++) {\n        if ($i < $maxIndex) {\n            $left[]\
    \ = $arr[$i];\n        }\n        if ($i > $maxIndex) {\n            $right[]\
    \ = $arr[$i];\n        }\n    }\n    $left = maximum($left, $k - 1);\n    $right\
    \ = maximum($right, $k - 1);\n    $result = array_merge($result, $left, $right);\n\
    \    return array_slice($result, 0, $k);\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxiwvxu0_.php:70\n\
    Stack trace:\n#0 /tmp/tmpxiwvxu0_.php(83): test()\n#1 {main}\n  thrown in /tmp/tmpxiwvxu0_.php\
    \ on line 70\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max =\
    \ -1000;\n        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n\
    \            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n      \
    \          $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -1000\n)\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmp9hvfbqjw.php on line 23\n\
    PHP Warning:  Undefined array key 0 in /tmp/tmp9hvfbqjw.php on line 23\nPHP Fatal\
    \ error:  Uncaught Exception: Test failed! in /tmp/tmp9hvfbqjw.php:42\nStack trace:\n\
    #0 /tmp/tmp9hvfbqjw.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp9hvfbqjw.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    $max = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max[$i] = $arr[$i];\n    }\n    for ($i = $k; $i < $n; $i++) {\n\
    \        $max = sortMax($max, $arr[$i]);\n    }\n    return $max;\n}\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8fny2an9.php:33\n\
    Stack trace:\n#0 /tmp/tmp8fny2an9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp8fny2an9.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $max = 0;\n    $maxIndex = 0;\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        $max = $arr[$i];\n        $maxIndex = $i;\n      \
    \  for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $maxIndex = $j;\n     \
    \       }\n        }\n        $result[] = $max;\n        $arr[$maxIndex] = $arr[$i];\n\
    \        $arr[$i] = $max;\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk0x99al7.php:53\n\
    Stack trace:\n#0 /tmp/tmpk0x99al7.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpk0x99al7.php\
    \ on line 53\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len == 0) {\n        return [];\n \
    \   }\n    $res = [];\n    for ($i = 0; $i < $len; $i++) {\n        while ($res\
    \ && $res[count($res) - 1] < $arr[$i] && count($res) + $len - $i > $k) {\n   \
    \         array_pop($res);\n        }\n        if (count($res) < $k) {\n     \
    \       array_push($res, $arr[$i]);\n        }\n    }\n    return $res;\n}\n\n\
    $arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k =\
    \ 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7mhxadyc.php:50\n\
    Stack trace:\n#0 /tmp/tmp7mhxadyc.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp7mhxadyc.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    if (count($arr) == $k) {\n        return $arr;\n    }\n    $result\
    \ = [];\n    $max = max($arr);\n    $min = min($arr);\n    $max_index = array_search($max,\
    \ $arr);\n    $min_index = array_search($min, $arr);\n    $result[] = $max;\n\
    \    $result[] = $min;\n    unset($arr[$max_index]);\n    unset($arr[$min_index]);\n\
    \    $arr = array_values($arr);\n    $k -= 2;\n    while ($k > 0) {\n        $max\
    \ = max($arr);\n        $min = min($arr);\n        $max_index = array_search($max,\
    \ $arr);\n        $min_index = array_search($min, $arr);\n        $result[] =\
    \ $max;\n        $result[] = $min;\n        unset($arr[$max_index]);\n       \
    \ unset($arr[$min_index]);\n        $arr = array_values($arr);\n        $k -=\
    \ 2;\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n    [1] => -3\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprooj8nl8.php:63\n\
    Stack trace:\n#0 /tmp/tmprooj8nl8.php(76): test()\n#1 {main}\n  thrown in /tmp/tmprooj8nl8.php\
    \ on line 63\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $max = $arr[0];\n    $maxIndex = 0;\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        for ($j = 0; $j < count($arr); $j++) {\n    \
    \        if ($arr[$j] > $max) {\n                $max = $arr[$j];\n          \
    \      $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        $arr[$maxIndex] = -1000;\n        $max = -1000;\n    }\n    return $result;\n\
    }\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n$arr = [4, -4, 4];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\n\
    print_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprihze4t7.php:48\n\
    Stack trace:\n#0 /tmp/tmprihze4t7.php(61): test()\n#1 {main}\n  thrown in /tmp/tmprihze4t7.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        } else {\n            $min = min($result);\n           \
    \ if ($min < $arr[$i]) {\n                $index = array_search($min, $result);\n\
    \                $result[$index] = $arr[$i];\n            }\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpeyl9jri3.php:24\nStack trace:\n#0 /tmp/tmpeyl9jri3.php(24):\
    \ min()\n#1 /tmp/tmpeyl9jri3.php(38): maximum()\n#2 /tmp/tmpeyl9jri3.php(52):\
    \ candidate()\n#3 /tmp/tmpeyl9jri3.php(55): test()\n#4 {main}\n  thrown in /tmp/tmpeyl9jri3.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        } else {\n            $min = min($result);\n           \
    \ if ($min < $arr[$i]) {\n                $index = array_search($min, $result);\n\
    \                $result[$index] = $arr[$i];\n            }\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpwytuk0a5.php:24\nStack trace:\n#0 /tmp/tmpwytuk0a5.php(24):\
    \ min()\n#1 /tmp/tmpwytuk0a5.php(47): maximum()\n#2 /tmp/tmpwytuk0a5.php(61):\
    \ candidate()\n#3 /tmp/tmpwytuk0a5.php(64): test()\n#4 {main}\n  thrown in /tmp/tmpwytuk0a5.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) return [];\n    if ($k == 0)\
    \ return [];\n    if ($k >= $n) return $arr;\n    $res = [];\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        $max = $arr[$i];\n        $max_index = $i;\n     \
    \   for ($j = $i + 1; $j < $n; $j++) {\n            if ($arr[$j] > $max) {\n \
    \               $max = $arr[$j];\n                $max_index = $j;\n         \
    \   }\n        }\n        $res[] = $max;\n        $arr[$max_index] = $arr[$i];\n\
    \        $arr[$i] = $max;\n    }\n    return $res;\n}\n$arr1 = [-3, -4, 5];\n\
    $k1 = 3;\nprint_r(maximum($arr1, $k1));\n$arr2 = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2,\
    \ $k2));\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3,\
    \ $k3));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8m60si09.php:52\n\
    Stack trace:\n#0 /tmp/tmp8m60si09.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp8m60si09.php\
    \ on line 52\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $length = count($arr);\n    for ($i = 0; $i <\
    \ $length; $i++) {\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        } else {\n            $min = min($result);\n           \
    \ if ($min < $arr[$i]) {\n                $index = array_search($min, $result);\n\
    \                $result[$index] = $arr[$i];\n            }\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpxccmq1fn.php:24\nStack trace:\n#0 /tmp/tmpxccmq1fn.php(24):\
    \ min()\n#1 /tmp/tmpxccmq1fn.php(38): maximum()\n#2 /tmp/tmpxccmq1fn.php(52):\
    \ candidate()\n#3 /tmp/tmpxccmq1fn.php(55): test()\n#4 {main}\n  thrown in /tmp/tmpxccmq1fn.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    if ($count == 0) {\n\
    \        return $result;\n    }\n    $start = 0;\n    $end = $count - 1;\n   \
    \ while ($start < $end) {\n        $pivot = partition($arr, $start, $end);\n \
    \       if ($pivot == $k - 1) {\n            break;\n        } else if ($pivot\
    \ < $k - 1) {\n            $start = $pivot + 1;\n        } else {\n          \
    \  $end = $pivot - 1;\n        }\n    }\n    for ($i = 0; $i < $k; $i++) {\n \
    \       $result[] = $arr[$i];\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function partition()\
    \ in /tmp/tmp6dss6jip.php:26\nStack trace:\n#0 /tmp/tmp6dss6jip.php(41): maximum()\n\
    #1 /tmp/tmp6dss6jip.php(45): candidate()\n#2 /tmp/tmp6dss6jip.php(58): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6dss6jip.php on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < count($arr); $i++) {\n     \
    \   if (count($result) < $k) {\n            $result[] = $arr[$i];\n        } else\
    \ {\n            $min = min($result);\n            if ($arr[$i] > $min) {\n  \
    \              $result[array_search($min, $result)] = $arr[$i];\n            }\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpm7ls6_pe.php:23\nStack trace:\n#0 /tmp/tmpm7ls6_pe.php(23):\
    \ min()\n#1 /tmp/tmpm7ls6_pe.php(37): maximum()\n#2 /tmp/tmpm7ls6_pe.php(51):\
    \ candidate()\n#3 /tmp/tmpm7ls6_pe.php(54): test()\n#4 {main}\n  thrown in /tmp/tmpm7ls6_pe.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $res = [];\n    for ($i = 0; $i < count($arr); $i++) {\n        if\
    \ (count($res) < $k) {\n            $res[] = $arr[$i];\n        } else {\n   \
    \         $min = min($res);\n            if ($arr[$i] > $min) {\n            \
    \    $res[array_search($min, $res)] = $arr[$i];\n            }\n        }\n  \
    \  }\n    sort($res);\n    return $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpb28pc1xr.php:23\nStack trace:\n#0 /tmp/tmpb28pc1xr.php(23):\
    \ min()\n#1 /tmp/tmpb28pc1xr.php(36): maximum()\n#2 /tmp/tmpb28pc1xr.php(50):\
    \ candidate()\n#3 /tmp/tmpb28pc1xr.php(53): test()\n#4 {main}\n  thrown in /tmp/tmpb28pc1xr.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $max = -1000;\n    $maxIndex = 0;\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        for ($j = 0; $j < count($arr); $j++) {\n    \
    \        if ($arr[$j] > $max) {\n                $max = $arr[$j];\n          \
    \      $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        $arr[$maxIndex] = -1000;\n        $max = -1000;\n    }\n    return $result;\n\
    }\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4,\
    \ 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmmpkt403.php:51\n\
    Stack trace:\n#0 /tmp/tmpmmpkt403.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpmmpkt403.php\
    \ on line 51\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max =\
    \ -INF;\n        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $maxIndex = $j;\n            }\n        }\n        $result[] =\
    \ $max;\n        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmp7zpjmj22.php on line 23\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7zpjmj22.php:39\n\
    Stack trace:\n#0 /tmp/tmp7zpjmj22.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp7zpjmj22.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n < $k) {\n        return [];\n    }\n\
    \    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $k; $i++) {\n        $heap->insert($arr[$i]);\n\
    \    }\n    for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] > $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    $result = [];\n    while (!$heap->isEmpty()) {\n        $result[]\
    \ = $heap->extract();\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k\
    \ = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\n\
    print_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => -4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2bmu_4_f.php:55\n\
    Stack trace:\n#0 /tmp/tmp2bmu_4_f.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp2bmu_4_f.php\
    \ on line 55\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($min < $arr[$i])\
    \ {\n                $index = array_search($min, $result);\n                $result[$index]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho\
    \ \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\\
    n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmp_phk2n5h.php:24\nStack trace:\n#0 /tmp/tmp_phk2n5h.php(24):\
    \ min()\n#1 /tmp/tmp_phk2n5h.php(47): maximum()\n#2 /tmp/tmp_phk2n5h.php(61):\
    \ candidate()\n#3 /tmp/tmp_phk2n5h.php(64): test()\n#4 {main}\n  thrown in /tmp/tmp_phk2n5h.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) return [];\n    if ($k == 0)\
    \ return [];\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[]\
    \ = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n    foreach ($res as $val)\
    \ {\n        $heap->insert($val);\n    }\n    for ($i = $k; $i < $n; $i++) {\n\
    \        if ($arr[$i] < $heap->top()) {\n            $heap->extract();\n     \
    \       $heap->insert($arr[$i]);\n        }\n    }\n    return $res;\n}\n$arr1\
    \ = [-3, -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1, $k1));\necho \"\\n\";\n$arr2\
    \ = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2, $k2));\necho \"\\n\";\n$arr3\
    \ = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3, $k3));\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => -4\n)\n\nArray\n(\n    [0] => -3\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpal1sk2bw.php:54\n\
    Stack trace:\n#0 /tmp/tmpal1sk2bw.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpal1sk2bw.php\
    \ on line 54\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max =\
    \ -1000;\n        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n\
    \            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n      \
    \          $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n    }\n    return $result;\n}\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -1000\n)\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmp95udqbt3.php on line 23\n\
    PHP Warning:  Undefined array key 0 in /tmp/tmp95udqbt3.php on line 23\nPHP Fatal\
    \ error:  Uncaught Exception: Test failed! in /tmp/tmp95udqbt3.php:42\nStack trace:\n\
    #0 /tmp/tmp95udqbt3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp95udqbt3.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    $result = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        while (count($result) > 0 && $result[count($result) - 1] < $arr[$i]\
    \ && $n - $i > $k - count($result)) {\n            array_pop($result);\n     \
    \   }\n        if (count($result) < $k) {\n            array_push($result, $arr[$i]);\n\
    \        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpimxor7rr.php:47\n\
    Stack trace:\n#0 /tmp/tmpimxor7rr.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpimxor7rr.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    $res = [];\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n\
    \        } else {\n            $min = min($res);\n            if ($min < $arr[$i])\
    \ {\n                $index = array_search($min, $res);\n                $res[$index]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($res);\n    return $res;\n\
    }\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4,\
    \ 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmp1ks_n59i.php:24\nStack trace:\n#0 /tmp/tmp1ks_n59i.php(24):\
    \ min()\n#1 /tmp/tmp1ks_n59i.php(47): maximum()\n#2 /tmp/tmp1ks_n59i.php(61):\
    \ candidate()\n#3 /tmp/tmp1ks_n59i.php(64): test()\n#4 {main}\n  thrown in /tmp/tmp1ks_n59i.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($arr[$i]\
    \ > $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    $arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr\
    \ = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmp7x89n1r_.php:24\nStack trace:\n#0 /tmp/tmp7x89n1r_.php(24):\
    \ min()\n#1 /tmp/tmp7x89n1r_.php(46): maximum()\n#2 /tmp/tmp7x89n1r_.php(60):\
    \ candidate()\n#3 /tmp/tmp7x89n1r_.php(63): test()\n#4 {main}\n  thrown in /tmp/tmp7x89n1r_.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len <= $k) return $arr;\n    $heap\
    \ = new SplMaxHeap();\n    for ($i = 0; $i < $k; $i++) {\n        $heap->insert($arr[$i]);\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i] > $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    $res = [];\n    while (!$heap->isEmpty()) {\n        $res[]\
    \ = $heap->extract();\n    }\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k =\
    \ 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu_9vmg49.php:53\n\
    Stack trace:\n#0 /tmp/tmpu_9vmg49.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpu_9vmg49.php\
    \ on line 53\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max =\
    \ -1000;\n        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $maxIndex = $j;\n            }\n        }\n        $result[] =\
    \ $max;\n        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k =\
    \ 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -1000\n)\nArray\n(\n\
    \    [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpufvptjev.php on line 23\n\
    PHP Warning:  Undefined array key 0 in /tmp/tmpufvptjev.php on line 23\nPHP Warning:\
    \  Undefined array key 0 in /tmp/tmpufvptjev.php on line 23\nPHP Fatal error:\
    \  Uncaught Exception: Test failed! in /tmp/tmpufvptjev.php:50\nStack trace:\n\
    #0 /tmp/tmpufvptjev.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpufvptjev.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    $heap = new SplMaxHeap();\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        $heap->insert($arr[$i]);\n    }\n    $result = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $result[] = $heap->extract();\n  \
    \  }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpimoxhukc.php:46\n\
    Stack trace:\n#0 /tmp/tmpimoxhukc.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpimoxhukc.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    if ($count == 0) {\n\
    \        return $result;\n    }\n    if ($count == 1) {\n        $result[] = $arr[0];\n\
    \        return $result;\n    }\n    $max = $arr[0];\n    $maxIndex = 0;\n   \
    \ for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] > $max) {\n        \
    \    $max = $arr[$i];\n            $maxIndex = $i;\n        }\n    }\n    $result[]\
    \ = $max;\n    $left = [];\n    $right = [];\n    for ($i = 0; $i < $count; $i++)\
    \ {\n        if ($i == $maxIndex) {\n            continue;\n        }\n      \
    \  if ($arr[$i] < $max) {\n            $left[] = $arr[$i];\n        } else {\n\
    \            $right[] = $arr[$i];\n        }\n    }\n    $leftCount = count($left);\n\
    \    $rightCount = count($right);\n    if ($leftCount >= $k) {\n        $result\
    \ = array_merge($result, maximum($left, $k));\n    } else if ($leftCount + 1 ==\
    \ $k) {\n        $result = array_merge($result, maximum($left, $leftCount));\n\
    \    } else {\n        $result = array_merge($result, maximum($left, $leftCount));\n\
    \        $result = array_merge($result, maximum($right, $k - $leftCount - 1));\n\
    \    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\n$result = maximum($arr,\
    \ $k);\nprint_r($result);\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\n$result\
    \ = maximum($arr, $k);\nprint_r($result);\necho \"\\n\";\n$arr = [-3, 2, 1, 2,\
    \ -1, -2, 1];\n$k = 1;\n$result = maximum($arr, $k);\nprint\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmp2plkzpkx.php on line 74\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        while ($size > 0 && count($result) > 0 && $result[count($result)\
    \ - 1] < $arr[$i]) {\n            array_pop($result);\n            $size--;\n\
    \        }\n        if ($size < $k) {\n            $result[] = $arr[$i];\n   \
    \         $size++;\n        }\n    }\n    return $result;\n}\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1,\
    \ -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\n\nArray\n(\n)\n\nArray\n(\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxjv6_wfd.php:49\n\
    Stack trace:\n#0 /tmp/tmpxjv6_wfd.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpxjv6_wfd.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        } else {\n            $min = min($result);\n           \
    \ if ($min < $arr[$i]) {\n                $index = array_search($min, $result);\n\
    \                $result[$index] = $arr[$i];\n            }\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpbuc82s32.php:24\nStack trace:\n#0 /tmp/tmpbuc82s32.php(24):\
    \ min()\n#1 /tmp/tmpbuc82s32.php(47): maximum()\n#2 /tmp/tmpbuc82s32.php(61):\
    \ candidate()\n#3 /tmp/tmpbuc82s32.php(64): test()\n#4 {main}\n  thrown in /tmp/tmpbuc82s32.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    $heap = new SplMaxHeap();\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        $heap->insert($arr[$i]);\n    }\n    $result = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $result[] = $heap->extract();\n  \
    \  }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqx8vq6cm.php:46\n\
    Stack trace:\n#0 /tmp/tmpqx8vq6cm.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpqx8vq6cm.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) return [];\n    if ($k == 0)\
    \ return [];\n    if ($k == $n) return $arr;\n    $res = [];\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        $max = $arr[$i];\n        $max_index = $i;\n     \
    \   for ($j = $i + 1; $j < $n; $j++) {\n            if ($arr[$j] > $max) {\n \
    \               $max = $arr[$j];\n                $max_index = $j;\n         \
    \   }\n        }\n        $res[] = $max;\n        $arr[$max_index] = $arr[$i];\n\
    \        $arr[$i] = $max;\n    }\n    return $res;\n}\n$arr1 = [-3, -4, 5];\n\
    $k1 = 3;\nprint_r(maximum($arr1, $k1));\necho \"\\n\";\n$arr2 = [4, -4, 4];\n\
    $k2 = 2;\nprint_r(maximum($arr2, $k2));\necho \"\\n\";\n$arr3 = [-3, 2, 1, 2,\
    \ -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3, $k3));\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2lel31y6.php:55\n\
    Stack trace:\n#0 /tmp/tmp2lel31y6.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp2lel31y6.php\
    \ on line 55\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($min < $arr[$i])\
    \ {\n                $index = array_search($min, $result);\n                $result[$index]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\n$result = maximum($arr, $k);\nprint_r($result);\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmp7353ldtt.php:24\nStack trace:\n#0 /tmp/tmp7353ldtt.php(24):\
    \ min()\n#1 /tmp/tmp7353ldtt.php(39): maximum()\n#2 /tmp/tmp7353ldtt.php(53):\
    \ candidate()\n#3 /tmp/tmp7353ldtt.php(56): test()\n#4 {main}\n  thrown in /tmp/tmp7353ldtt.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $max = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($max) < $k) {\n            $max[] = $arr[$i];\n \
    \       } else {\n            $min = min($max);\n            if ($min < $arr[$i])\
    \ {\n                $max[array_search($min, $max)] = $arr[$i];\n            }\n\
    \        }\n    }\n    sort($max);\n    return $max;\n}\n\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmp9oukge5m.php:24\nStack trace:\n#0 /tmp/tmp9oukge5m.php(24):\
    \ min()\n#1 /tmp/tmp9oukge5m.php(38): maximum()\n#2 /tmp/tmp9oukge5m.php(52):\
    \ candidate()\n#3 /tmp/tmp9oukge5m.php(55): test()\n#4 {main}\n  thrown in /tmp/tmp9oukge5m.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $max = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        if (count($max) < $k) {\n            $max[] = $arr[$i];\n       \
    \ } else {\n            $min = min($max);\n            if ($arr[$i] > $min) {\n\
    \                $max[array_search($min, $max)] = $arr[$i];\n            }\n \
    \       }\n    }\n    sort($max);\n    return $max;\n}\n\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpt6u_tm4g.php:24\nStack trace:\n#0 /tmp/tmpt6u_tm4g.php(24):\
    \ min()\n#1 /tmp/tmpt6u_tm4g.php(46): maximum()\n#2 /tmp/tmpt6u_tm4g.php(60):\
    \ candidate()\n#3 /tmp/tmpt6u_tm4g.php(63): test()\n#4 {main}\n  thrown in /tmp/tmpt6u_tm4g.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($min < $arr[$i])\
    \ {\n                $key = array_search($min, $result);\n                $result[$key]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpdpcy2h7x.php:24\nStack trace:\n#0 /tmp/tmpdpcy2h7x.php(24):\
    \ min()\n#1 /tmp/tmpdpcy2h7x.php(40): maximum()\n#2 /tmp/tmpdpcy2h7x.php(54):\
    \ candidate()\n#3 /tmp/tmpdpcy2h7x.php(57): test()\n#4 {main}\n  thrown in /tmp/tmpdpcy2h7x.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) return [];\n    if ($k == 0)\
    \ return [];\n    if ($k == $n) return $arr;\n    $heap = new SplMaxHeap();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $heap->insert($arr[$i]);\n    }\n\
    \    for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] > $heap->top()) {\n\
    \            $heap->extract();\n            $heap->insert($arr[$i]);\n       \
    \ }\n    }\n    $res = [];\n    while (!$heap->isEmpty()) {\n        $res[] =\
    \ $heap->extract();\n    }\n    return $res;\n}\n$arr1 = [-3, -4, 5];\n$k1 = 3;\n\
    print_r(maximum($arr1, $k1));\necho \"\\n\";\n$arr2 = [4, -4, 4];\n$k2 = 2;\n\
    print_r(maximum($arr2, $k2));\necho \"\\n\";\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k3 = 1;\nprint_r(maximum($arr3, $k3));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => -4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg8b1hzbe.php:55\n\
    Stack trace:\n#0 /tmp/tmpg8b1hzbe.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpg8b1hzbe.php\
    \ on line 55\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) {\n        return [];\n    }\n\
    \    if ($k == 0) {\n        return [];\n    }\n    if ($k == $n) {\n        return\
    \ $arr;\n    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n       \
    \ $result[] = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n    foreach ($result\
    \ as $value) {\n        $heap->insert($value);\n    }\n    for ($i = $k; $i <\
    \ $n; $i++) {\n        if ($arr[$i] < $heap->top()) {\n            $heap->extract();\n\
    \            $heap->insert($arr[$i]);\n        }\n    }\n    return $result;\n\
    }\n$arr1 = [-3, -4, 5];\n$k1 = 3;\n$arr2 = [4, -4, 4];\n$k2 = 2;\n$arr3 = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k3 = 1;\necho json_encode(maximum($arr1, $k1)) . PHP_EOL;\n\
    echo json_encode(maximum($arr2, $k2)) . PHP_EOL;\necho json_encode(maximum($arr3,\
    \ $k3)) . PHP_EOL;\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "[-3,-4,5]\n[4,-4]\n[-3]\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjtovrprh.php:58\n\
    Stack trace:\n#0 /tmp/tmpjtovrprh.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpjtovrprh.php\
    \ on line 58\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($min < $arr[$i])\
    \ {\n                $index = array_search($min, $result);\n                $result[$index]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho\
    \ \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\\
    n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpuql832f5.php:24\nStack trace:\n#0 /tmp/tmpuql832f5.php(24):\
    \ min()\n#1 /tmp/tmpuql832f5.php(47): maximum()\n#2 /tmp/tmpuql832f5.php(61):\
    \ candidate()\n#3 /tmp/tmpuql832f5.php(64): test()\n#4 {main}\n  thrown in /tmp/tmpuql832f5.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $size = count($arr);\n    if ($size == 0 || $k\
    \ == 0) {\n        return $result;\n    }\n    $maxHeap = new SplMaxHeap();\n\
    \    for ($i = 0; $i < $size; $i++) {\n        $maxHeap->insert($arr[$i]);\n \
    \   }\n    for ($i = 0; $i < $k; $i++) {\n        $result[] = $maxHeap->extract();\n\
    \    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfsojbq2m.php:49\n\
    Stack trace:\n#0 /tmp/tmpfsojbq2m.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpfsojbq2m.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        while (count($result) > 0 && $result[count($result) - 1] < $arr[$i]\
    \ && count($result) + $n - $i > $k) {\n            array_pop($result);\n     \
    \   }\n        if (count($result) < $k) {\n            array_push($result, $arr[$i]);\n\
    \        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4cubwtuf.php:47\n\
    Stack trace:\n#0 /tmp/tmp4cubwtuf.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp4cubwtuf.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        while (!empty($result) && $result[0] < $arr[$i] && count($result)\
    \ + $n - $i > $k) {\n            array_shift($result);\n        }\n        if\
    \ (count($result) < $k) {\n            array_push($result, $arr[$i]);\n      \
    \  }\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsf8trw09.php:47\n\
    Stack trace:\n#0 /tmp/tmpsf8trw09.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpsf8trw09.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len < $k) {\n        return $arr;\n\
    \    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $result[]\
    \ = $arr[$i];\n    }\n    $result = heapSort($result);\n    for ($i = $k; $i <\
    \ $len; $i++) {\n        if ($arr[$i] > $result[0]) {\n            $result[0]\
    \ = $arr[$i];\n            $result = heapSort($result);\n        }\n    }\n  \
    \  return $result;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function heapSort()\
    \ in /tmp/tmpj17spuir.php:26\nStack trace:\n#0 /tmp/tmpj17spuir.php(36): maximum()\n\
    #1 /tmp/tmpj17spuir.php(40): candidate()\n#2 /tmp/tmpj17spuir.php(53): test()\n\
    #3 {main}\n  thrown in /tmp/tmpj17spuir.php on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = array();\n    $count = count($arr);\n    for ($i = 0; $i\
    \ < $count; $i++) {\n        $result[] = $arr[$i];\n        if (count($result)\
    \ > $k) {\n            sort($result);\n            array_shift($result);\n   \
    \     }\n    }\n    sort($result);\n    return $result;\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    if ($count == 0) {\n\
    \        return $result;\n    }\n    if ($count == 1) {\n        return [$arr[0]];\n\
    \    }\n    if ($count == $k) {\n        return $arr;\n    }\n    $max = $arr[0];\n\
    \    $maxIndex = 0;\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ > $max) {\n            $max = $arr[$i];\n            $maxIndex = $i;\n     \
    \   }\n    }\n    $result[] = $max;\n    $result = array_merge($result, maximum(array_slice($arr,\
    \ 0, $maxIndex), $k - 1));\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k =\
    \ 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\n\
    print_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n)\n\nArray\n(\n    [0] => 2\n    [1] => -3\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6mi_478i.php:58\n\
    Stack trace:\n#0 /tmp/tmp6mi_478i.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp6mi_478i.php\
    \ on line 58\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $max = [];\n    $max_index = [];\n    $max_count = 0;\n    $arr_count\
    \ = count($arr);\n    for ($i = 0; $i < $arr_count; $i++) {\n        if ($max_count\
    \ < $k) {\n            $max[] = $arr[$i];\n            $max_index[] = $i;\n  \
    \          $max_count++;\n        } else {\n            $min_index = array_search(min($max),\
    \ $max);\n            if ($arr[$i] > $max[$min_index]) {\n                $max[$min_index]\
    \ = $arr[$i];\n                $max_index[$min_index] = $i;\n            }\n \
    \       }\n    }\n    sort($max_index);\n    $result = [];\n    for ($i = 0; $i\
    \ < $k; $i++) {\n        $result[] = $arr[$max_index[$i]];\n    }\n    return\
    \ $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho\
    \ \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\\
    n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpea41mjv1.php:59\n\
    Stack trace:\n#0 /tmp/tmpea41mjv1.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpea41mjv1.php\
    \ on line 59\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max =\
    \ -1001;\n        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n\
    \            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n      \
    \          $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -1001\n)\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpphee3v7e.php on line 23\n\
    PHP Warning:  Undefined array key 0 in /tmp/tmpphee3v7e.php on line 23\nPHP Fatal\
    \ error:  Uncaught Exception: Test failed! in /tmp/tmpphee3v7e.php:42\nStack trace:\n\
    #0 /tmp/tmpphee3v7e.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpphee3v7e.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max =\
    \ PHP_INT_MIN;\n        $index = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -9223372036854775808\n\
    )\nArray\n(\n    [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmp70nu08xq.php on line 23\n\
    PHP Warning:  Undefined array key 0 in /tmp/tmp70nu08xq.php on line 23\nPHP Warning:\
    \  Undefined array key 0 in /tmp/tmp70nu08xq.php on line 23\nPHP Fatal error:\
    \  Uncaught Exception: Test failed! in /tmp/tmp70nu08xq.php:50\nStack trace:\n\
    #0 /tmp/tmp70nu08xq.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp70nu08xq.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        } else {\n            $min = min($result);\n           \
    \ if ($min < $arr[$i]) {\n                $index = array_search($min, $result);\n\
    \                $result[$index] = $arr[$i];\n            }\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpe38fbnpm.php:24\nStack trace:\n#0 /tmp/tmpe38fbnpm.php(24):\
    \ min()\n#1 /tmp/tmpe38fbnpm.php(47): maximum()\n#2 /tmp/tmpe38fbnpm.php(61):\
    \ candidate()\n#3 /tmp/tmpe38fbnpm.php(64): test()\n#4 {main}\n  thrown in /tmp/tmpe38fbnpm.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    $res = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        while ($k && $res && $res[0] < $arr[$i]) {\n            array_shift($res);\n\
    \            $k--;\n        }\n        $res[] = $arr[$i];\n    }\n    while ($k--)\
    \ {\n        array_shift($res);\n    }\n    return $res;\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n)\nArray\n(\n    [0] => 4\n)\nArray\n(\n    [0] => 2\n    [1]\
    \ => 1\n    [2] => 2\n    [3] => -1\n    [4] => -2\n    [5] => 1\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbo7pdjux.php:49\n\
    Stack trace:\n#0 /tmp/tmpbo7pdjux.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpbo7pdjux.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max =\
    \ -1000;\n        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n\
    \            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n      \
    \          $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n    }\n    return $result;\n}\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -1000\n)\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpxvrl9d0k.php on line 23\n\
    PHP Warning:  Undefined array key 0 in /tmp/tmpxvrl9d0k.php on line 23\nPHP Fatal\
    \ error:  Uncaught Exception: Test failed! in /tmp/tmpxvrl9d0k.php:42\nStack trace:\n\
    #0 /tmp/tmpxvrl9d0k.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpxvrl9d0k.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    $max = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max[] = $arr[$i];\n    }\n    for ($i = $k; $i < $n; $i++) {\n \
    \       $max = maxHeap($max);\n        if ($arr[$i] > $max[0]) {\n           \
    \ $max[0] = $arr[$i];\n        }\n    }\n    return $max;\n}\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxch_xgrh.php:36\n\
    Stack trace:\n#0 /tmp/tmpxch_xgrh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpxch_xgrh.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len == 0) return [];\n    if ($len\
    \ == 1) return $arr;\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n    \
    \    $max = $arr[0];\n        $index = 0;\n        for ($j = 1; $j < $len - $i;\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $index = $j;\n            }\n        }\n        $res[] = $max;\n\
    \        array_splice($arr, $index, 1);\n    }\n    return $res;\n}\n\n$arr =\
    \ [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7eex8jvh.php:45\n\
    Stack trace:\n#0 /tmp/tmp7eex8jvh.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp7eex8jvh.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < count($arr); $i++) {\n     \
    \   $result[] = $arr[$i];\n        $result = maxHeap($result);\n        if (count($result)\
    \ > $k) {\n            array_shift($result);\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function maxHeap()\
    \ in /tmp/tmpo1l28ekw.php:21\nStack trace:\n#0 /tmp/tmpo1l28ekw.php(29): maximum()\n\
    #1 /tmp/tmpo1l28ekw.php(33): candidate()\n#2 /tmp/tmpo1l28ekw.php(46): test()\n\
    #3 {main}\n  thrown in /tmp/tmpo1l28ekw.php on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        while (count($result) > 0 && $result[count($result) - 1] < $arr[$i]\
    \ && $n - $i > $k - count($result)) {\n            array_pop($result);\n     \
    \   }\n        if (count($result) < $k) {\n            array_push($result, $arr[$i]);\n\
    \        }\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq89dyb4r.php:47\n\
    Stack trace:\n#0 /tmp/tmpq89dyb4r.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpq89dyb4r.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        while (count($result) > 0 && $result[count($result) - 1] <\
    \ $arr[$i] && $size - $i > $k - count($result)) {\n            array_pop($result);\n\
    \        }\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k =\
    \ 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2,\
    \ 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptr2prmqb.php:47\n\
    Stack trace:\n#0 /tmp/tmptr2prmqb.php(60): test()\n#1 {main}\n  thrown in /tmp/tmptr2prmqb.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len == 0) {\n        return [];\n \
    \   }\n    if ($len == 1) {\n        return $arr;\n    }\n    $res = [];\n   \
    \ for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $index = 0;\n\
    \        for ($j = 1; $j < $len - $i; $j++) {\n            if ($arr[$j] > $max)\
    \ {\n                $max = $arr[$j];\n                $index = $j;\n        \
    \    }\n        }\n        $res[] = $max;\n        array_splice($arr, $index,\
    \ 1);\n    }\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwnw991nw.php:57\n\
    Stack trace:\n#0 /tmp/tmpwnw991nw.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpwnw991nw.php\
    \ on line 57\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len == 0) {\n        return [];\n \
    \   }\n    if ($len <= $k) {\n        return $arr;\n    }\n    $res = [];\n  \
    \  for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    for ($i\
    \ = $k; $i < $len; $i++) {\n        $max = max($res);\n        if ($arr[$i] >\
    \ $max) {\n            $key = array_search($max, $res);\n            $res[$key]\
    \ = $arr[$i];\n        }\n    }\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw92scvf6.php:55\n\
    Stack trace:\n#0 /tmp/tmpw92scvf6.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpw92scvf6.php\
    \ on line 55\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max =\
    \ -1000;\n        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $maxIndex = $j;\n            }\n        }\n        $result[] =\
    \ $max;\n        array_splice($arr, $maxIndex, 1);\n    }\n    return $result;\n\
    }\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4,\
    \ 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpo21avpvu.php:50\n\
    Stack trace:\n#0 /tmp/tmpo21avpvu.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpo21avpvu.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $size = count($arr);\n    if ($size == 0 || $k\
    \ == 0) {\n        return $result;\n    }\n    $maxHeap = new SplMaxHeap();\n\
    \    foreach ($arr as $value) {\n        $maxHeap->insert($value);\n    }\n  \
    \  for ($i = 0; $i < $k; $i++) {\n        $result[] = $maxHeap->extract();\n \
    \   }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1gnxc4rp.php:49\n\
    Stack trace:\n#0 /tmp/tmp1gnxc4rp.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp1gnxc4rp.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max =\
    \ -1000;\n        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n\
    \            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n      \
    \          $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        array_splice($arr, $index, 1);\n    }\n    return $result;\n}\n\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\nvar_dump(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n\
    $k = 2;\nvar_dump(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k\
    \ = 1;\nvar_dump(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(-3)\n  [2]=>\n  int(-4)\n\
    }\narray(2) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(4)\n}\narray(1) {\n  [0]=>\n\
    \  int(2)\n}\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu9jj72xh.php:50\n\
    Stack trace:\n#0 /tmp/tmpu9jj72xh.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpu9jj72xh.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        while (count($result) > 0 && $result[count($result) - 1] < $arr[$i]\
    \ && $n - $i > $k - count($result)) {\n            array_pop($result);\n     \
    \   }\n        if (count($result) < $k) {\n            array_push($result, $arr[$i]);\n\
    \        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9i1c5s_a.php:47\n\
    Stack trace:\n#0 /tmp/tmp9i1c5s_a.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp9i1c5s_a.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    $result = [];\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        $result[] = $arr[$i];\n        if (count($result) > $k) {\n\
    \            sort($result);\n            array_shift($result);\n        }\n  \
    \  }\n    sort($result);\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k =\
    \ 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        $result[] = $arr[$i];\n        if (count($result) > $k) {\n\
    \            sort($result);\n            array_shift($result);\n        }\n  \
    \  }\n    sort($result);\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k =\
    \ 3;\nprint_r(maximum($arr, $k));\n\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) return [];\n    if ($k == 0)\
    \ return [];\n    if ($k == $n) return $arr;\n    $res = [];\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        $max = $arr[$i];\n        $max_index = $i;\n     \
    \   for ($j = $i + 1; $j < $n; $j++) {\n            if ($arr[$j] > $max) {\n \
    \               $max = $arr[$j];\n                $max_index = $j;\n         \
    \   }\n        }\n        $res[] = $max;\n        $arr[$max_index] = $arr[$i];\n\
    \        $arr[$i] = $max;\n    }\n    return $res;\n}\n$arr1 = [-3, -4, 5];\n\
    $k1 = 3;\nprint_r(maximum($arr1, $k1));\necho \"\\n\";\n$arr2 = [4, -4, 4];\n\
    $k2 = 2;\nprint_r(maximum($arr2, $k2));\necho \"\\n\";\n$arr3 = [-3, 2, 1, 2,\
    \ -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3, $k3));\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi2s_vm5k.php:55\n\
    Stack trace:\n#0 /tmp/tmpi2s_vm5k.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpi2s_vm5k.php\
    \ on line 55\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    if ($count == 0) {\n\
    \        return $result;\n    }\n    if ($count == 1) {\n        return $arr;\n\
    \    }\n    $i = 0;\n    $j = $count - 1;\n    while ($i < $j) {\n        $temp\
    \ = $arr[$i];\n        $arr[$i] = $arr[$j];\n        $arr[$j] = $temp;\n     \
    \   $i++;\n        $j--;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $result[]\
    \ = $arr[$i];\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -4\n    [2] => -3\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => -4\n)\n\nArray\n(\n    [0] => 1\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptvib7xnp.php:57\n\
    Stack trace:\n#0 /tmp/tmptvib7xnp.php(70): test()\n#1 {main}\n  thrown in /tmp/tmptvib7xnp.php\
    \ on line 57\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) return [];\n    if ($k == 0)\
    \ return [];\n    if ($k == $n) return $arr;\n    $heap = new SplMaxHeap();\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $heap->insert($arr[$i]);\n    }\n\
    \    for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] > $heap->top()) {\n\
    \            $heap->extract();\n            $heap->insert($arr[$i]);\n       \
    \ }\n    }\n    $res = [];\n    while (!$heap->isEmpty()) {\n        $res[] =\
    \ $heap->extract();\n    }\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz3mt3xs9.php:55\n\
    Stack trace:\n#0 /tmp/tmpz3mt3xs9.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpz3mt3xs9.php\
    \ on line 55\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        $result[] = $arr[$i];\n        if (count($result) > $k) {\n\
    \            sort($result);\n            array_shift($result);\n        }\n  \
    \  }\n    sort($result);\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len == 0) return [];\n    if ($len\
    \ == 1) return $arr;\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n    \
    \    $max = $arr[0];\n        $index = 0;\n        for ($j = 1; $j < $len; $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $index = $j;\n            }\n        }\n        $res[] = $max;\n\
    \        unset($arr[$index]);\n        $arr = array_values($arr);\n        $len--;\n\
    \    }\n    return $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8r66pyv9.php:55\n\
    Stack trace:\n#0 /tmp/tmp8r66pyv9.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp8r66pyv9.php\
    \ on line 55\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $max = $arr[0];\n    $max_index = 0;\n    for\
    \ ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n        $max_index = $i;\n\
    \        for ($j = $i + 1; $j < count($arr); $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $max_index = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        $arr[$max_index]\
    \ = $arr[$i];\n        $arr[$i] = $max;\n    }\n    return $result;\n}\n\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k =\
    \ 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsb7pxg1n.php:53\n\
    Stack trace:\n#0 /tmp/tmpsb7pxg1n.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpsb7pxg1n.php\
    \ on line 53\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) {\n        return [];\n    }\n\
    \    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    $this->buildHeap($res);\n    for ($i = $k; $i < $n; $i++) {\n    \
    \    if ($arr[$i] > $res[0]) {\n            $res[0] = $arr[$i];\n            $this->heapify($res,\
    \ 0);\n        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Using $this when not in object context\
    \ in /tmp/tmps3e31dqv.php:26\nStack trace:\n#0 /tmp/tmps3e31dqv.php(37): maximum()\n\
    #1 /tmp/tmps3e31dqv.php(41): candidate()\n#2 /tmp/tmps3e31dqv.php(54): test()\n\
    #3 {main}\n  thrown in /tmp/tmps3e31dqv.php on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        $result[] = $arr[$i];\n        if (count($result) > $k) {\n\
    \            sort($result);\n            array_shift($result);\n        }\n  \
    \  }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len == 0) {\n        return [];\n \
    \   }\n    if ($len <= $k) {\n        return $arr;\n    }\n    $res = [];\n  \
    \  for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    for ($i\
    \ = $k; $i < $len; $i++) {\n        $min = min($res);\n        if ($arr[$i] >\
    \ $min) {\n            $res[array_search($min, $res)] = $arr[$i];\n        }\n\
    \    }\n    sort($res);\n    return $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv4qhxc1c.php:47\n\
    Stack trace:\n#0 /tmp/tmpv4qhxc1c.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpv4qhxc1c.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $i = 0;\n    while ($i < $k) {\n        $max =\
    \ -1000;\n        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n\
    \            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n      \
    \          $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n        $i++;\n    }\n    return $result;\n}\n\n\
    $arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k =\
    \ 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -1000\n)\nArray\n(\n\
    \    [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpu_3bcucx.php on line 24\n\
    PHP Warning:  Undefined array key 0 in /tmp/tmpu_3bcucx.php on line 24\nPHP Warning:\
    \  Undefined array key 0 in /tmp/tmpu_3bcucx.php on line 24\nPHP Fatal error:\
    \  Uncaught Exception: Test failed! in /tmp/tmpu_3bcucx.php:52\nStack trace:\n\
    #0 /tmp/tmpu_3bcucx.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpu_3bcucx.php\
    \ on line 52\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        $result[] = $arr[$i];\n        sort($result);\n        if (count($result)\
    \ > $k) {\n            array_shift($result);\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4,\
    \ 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $size = count($arr);\n    if ($size == 0 || $k\
    \ == 0) {\n        return $result;\n    }\n    $max = $arr[0];\n    $maxIndex\
    \ = 0;\n    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n        $maxIndex\
    \ = $i;\n        for ($j = $i + 1; $j < $size; $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        $temp = $arr[$i];\n        $arr[$i] = $max;\n\
    \        $arr[$maxIndex] = $temp;\n        $result[] = $max;\n    }\n    return\
    \ $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl7akcwg3.php:49\n\
    Stack trace:\n#0 /tmp/tmpl7akcwg3.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpl7akcwg3.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) {\n        return [];\n    }\n\
    \    $max = $arr[0];\n    for ($i = 1; $i < $n; $i++) {\n        if ($arr[$i]\
    \ > $max) {\n            $max = $arr[$i];\n        }\n    }\n    $buckets = array_fill(0,\
    \ $n, []);\n    $base = $max + 1;\n    for ($i = 0; $i < $n; $i++) {\n       \
    \ $index = ($arr[$i] + $base) % $n;\n        $buckets[$index][] = $arr[$i];\n\
    \    }\n    $res = [];\n    for ($i = $n - 1; $i >= 0; $i--) {\n        if (count($buckets[$i])\
    \ > 0) {\n            foreach ($buckets[$i] as $num) {\n                $res[]\
    \ = $num;\n                if (count($res) == $k) {\n                    return\
    \ $res;\n                }\n            }\n        }\n    }\n    return $res;\n\
    }\n$arr1 = [-3, -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1, $k1));\necho \"\\n\"\
    ;\n$arr2 = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2, $k2));\necho \"\\n\"\
    ;\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3, $k3));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => 5\n    [2] => -3\n)\n\nArray\n(\n \
    \   [0] => -4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzzabyl_h.php:64\n\
    Stack trace:\n#0 /tmp/tmpzzabyl_h.php(77): test()\n#1 {main}\n  thrown in /tmp/tmpzzabyl_h.php\
    \ on line 64\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    if ($count < $k) {\n\
    \        return $result;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n  \
    \  for ($i = 0; $i < $count; $i++) {\n        if ($arr[$i] < $min) {\n       \
    \     $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n          \
    \  $max = $arr[$i];\n        }\n    }\n    $bucket = [];\n    $bucketSize = ($max\
    \ - $min) / $k + 1;\n    for ($i = 0; $i < $count; $i++) {\n        $index = floor(($arr[$i]\
    \ - $min) / $bucketSize);\n        if (!isset($bucket[$index])) {\n          \
    \  $bucket[$index] = [];\n        }\n        $bucket[$index][] = $arr[$i];\n \
    \   }\n    for ($i = $k - 1; $i >= 0; $i--) {\n        if (!isset($bucket[$i]))\
    \ {\n            continue;\n        }\n        $count = count($bucket[$i]);\n\
    \        for ($j = 0; $j < $count; $j++) {\n            $result[] = $bucket[$i][$j];\n\
    \            if (count($result) == $k) {\n                return $result;\n  \
    \          }\n        }\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => -3\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7p5dksfa.php:73\n\
    Stack trace:\n#0 /tmp/tmp7p5dksfa.php(86): test()\n#1 {main}\n  thrown in /tmp/tmp7p5dksfa.php\
    \ on line 73\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    if ($count == 0) {\n\
    \        return $result;\n    }\n    if ($count == 1) {\n        $result[] = $arr[0];\n\
    \        return $result;\n    }\n    $max = $arr[0];\n    $min = $arr[0];\n  \
    \  for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] > $max) {\n       \
    \     $max = $arr[$i];\n        }\n        if ($arr[$i] < $min) {\n          \
    \  $min = $arr[$i];\n        }\n    }\n    $bucket = [];\n    $bucketCount = $max\
    \ - $min + 1;\n    for ($i = 0; $i < $bucketCount; $i++) {\n        $bucket[$i]\
    \ = [];\n    }\n    for ($i = 0; $i < $count; $i++) {\n        $bucket[$arr[$i]\
    \ - $min][] = $arr[$i];\n    }\n    $index = $bucketCount - 1;\n    while ($k\
    \ > 0) {\n        if (count($bucket[$index]) > 0) {\n            $result = array_merge($result,\
    \ $bucket[$index]);\n            $k -= count($bucket[$index]);\n        }\n  \
    \      $index--;\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n    [1] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw6dpib_m.php:69\n\
    Stack trace:\n#0 /tmp/tmpw6dpib_m.php(82): test()\n#1 {main}\n  thrown in /tmp/tmpw6dpib_m.php\
    \ on line 69\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len == 0) {\n        return [];\n \
    \   }\n    if ($len == 1) {\n        return $arr;\n    }\n    $res = [];\n   \
    \ for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $heap\
    \ = new SplMaxHeap();\n    foreach ($res as $num) {\n        $heap->insert($num);\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i] > $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    return iterator_to_array($heap);\n}\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k =\
    \ 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2,\
    \ 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [2] => 5\n    [1] => -3\n    [0] => -4\n)\n\nArray\n(\n \
    \   [1] => 4\n    [0] => -4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0ky3h937.php:58\n\
    Stack trace:\n#0 /tmp/tmp0ky3h937.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp0ky3h937.php\
    \ on line 58\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    if ($count == 0) {\n\
    \        return $result;\n    }\n    if ($count == 1) {\n        $result[] = $arr[0];\n\
    \        return $result;\n    }\n    $max = $arr[0];\n    $index = 0;\n    for\
    \ ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] > $max) {\n            $max\
    \ = $arr[$i];\n            $index = $i;\n        }\n    }\n    $result[] = $max;\n\
    \    $arr[$index] = -1;\n    $k--;\n    while ($k > 0) {\n        $max = $arr[0];\n\
    \        $index = 0;\n        for ($i = 1; $i < $count; $i++) {\n            if\
    \ ($arr[$i] > $max) {\n                $max = $arr[$i];\n                $index\
    \ = $i;\n            }\n        }\n        $result[] = $max;\n        $arr[$index]\
    \ = -1;\n        $k--;\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k\
    \ = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\n\
    print_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -1\n    [2] => -1\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsw56af6e.php:70\n\
    Stack trace:\n#0 /tmp/tmpsw56af6e.php(83): test()\n#1 {main}\n  thrown in /tmp/tmpsw56af6e.php\
    \ on line 70\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len == 0) return [];\n    if ($len\
    \ == 1) return $arr;\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n    \
    \    $max = $arr[0];\n        $index = 0;\n        for ($j = 1; $j < $len - $i;\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $index = $j;\n            }\n        }\n        $res[] = $max;\n\
    \        array_splice($arr, $index, 1);\n    }\n    return $res;\n}\n\n$arr =\
    \ [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k\
    \ = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k =\
    \ 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphova8ff9.php:53\n\
    Stack trace:\n#0 /tmp/tmphova8ff9.php(66): test()\n#1 {main}\n  thrown in /tmp/tmphova8ff9.php\
    \ on line 53\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) return [];\n    if ($k == 0)\
    \ return [];\n    if ($k == $n) return $arr;\n    $res = [];\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    for ($i = $k; $i <\
    \ $n; $i++) {\n        $res = insert($res, $arr[$i]);\n    }\n    return $res;\n\
    }\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppm0f6p5m.php:36\n\
    Stack trace:\n#0 /tmp/tmppm0f6p5m.php(49): test()\n#1 {main}\n  thrown in /tmp/tmppm0f6p5m.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        $result[] = $arr[$i];\n        $result = maxHeap($result);\n\
    \        if (count($result) > $k) {\n            array_shift($result);\n     \
    \   }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function maxHeap()\
    \ in /tmp/tmpuuwk5f_5.php:22\nStack trace:\n#0 /tmp/tmpuuwk5f_5.php(30): maximum()\n\
    #1 /tmp/tmpuuwk5f_5.php(34): candidate()\n#2 /tmp/tmpuuwk5f_5.php(47): test()\n\
    #3 {main}\n  thrown in /tmp/tmpuuwk5f_5.php on line 22\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $length = count($arr);\n    if ($k > $length) {\n        return null;\n\
    \    }\n    $max = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max[$i] =\
    \ $arr[$i];\n    }\n    for ($i = $k; $i < $length; $i++) {\n        $min = min($max);\n\
    \        if ($arr[$i] > $min) {\n            $max[array_search($min, $max)] =\
    \ $arr[$i];\n        }\n    }\n    sort($max);\n    return $max;\n}\n$arr = [-3,\
    \ -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho PHP_EOL;\n$arr = [4, -4,\
    \ 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho PHP_EOL;\n$arr = [-3, 2, 1,\
    \ 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpa7zm7vk8.php:27\nStack trace:\n#0 /tmp/tmpa7zm7vk8.php(27):\
    \ min()\n#1 /tmp/tmpa7zm7vk8.php(48): maximum()\n#2 /tmp/tmpa7zm7vk8.php(62):\
    \ candidate()\n#3 /tmp/tmpa7zm7vk8.php(65): test()\n#4 {main}\n  thrown in /tmp/tmpa7zm7vk8.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $i = 0;\n    $j = 0;\n    while ($i < $k) {\n\
    \        $max = $arr[$j];\n        $index = $j;\n        for ($j; $j < count($arr);\
    \ $j++) {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n\
    \                $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n        $arr = array_values($arr);\n        $j\
    \ = 0;\n        $i++;\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptk1zul4q.php:55\n\
    Stack trace:\n#0 /tmp/tmptk1zul4q.php(68): test()\n#1 {main}\n  thrown in /tmp/tmptk1zul4q.php\
    \ on line 55\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) return [];\n    if ($k == 0)\
    \ return [];\n    if ($k == $n) return $arr;\n    $res = [];\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        $max = PHP_INT_MIN;\n        $max_idx = -1;\n    \
    \    for ($j = 0; $j < $n; $j++) {\n            if ($arr[$j] > $max) {\n     \
    \           $max = $arr[$j];\n                $max_idx = $j;\n            }\n\
    \        }\n        $res[] = $max;\n        $arr[$max_idx] = PHP_INT_MIN;\n  \
    \  }\n    return $res;\n}\n$arr1 = [-3, -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1,\
    \ $k1));\necho \"\\n\";\n$arr2 = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2,\
    \ $k2));\necho \"\\n\";\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3,\
    \ $k3));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnsabscu7.php:54\n\
    Stack trace:\n#0 /tmp/tmpnsabscu7.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpnsabscu7.php\
    \ on line 54\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len < $k) {\n        return $arr;\n\
    \    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        $res = insert($res, $arr[$i]);\n\
    \    }\n    return $res;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp72gwl5t0.php:36\n\
    Stack trace:\n#0 /tmp/tmp72gwl5t0.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp72gwl5t0.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) {\n        return [];\n    }\n\
    \    if ($k == 0) {\n        return [];\n    }\n    if ($k >= $n) {\n        return\
    \ $arr;\n    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n       \
    \ $result[] = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n    foreach ($result\
    \ as $item) {\n        $heap->insert($item);\n    }\n    for ($i = $k; $i < $n;\
    \ $i++) {\n        if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n\
    \            $heap->insert($arr[$i]);\n        }\n    }\n    return $heap->toArray();\n\
    }\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4,\
    \ 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined method SplMaxHeap::toArray()\
    \ in /tmp/tmpkig5b3em.php:42\nStack trace:\n#0 /tmp/tmpkig5b3em.php(51): maximum()\n\
    #1 {main}\n  thrown in /tmp/tmpkig5b3em.php on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        $result[] = $arr[$i];\n        $result = maxHeap($result);\n\
    \        if (count($result) > $k) {\n            array_shift($result);\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function maxHeap()\
    \ in /tmp/tmp8ls_tp92.php:22\nStack trace:\n#0 /tmp/tmp8ls_tp92.php(31): maximum()\n\
    #1 /tmp/tmp8ls_tp92.php(35): candidate()\n#2 /tmp/tmp8ls_tp92.php(48): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8ls_tp92.php on line 22\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < count($arr); $i++) {\n     \
    \   if (count($result) == 0) {\n            $result[] = $arr[$i];\n        } else\
    \ {\n            $j = count($result) - 1;\n            while ($j >= 0 && $result[$j]\
    \ < $arr[$i]) {\n                $j--;\n            }\n            if ($j < $k\
    \ - 1) {\n                array_splice($result, $j + 1, 0, $arr[$i]);\n      \
    \          if (count($result) > $k) {\n                    array_pop($result);\n\
    \                }\n            }\n        }\n    }\n    return $result;\n}\n\
    $arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr\
    \ = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3q62drxq.php:54\n\
    Stack trace:\n#0 /tmp/tmp3q62drxq.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp3q62drxq.php\
    \ on line 54\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        } else {\n            $min = min($result);\n           \
    \ if ($min < $arr[$i]) {\n                $index = array_search($min, $result);\n\
    \                $result[$index] = $arr[$i];\n            }\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpprhsx9py.php:24\nStack trace:\n#0 /tmp/tmpprhsx9py.php(24):\
    \ min()\n#1 /tmp/tmpprhsx9py.php(47): maximum()\n#2 /tmp/tmpprhsx9py.php(61):\
    \ candidate()\n#3 /tmp/tmpprhsx9py.php(64): test()\n#4 {main}\n  thrown in /tmp/tmpprhsx9py.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        while ($size > 0 && count($result) > 0 && $result[count($result)\
    \ - 1] < $arr[$i]) {\n            array_pop($result);\n            $size--;\n\
    \        }\n        if ($size < $k) {\n            $result[] = $arr[$i];\n   \
    \         $size++;\n        }\n    }\n    return $result;\n}\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1,\
    \ -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\n\nArray\n(\n)\n\nArray\n(\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptsf1seaq.php:49\n\
    Stack trace:\n#0 /tmp/tmptsf1seaq.php(62): test()\n#1 {main}\n  thrown in /tmp/tmptsf1seaq.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) return [];\n    if ($k > $n)\
    \ $k = $n;\n    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $heap->insert($arr[$i]);\n    }\n    for ($i = $k; $i < $n; $i++) {\n\
    \        if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n     \
    \       $heap->insert($arr[$i]);\n        }\n    }\n    $res = [];\n    while\
    \ (!$heap->isEmpty()) {\n        $res[] = $heap->extract();\n    }\n    return\
    \ $res;\n}\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnwzxo18h.php:42\n\
    Stack trace:\n#0 /tmp/tmpnwzxo18h.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpnwzxo18h.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if (count($result) == 0) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $j = count($result) - 1;\n            while ($j\
    \ >= 0 && $result[$j] < $arr[$i]) {\n                $j--;\n            }\n  \
    \          if ($j < $k - 1) {\n                array_splice($result, $j + 1, 0,\
    \ $arr[$i]);\n                if (count($result) > $k) {\n                   \
    \ array_pop($result);\n                }\n            }\n        }\n    }\n  \
    \  return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    echo PHP_EOL;\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho\
    \ PHP_EOL;\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho PHP_EOL;\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf6xghls_.php:58\n\
    Stack trace:\n#0 /tmp/tmpf6xghls_.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpf6xghls_.php\
    \ on line 58\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        while (count($result) > 0 && $result[count($result) - 1] <\
    \ $arr[$i] && $size - $i > $k - count($result)) {\n            array_pop($result);\n\
    \        }\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeqgkhfn7.php:44\n\
    Stack trace:\n#0 /tmp/tmpeqgkhfn7.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpeqgkhfn7.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    $heap = new SplMaxHeap();\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        $heap->insert($arr[$i]);\n    }\n    $res = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $res[] = $heap->extract();\n    }\n\
    \    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    \n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1,\
    \ 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4unrme3g.php:46\n\
    Stack trace:\n#0 /tmp/tmp4unrme3g.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp4unrme3g.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) return [];\n    if ($k == 0)\
    \ return [];\n    if ($k >= $n) return $arr;\n    $res = [];\n    for ($i = 0;\
    \ $i < $k; $i++) {\n        $max = $arr[$i];\n        $index = $i;\n        for\
    \ ($j = $i + 1; $j < $n; $j++) {\n            if ($arr[$j] > $max) {\n       \
    \         $max = $arr[$j];\n                $index = $j;\n            }\n    \
    \    }\n        $res[] = $max;\n        $arr[$index] = $arr[$i];\n        $arr[$i]\
    \ = $max;\n    }\n    return $res;\n}\n$arr1 = [-3, -4, 5];\n$k1 = 3;\n$arr2 =\
    \ [4, -4, 4];\n$k2 = 2;\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr1,\
    \ $k1));\nprint_r(maximum($arr2, $k2));\nprint_r(maximum($arr3, $k3));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptsoccllu.php:52\n\
    Stack trace:\n#0 /tmp/tmptsoccllu.php(65): test()\n#1 {main}\n  thrown in /tmp/tmptsoccllu.php\
    \ on line 52\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($min < $arr[$i])\
    \ {\n                $result[array_search($min, $result)] = $arr[$i];\n      \
    \      }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k =\
    \ 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpk3_pg2zn.php:24\nStack trace:\n#0 /tmp/tmpk3_pg2zn.php(24):\
    \ min()\n#1 /tmp/tmpk3_pg2zn.php(46): maximum()\n#2 /tmp/tmpk3_pg2zn.php(60):\
    \ candidate()\n#3 /tmp/tmpk3_pg2zn.php(63): test()\n#4 {main}\n  thrown in /tmp/tmpk3_pg2zn.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len == $k) {\n        return $arr;\n\
    \    }\n    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $len; $i++) {\n \
    \       if ($i < $k) {\n            $heap->insert($arr[$i]);\n        } else {\n\
    \            $top = $heap->top();\n            if ($top < $arr[$i]) {\n      \
    \          $heap->extract();\n                $heap->insert($arr[$i]);\n     \
    \       }\n        }\n    }\n    $res = [];\n    while (!$heap->isEmpty()) {\n\
    \        $res[] = $heap->extract();\n    }\n    return $res;\n}\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1,\
    \ -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => -4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgw1ma7kh.php:57\n\
    Stack trace:\n#0 /tmp/tmpgw1ma7kh.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpgw1ma7kh.php\
    \ on line 57\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len == 0) {\n        return [];\n \
    \   }\n    if ($len == 1) {\n        return $arr;\n    }\n    $res = [];\n   \
    \ for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $maxIndex =\
    \ 0;\n        for ($j = 1; $j < $len - $i; $j++) {\n            if ($arr[$j] >\
    \ $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        $res[] = $max;\n        array_splice($arr,\
    \ $maxIndex, 1);\n    }\n    return $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n$arr = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptlxvxx6o.php:54\n\
    Stack trace:\n#0 /tmp/tmptlxvxx6o.php(67): test()\n#1 {main}\n  thrown in /tmp/tmptlxvxx6o.php\
    \ on line 54\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        while ($count > 0 && count($result) > 0 && $result[count($result)\
    \ - 1] < $arr[$i]) {\n            array_pop($result);\n            $count--;\n\
    \        }\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        }\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n)\nArray\n(\n    [0] => 4\n    [1] => 4\n)\nArray\n\
    (\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr5iepfic.php:48\n\
    Stack trace:\n#0 /tmp/tmpr5iepfic.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpr5iepfic.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    if ($count < $k) {\n\
    \        return $result;\n    }\n    $max = $arr[0];\n    $maxIndex = 0;\n   \
    \ for ($i = 0; $i < $k; $i++) {\n        $max = $arr[$i];\n        $maxIndex =\
    \ $i;\n        for ($j = $i + 1; $j < $count; $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        $temp = $arr[$i];\n        $arr[$i] = $max;\n\
    \        $arr[$maxIndex] = $temp;\n        $result[] = $max;\n    }\n    return\
    \ $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho\
    \ \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\\
    n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqoddfos8.php:58\n\
    Stack trace:\n#0 /tmp/tmpqoddfos8.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpqoddfos8.php\
    \ on line 58\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        $result[] = $arr[$i];\n        if (count($result) > $k) {\n\
    \            sort($result);\n            array_shift($result);\n        }\n  \
    \  }\n    sort($result);\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k =\
    \ 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $res = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        while (count($res) && $res[count($res) - 1] < $arr[$i] && $len\
    \ - $i > $k - count($res)) {\n            array_pop($res);\n        }\n      \
    \  if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n        }\n\
    \    }\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr =\
    \ [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7hird715.php:47\n\
    Stack trace:\n#0 /tmp/tmp7hird715.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp7hird715.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($arr[$i]\
    \ > $min) {\n                $index = array_search($min, $result);\n         \
    \       $result[$index] = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho\
    \ \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpzgfr21ga.php:24\nStack trace:\n#0 /tmp/tmpzgfr21ga.php(24):\
    \ min()\n#1 /tmp/tmpzgfr21ga.php(47): maximum()\n#2 /tmp/tmpzgfr21ga.php(61):\
    \ candidate()\n#3 /tmp/tmpzgfr21ga.php(64): test()\n#4 {main}\n  thrown in /tmp/tmpzgfr21ga.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    $max = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max[$i] = $arr[$i];\n    }\n    for ($i = $k; $i < $n; $i++) {\n\
    \        $min = min($max);\n        if ($arr[$i] > $min) {\n            $max[array_search($min,\
    \ $max)] = $arr[$i];\n        }\n    }\n    return $max;\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpojwcrj1z.php:48\n\
    Stack trace:\n#0 /tmp/tmpojwcrj1z.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpojwcrj1z.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $length = count($arr);\n    for ($i = 0; $i <\
    \ $length; $i++) {\n        if (count($result) < $k) {\n            $result[]\
    \ = $arr[$i];\n        } else {\n            $min = min($result);\n          \
    \  if ($arr[$i] > $min) {\n                $index = array_search($min, $result);\n\
    \                $result[$index] = $arr[$i];\n            }\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmp34bre6qs.php:24\nStack trace:\n#0 /tmp/tmp34bre6qs.php(24):\
    \ min()\n#1 /tmp/tmp34bre6qs.php(47): maximum()\n#2 /tmp/tmp34bre6qs.php(61):\
    \ candidate()\n#3 /tmp/tmp34bre6qs.php(64): test()\n#4 {main}\n  thrown in /tmp/tmp34bre6qs.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        while ($result && count($result) + $n - $i > $k && $result[count($result)\
    \ - 1] < $arr[$i]) {\n            array_pop($result);\n        }\n        if (count($result)\
    \ < $k) {\n            $result[] = $arr[$i];\n        }\n    }\n    return $result;\n\
    }\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n\
    $arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr\
    \ = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\\
    n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_p1fjkq3.php:47\n\
    Stack trace:\n#0 /tmp/tmp_p1fjkq3.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp_p1fjkq3.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($arr[$i]\
    \ > $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4,\
    \ 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmp97saf4ym.php:24\nStack trace:\n#0 /tmp/tmp97saf4ym.php(24):\
    \ min()\n#1 /tmp/tmp97saf4ym.php(46): maximum()\n#2 /tmp/tmp97saf4ym.php(60):\
    \ candidate()\n#3 /tmp/tmp97saf4ym.php(63): test()\n#4 {main}\n  thrown in /tmp/tmp97saf4ym.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $max = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max[] = $arr[$i];\n\
    \    }\n    for ($i = $k; $i < count($arr); $i++) {\n        for ($j = 0; $j <\
    \ $k; $j++) {\n            if ($arr[$i] > $max[$j]) {\n                $max[$j]\
    \ = $arr[$i];\n                break;\n            }\n        }\n    }\n    sort($max);\n\
    \    return $max;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\
    \n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1,\
    \ 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) return [];\n    if ($k > $n)\
    \ $k = $n;\n    $heap = new SplMaxHeap();\n    for ($i = 0; $i < $k; $i++) {\n\
    \        $heap->insert($arr[$i]);\n    }\n    for ($i = $k; $i < $n; $i++) {\n\
    \        if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n     \
    \       $heap->insert($arr[$i]);\n        }\n    }\n    $res = [];\n    while\
    \ (!$heap->isEmpty()) {\n        $res[] = $heap->extract();\n    }\n    return\
    \ $res;\n}\n$arr1 = [-3, -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1, $k1));\necho\
    \ \"\\n\";\n$arr2 = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2, $k2));\necho\
    \ \"\\n\";\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3,\
    \ $k3));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => -4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5y4lypm8.php:54\n\
    Stack trace:\n#0 /tmp/tmp5y4lypm8.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp5y4lypm8.php\
    \ on line 54\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $length = count($arr);\n    $result = [];\n    for ($i = 0; $i <\
    \ $length; $i++) {\n        if (count($result) < $k) {\n            $result[]\
    \ = $arr[$i];\n        } else {\n            $min = min($result);\n          \
    \  if ($arr[$i] > $min) {\n                $result[array_search($min, $result)]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpalmslg1r.php:24\nStack trace:\n#0 /tmp/tmpalmslg1r.php(24):\
    \ min()\n#1 /tmp/tmpalmslg1r.php(37): maximum()\n#2 /tmp/tmpalmslg1r.php(51):\
    \ candidate()\n#3 /tmp/tmpalmslg1r.php(54): test()\n#4 {main}\n  thrown in /tmp/tmpalmslg1r.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) {\n        return [];\n    }\n\
    \    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n\
    \    }\n    $heap = new SplMaxHeap();\n    foreach ($res as $num) {\n        $heap->insert($num);\n\
    \    }\n    for ($i = $k; $i < $n; $i++) {\n        if ($arr[$i] > $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    $res = [];\n    while (!$heap->isEmpty()) {\n        $res[]\
    \ = $heap->extract();\n    }\n    return array_reverse($res);\n}\n$arr1 = [-3,\
    \ -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1, $k1));\necho \"\\n\";\n$arr2 = [4,\
    \ -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2, $k2));\necho \"\\n\";\n$arr3 = [-3,\
    \ 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3, $k3));\necho \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => -4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7hfllgb0.php:60\n\
    Stack trace:\n#0 /tmp/tmp7hfllgb0.php(72): test()\n#1 {main}\n  thrown in /tmp/tmp7hfllgb0.php\
    \ on line 60\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max =\
    \ -1000;\n        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $maxIndex = $j;\n            }\n        }\n        $result[] =\
    \ $max;\n        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -1000\n)\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmp2j4kzn9v.php on line 23\n\
    PHP Warning:  Undefined array key 0 in /tmp/tmp2j4kzn9v.php on line 23\nPHP Fatal\
    \ error:  Uncaught Exception: Test failed! in /tmp/tmp2j4kzn9v.php:41\nStack trace:\n\
    #0 /tmp/tmp2j4kzn9v.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp2j4kzn9v.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < count($arr); $i++) {\n     \
    \   if (count($result) < $k) {\n            array_push($result, $arr[$i]);\n \
    \       } else {\n            $min = min($result);\n            if ($arr[$i] >\
    \ $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpl_un2xb_.php:23\nStack trace:\n#0 /tmp/tmpl_un2xb_.php(23):\
    \ min()\n#1 /tmp/tmpl_un2xb_.php(34): maximum()\n#2 /tmp/tmpl_un2xb_.php(48):\
    \ candidate()\n#3 /tmp/tmpl_un2xb_.php(51): test()\n#4 {main}\n  thrown in /tmp/tmpl_un2xb_.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        } else {\n            $min = min($result);\n           \
    \ if ($min < $arr[$i]) {\n                $index = array_search($min, $result);\n\
    \                $result[$index] = $arr[$i];\n            }\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmps71xzj17.php:24\nStack trace:\n#0 /tmp/tmps71xzj17.php(24):\
    \ min()\n#1 /tmp/tmps71xzj17.php(39): maximum()\n#2 /tmp/tmps71xzj17.php(53):\
    \ candidate()\n#3 /tmp/tmps71xzj17.php(56): test()\n#4 {main}\n  thrown in /tmp/tmps71xzj17.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    $max = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $max[$i] = $arr[$i];\n    }\n    for ($i = $k; $i < $n; $i++) {\n\
    \        $max = maxHeapify($max, $arr[$i]);\n    }\n    return $max;\n}\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnjsytw0v.php:33\n\
    Stack trace:\n#0 /tmp/tmpnjsytw0v.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpnjsytw0v.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len == 0) {\n        return [];\n \
    \   }\n    if ($len <= $k) {\n        return $arr;\n    }\n    $res = [];\n  \
    \  for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $max\
    \ = max($res);\n    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i] > $max)\
    \ {\n            $res[array_search($max, $res)] = $arr[$i];\n            $max\
    \ = max($res);\n        }\n    }\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8zztwtgj.php:47\n\
    Stack trace:\n#0 /tmp/tmp8zztwtgj.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp8zztwtgj.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $max = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max[$i] =\
    \ $arr[$i];\n    }\n    for ($i = $k; $i < count($arr); $i++) {\n        $min\
    \ = PHP_INT_MAX;\n        $minIndex = 0;\n        for ($j = 0; $j < $k; $j++)\
    \ {\n            if ($max[$j] < $min) {\n                $min = $max[$j];\n  \
    \              $minIndex = $j;\n            }\n        }\n        if ($arr[$i]\
    \ > $min) {\n            $max[$minIndex] = $arr[$i];\n        }\n    }\n    return\
    \ $max;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpazwzasnz.php:46\n\
    Stack trace:\n#0 /tmp/tmpazwzasnz.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpazwzasnz.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        } else {\n            $min = min($result);\n           \
    \ if ($min < $arr[$i]) {\n                $index = array_search($min, $result);\n\
    \                $result[$index] = $arr[$i];\n            }\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpobgyqrbp.php:24\nStack trace:\n#0 /tmp/tmpobgyqrbp.php(24):\
    \ min()\n#1 /tmp/tmpobgyqrbp.php(47): maximum()\n#2 /tmp/tmpobgyqrbp.php(61):\
    \ candidate()\n#3 /tmp/tmpobgyqrbp.php(64): test()\n#4 {main}\n  thrown in /tmp/tmpobgyqrbp.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) return [];\n    if ($k > $n)\
    \ $k = $n;\n    $res = [];\n    for ($i = 0; $i < $k; $i++) {\n        $res[]\
    \ = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n    foreach ($res as $num)\
    \ {\n        $heap->insert($num);\n    }\n    for ($i = $k; $i < $n; $i++) {\n\
    \        if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n     \
    \       $heap->insert($arr[$i]);\n        }\n    }\n    return $res;\n}\n$arr1\
    \ = [-3, -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1, $k1));\necho \"\\n\";\n$arr2\
    \ = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2, $k2));\necho \"\\n\";\n$arr3\
    \ = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3, $k3));\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => -4\n)\n\nArray\n(\n    [0] => -3\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkf6i7rxg.php:54\n\
    Stack trace:\n#0 /tmp/tmpkf6i7rxg.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpkf6i7rxg.php\
    \ on line 54\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max =\
    \ -1000;\n        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $maxIndex = $j;\n            }\n        }\n        $result[] =\
    \ $max;\n        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k =\
    \ 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -1000\n)\nArray\n(\n\
    \    [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpv0skmdgd.php on line 23\n\
    PHP Warning:  Undefined array key 0 in /tmp/tmpv0skmdgd.php on line 23\nPHP Warning:\
    \  Undefined array key 0 in /tmp/tmpv0skmdgd.php on line 23\nPHP Fatal error:\
    \  Uncaught Exception: Test failed! in /tmp/tmpv0skmdgd.php:50\nStack trace:\n\
    #0 /tmp/tmpv0skmdgd.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpv0skmdgd.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len == 0) {\n        return [];\n \
    \   }\n    $res = [];\n    for ($i = 0; $i < $len; $i++) {\n        while (count($res)\
    \ > 0 && $res[count($res) - 1] < $arr[$i] && $len - $i > $k - count($res)) {\n\
    \            array_pop($res);\n        }\n        if (count($res) < $k) {\n  \
    \          array_push($res, $arr[$i]);\n        }\n    }\n    return $res;\n}\n\
    \n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4,\
    \ 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpik7zksfq.php:50\n\
    Stack trace:\n#0 /tmp/tmpik7zksfq.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpik7zksfq.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = PHP_INT_MAX;\n            $minIndex = -1;\n\
    \            for ($j = 0; $j < $k; $j++) {\n                if ($result[$j] <\
    \ $min) {\n                    $min = $result[$j];\n                    $minIndex\
    \ = $j;\n                }\n            }\n            if ($arr[$i] > $min) {\n\
    \                $result[$minIndex] = $arr[$i];\n            }\n        }\n  \
    \  }\n    sort($result);\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k =\
    \ 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len == 0) {\n        return [];\n \
    \   }\n    if ($len == 1) {\n        return $arr;\n    }\n    $res = [];\n   \
    \ for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $maxIndex =\
    \ 0;\n        for ($j = 1; $j < $len - $i; $j++) {\n            if ($arr[$j] >\
    \ $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        $res[] = $max;\n        array_splice($arr,\
    \ $maxIndex, 1);\n    }\n    return $res;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpor0upn1i.php:49\n\
    Stack trace:\n#0 /tmp/tmpor0upn1i.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpor0upn1i.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len == 0) {\n        return [];\n \
    \   }\n    if ($len == 1) {\n        return $arr;\n    }\n    $res = [];\n   \
    \ for ($i = 0; $i < $k; $i++) {\n        $res[] = $arr[$i];\n    }\n    $heap\
    \ = new SplMaxHeap();\n    for ($i = 0; $i < $k; $i++) {\n        $heap->insert($res[$i]);\n\
    \    }\n    for ($i = $k; $i < $len; $i++) {\n        if ($arr[$i] > $heap->top())\
    \ {\n            $heap->extract();\n            $heap->insert($arr[$i]);\n   \
    \     }\n    }\n    $res = [];\n    while (!$heap->isEmpty()) {\n        $res[]\
    \ = $heap->extract();\n    }\n    return $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => -4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7h5hstg9.php:62\n\
    Stack trace:\n#0 /tmp/tmp7h5hstg9.php(75): test()\n#1 {main}\n  thrown in /tmp/tmp7h5hstg9.php\
    \ on line 62\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    if ($count == $k) {\n\
    \        return $arr;\n    }\n    $max = $arr[0];\n    $maxIndex = 0;\n    for\
    \ ($i = 0; $i < $k; $i++) {\n        for ($j = $i; $j < $count; $j++) {\n    \
    \        if ($arr[$j] > $max) {\n                $max = $arr[$j];\n          \
    \      $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        $arr[$maxIndex] = -1000;\n        $max = -1000;\n    }\n    return $result;\n\
    }\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n\
    $arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr\
    \ = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\\
    n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6c__3d85.php:55\n\
    Stack trace:\n#0 /tmp/tmp6c__3d85.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp6c__3d85.php\
    \ on line 55\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        } else {\n            $min = min($result);\n           \
    \ if ($min < $arr[$i]) {\n                $result[array_search($min, $result)]\
    \ = $arr[$i];\n            }\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\necho json_encode(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: '[-4,-3,5]'
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmp1q3weknw.php:24\nStack trace:\n#0 /tmp/tmp1q3weknw.php(24):\
    \ min()\n#1 /tmp/tmp1q3weknw.php(37): maximum()\n#2 /tmp/tmp1q3weknw.php(51):\
    \ candidate()\n#3 /tmp/tmp1q3weknw.php(54): test()\n#4 {main}\n  thrown in /tmp/tmp1q3weknw.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $count = count($arr);\n    if ($count == $k) {\n        return $arr;\n\
    \    }\n    $result = array_slice($arr, 0, $k);\n    $result = heapSort($result);\n\
    \    for ($i = $k; $i < $count; $i++) {\n        if ($arr[$i] > $result[0]) {\n\
    \            $result[0] = $arr[$i];\n            $result = heapSort($result);\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx76opayp.php:38\n\
    Stack trace:\n#0 /tmp/tmpx76opayp.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpx76opayp.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        while (count($result) > 0 && $result[count($result) - 1] <\
    \ $arr[$i] && $count - $i > $k - count($result)) {\n            array_pop($result);\n\
    \        }\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        }\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcymhl2us.php:47\n\
    Stack trace:\n#0 /tmp/tmpcymhl2us.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpcymhl2us.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        } else {\n            $min = min($result);\n           \
    \ if ($min < $arr[$i]) {\n                $index = array_search($min, $result);\n\
    \                $result[$index] = $arr[$i];\n            }\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpjw0gbh17.php:24\nStack trace:\n#0 /tmp/tmpjw0gbh17.php(24):\
    \ min()\n#1 /tmp/tmpjw0gbh17.php(38): maximum()\n#2 /tmp/tmpjw0gbh17.php(52):\
    \ candidate()\n#3 /tmp/tmpjw0gbh17.php(55): test()\n#4 {main}\n  thrown in /tmp/tmpjw0gbh17.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $len = count($arr);\n    if ($len == 0) {\n  \
    \      return $result;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min\
    \ = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    $bucket = array_fill($min, $max - $min + 1, 0);\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        $bucket[$arr[$i]]++;\n    }\n    for ($i\
    \ = $max; $i >= $min; $i--) {\n        if ($bucket[$i] > 0) {\n            $result[]\
    \ = $i;\n            $k--;\n            if ($k == 0) {\n                break;\n\
    \            }\n        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n\
    $k = 3;\n$result = maximum($arr, $k);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt274dnih.php:57\n\
    Stack trace:\n#0 /tmp/tmpt274dnih.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpt274dnih.php\
    \ on line 57\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len == 0) {\n        return [];\n \
    \   }\n    if ($len == 1) {\n        return $arr;\n    }\n    $result = [];\n\
    \    for ($i = 0; $i < $k; $i++) {\n        $max = $arr[0];\n        $maxIndex\
    \ = 0;\n        for ($j = 1; $j < $len - $i; $j++) {\n            if ($arr[$j]\
    \ > $max) {\n                $max = $arr[$j];\n                $maxIndex = $j;\n\
    \            }\n        }\n        $result[] = $max;\n        unset($arr[$maxIndex]);\n\
    \        $arr = array_values($arr);\n    }\n    return $result;\n}\n\n$arr = [-3,\
    \ -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\n\
    print_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpadzicnu_.php:58\n\
    Stack trace:\n#0 /tmp/tmpadzicnu_.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpadzicnu_.php\
    \ on line 58\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n \
    \       } else {\n            $min = PHP_INT_MAX;\n            $minIndex = -1;\n\
    \            for ($j = 0; $j < $k; $j++) {\n                if ($result[$j] <\
    \ $min) {\n                    $min = $result[$j];\n                    $minIndex\
    \ = $j;\n                }\n            }\n            if ($arr[$i] > $min) {\n\
    \                $result[$minIndex] = $arr[$i];\n            }\n        }\n  \
    \  }\n    sort($result);\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $n = count($arr);\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        while (count($result) && $result[count($result) - 1] < $arr[$i] &&\
    \ count($result) + $n - $i > $k) {\n            array_pop($result);\n        }\n\
    \        if (count($result) < $k) {\n            array_push($result, $arr[$i]);\n\
    \        }\n    }\n    return $result;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\
    echo \"\\n\";\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr,\
    \ $k));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn80iczbr.php:47\n\
    Stack trace:\n#0 /tmp/tmpn80iczbr.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpn80iczbr.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $size = count($arr);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        while (count($result) > 0 && $result[count($result) - 1] <\
    \ $arr[$i] && $size - $i > $k - count($result)) {\n            array_pop($result);\n\
    \        }\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        }\n    }\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n\
    $k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplehtqajj.php:47\n\
    Stack trace:\n#0 /tmp/tmplehtqajj.php(60): test()\n#1 {main}\n  thrown in /tmp/tmplehtqajj.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($arr[$i]\
    \ > $min) {\n                $result[array_search($min, $result)] = $arr[$i];\n\
    \            }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\
    \n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4,\
    \ 4];\n$k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n\
    $k = 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => 4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmp18isyaig.php:24\nStack trace:\n#0 /tmp/tmp18isyaig.php(24):\
    \ min()\n#1 /tmp/tmp18isyaig.php(46): maximum()\n#2 /tmp/tmp18isyaig.php(60):\
    \ candidate()\n#3 /tmp/tmp18isyaig.php(63): test()\n#4 {main}\n  thrown in /tmp/tmp18isyaig.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max =\
    \ -1000;\n        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $maxIndex = $j;\n            }\n        }\n        $result[] =\
    \ $max;\n        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k =\
    \ 1;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args) {\n    return\
    \ maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -1000\n)\nArray\n(\n\
    \    [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpbxukf0r4.php on line 23\n\
    PHP Warning:  Undefined array key 0 in /tmp/tmpbxukf0r4.php on line 23\nPHP Warning:\
    \  Undefined array key 0 in /tmp/tmpbxukf0r4.php on line 23\nPHP Fatal error:\
    \  Uncaught Exception: Test failed! in /tmp/tmpbxukf0r4.php:50\nStack trace:\n\
    #0 /tmp/tmpbxukf0r4.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpbxukf0r4.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max =\
    \ -1000;\n        $maxIndex = -1;\n        for ($j = 0; $j < count($arr); $j++)\
    \ {\n            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n  \
    \              $maxIndex = $j;\n            }\n        }\n        $result[] =\
    \ $max;\n        unset($arr[$maxIndex]);\n    }\n    return $result;\n}\n$arr\
    \ = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -1000\n)\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpzdlna1hr.php on line 23\n\
    PHP Warning:  Undefined array key 0 in /tmp/tmpzdlna1hr.php on line 23\nPHP Fatal\
    \ error:  Uncaught Exception: Test failed! in /tmp/tmpzdlna1hr.php:41\nStack trace:\n\
    #0 /tmp/tmpzdlna1hr.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpzdlna1hr.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n        $max =\
    \ -1000;\n        $index = -1;\n        for ($j = 0; $j < count($arr); $j++) {\n\
    \            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n      \
    \          $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        unset($arr[$index]);\n    }\n    return $result;\n}\n\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\n\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr,\
    \ $k));\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\n\
    function candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -1000\n)\nArray\n(\n\
    \    [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpx4p6rpb7.php on line 23\n\
    PHP Warning:  Undefined array key 0 in /tmp/tmpx4p6rpb7.php on line 23\nPHP Warning:\
    \  Undefined array key 0 in /tmp/tmpx4p6rpb7.php on line 23\nPHP Fatal error:\
    \  Uncaught Exception: Test failed! in /tmp/tmpx4p6rpb7.php:50\nStack trace:\n\
    #0 /tmp/tmpx4p6rpb7.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpx4p6rpb7.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    if ($n == 0) {\n        return [];\n    }\n\
    \    if ($k == 0) {\n        return [];\n    }\n    if ($k >= $n) {\n        return\
    \ $arr;\n    }\n    $result = [];\n    for ($i = 0; $i < $k; $i++) {\n       \
    \ $result[] = $arr[$i];\n    }\n    $heap = new SplMaxHeap();\n    foreach ($result\
    \ as $item) {\n        $heap->insert($item);\n    }\n    for ($i = $k; $i < $n;\
    \ $i++) {\n        if ($arr[$i] > $heap->top()) {\n            $heap->extract();\n\
    \            $heap->insert($arr[$i]);\n        }\n    }\n    $result = [];\n \
    \   while (!$heap->isEmpty()) {\n        $result[] = $heap->extract();\n    }\n\
    \    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\n$result = maximum($arr,\
    \ $k);\nprint_r($result);\n\n$arr = [4, -4, 4];\n$k = 2;\n$result = maximum($arr,\
    \ $k);\nprint_r($result);\n\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\n$result\
    \ = maximum($arr, $k);\nprint_r($result);\nfunction candidate(...$args) {\n  \
    \  return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\nArray\n(\n   \
    \ [0] => 4\n    [1] => -4\n)\nArray\n(\n    [0] => 2\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqd6oqcff.php:68\n\
    Stack trace:\n#0 /tmp/tmpqd6oqcff.php(81): test()\n#1 {main}\n  thrown in /tmp/tmpqd6oqcff.php\
    \ on line 68\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $len = count($arr);\n    if ($len == 0) {\n        return [];\n \
    \   }\n    if ($len == 1) {\n        return $arr;\n    }\n    $res = [];\n   \
    \ for ($i = 0; $i < $k; $i++) {\n        $max = -1000;\n        $max_index = -1;\n\
    \        for ($j = 0; $j < $len; $j++) {\n            if ($arr[$j] > $max) {\n\
    \                $max = $arr[$j];\n                $max_index = $j;\n        \
    \    }\n        }\n        $res[] = $max;\n        unset($arr[$max_index]);\n\
    \        $arr = array_values($arr);\n        $len = count($arr);\n    }\n    return\
    \ $res;\n}\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\
    \\n\";\n$arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\"\
    ;\n$arr = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpco_awhwj.php:59\n\
    Stack trace:\n#0 /tmp/tmpco_awhwj.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpco_awhwj.php\
    \ on line 59\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $len = count($arr);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if (count($result) < $k) {\n            array_push($result,\
    \ $arr[$i]);\n        } else {\n            $min = min($result);\n           \
    \ if ($min < $arr[$i]) {\n                $index = array_search($min, $result);\n\
    \                $result[$index] = $arr[$i];\n            }\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n\n$arr = [-3, -4, 5];\n$k = 3;\n\
    print_r(maximum($arr, $k));\n\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpuc7g3ofm.php:24\nStack trace:\n#0 /tmp/tmpuc7g3ofm.php(24):\
    \ min()\n#1 /tmp/tmpuc7g3ofm.php(40): maximum()\n#2 /tmp/tmpuc7g3ofm.php(54):\
    \ candidate()\n#3 /tmp/tmpuc7g3ofm.php(57): test()\n#4 {main}\n  thrown in /tmp/tmpuc7g3ofm.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        $result[] = $arr[$i];\n        if (count($result) > $k) {\n\
    \            sort($result);\n            array_shift($result);\n        }\n  \
    \  }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    if ($count == $k) {\n\
    \        return $arr;\n    }\n    for ($i = 0; $i < $k; $i++) {\n        $max\
    \ = -1000;\n        $index = -1;\n        for ($j = 0; $j < $count; $j++) {\n\
    \            if ($arr[$j] > $max) {\n                $max = $arr[$j];\n      \
    \          $index = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        $arr[$index] = -1000;\n    }\n    return $result;\n}\n$arr = [-3, -4,\
    \ 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4, -4, 4];\n\
    $k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2, 1, 2, -1,\
    \ -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return maximum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(-3,\
    \ -4, 5), 3) !== array(-4, -3, 5)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, -4, 4), 2) !== array(4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(123, -123,\
    \ 20, 0, 1, 2, -3), 3) !== array(2, 20, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-123, 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 15, 0,\
    \ 3, -13, -8, 0), 7) !== array(-13, -8, 0, 0, 3, 5, 15)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 0, 2, 5, 3, -10), 2) !== array(3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0,\
    \ 5, -7), 1) !== array(5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(4, -4), 2) !== array(-4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-10, 10), 2) !== array(-10, 10)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, -23, 243, -400, 0), 0) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcbowfs7f.php:54\n\
    Stack trace:\n#0 /tmp/tmpcbowfs7f.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpcbowfs7f.php\
    \ on line 54\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $max = $arr[0];\n    $maxIndex = 0;\n    for ($i\
    \ = 0; $i < $k; $i++) {\n        for ($j = 0; $j < count($arr); $j++) {\n    \
    \        if ($arr[$j] > $max) {\n                $max = $arr[$j];\n          \
    \      $maxIndex = $j;\n            }\n        }\n        $result[] = $max;\n\
    \        $arr[$maxIndex] = -1000;\n        $max = -1000;\n    }\n    return $result;\n\
    }\n$arr = [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n\
    $arr = [4, -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr\
    \ = [-3, 2, 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\\
    n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4),\
    \ 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 5\n    [1] => -3\n    [2] => -4\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4ts02rh9.php:51\n\
    Stack trace:\n#0 /tmp/tmp4ts02rh9.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp4ts02rh9.php\
    \ on line 51\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $n = count($arr);\n    $res = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        while (count($res) > 0 && $res[count($res) - 1] < $arr[$i] && $n\
    \ - $i > $k - count($res)) {\n            array_pop($res);\n        }\n      \
    \  if (count($res) < $k) {\n            array_push($res, $arr[$i]);\n        }\n\
    \    }\n    return $res;\n}\n$arr1 = [-3, -4, 5];\n$k1 = 3;\nprint_r(maximum($arr1,\
    \ $k1));\necho \"\\n\";\n$arr2 = [4, -4, 4];\n$k2 = 2;\nprint_r(maximum($arr2,\
    \ $k2));\necho \"\\n\";\n$arr3 = [-3, 2, 1, 2, -1, -2, 1];\n$k3 = 1;\nprint_r(maximum($arr3,\
    \ $k3));\necho \"\\n\";\nfunction candidate(...$args) {\n    return maximum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4,\
    \ -3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ -4, 4), 2) !== array(4, 4)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(-3, 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !==\
    \ array(2, 20, 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -3\n    [1] => -4\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc9mq3j8_.php:47\n\
    Stack trace:\n#0 /tmp/tmpc9mq3j8_.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpc9mq3j8_.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n// of length k with the maximum k numbers in arr.\n// Example\
    \ 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output: [-4, -3, 5]\n// Example 2:\n\
    // Input: arr = [4, -4, 4], k = 2\n// Output: [4, 4]\n// Example 3:\n// Input:\
    \ arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output: [2]\n// Note:\n// 1. The length\
    \ of the array will be in the range of [1, 1000].\n// 2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum($arr,\
    \ $k) {\n    $result = [];\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if (count($result) < $k) {\n            $result[] = $arr[$i];\n\
    \        } else {\n            $min = min($result);\n            if ($min < $arr[$i])\
    \ {\n                $result[array_search($min, $result)] = $arr[$i];\n      \
    \      }\n        }\n    }\n    sort($result);\n    return $result;\n}\n$arr =\
    \ [-3, -4, 5];\n$k = 3;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [4,\
    \ -4, 4];\n$k = 2;\nprint_r(maximum($arr, $k));\necho \"\\n\";\n$arr = [-3, 2,\
    \ 1, 2, -1, -2, 1];\n$k = 1;\nprint_r(maximum($arr, $k));\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return maximum(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(-3, -4, 5), 3) !== array(-4, -3, 5)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, -4, 4), 2) !==\
    \ array(4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
    \ 2, 1, 2, -1, -2, 1), 1) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(123, -123, 20, 0, 1, 2, -3), 3) !== array(2, 20,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-123,\
    \ 20, 0, 1, 2, -3), 4) !== array(0, 1, 2, 20)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 15, 0, 3, -13, -8, 0), 7) !== array(-13, -8,\
    \ 0, 0, 3, 5, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 0, 2, 5, 3, -10), 2) !== array(3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 5, -7), 1) !== array(5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, -4), 2) !== array(-4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-10, 10), 2) !==\
    \ array(-10, 10)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, -23, 243, -400, 0), 0) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => -4\n    [1] => -3\n    [2] => 5\n)\n\nArray\n(\n \
    \   [0] => 4\n    [1] => 4\n)\n\nArray\n(\n    [0] => 2\n)\n\n"
  stderr: "PHP Fatal error:  Uncaught ValueError: min(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmp9lp8te3_.php:24\nStack trace:\n#0 /tmp/tmp9lp8te3_.php(24):\
    \ min()\n#1 /tmp/tmp9lp8te3_.php(46): maximum()\n#2 /tmp/tmp9lp8te3_.php(60):\
    \ candidate()\n#3 /tmp/tmp9lp8te3_.php(63): test()\n#4 {main}\n  thrown in /tmp/tmp9lp8te3_.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
