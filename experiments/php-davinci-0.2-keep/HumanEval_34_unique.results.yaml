name: HumanEval_34_unique
language: php
results:
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $s = [];\n    foreach ($l as $v) {\n        if (!in_array($v, $s)) {\n    \
    \        $s[] = $v;\n        }\n    }\n    sort($s);\n    return $s;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpaokqdl85.php:14\n\
    Stack trace:\n#0 /tmp/tmpaokqdl85.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpaokqdl85.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx_7wz718.php:14\n\
    Stack trace:\n#0 /tmp/tmpx_7wz718.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpx_7wz718.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n\
    \            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuh3nxqne.php:14\n\
    Stack trace:\n#0 /tmp/tmpuh3nxqne.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpuh3nxqne.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $i) {\n        if (!in_array($i, $u)) {\n    \
    \        $u[] = $i;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $i) {\n        if (!in_array($i, $u)) {\n    \
    \        $u[] = $i;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp02j96dpp.php:14\n\
    Stack trace:\n#0 /tmp/tmp02j96dpp.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp02j96dpp.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbd07qc44.php:14\n\
    Stack trace:\n#0 /tmp/tmpbd07qc44.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpbd07qc44.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8_fs4e3a.php:14\n\
    Stack trace:\n#0 /tmp/tmp8_fs4e3a.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp8_fs4e3a.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $result = [];\n    foreach ($l as $item) {\n        if (!in_array($item, $result))\
    \ {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbhkg92x8.php:14\n\
    Stack trace:\n#0 /tmp/tmpbhkg92x8.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpbhkg92x8.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn7ojbf_2.php:14\n\
    Stack trace:\n#0 /tmp/tmpn7ojbf_2.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpn7ojbf_2.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw6733io8.php:14\n\
    Stack trace:\n#0 /tmp/tmpw6733io8.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpw6733io8.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n    \
    \        $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n    \
    \        $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $s = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $s)) {\n\
    \            $s[] = $e;\n        }\n    }\n    sort($s);\n    return $s;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $i) {\n        if (!in_array($i, $u)) {\n    \
    \        $u[] = $i;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n\
    \            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $s = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $s)) {\n    \
    \        $s[] = $e;\n        }\n    }\n    sort($s);\n    return $s;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n\
    \            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb9qqfv1v.php:14\n\
    Stack trace:\n#0 /tmp/tmpb9qqfv1v.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpb9qqfv1v.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9xctiky6.php:14\n\
    Stack trace:\n#0 /tmp/tmp9xctiky6.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp9xctiky6.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n\
    \            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n\
    \            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsrqa_9dg.php:14\n\
    Stack trace:\n#0 /tmp/tmpsrqa_9dg.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpsrqa_9dg.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp885ph355.php:14\n\
    Stack trace:\n#0 /tmp/tmp885ph355.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp885ph355.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n    \
    \        $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0j1t7xcq.php:14\n\
    Stack trace:\n#0 /tmp/tmp0j1t7xcq.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp0j1t7xcq.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3fvzgdv_.php:14\n\
    Stack trace:\n#0 /tmp/tmp3fvzgdv_.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp3fvzgdv_.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpagf0j_p4.php:14\n\
    Stack trace:\n#0 /tmp/tmpagf0j_p4.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpagf0j_p4.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n\
    \            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $s = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $s)) {\n    \
    \        $s[] = $e;\n        }\n    }\n    sort($s);\n    return $s;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $s = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $s)) {\n\
    \            $s[] = $v;\n        }\n    }\n    sort($s);\n    return $s;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $result = [];\n    foreach ($l as $item) {\n        if (!in_array($item, $result))\
    \ {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnx67nq_m.php:14\n\
    Stack trace:\n#0 /tmp/tmpnx67nq_m.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpnx67nq_m.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfw0c6rj4.php:14\n\
    Stack trace:\n#0 /tmp/tmpfw0c6rj4.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpfw0c6rj4.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3ywyzjzl.php:14\n\
    Stack trace:\n#0 /tmp/tmp3ywyzjzl.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp3ywyzjzl.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n\
    \            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm18h8ipk.php:14\n\
    Stack trace:\n#0 /tmp/tmpm18h8ipk.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpm18h8ipk.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $s = [];\n    foreach ($l as $i) {\n        if (!in_array($i, $s)) {\n    \
    \        $s[] = $i;\n        }\n    }\n    sort($s);\n    return $s;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n    \
    \        $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt21ajdeb.php:14\n\
    Stack trace:\n#0 /tmp/tmpt21ajdeb.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpt21ajdeb.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $s = array();\n    foreach ($l as $v) {\n        $s[$v] = true;\n    }\n  \
    \  ksort($s);\n    return array_keys($s);\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n    \
    \        $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpem97k9_v.php:14\n\
    Stack trace:\n#0 /tmp/tmpem97k9_v.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpem97k9_v.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n    \
    \        $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5rqyjxhy.php:14\n\
    Stack trace:\n#0 /tmp/tmp5rqyjxhy.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp5rqyjxhy.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppj_30tta.php:14\n\
    Stack trace:\n#0 /tmp/tmppj_30tta.php(17): test()\n#1 {main}\n  thrown in /tmp/tmppj_30tta.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n\
    \            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $s = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $s)) {\n    \
    \        $s[] = $e;\n        }\n    }\n    sort($s);\n    return $s;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz87djacz.php:14\n\
    Stack trace:\n#0 /tmp/tmpz87djacz.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpz87djacz.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn8jtvls3.php:14\n\
    Stack trace:\n#0 /tmp/tmpn8jtvls3.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpn8jtvls3.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $result = [];\n    foreach ($l as $item) {\n        if (!in_array($item, $result))\
    \ {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n    \
    \        $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6q42yz7t.php:14\n\
    Stack trace:\n#0 /tmp/tmp6q42yz7t.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp6q42yz7t.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_values($l);\n    $n = count($l);\n    $u = array();\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        if (!in_array($l[$i], $u)) {\n            $u[]\
    \ = $l[$i];\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpiqlh038j.php:14\n\
    Stack trace:\n#0 /tmp/tmpiqlh038j.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpiqlh038j.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $result = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $result))\
    \ {\n            $result[] = $e;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n\
    \            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n    \
    \        $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg_ozg5kh.php:14\n\
    Stack trace:\n#0 /tmp/tmpg_ozg5kh.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpg_ozg5kh.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppt8wv4c_.php:14\n\
    Stack trace:\n#0 /tmp/tmppt8wv4c_.php(17): test()\n#1 {main}\n  thrown in /tmp/tmppt8wv4c_.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwkj3sfsa.php:14\n\
    Stack trace:\n#0 /tmp/tmpwkj3sfsa.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpwkj3sfsa.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4eax3qsc.php:14\n\
    Stack trace:\n#0 /tmp/tmp4eax3qsc.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp4eax3qsc.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $result = [];\n    foreach ($l as $item) {\n        if (!in_array($item, $result))\
    \ {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl043pck3.php:14\n\
    Stack trace:\n#0 /tmp/tmpl043pck3.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpl043pck3.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz61e3pu4.php:14\n\
    Stack trace:\n#0 /tmp/tmpz61e3pu4.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpz61e3pu4.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi_ymq69r.php:14\n\
    Stack trace:\n#0 /tmp/tmpi_ymq69r.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpi_ymq69r.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $result = [];\n    foreach ($l as $item) {\n        if (!in_array($item, $result))\
    \ {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n\
    \            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n    \
    \        $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmhnvd1q0.php:14\n\
    Stack trace:\n#0 /tmp/tmpmhnvd1q0.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpmhnvd1q0.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n\
    \            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = array();\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n\
    \            $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $s = array();\n    foreach ($l as $e) {\n        $s[$e] = 1;\n    }\n    ksort($s);\n\
    \    return array_keys($s);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n\
    \            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5hepdxfb.php:14\n\
    Stack trace:\n#0 /tmp/tmp5hepdxfb.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp5hepdxfb.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n    \
    \        $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpralqg5yn.php:14\n\
    Stack trace:\n#0 /tmp/tmpralqg5yn.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpralqg5yn.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx75ezsq_.php:14\n\
    Stack trace:\n#0 /tmp/tmpx75ezsq_.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpx75ezsq_.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi1jmm6xh.php:14\n\
    Stack trace:\n#0 /tmp/tmpi1jmm6xh.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpi1jmm6xh.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $result = [];\n    foreach ($l as $item) {\n        if (!in_array($item, $result))\
    \ {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdjbgqu96.php:14\n\
    Stack trace:\n#0 /tmp/tmpdjbgqu96.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpdjbgqu96.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n    \
    \        $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0d_3aw7h.php:14\n\
    Stack trace:\n#0 /tmp/tmp0d_3aw7h.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp0d_3aw7h.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n\
    \            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpiodt0zgf.php:14\n\
    Stack trace:\n#0 /tmp/tmpiodt0zgf.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpiodt0zgf.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpobxv8jvb.php:14\n\
    Stack trace:\n#0 /tmp/tmpobxv8jvb.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpobxv8jvb.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n    \
    \        $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $result = [];\n    foreach ($l as $item) {\n        if (!in_array($item, $result))\
    \ {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n\
    \            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n    \
    \        $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n    \
    \        $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpiwto77ht.php:14\n\
    Stack trace:\n#0 /tmp/tmpiwto77ht.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpiwto77ht.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps20cfqfq.php:14\n\
    Stack trace:\n#0 /tmp/tmps20cfqfq.php(17): test()\n#1 {main}\n  thrown in /tmp/tmps20cfqfq.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpet3ib8iw.php:14\n\
    Stack trace:\n#0 /tmp/tmpet3ib8iw.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpet3ib8iw.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp78v963wb.php:14\n\
    Stack trace:\n#0 /tmp/tmp78v963wb.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp78v963wb.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu36rl_w2.php:14\n\
    Stack trace:\n#0 /tmp/tmpu36rl_w2.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpu36rl_w2.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxyz1dpt_.php:14\n\
    Stack trace:\n#0 /tmp/tmpxyz1dpt_.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpxyz1dpt_.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfuu3sm56.php:14\n\
    Stack trace:\n#0 /tmp/tmpfuu3sm56.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpfuu3sm56.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk_xo_tij.php:14\n\
    Stack trace:\n#0 /tmp/tmpk_xo_tij.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpk_xo_tij.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = array();\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n\
    \            $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\n\
    function candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2,\
    \ 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $v) {\n        if (!in_array($v, $u)) {\n    \
    \        $u[] = $v;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_values(array_unique($l));\n}\n\nfunction candidate(...$args) {\n\
    \    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpaog0mtyx.php:14\n\
    Stack trace:\n#0 /tmp/tmpaog0mtyx.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpaog0mtyx.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $l = array_unique($l);\n    sort($l);\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  $u = [];\n    foreach ($l as $e) {\n        if (!in_array($e, $u)) {\n    \
    \        $u[] = $e;\n        }\n    }\n    sort($u);\n    return $u;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0, 123)) !== array(0, 2, 3,\
    \ 5, 9, 123)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return sorted unique elements in a list\n// >>> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique($l) {\n  \
    \  return array_unique($l);\n}\n\nfunction candidate(...$args) {\n    return unique(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123)) !== array(0, 2, 3, 5, 9, 123)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8x8jbwzj.php:14\n\
    Stack trace:\n#0 /tmp/tmp8x8jbwzj.php(17): test()\n#1 {main}\n  thrown in /tmp/tmp8x8jbwzj.php\
    \ on line 14\n"
  exit_code: 255
  status: Exception
