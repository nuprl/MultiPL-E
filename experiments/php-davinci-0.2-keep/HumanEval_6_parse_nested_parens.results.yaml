name: HumanEval_6_parse_nested_parens
language: php
results:
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n   \
    \ $paren_string = array_filter($paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdpyr3p8o.php:25\n\
    Stack trace:\n#0 /tmp/tmpdpyr3p8o.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpdpyr3p8o.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n   \
    \ $paren_string = array_filter($paren_string);\n    return $paren_string;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg9jju7a5.php:24\n\
    Stack trace:\n#0 /tmp/tmpg9jju7a5.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpg9jju7a5.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_count = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $paren_count[] = parse_parens($paren_group);\n\
    \    }\n    return $paren_count;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_parens()\
    \ in /tmp/tmpv8qdnf46.php:11\nStack trace:\n#0 /tmp/tmpv8qdnf46.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpv8qdnf46.php(21): candidate()\n#2 /tmp/tmpv8qdnf46.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpv8qdnf46.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_groups as $group) {\n        $max_nesting[] = parse_nested_parens_helper($group);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmphi90k1mr.php:11\nStack trace:\n#0 /tmp/tmphi90k1mr.php(17): parse_nested_parens()\n\
    #1 /tmp/tmphi90k1mr.php(21): candidate()\n#2 /tmp/tmphi90k1mr.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmphi90k1mr.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    return strlen($paren_string);\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8npz9bes.php:20\n\
    Stack trace:\n#0 /tmp/tmp8npz9bes.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp8npz9bes.php\
    \ on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n  \
    \  $paren_max_array = array();\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == '(') {\n            $paren_count++;\n            if ($paren_count\
    \ > $paren_max) {\n                $paren_max = $paren_count;\n            }\n\
    \        } elseif ($paren == ')') {\n            $paren_count--;\n           \
    \ if ($paren_count == 0) {\n                array_push($paren_max_array, $paren_max);\n\
    \                $paren_max = 0;\n            }\n        }\n    }\n    return\
    \ $paren_max_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_array =\
    \ str_split($paren_string);\n  $paren_stack = [];\n  $max_depth = 0;\n  $current_depth\
    \ = 0;\n  $paren_depth_array = [];\n  foreach ($paren_array as $paren) {\n   \
    \ if ($paren == '(') {\n      array_push($paren_stack, $paren);\n      $current_depth++;\n\
    \      if ($current_depth > $max_depth) {\n        $max_depth = $current_depth;\n\
    \      }\n    } else {\n      array_pop($paren_stack);\n      array_push($paren_depth_array,\
    \ $max_depth);\n      $current_depth--;\n      $max_depth = $current_depth;\n\
    \    }\n  }\n  return $paren_depth_array;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu3li8391.php:36\n\
    Stack trace:\n#0 /tmp/tmpu3li8391.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpu3li8391.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n  \
    \  $paren_max_array = array();\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == '(') {\n            $paren_count++;\n            if ($paren_count\
    \ > $paren_max) {\n                $paren_max = $paren_count;\n            }\n\
    \        } elseif ($paren == ')') {\n            $paren_count--;\n           \
    \ if ($paren_count == 0) {\n                array_push($paren_max_array, $paren_max);\n\
    \                $paren_max = 0;\n            }\n        }\n    }\n    return\
    \ $paren_max_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $stack = new SplStack();\n    $max_depth =\
    \ 0;\n    $depth = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $stack->push($paren);\n            $depth++;\n      \
    \      if ($depth > $max_depth) {\n                $max_depth = $depth;\n    \
    \        }\n        } elseif ($paren == ')') {\n            $stack->pop();\n \
    \           $depth--;\n        }\n    }\n    return $max_depth;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8k0ubak5.php:33\n\
    Stack trace:\n#0 /tmp/tmp8k0ubak5.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8k0ubak5.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ',\
    \ '', $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n\
    \  $paren_string = str_replace('(', '', $paren_string);\n  $paren_string = str_replace(')',\
    \ '', $paren_string);\n  $paren_string = str_replace('', ' ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ', '',\
    \ $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n \
    \ $paren_string = str_replace('(', '', $paren_string);\n  $paren_string = str_replace(')',\
    \ '', $paren_string);\n  $paren_string = str_replace('', ' ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ', '',\
    \ $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n \
    \ $paren_string = str_replace('(', '', $paren_string);\n  $paren_string = str_replace(')',\
    \ '', $paren_string);\n  $paren_string = str_replace('', ' ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ', '',\
    \ $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n \
    \ $paren_string = str_replace('(', '', $paren_string);\n  $paren_string = str_replace(')',\
    \ '', $paren_string);\n  $paren_string = str_replace('', ' ', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ', '',\
    \ $paren_string);\n  $paren_string = str_replace('()', '', $paren_string);\n \
    \ $paren_string = str_replace('(', '', $\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ variable or \"{\" or \"$\" in /tmp/tmp69_xvvdh.php on line 36\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $depth = 0;\n    $result = array();\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == '(') {\n            array_push($paren_stack, $paren);\n\
    \            $depth++;\n            if ($depth > $max_depth) {\n             \
    \   $max_depth = $depth;\n            }\n        } elseif ($paren == ')') {\n\
    \            array_pop($paren_stack);\n            $depth--;\n            if (empty($paren_stack))\
    \ {\n                array_push($result, $max_depth);\n                $max_depth\
    \ = 0;\n            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_array = explode(' ',\
    \ $paren_string);\n    $result = array();\n    foreach ($paren_array as $paren_str)\
    \ {\n        $result[] = parse_nested_parens_helper($paren_str);\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmp3xsxxi8t.php:12\nStack trace:\n#0 /tmp/tmp3xsxxi8t.php(18): parse_nested_parens()\n\
    #1 /tmp/tmp3xsxxi8t.php(22): candidate()\n#2 /tmp/tmp3xsxxi8t.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3xsxxi8t.php on line 12\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $depth_array = [];\n    $current_depth = 0;\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            $current_depth++;\n   \
    \         if ($current_depth > $max_depth) {\n                $max_depth = $current_depth;\n\
    \            }\n        } elseif ($paren == ')') {\n            $depth_array[]\
    \ = $current_depth;\n            $current_depth--;\n        }\n    }\n    return\
    \ $depth_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphlhsqdgz.php:33\n\
    Stack trace:\n#0 /tmp/tmphlhsqdgz.php(38): test()\n#1 {main}\n  thrown in /tmp/tmphlhsqdgz.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $max_depth = 0;\n\
    \    $current_depth = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $current_depth++;\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n            }\n        } elseif\
    \ ($paren == ')') {\n            $current_depth--;\n        }\n    }\n    return\
    \ $max_depth;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3pja2sk0.php:31\n\
    Stack trace:\n#0 /tmp/tmp3pja2sk0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3pja2sk0.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $paren_count = [];\n\
    \    $max_count = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            array_push($paren_stack, $paren);\n        } else {\n\
    \            array_pop($paren_stack);\n            $max_count = max($max_count,\
    \ count($paren_stack));\n        }\n    }\n    return $max_count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgqlmwknr.php:29\n\
    Stack trace:\n#0 /tmp/tmpgqlmwknr.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpgqlmwknr.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_arr = explode(' ', $paren_string);\n    $result = [];\n    foreach\
    \ ($paren_arr as $paren) {\n        $result[] = parse_nested_parens_helper($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmp7ttmyf4n.php:11\nStack trace:\n#0 /tmp/tmp7ttmyf4n.php(17): parse_nested_parens()\n\
    #1 /tmp/tmp7ttmyf4n.php(21): candidate()\n#2 /tmp/tmp7ttmyf4n.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7ttmyf4n.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\( /', '(', $paren_string);\n\
    \    $paren_string = preg_replace('/ \\)/', ')', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\) /', '', $paren_string);\n    $paren_string = preg_replace('/\
    \ \\) \\(/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\( \\)/',\
    \ '', $paren_string);\n    $paren_string = preg_replace('/\\(\\)$/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/^\\(\\) /', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/^\\(\\)$/', '', $paren_string);\n    $paren_string = preg_replace('/^\\\
    s+/', '', $paren_string);\n    $paren_string = preg_replace('/\\s+$/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\(/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    )\\)/', ')', $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\)/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\)/', '', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\)/', '', $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '',\
    \ $paren_string);\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  Unclosed '{' on line 7 in /tmp/tmpxlgsmvsm.php on line\
    \ 40\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_array = explode(' ',\
    \ $paren_string);\n    $result = array();\n    foreach ($paren_array as $paren)\
    \ {\n        $count = 0;\n        $max = 0;\n        for ($i = 0; $i < strlen($paren);\
    \ $i++) {\n            if ($paren[$i] == '(') {\n                $count++;\n \
    \           } else if ($paren[$i] == ')') {\n                $count--;\n     \
    \       }\n            if ($count > $max) {\n                $max = $count;\n\
    \            }\n        }\n        array_push($result, $max);\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmp1h0hl6lf.php\
    \ on line 36\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_array_count = count($paren_array);\n    $paren_array_count_minus_one\
    \ = $paren_array_count - 1;\n    $paren_array_count_minus_two = $paren_array_count\
    \ - 2;\n    $paren_array_count_minus_three = $paren_array_count - 3;\n    $paren_array_count_minus_four\
    \ = $paren_array_count - 4;\n    $paren_array_count_minus_five = $paren_array_count\
    \ - 5;\n    $paren_array_count_minus_six = $paren_array_count - 6;\n    $paren_array_count_minus_seven\
    \ = $paren_array_count - 7;\n    $paren_array_count_minus_eight = $paren_array_count\
    \ - 8;\n    $paren_array_count_minus_nine = $paren_array_count - 9;\n    $paren_array_count_minus_ten\
    \ = $paren_array_count - 10;\n    $paren_array_count_minus_eleven = $paren_array_count\
    \ - 11;\n    $paren_array_count_minus_twelve = $paren_array_count - 12;\n    $paren_array_count_minus_thirteen\
    \ = $paren_array_count - 13;\n    $paren_array_count_minus_fourteen = $paren_array_count\
    \ - 14;\n    $paren_array_count_minus_fifteen = $paren_array_count - 15;\n   \
    \ $paren_array_count_minus_sixteen = $paren_array_count - 16;\n    $paren\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpvcma6s_8.php\
    \ on line 34\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $result[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmp484j4scs.php:11\nStack trace:\n#0 /tmp/tmp484j4scs.php(17): parse_nested_parens()\n\
    #1 /tmp/tmp484j4scs.php(21): candidate()\n#2 /tmp/tmp484j4scs.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp484j4scs.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_nested_paren($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_paren()\
    \ in /tmp/tmp2w9y0wt9.php:11\nStack trace:\n#0 /tmp/tmp2w9y0wt9.php(17): parse_nested_parens()\n\
    #1 /tmp/tmp2w9y0wt9.php(21): candidate()\n#2 /tmp/tmp2w9y0wt9.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2w9y0wt9.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $depth_array = [];\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            array_push($paren_stack, $paren);\n            $max_depth++;\n\
    \        } else {\n            array_pop($paren_stack);\n            array_push($depth_array,\
    \ $max_depth);\n            $max_depth--;\n        }\n    }\n    return $depth_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpntwj4thy.php:31\n\
    Stack trace:\n#0 /tmp/tmpntwj4thy.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpntwj4thy.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_levels = [];\n\
    \    foreach ($paren_array as $paren_group) {\n        $paren_levels[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $paren_levels;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmpxeoqzkti.php:11\nStack trace:\n#0 /tmp/tmpxeoqzkti.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpxeoqzkti.php(21): candidate()\n#2 /tmp/tmpxeoqzkti.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxeoqzkti.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $result[] = count_nested_parens($paren_group);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function count_nested_parens()\
    \ in /tmp/tmp7ap0y8un.php:11\nStack trace:\n#0 /tmp/tmp7ap0y8un.php(17): parse_nested_parens()\n\
    #1 /tmp/tmp7ap0y8un.php(21): candidate()\n#2 /tmp/tmp7ap0y8un.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7ap0y8un.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_groups as $group) {\n        $max_nesting[] = find_max_nesting($group);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function find_max_nesting()\
    \ in /tmp/tmpk0rxurmo.php:11\nStack trace:\n#0 /tmp/tmpk0rxurmo.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpk0rxurmo.php(21): candidate()\n#2 /tmp/tmpk0rxurmo.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpk0rxurmo.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n  \
    \  $paren_max_array = array();\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == '(') {\n            $paren_count++;\n            if ($paren_count\
    \ > $paren_max) {\n                $paren_max = $paren_count;\n            }\n\
    \        } elseif ($paren == ')') {\n            $paren_count--;\n           \
    \ if ($paren_count == 0) {\n                array_push($paren_max_array, $paren_max);\n\
    \                $paren_max = 0;\n            }\n        }\n    }\n    return\
    \ $paren_max_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ variable or \"{\" or \"$\" in /tmp/tmpfcopk21e.php on line 36\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmp1tedj1eu.php\
    \ on line 36\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpwxpdjhou.php\
    \ on line 36\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_map('strlen', $paren_string);\n    return $paren_string;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphwiy_o32.php:26\n\
    Stack trace:\n#0 /tmp/tmphwiy_o32.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphwiy_o32.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_nested_paren($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_paren()\
    \ in /tmp/tmp5y433b7i.php:11\nStack trace:\n#0 /tmp/tmp5y433b7i.php(17): parse_nested_parens()\n\
    #1 /tmp/tmp5y433b7i.php(21): candidate()\n#2 /tmp/tmp5y433b7i.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5y433b7i.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ variable or \"{\" or \"$\" in /tmp/tmpvygivx0d.php on line 36\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $current_depth = 0;\n    $paren_groups = [];\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $current_depth++;\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n            }\n        } else\
    \ {\n            array_pop($paren_stack);\n            $current_depth--;\n   \
    \         if (empty($paren_stack)) {\n                array_push($paren_groups,\
    \ $max_depth);\n                $max_depth = 0;\n                $current_depth\
    \ = 0;\n            }\n        }\n    }\n    return $paren_groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace('()', '', $paren_string);\n  $paren_string = str_replace('(', '',\
    \ $paren_string);\n  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string\
    \ = str_replace('', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = explode(' ', $paren_string);\n  return $paren_string;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2nl39j6_.php:23\n\
    Stack trace:\n#0 /tmp/tmp2nl39j6_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp2nl39j6_.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ variable or \"{\" or \"$\" in /tmp/tmpbnd5bymr.php on line 35\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n  \
    \  $paren_max_array = array();\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == '(') {\n            $paren_count++;\n            if ($paren_count\
    \ > $paren_max) {\n                $paren_max = $paren_count;\n            }\n\
    \        } else {\n            $paren_count--;\n            if ($paren_count ==\
    \ 0) {\n                array_push($paren_max_array, $paren_max);\n          \
    \      $paren_max = 0;\n            }\n        }\n    }\n    return $paren_max_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $current_depth = 0;\n    $result = [];\n    foreach ($paren_array as $char)\
    \ {\n        if ($char == '(') {\n            $current_depth++;\n            if\
    \ ($current_depth > $max_depth) {\n                $max_depth = $current_depth;\n\
    \            }\n        } else if ($char == ')') {\n            $current_depth--;\n\
    \            if ($current_depth == 0) {\n                array_push($result, $max_depth);\n\
    \                $max_depth = 0;\n            }\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $depth_array = [];\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            array_push($paren_stack, $paren);\n            $max_depth\
    \ = max($max_depth, count($paren_stack));\n        } else {\n            array_pop($paren_stack);\n\
    \            if (count($paren_stack) == 0) {\n                array_push($depth_array,\
    \ $max_depth);\n                $max_depth = 0;\n            }\n        }\n  \
    \  }\n    return $depth_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_groups as $group) {\n        $max_nesting[] = get_max_nesting($group);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_max_nesting()\
    \ in /tmp/tmpeehsqxlj.php:11\nStack trace:\n#0 /tmp/tmpeehsqxlj.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpeehsqxlj.php(21): candidate()\n#2 /tmp/tmpeehsqxlj.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpeehsqxlj.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $result = array();\n  foreach\
    \ ($paren_array as $paren) {\n    $result[] = parse_nested_paren($paren);\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_paren()\
    \ in /tmp/tmp94hurrsm.php:11\nStack trace:\n#0 /tmp/tmp94hurrsm.php(17): parse_nested_parens()\n\
    #1 /tmp/tmp94hurrsm.php(21): candidate()\n#2 /tmp/tmp94hurrsm.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp94hurrsm.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $max_depth = 0;\n    $curr_depth = 0;\n   \
    \ $paren_depth = [];\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $curr_depth++;\n            if ($curr_depth > $max_depth)\
    \ {\n                $max_depth = $curr_depth;\n            }\n        } elseif\
    \ ($paren == ')') {\n            $paren_depth[] = $curr_depth;\n            $curr_depth--;\n\
    \        }\n    }\n    return $paren_depth;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz516kiy4.php:32\n\
    Stack trace:\n#0 /tmp/tmpz516kiy4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpz516kiy4.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n   \
    \ $paren_string = array_filter($paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy43s6cxs.php:25\n\
    Stack trace:\n#0 /tmp/tmpy43s6cxs.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpy43s6cxs.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n   \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  Unclosed '{' on line 7 in /tmp/tmp5lzj84h0.php on line\
    \ 46\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $paren_level = 0;\n\
    \    $paren_level_array = [];\n    foreach ($paren_array as $paren) {\n      \
    \  if ($paren == '(') {\n            $paren_stack[] = $paren;\n            $paren_level++;\n\
    \        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n  \
    \          $paren_level_array[] = $paren_level;\n            $paren_level--;\n\
    \        }\n    }\n    return $paren_level_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjzgc9g2d.php:31\n\
    Stack trace:\n#0 /tmp/tmpjzgc9g2d.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjzgc9g2d.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $max_nesting = [];\n    foreach ($paren_array as $paren_group) {\n        $nesting\
    \ = 0;\n        $max_nesting_in_group = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == '(') {\n                $nesting++;\n\
    \            } else if ($paren_group[$i] == ')') {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting_in_group) {\n        \
    \        $max_nesting_in_group = $nesting;\n            }\n        }\n       \
    \ $max_nesting[] = $max_nesting_in_group;\n    }\n    return $max_nesting;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $max_count = 0;\n  \
    \  $max_count_array = [];\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $paren_count++;\n        } elseif ($paren ==\
    \ ')') {\n            $paren_count--;\n        }\n        if ($paren_count > $max_count)\
    \ {\n            $max_count = $paren_count;\n        }\n        if ($paren_count\
    \ == 0) {\n            $max_count_array[] = $max_count;\n            $max_count\
    \ = 0;\n        }\n    }\n    return $max_count_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $paren_level = [];\n\
    \    $max_level = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            array_push($paren_stack, $paren);\n            $max_level++;\n\
    \        } else {\n            array_pop($paren_stack);\n            $max_level--;\n\
    \        }\n        array_push($paren_level, $max_level);\n    }\n    return $paren_level;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpri2__ciw.php:31\n\
    Stack trace:\n#0 /tmp/tmpri2__ciw.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpri2__ciw.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+$/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/^\\s+/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+$/', '', $paren_string);\n    $paren_string = preg_replace('/^\\s+/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+$/', '', $paren_string);\n    $paren_string = preg_replace('/^\\\
    s+/', '', $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+$/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/^\\s+/', '', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+$/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/^\\s+/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+$/', '', $paren_string);\n    $paren_string = preg_replace('/^\\s+/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = preg_replace('\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected string content \"\" in /tmp/tmppjkp3txj.php\
    \ on line 28\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n  \
    \  $paren_array_max = array();\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == '(') {\n            $paren_count++;\n        } elseif ($paren\
    \ == ')') {\n            $paren_count--;\n        }\n        if ($paren_count\
    \ > $paren_max) {\n            $paren_max = $paren_count;\n        }\n       \
    \ if ($paren_count == 0) {\n            array_push($paren_array_max, $paren_max);\n\
    \            $paren_max = 0;\n        }\n    }\n    return $paren_array_max;\n\
    }\n\n$paren_string = '(()()) ((())) () ((())()())';\n$paren_array_max = parse_nested_parens($paren_string);\n\
    print_r($paren_array_max);\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_nesting = 0;\n\
    \    $nesting_array = [];\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            array_push($paren_stack, $paren);\n        }\
    \ else {\n            array_pop($paren_stack);\n            $current_nesting =\
    \ count($paren_stack);\n            if ($current_nesting > $max_nesting) {\n \
    \               $max_nesting = $current_nesting;\n            }\n            if\
    \ ($paren == ')') {\n                array_push($nesting_array, $max_nesting);\n\
    \            }\n        }\n    }\n    return $nesting_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpotde3ccj.php:35\n\
    Stack trace:\n#0 /tmp/tmpotde3ccj.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpotde3ccj.php\
    \ on line 35\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpl429oh94.php\
    \ on line 36\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_groups as $group) {\n        $nesting = 0;\n        $max_nesting_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i]\
    \ == '(') {\n                $nesting++;\n            } else if ($group[$i] ==\
    \ ')') {\n                $nesting--;\n            }\n            $max_nesting_in_group\
    \ = max($max_nesting_in_group, $nesting);\n        }\n        $max_nesting[] =\
    \ $max_nesting_in_group;\n    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups\
    \ = str_split($paren_string, strlen($paren_string) / 2);\n    $max_nesting = 0;\n\
    \    $nesting_levels = [];\n    foreach ($paren_groups as $paren_group) {\n  \
    \      $nesting = 0;\n        $max_nesting = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == '(') {\n                $nesting++;\n\
    \            } else {\n                $nesting--;\n            }\n          \
    \  if ($nesting > $max_nesting) {\n                $max_nesting = $nesting;\n\
    \            }\n        }\n        $nesting_levels[] = $max_nesting;\n    }\n\
    \    return $nesting_levels;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdh9fc3ox.php:35\n\
    Stack trace:\n#0 /tmp/tmpdh9fc3ox.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpdh9fc3ox.php\
    \ on line 35\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $result[] = parse_parens($paren_group);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_parens()\
    \ in /tmp/tmp__j6mqyg.php:11\nStack trace:\n#0 /tmp/tmp__j6mqyg.php(17): parse_nested_parens()\n\
    #1 /tmp/tmp__j6mqyg.php(21): candidate()\n#2 /tmp/tmp__j6mqyg.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp__j6mqyg.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $result = array();\n    foreach ($paren_string as $paren_group) {\n     \
    \   $result[] = parse_nested_parens_helper($paren_group);\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmpt4iu3zpk.php:13\nStack trace:\n#0 /tmp/tmpt4iu3zpk.php(19): parse_nested_parens()\n\
    #1 /tmp/tmpt4iu3zpk.php(23): candidate()\n#2 /tmp/tmpt4iu3zpk.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpt4iu3zpk.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_arr\
    \ = str_split($paren_string);\n    $paren_arr_len = count($paren_arr);\n    $paren_stack\
    \ = [];\n    $max_nesting = 0;\n    $nesting_arr = [];\n    for ($i = 0; $i <\
    \ $paren_arr_len; $i++) {\n        if ($paren_arr[$i] == '(') {\n            array_push($paren_stack,\
    \ $paren_arr[$i]);\n            $max_nesting++;\n        } elseif ($paren_arr[$i]\
    \ == ')') {\n            array_pop($paren_stack);\n            array_push($nesting_arr,\
    \ $max_nesting);\n            $max_nesting--;\n        }\n    }\n    return $nesting_arr;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxem9zg7z.php:32\n\
    Stack trace:\n#0 /tmp/tmpxem9zg7z.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxem9zg7z.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_groups as $paren_group) {\n        $nesting = 0;\n      \
    \  $max_nesting_in_group = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == '(') {\n                $nesting++;\n\
    \            } else {\n                $nesting--;\n            }\n          \
    \  $max_nesting_in_group = max($max_nesting_in_group, $nesting);\n        }\n\
    \        $max_nesting[] = $max_nesting_in_group;\n    }\n    return $max_nesting;\n\
    }\n\n$paren_string = '(()()) ((())) () ((())()())';\n$max_nesting = parse_nested_parens($paren_string);\n\
    print_r($max_nesting);\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_map('strlen', $paren_string);\n    return $paren_string;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt6yfgg27.php:26\n\
    Stack trace:\n#0 /tmp/tmpt6yfgg27.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpt6yfgg27.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_result = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $paren_result[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $paren_result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmp0dbfpnw8.php:11\nStack trace:\n#0 /tmp/tmp0dbfpnw8.php(17): parse_nested_parens()\n\
    #1 /tmp/tmp0dbfpnw8.php(21): candidate()\n#2 /tmp/tmp0dbfpnw8.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0dbfpnw8.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    return explode(' ', $paren_string);\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpew4wkr3y.php:22\n\
    Stack trace:\n#0 /tmp/tmpew4wkr3y.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpew4wkr3y.php\
    \ on line 22\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_paren($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_paren()\
    \ in /tmp/tmpr5inhgqx.php:11\nStack trace:\n#0 /tmp/tmpr5inhgqx.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpr5inhgqx.php(21): candidate()\n#2 /tmp/tmpr5inhgqx.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpr5inhgqx.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_nested_paren($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_paren()\
    \ in /tmp/tmptvw0gjlt.php:11\nStack trace:\n#0 /tmp/tmptvw0gjlt.php(17): parse_nested_parens()\n\
    #1 /tmp/tmptvw0gjlt.php(21): candidate()\n#2 /tmp/tmptvw0gjlt.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmptvw0gjlt.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmp0ljsb3h5.php\
    \ on line 36\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \")\" in /tmp/tmpmj8d2r8n.php on line 29\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpm7s4fg6g.php\
    \ on line 36\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $paren_count = [];\n\
    \    $max_count = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $paren_stack[] = $paren;\n            $max_count++;\n\
    \        } else {\n            if (count($paren_stack) == 0) {\n             \
    \   return false;\n            }\n            $paren_stack[] = $paren;\n     \
    \       if (count($paren_stack) == 2) {\n                $paren_count[] = $max_count;\n\
    \                $max_count = 0;\n                $paren_stack = [];\n       \
    \     }\n        }\n    }\n    return $paren_count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_s0hb_mv.php:37\n\
    Stack trace:\n#0 /tmp/tmp_s0hb_mv.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_s0hb_mv.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $result[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmpy98k2wc3.php:11\nStack trace:\n#0 /tmp/tmpy98k2wc3.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpy98k2wc3.php(21): candidate()\n#2 /tmp/tmpy98k2wc3.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpy98k2wc3.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $max_nesting = 0;\n    $nesting = 0;\n    $nesting_array\
    \ = [];\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $nesting++;\n            if ($nesting > $max_nesting) {\n       \
    \         $max_nesting = $nesting;\n            }\n        } else {\n        \
    \    $nesting_array[] = $max_nesting;\n            $max_nesting = 0;\n       \
    \     $nesting = 0;\n        }\n    }\n    return $nesting_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppapsowkn.php:33\n\
    Stack trace:\n#0 /tmp/tmppapsowkn.php(38): test()\n#1 {main}\n  thrown in /tmp/tmppapsowkn.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n   \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  Unclosed '{' on line 7 in /tmp/tmp6gkkf29g.php on line\
    \ 46\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_levels = [];\n\
    \    foreach ($paren_array as $paren_group) {\n        $paren_levels[] = parse_single_parens($paren_group);\n\
    \    }\n    return $paren_levels;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_single_parens()\
    \ in /tmp/tmpkwcyw2g3.php:11\nStack trace:\n#0 /tmp/tmpkwcyw2g3.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpkwcyw2g3.php(21): candidate()\n#2 /tmp/tmpkwcyw2g3.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkwcyw2g3.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_nested_paren($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_paren()\
    \ in /tmp/tmpkq1pegy_.php:11\nStack trace:\n#0 /tmp/tmpkq1pegy_.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpkq1pegy_.php(21): candidate()\n#2 /tmp/tmpkq1pegy_.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpkq1pegy_.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_array as $paren_group) {\n        $max_nesting[] = get_nesting_level($paren_group);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_nesting_level()\
    \ in /tmp/tmp4b6j8hxa.php:11\nStack trace:\n#0 /tmp/tmp4b6j8hxa.php(17): parse_nested_parens()\n\
    #1 /tmp/tmp4b6j8hxa.php(21): candidate()\n#2 /tmp/tmp4b6j8hxa.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4b6j8hxa.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ variable or \"{\" or \"$\" in /tmp/tmpr0ybyffj.php on line 36\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_groups as $group) {\n        $max_nesting[] = max_nesting($group);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function max_nesting()\
    \ in /tmp/tmp4xxo8890.php:11\nStack trace:\n#0 /tmp/tmp4xxo8890.php(17): parse_nested_parens()\n\
    #1 /tmp/tmp4xxo8890.php(21): candidate()\n#2 /tmp/tmp4xxo8890.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4xxo8890.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+\\(/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\)\\s+/', ')', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\s+/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+\\(/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\)\\s+/', ')', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\s+/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+\\(/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\)\\s+/', ')', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\s+/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+\\(/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\)\\s+/', ')', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+\\)/', ')', $paren\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \")\" in /tmp/tmpftlsm9tv.php on line 28\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpprpq13oc.php\
    \ on line 36\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n  \
    \  $paren_max_array = array();\n    for ($i = 0; $i < count($paren_array); $i++)\
    \ {\n        if ($paren_array[$i] == '(') {\n            $paren_count++;\n   \
    \         if ($paren_count > $paren_max) {\n                $paren_max = $paren_count;\n\
    \            }\n        } else if ($paren_array[$i] == ')') {\n            $paren_count--;\n\
    \            if ($paren_count == 0) {\n                array_push($paren_max_array,\
    \ $paren_max);\n                $paren_max = 0;\n            }\n        }\n  \
    \  }\n    return $paren_max_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_groups = explode(' ',\
    \ $paren_string);\n    $max_nesting = [];\n    foreach ($paren_groups as $paren_group)\
    \ {\n        $max_nesting[] = parse_nested_parens_helper($paren_group);\n    }\n\
    \    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmp1m3qqd6d.php:12\nStack trace:\n#0 /tmp/tmp1m3qqd6d.php(18): parse_nested_parens()\n\
    #1 /tmp/tmp1m3qqd6d.php(22): candidate()\n#2 /tmp/tmp1m3qqd6d.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1m3qqd6d.php on line 12\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_arr = explode(' ', $paren_string);\n  $max_level = [];\n  foreach\
    \ ($paren_arr as $paren) {\n    $max_level[] = get_max_level($paren);\n  }\n \
    \ return $max_level;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_max_level()\
    \ in /tmp/tmpyrzo0tii.php:11\nStack trace:\n#0 /tmp/tmpyrzo0tii.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpyrzo0tii.php(21): candidate()\n#2 /tmp/tmpyrzo0tii.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpyrzo0tii.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $result[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmp4a47nqv1.php:11\nStack trace:\n#0 /tmp/tmp4a47nqv1.php(17): parse_nested_parens()\n\
    #1 /tmp/tmp4a47nqv1.php(21): candidate()\n#2 /tmp/tmp4a47nqv1.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4a47nqv1.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n   \
    \ $paren_string = array_filter($paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7tb9ngv0.php:25\n\
    Stack trace:\n#0 /tmp/tmp7tb9ngv0.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp7tb9ngv0.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $result[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmpe9cak8m2.php:11\nStack trace:\n#0 /tmp/tmpe9cak8m2.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpe9cak8m2.php(21): candidate()\n#2 /tmp/tmpe9cak8m2.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpe9cak8m2.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_groups as $group) {\n        $nesting = 0;\n        $max_nesting_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i]\
    \ == '(') {\n                $nesting++;\n            } else {\n             \
    \   $nesting--;\n            }\n            $max_nesting_in_group = max($max_nesting_in_group,\
    \ $nesting);\n        }\n        $max_nesting[] = $max_nesting_in_group;\n   \
    \ }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ variable or \"{\" or \"$\" in /tmp/tmptpu_2i07.php on line 35\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $current_depth = 0;\n    $max_depth_array = [];\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $current_depth++;\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n            }\n        } elseif\
    \ ($paren == ')') {\n            array_pop($paren_stack);\n            $current_depth--;\n\
    \            if (count($paren_stack) == 0) {\n                array_push($max_depth_array,\
    \ $max_depth);\n                $max_depth = 0;\n                $current_depth\
    \ = 0;\n            }\n        }\n    }\n    return $max_depth_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_depth = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $depth = 0;\n        $max_depth_group\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == '(') {\n                $depth++;\n            } else {\n\
    \                $depth--;\n            }\n            if ($depth > $max_depth_group)\
    \ {\n                $max_depth_group = $depth;\n            }\n        }\n  \
    \      $max_depth[] = $max_depth_group;\n    }\n    return $max_depth;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '0', $paren_string);\n    $paren_string = str_replace('(',\
    \ '1', $paren_string);\n    $paren_string = str_replace(')', '0', $paren_string);\n\
    \    $paren_string = str_replace('0', '', $paren_string);\n    $paren_string =\
    \ str_replace('1', '0', $paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('0', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpvduvo0gd.php\
    \ on line 34\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n   \
    \ return $paren_string;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzydoonvg.php:23\n\
    Stack trace:\n#0 /tmp/tmpzydoonvg.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpzydoonvg.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_levels = [];\n\
    \    foreach ($paren_array as $paren_group) {\n        $paren_levels[] = parse_parens($paren_group);\n\
    \    }\n    return $paren_levels;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_parens()\
    \ in /tmp/tmp0v9ngeim.php:11\nStack trace:\n#0 /tmp/tmp0v9ngeim.php(17): parse_nested_parens()\n\
    #1 /tmp/tmp0v9ngeim.php(21): candidate()\n#2 /tmp/tmp0v9ngeim.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0v9ngeim.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '0', $paren_string);\n    $paren_string = str_replace('(',\
    \ '1', $paren_string);\n    $paren_string = str_replace(')', '2', $paren_string);\n\
    \    $paren_string = str_replace('0', '', $paren_string);\n    $paren_string =\
    \ str_replace('1', '0', $paren_string);\n    $paren_string = str_replace('2',\
    \ '1', $paren_string);\n    $paren_string = str_replace('0', '', $paren_string);\n\
    \    $paren_string = str_replace('1', '0', $paren_string);\n    $paren_string\
    \ = str_replace('0', '1', $paren_string);\n    $paren_string = str_replace('1',\
    \ '0', $paren_string);\n    $paren_string = str_replace('0', '1', $paren_string);\n\
    \    $paren_string = str_replace('1', '0', $paren_string);\n    $paren_string\
    \ = str_replace('0', '1', $paren_string);\n    $paren_string = str_replace('1',\
    \ '0', $paren_string);\n    $paren_string = str_replace('0', '1', $paren_string);\n\
    \    $paren_string = str_replace('1', '0', $paren_string);\n    $paren_string\
    \ = str_replace('0', '1', $paren_string);\n    $paren_string = str_replace('1',\
    \ '0', $paren_string);\n    $paren_string = str_replace('0', '1', $paren_string);\n\
    \    $paren_string = str_replace('1', '0', $paren_string);\n    $paren_string\
    \ = str_replace('0', '1', $paren_string);\n    $paren_string = str_replace('1',\
    \ '0', $paren_string);\n    $paren_string = str_replace('0', '1', $paren_string);\n\
    \    $paren_string = str_replace('1\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected string content \"1\" in /tmp/tmpt2jjbupf.php\
    \ on line 32\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_count = [];\n\
    \    foreach ($paren_array as $paren) {\n        $paren_count[] = count_parens($paren);\n\
    \    }\n    return $paren_count;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function count_parens()\
    \ in /tmp/tmpauhf507v.php:11\nStack trace:\n#0 /tmp/tmpauhf507v.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpauhf507v.php(21): candidate()\n#2 /tmp/tmpauhf507v.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpauhf507v.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ variable or \"{\" or \"$\" in /tmp/tmpmrbq6o7s.php on line 35\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n   \
    \ $paren_string = array_map('strlen', $paren_string);\n    return $paren_string;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxl4dadls.php:24\n\
    Stack trace:\n#0 /tmp/tmpxl4dadls.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpxl4dadls.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_nested_paren($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_paren()\
    \ in /tmp/tmp7rllw9cq.php:11\nStack trace:\n#0 /tmp/tmp7rllw9cq.php(17): parse_nested_parens()\n\
    #1 /tmp/tmp7rllw9cq.php(21): candidate()\n#2 /tmp/tmp7rllw9cq.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7rllw9cq.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_arr\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $depth_arr = [];\n    foreach ($paren_arr as $paren) {\n        if ($paren\
    \ == '(') {\n            array_push($paren_stack, $paren);\n            $max_depth++;\n\
    \        } else {\n            array_pop($paren_stack);\n            if (empty($paren_stack))\
    \ {\n                array_push($depth_arr, $max_depth);\n                $max_depth\
    \ = 0;\n            }\n        }\n    }\n    return $depth_arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwloiui5a.php:33\n\
    Stack trace:\n#0 /tmp/tmpwloiui5a.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwloiui5a.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n  \
    \  $paren_max_array = array();\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == '(') {\n            $paren_count++;\n            if ($paren_count\
    \ > $paren_max) {\n                $paren_max = $paren_count;\n            }\n\
    \        } elseif ($paren == ')') {\n            $paren_count--;\n           \
    \ if ($paren_count == 0) {\n                array_push($paren_max_array, $paren_max);\n\
    \                $paren_max = 0;\n            }\n        }\n    }\n    return\
    \ $paren_max_array;\n}\n\n$paren_string = '(()()) ((())) () ((())()())';\nprint_r(parse_nested_parens($paren_string));\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $current_level = 0;\n    $max_level = 0;\n\
    \    $max_level_array = [];\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $current_level++;\n            if ($current_level\
    \ > $max_level) {\n                $max_level = $current_level;\n            }\n\
    \        } else {\n            $max_level_array[] = $max_level;\n            $max_level\
    \ = 0;\n            $current_level = 0;\n        }\n    }\n    return $max_level_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0vpsl8db.php:33\n\
    Stack trace:\n#0 /tmp/tmp0vpsl8db.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp0vpsl8db.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_groups = explode(' ', $paren_string);\n  $max_nesting = array();\n\
    \  foreach ($paren_groups as $group) {\n    $nesting = 0;\n    $max_nesting_in_group\
    \ = 0;\n    for ($i = 0; $i < strlen($group); $i++) {\n      if ($group[$i] ==\
    \ '(') {\n        $nesting++;\n      } else if ($group[$i] == ')') {\n       \
    \ $nesting--;\n      }\n      if ($nesting > $max_nesting_in_group) {\n      \
    \  $max_nesting_in_group = $nesting;\n      }\n    }\n    $max_nesting[] = $max_nesting_in_group;\n\
    \  }\n  return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '0', $paren_string);\n    $paren_string = str_replace('(',\
    \ '1', $paren_string);\n    $paren_string = str_replace(')', '2', $paren_string);\n\
    \    $paren_string = str_replace('0', '', $paren_string);\n    $paren_string =\
    \ str_replace('1', '0', $paren_string);\n    $paren_string = str_replace('2',\
    \ '1', $paren_string);\n    $paren_string = str_replace('0', '', $paren_string);\n\
    \    $paren_string = str_replace('1', '0', $paren_string);\n    $paren_string\
    \ = str_replace('0', '', $paren_string);\n    $paren_string = str_replace('1',\
    \ '0', $paren_string);\n    $paren_string = str_replace('0', '', $paren_string);\n\
    \    $paren_string = str_replace('1', '0', $paren_string);\n    $paren_string\
    \ = str_replace('0', '', $paren_string);\n    $paren_string = str_replace('1',\
    \ '0', $paren_string);\n    $paren_string = str_replace('0', '', $paren_string);\n\
    \    $paren_string = str_replace('1', '0', $paren_string);\n    $paren_string\
    \ = str_replace('0', '', $paren_string);\n    $paren_string = str_replace('1',\
    \ '0', $paren_string);\n    $paren_string = str_replace('0', '', $paren_string);\n\
    \    $paren_string = str_replace('1', '0', $paren_string);\n    $paren_string\
    \ = str_replace('0', '', $paren_string);\n    $paren_string = str_replace('1',\
    \ '0', $paren_string);\n    $paren_string = str_replace('0', '', $paren_string);\n\
    \    $paren_string = str_replace('1', '0', $paren_string\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \")\" in /tmp/tmp8f869zaw.php on line 33\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpzblbqa_0.php\
    \ on line 36\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = explode(' ', $paren_string);\n\
    \    $paren_string = array_map('trim', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_map('strlen', $paren_string);\n    $paren_string =\
    \ array_map('intval', $paren_string);\n    $paren_string = array_map('floor',\
    \ $paren_string/2);\n    return $paren_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught TypeError: Unsupported operand types: array\
    \ / int in /tmp/tmp6eg9vxox.php:15\nStack trace:\n#0 /tmp/tmp6eg9vxox.php(20):\
    \ parse_nested_parens()\n#1 /tmp/tmp6eg9vxox.php(24): candidate()\n#2 /tmp/tmp6eg9vxox.php(29):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp6eg9vxox.php on line 15\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_nested_paren($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_paren()\
    \ in /tmp/tmp8w6xlgsu.php:11\nStack trace:\n#0 /tmp/tmp8w6xlgsu.php(17): parse_nested_parens()\n\
    #1 /tmp/tmp8w6xlgsu.php(21): candidate()\n#2 /tmp/tmp8w6xlgsu.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8w6xlgsu.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n   \
    \ $paren_string = array_map('strlen', $paren_string);\n    return $paren_string;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu8i36z1i.php:24\n\
    Stack trace:\n#0 /tmp/tmpu8i36z1i.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpu8i36z1i.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_depth = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $depth = 0;\n        $max_depth_so_far\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == '(') {\n                $depth++;\n            } else {\n\
    \                $depth--;\n            }\n            if ($depth > $max_depth_so_far)\
    \ {\n                $max_depth_so_far = $depth;\n            }\n        }\n \
    \       $max_depth[] = $max_depth_so_far;\n    }\n    return $max_depth;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_groups = explode(' ',\
    \ $paren_string);\n    $max_nest_levels = [];\n    foreach ($paren_groups as $paren_group)\
    \ {\n        $nest_level = 0;\n        $max_nest_level = 0;\n        for ($i =\
    \ 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i] == '(')\
    \ {\n                $nest_level++;\n            } else if ($paren_group[$i] ==\
    \ ')') {\n                $nest_level--;\n            }\n            if ($nest_level\
    \ > $max_nest_level) {\n                $max_nest_level = $nest_level;\n     \
    \       }\n        }\n        $max_nest_levels[] = $max_nest_level;\n    }\n \
    \   return $max_nest_levels;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_array as $paren) {\n        $max_nesting[] = count_parens($paren);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function count_parens()\
    \ in /tmp/tmpyu9g_svc.php:11\nStack trace:\n#0 /tmp/tmpyu9g_svc.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpyu9g_svc.php(21): candidate()\n#2 /tmp/tmpyu9g_svc.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpyu9g_svc.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_groups as $group) {\n        $nesting = 0;\n        $max_nesting_level\
    \ = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i]\
    \ == '(') {\n                $nesting++;\n            } else {\n             \
    \   $nesting--;\n            }\n            $max_nesting_level = max($max_nesting_level,\
    \ $nesting);\n        }\n        $max_nesting[] = $max_nesting_level;\n    }\n\
    \    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_groups as $paren_group) {\n        $max_nesting[] = get_max_nesting($paren_group);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_max_nesting()\
    \ in /tmp/tmp6wnznem1.php:11\nStack trace:\n#0 /tmp/tmp6wnznem1.php(17): parse_nested_parens()\n\
    #1 /tmp/tmp6wnznem1.php(21): candidate()\n#2 /tmp/tmp6wnznem1.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp6wnznem1.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n   \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  Unclosed '{' on line 7 in /tmp/tmpohonbedf.php on line\
    \ 46\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ variable or \"{\" or \"$\" in /tmp/tmpdje1eyg2.php on line 35\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpxj45ehbg.php\
    \ on line 36\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_groups as $group) {\n        $nesting = 0;\n        $max_nesting_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i]\
    \ == '(') {\n                $nesting++;\n            } else {\n             \
    \   $nesting--;\n            }\n            $max_nesting_in_group = max($max_nesting_in_group,\
    \ $nesting);\n        }\n        $max_nesting[] = $max_nesting_in_group;\n   \
    \ }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpr57batd0.php\
    \ on line 36\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_groups as $group) {\n        $nesting = 0;\n        $max_nesting_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i]\
    \ == '(') {\n                $nesting++;\n            } else if ($group[$i] ==\
    \ ')') {\n                $nesting--;\n            }\n            $max_nesting_in_group\
    \ = max($max_nesting_in_group, $nesting);\n        }\n        $max_nesting[] =\
    \ $max_nesting_in_group;\n    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_array as $paren_group) {\n        $nesting = 0;\n       \
    \ $max_nesting_level = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++)\
    \ {\n            if ($paren_group[$i] == '(') {\n                $nesting++;\n\
    \            } else if ($paren_group[$i] == ')') {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting_level) {\n           \
    \     $max_nesting_level = $nesting;\n            }\n        }\n        $max_nesting[]\
    \ = $max_nesting_level;\n    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+$/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/^\\s+/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\s+/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+\\)/', ')', $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s+$/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/^\\s+/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\s+/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+\\)/', ')', $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s+$/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/^\\s+/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\s+/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+\\)/', ')', $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s+$/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/^\\s+/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\s+/', '(', $paren_string);\n    $paren_string\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpvvjqdd0m.php\
    \ on line 29\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_array =\
    \ str_split($paren_string);\n  $paren_stack = [];\n  $max_depth = 0;\n  $depth_array\
    \ = [];\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n    \
    \  array_push($paren_stack, $paren);\n      $max_depth = max($max_depth, count($paren_stack));\n\
    \    } else {\n      array_pop($paren_stack);\n      if (count($paren_stack) ==\
    \ 0) {\n        array_push($depth_array, $max_depth);\n        $max_depth = 0;\n\
    \      }\n    }\n  }\n  return $depth_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n   \
    \ $paren_string = array_filter($paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy74beyv9.php:25\n\
    Stack trace:\n#0 /tmp/tmpy74beyv9.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpy74beyv9.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_groups = explode(' ',\
    \ $paren_string);\n    $max_nesting = [];\n    foreach ($paren_groups as $group)\
    \ {\n        $max_nesting[] = get_max_nesting($group);\n    }\n    return $max_nesting;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_max_nesting()\
    \ in /tmp/tmpwdt13jk3.php:12\nStack trace:\n#0 /tmp/tmpwdt13jk3.php(18): parse_nested_parens()\n\
    #1 /tmp/tmpwdt13jk3.php(22): candidate()\n#2 /tmp/tmpwdt13jk3.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwdt13jk3.php on line 12\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_array as $paren_group) {\n        $nesting = 0;\n       \
    \ $max_nesting_group = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++)\
    \ {\n            if ($paren_group[$i] == '(') {\n                $nesting++;\n\
    \            } else {\n                $nesting--;\n            }\n          \
    \  if ($nesting > $max_nesting_group) {\n                $max_nesting_group =\
    \ $nesting;\n            }\n        }\n        $max_nesting[] = $max_nesting_group;\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_groups = explode(' ', $paren_string);\n  $max_nesting = [];\n  foreach\
    \ ($paren_groups as $group) {\n    $max_nesting[] = get_max_nesting($group);\n\
    \  }\n  return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_max_nesting()\
    \ in /tmp/tmpzmtkmpak.php:11\nStack trace:\n#0 /tmp/tmpzmtkmpak.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpzmtkmpak.php(21): candidate()\n#2 /tmp/tmpzmtkmpak.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzmtkmpak.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_array =\
    \ str_split($paren_string);\n  $paren_stack = array();\n  $max_depth = 0;\n  $current_depth\
    \ = 0;\n  $max_depth_array = array();\n  foreach ($paren_array as $paren) {\n\
    \    if ($paren == '(') {\n      $current_depth++;\n      if ($current_depth >\
    \ $max_depth) {\n        $max_depth = $current_depth;\n      }\n      array_push($paren_stack,\
    \ $paren);\n    } elseif ($paren == ')') {\n      array_pop($paren_stack);\n \
    \     $current_depth--;\n      if (count($paren_stack) == 0) {\n        array_push($max_depth_array,\
    \ $max_depth);\n        $max_depth = 0;\n        $current_depth = 0;\n      }\n\
    \    }\n  }\n  return $max_depth_array;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $result = array();\n  foreach\
    \ ($paren_array as $paren) {\n    $result[] = parse_nested_paren($paren);\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_paren()\
    \ in /tmp/tmp9v7nd6zu.php:11\nStack trace:\n#0 /tmp/tmp9v7nd6zu.php(17): parse_nested_parens()\n\
    #1 /tmp/tmp9v7nd6zu.php(21): candidate()\n#2 /tmp/tmp9v7nd6zu.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9v7nd6zu.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_nested_paren($paren);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_paren()\
    \ in /tmp/tmpjikryift.php:11\nStack trace:\n#0 /tmp/tmpjikryift.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpjikryift.php(21): candidate()\n#2 /tmp/tmpjikryift.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjikryift.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ variable or \"{\" or \"$\" in /tmp/tmpi0q4nnn2.php on line 35\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $paren_count = 0;\n\
    \    $paren_max = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $paren_stack[] = $paren;\n            $paren_count++;\n\
    \            if ($paren_count > $paren_max) {\n                $paren_max = $paren_count;\n\
    \            }\n        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n\
    \            $paren_count--;\n        }\n    }\n    return $paren_max;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg9gwclq_.php:33\n\
    Stack trace:\n#0 /tmp/tmpg9gwclq_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpg9gwclq_.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $depth_array = [];\n    $paren_array_length = count($paren_array);\n    for\
    \ ($i = 0; $i < $paren_array_length; $i++) {\n        if ($paren_array[$i] ==\
    \ '(') {\n            array_push($paren_stack, $paren_array[$i]);\n          \
    \  $max_depth = max($max_depth, count($paren_stack));\n        } elseif ($paren_array[$i]\
    \ == ')') {\n            array_pop($paren_stack);\n        } else {\n        \
    \    array_push($depth_array, $max_depth);\n            $max_depth = 0;\n    \
    \    }\n    }\n    return $depth_array;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyd9dx45w.php:33\n\
    Stack trace:\n#0 /tmp/tmpyd9dx45w.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpyd9dx45w.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $paren_count = 0;\n\
    \    $paren_max = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $paren_stack[] = $paren;\n            $paren_count++;\n\
    \            if ($paren_count > $paren_max) {\n                $paren_max = $paren_count;\n\
    \            }\n        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n\
    \            $paren_count--;\n        }\n    }\n    return $paren_max;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb953ivkz.php:33\n\
    Stack trace:\n#0 /tmp/tmpb953ivkz.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpb953ivkz.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_array as $paren_group) {\n        $nesting = 0;\n       \
    \ $max_nesting_in_group = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == '(') {\n                $nesting++;\n\
    \            } elseif ($paren_group[$i] == ')') {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting_in_group) {\n        \
    \        $max_nesting_in_group = $nesting;\n            }\n        }\n       \
    \ $max_nesting[] = $max_nesting_in_group;\n    }\n    return $max_nesting;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $result = array();\n  foreach\
    \ ($paren_array as $paren_group) {\n    $result[] = parse_nested_parens_helper($paren_group);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmp9i1okhji.php:11\nStack trace:\n#0 /tmp/tmp9i1okhji.php(17): parse_nested_parens()\n\
    #1 /tmp/tmp9i1okhji.php(21): candidate()\n#2 /tmp/tmp9i1okhji.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9i1okhji.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $depth_array = [];\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            array_push($paren_stack, $paren);\n            $max_depth++;\n\
    \        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n  \
    \          array_push($depth_array, $max_depth);\n            $max_depth--;\n\
    \        }\n    }\n    return $depth_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcvkx9oub.php:31\n\
    Stack trace:\n#0 /tmp/tmpcvkx9oub.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpcvkx9oub.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_groups as $group) {\n        $nesting = 0;\n        $max_nesting_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i]\
    \ == '(') {\n                $nesting++;\n            } else if ($group[$i] ==\
    \ ')') {\n                $nesting--;\n            }\n            $max_nesting_in_group\
    \ = max($max_nesting_in_group, $nesting);\n        }\n        $max_nesting[] =\
    \ $max_nesting_in_group;\n    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = trim($paren_string);\n  $paren_string = str_replace(' ',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '( ', $paren_string);\n\
    \  $paren_string = str_replace(')', ' )', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ '( ', $paren_string);\n  $paren_string = str_replace(')', ' )', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace('  ', '\
    \ ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('(', '(\
    \ ', $paren_string);\n  $paren_string = str_replace(')', ' )', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace('  ', '\
    \ ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('(', '(\
    \ ', $paren_string);\n  $paren_string = str_replace(')', ' )', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace('  ', '\
    \ ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('(', '(\
    \ ', $paren_string);\n  $paren_string = str_replace(')', ' )', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n \nfunction candidate(...$args) {\n \
    \   return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  Unclosed '{' on line 7 in /tmp/tmpwd8jj0m2.php on line\
    \ 48\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+\\)/', ')',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\s+/', '(', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+\\)/', ')', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\s+/', '(', $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\s+/', '(', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+\\)/', ')', $paren_string);\n    $paren_string = preg_replace('/\\(\\s+/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\s+/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+\\)/', ')',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\s+/', '(', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpj24bk540.php\
    \ on line 29\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_groups = explode(' ', $paren_string);\n \
    \   $paren_groups_count = count($paren_groups);\n    $paren_groups_max_nesting\
    \ = array();\n    for ($i = 0; $i < $paren_groups_count; $i++) {\n        $paren_groups_max_nesting[]\
    \ = get_max_nesting($paren_groups[$i]);\n    }\n    return $paren_groups_max_nesting;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_max_nesting()\
    \ in /tmp/tmpmqkpnzb2.php:14\nStack trace:\n#0 /tmp/tmpmqkpnzb2.php(20): parse_nested_parens()\n\
    #1 /tmp/tmpmqkpnzb2.php(24): candidate()\n#2 /tmp/tmpmqkpnzb2.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmqkpnzb2.php on line 14\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_depth = [];\n\
    \    foreach ($paren_array as $paren_group) {\n        $paren_depth[] = parse_parens($paren_group);\n\
    \    }\n    return $paren_depth;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_parens()\
    \ in /tmp/tmpfet4erzg.php:11\nStack trace:\n#0 /tmp/tmpfet4erzg.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpfet4erzg.php(21): candidate()\n#2 /tmp/tmpfet4erzg.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfet4erzg.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $result = array();\n  foreach\
    \ ($paren_array as $paren) {\n    $result[] = parse_nested_paren($paren);\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_paren()\
    \ in /tmp/tmpwf6anh1u.php:11\nStack trace:\n#0 /tmp/tmpwf6anh1u.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpwf6anh1u.php(21): candidate()\n#2 /tmp/tmpwf6anh1u.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwf6anh1u.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $result = array();\n  foreach\
    \ ($paren_array as $paren) {\n    $result[] = parse_nested_paren($paren);\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_paren()\
    \ in /tmp/tmp5eu0op9e.php:11\nStack trace:\n#0 /tmp/tmp5eu0op9e.php(17): parse_nested_parens()\n\
    #1 /tmp/tmp5eu0op9e.php(21): candidate()\n#2 /tmp/tmp5eu0op9e.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5eu0op9e.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_levels = [];\n\
    \    foreach ($paren_array as $paren) {\n        $paren_levels[] = get_paren_level($paren);\n\
    \    }\n    return $paren_levels;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_paren_level()\
    \ in /tmp/tmpvbcisw94.php:11\nStack trace:\n#0 /tmp/tmpvbcisw94.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpvbcisw94.php(21): candidate()\n#2 /tmp/tmpvbcisw94.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvbcisw94.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $max_nesting = 0;\n    $nesting = 0;\n    $result\
    \ = [];\n    foreach ($paren_array as $char) {\n        if ($char == '(') {\n\
    \            $nesting++;\n            if ($nesting > $max_nesting) {\n       \
    \         $max_nesting = $nesting;\n            }\n        } elseif ($char ==\
    \ ')') {\n            $nesting--;\n            if ($nesting == 0) {\n        \
    \        $result[] = $max_nesting;\n                $max_nesting = 0;\n      \
    \      }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_depth = array();\n\
    \    foreach ($paren_array as $paren) {\n        $depth = 0;\n        $max_depth_in_paren\
    \ = 0;\n        for ($i = 0; $i < strlen($paren); $i++) {\n            if ($paren[$i]\
    \ == '(') {\n                $depth++;\n            } else {\n               \
    \ $depth--;\n            }\n            if ($depth > $max_depth_in_paren) {\n\
    \                $max_depth_in_paren = $depth;\n            }\n        }\n   \
    \     $max_depth[] = $max_depth_in_paren;\n    }\n    return $max_depth;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpsf7ek_zs.php\
    \ on line 36\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpon65rid9.php\
    \ on line 36\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '0', $paren_string);\n    $paren_string = str_replace('(',\
    \ '1', $paren_string);\n    $paren_string = str_replace(')', '0', $paren_string);\n\
    \    $paren_string = str_replace('0', ')', $paren_string);\n    $paren_string\
    \ = str_replace('1', '(', $paren_string);\n    $paren_string = str_replace(')(',\
    \ ' ', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('0', '',\
    \ $paren_string);\n    $paren_string = str_replace('1', '', $paren_string);\n\
    \    $paren_string = str_replace('2', '', $paren_string);\n    $paren_string =\
    \ str_replace('3', '', $paren_string);\n    $paren_string = str_replace('4', '',\
    \ $paren_string);\n    $paren_string = str_replace('5', '', $paren_string);\n\
    \    $paren_string = str_replace('6', '', $paren_string);\n    $paren_string =\
    \ str_replace('7', '', $paren_string);\n    $paren_string = str_replace('8', '',\
    \ $paren_string);\n    $paren_string = str_replace('9', '', $paren_string);\n\
    \    $paren_string = str_replace('0', '', $paren_string);\n    $paren_string =\
    \ str_replace('1', '', $paren_string);\n    $paren_string = str_replace('2', '',\
    \ $paren_string);\n    $paren_string = str_replace('3', '', $paren_string);\n\
    \    $paren_string = str_replace('4', '', $paren_string);\n    $paren_string =\
    \ str_replace\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpyvk2qoxg.php\
    \ on line 34\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_nesting = array();\n\
    \  foreach ($paren_array as $paren_group) {\n    $nesting = 0;\n    $max_nesting_in_group\
    \ = 0;\n    for ($i = 0; $i < strlen($paren_group); $i++) {\n      if ($paren_group[$i]\
    \ == '(') {\n        $nesting++;\n      } else if ($paren_group[$i] == ')') {\n\
    \        $nesting--;\n      }\n      if ($nesting > $max_nesting_in_group) {\n\
    \        $max_nesting_in_group = $nesting;\n      }\n    }\n    $max_nesting[]\
    \ = $max_nesting_in_group;\n  }\n  return $max_nesting;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '0', $paren_string);\n    $paren_string = str_replace('(',\
    \ '1', $paren_string);\n    $paren_string = str_replace(')', '2', $paren_string);\n\
    \    $paren_string = str_replace('0', '', $paren_string);\n    $paren_string =\
    \ str_replace('1', '', $paren_string);\n    $paren_string = str_replace('2', '',\
    \ $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('(', '',\
    \ $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')', '',\
    \ $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \")\" in /tmp/tmp574zai4z.php on line 34\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = str_replace(' ', ') (', $paren_string);\n\
    \    $paren_string = '(' . $paren_string . ')';\n    $paren_string = str_split($paren_string);\n\
    \    $paren_stack = array();\n    $max_depth = 0;\n    $current_depth = 0;\n \
    \   $max_depth_list = array();\n    foreach ($paren_string as $paren) {\n    \
    \    if ($paren == '(') {\n            array_push($paren_stack, $paren);\n   \
    \         $current_depth++;\n            if ($current_depth > $max_depth) {\n\
    \                $max_depth = $current_depth;\n            }\n        } elseif\
    \ ($paren == ')') {\n            array_pop($paren_stack);\n            $current_depth--;\n\
    \            if (empty($paren_stack)) {\n                array_push($max_depth_list,\
    \ $max_depth);\n                $max_depth = 0;\n                $current_depth\
    \ = 0;\n            }\n        }\n    }\n    return $max_depth_list;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprtolbmvi.php:42\n\
    Stack trace:\n#0 /tmp/tmprtolbmvi.php(47): test()\n#1 {main}\n  thrown in /tmp/tmprtolbmvi.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_groups\
    \ = str_split($paren_string, 1);\n    $paren_groups_count = count($paren_groups);\n\
    \    $max_nesting = 0;\n    $current_nesting = 0;\n    $nesting_levels = [];\n\
    \    for ($i = 0; $i < $paren_groups_count; $i++) {\n        if ($paren_groups[$i]\
    \ == '(') {\n            $current_nesting++;\n            if ($current_nesting\
    \ > $max_nesting) {\n                $max_nesting = $current_nesting;\n      \
    \      }\n        } elseif ($paren_groups[$i] == ')') {\n            $current_nesting--;\n\
    \            if ($current_nesting == 0) {\n                $nesting_levels[] =\
    \ $max_nesting;\n                $max_nesting = 0;\n            }\n        }\n\
    \    }\n    return $nesting_levels;\n}\n\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_array as $paren) {\n        $max_nesting[] = get_max_nesting($paren);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_max_nesting()\
    \ in /tmp/tmpiucvqgcr.php:11\nStack trace:\n#0 /tmp/tmpiucvqgcr.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpiucvqgcr.php(21): candidate()\n#2 /tmp/tmpiucvqgcr.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpiucvqgcr.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_array =\
    \ str_split($paren_string);\n  $paren_stack = [];\n  $paren_levels = [];\n  $max_level\
    \ = 0;\n  $current_level = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren\
    \ == '(') {\n      $current_level++;\n      $max_level = max($max_level, $current_level);\n\
    \      array_push($paren_stack, $paren);\n    } else {\n      $current_level--;\n\
    \      array_pop($paren_stack);\n      if (empty($paren_stack)) {\n        array_push($paren_levels,\
    \ $max_level);\n        $max_level = 0;\n      }\n    }\n  }\n  return $paren_levels;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_arr\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_nesting = 0;\n\
    \    $nesting_arr = [];\n    foreach ($paren_arr as $paren) {\n        if ($paren\
    \ == '(') {\n            array_push($paren_stack, $paren);\n        } else {\n\
    \            array_pop($paren_stack);\n        }\n        $max_nesting = max($max_nesting,\
    \ count($paren_stack));\n        if ($paren == ')') {\n            array_push($nesting_arr,\
    \ $max_nesting);\n        }\n    }\n    return $nesting_arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2lq256l8.php:32\n\
    Stack trace:\n#0 /tmp/tmp2lq256l8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp2lq256l8.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = trim($paren_string);\n  $paren_groups = explode(' ', $paren_string);\n  $max_nesting\
    \ = array();\n  foreach ($paren_groups as $group) {\n    $max_nesting[] = get_max_nesting($group);\n\
    \  }\n  return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_max_nesting()\
    \ in /tmp/tmp3w7bo_tp.php:13\nStack trace:\n#0 /tmp/tmp3w7bo_tp.php(19): parse_nested_parens()\n\
    #1 /tmp/tmp3w7bo_tp.php(23): candidate()\n#2 /tmp/tmp3w7bo_tp.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3w7bo_tp.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '0', $paren_string);\n    $paren_string = str_replace('(',\
    \ '1', $paren_string);\n    $paren_string = str_replace(')', '0', $paren_string);\n\
    \    $paren_string = str_replace('0', ')', $paren_string);\n    $paren_string\
    \ = str_replace('1', '(', $paren_string);\n    $paren_string = str_replace('((',\
    \ '2', $paren_string);\n    $paren_string = str_replace('))', '2', $paren_string);\n\
    \    $paren_string = str_replace('(((', '3', $paren_string);\n    $paren_string\
    \ = str_replace(')))', '3', $paren_string);\n    $paren_string = str_replace('((((',\
    \ '4', $paren_string);\n    $paren_string = str_replace('))))', '4', $paren_string);\n\
    \    $paren_string = str_replace('(((((', '5', $paren_string);\n    $paren_string\
    \ = str_replace('))))))', '5', $paren_string);\n    $paren_string = str_replace('((((((',\
    \ '6', $paren_string);\n    $paren_string = str_replace(')))))))', '6', $paren_string);\n\
    \    $paren_string = str_replace('(((((((', '7', $paren_string);\n    $paren_string\
    \ = str_replace('))))))))', '7', $paren_string);\n    $paren_string = str_replace('((((((((',\
    \ '8', $paren_string);\n    $paren_string = str_replace('))))))))))', '8', $paren_string);\n\
    \    $paren_string = str_replace('(((((((((', '9', $paren_string);\n    $paren_string\
    \ = str_replace(')))))))))))', '9', $paren_string);\n    $paren_string = str_replace('((((((((((',\
    \ '10', $paren_string);\n    $paren_\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpqo5anxlh.php\
    \ on line 32\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_groups as $group) {\n        $max_nesting[] = parse_nested_parens_group($group);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_parens_group()\
    \ in /tmp/tmpjwh4_tpt.php:11\nStack trace:\n#0 /tmp/tmpjwh4_tpt.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpjwh4_tpt.php(21): candidate()\n#2 /tmp/tmpjwh4_tpt.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjwh4_tpt.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_array as $paren) {\n        $max_nesting[] = get_max_nesting($paren);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_max_nesting()\
    \ in /tmp/tmpiiogt7a0.php:11\nStack trace:\n#0 /tmp/tmpiiogt7a0.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpiiogt7a0.php(21): candidate()\n#2 /tmp/tmpiiogt7a0.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpiiogt7a0.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_count = [];\n\
    \    foreach ($paren_array as $paren) {\n        $paren_count[] = count_parens($paren);\n\
    \    }\n    return $paren_count;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function count_parens()\
    \ in /tmp/tmpruab23py.php:11\nStack trace:\n#0 /tmp/tmpruab23py.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpruab23py.php(21): candidate()\n#2 /tmp/tmpruab23py.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpruab23py.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n   \
    \ $paren_string = array_filter($paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpexgk4ahs.php:25\n\
    Stack trace:\n#0 /tmp/tmpexgk4ahs.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpexgk4ahs.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ variable or \"{\" or \"$\" in /tmp/tmp9jwxjden.php on line 35\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_levels = [];\n\
    \    foreach ($paren_array as $paren) {\n        $paren_levels[] = parse_parens($paren);\n\
    \    }\n    return $paren_levels;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_parens()\
    \ in /tmp/tmpya4gsdlh.php:11\nStack trace:\n#0 /tmp/tmpya4gsdlh.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpya4gsdlh.php(21): candidate()\n#2 /tmp/tmpya4gsdlh.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpya4gsdlh.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('(', ' ( ', $paren_string);\n    $paren_string\
    \ = str_replace(')', ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string =\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmp_jufbiqx.php on line 39\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_groups as $group) {\n        $nesting = 0;\n        $max_nesting_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i]\
    \ == '(') {\n                $nesting++;\n            } else {\n             \
    \   $nesting--;\n            }\n            $max_nesting_in_group = max($max_nesting_in_group,\
    \ $nesting);\n        }\n        $max_nesting[] = $max_nesting_in_group;\n   \
    \ }\n    return $max_nesting;\n}\n\n$paren_string = '(()()) ((())) () ((())()())';\n\
    $max_nesting = parse_nested_parens($paren_string);\nprint_r($max_nesting);\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren) {\n        $nesting = 0;\n        $max_nesting_level\
    \ = 0;\n        for ($i = 0; $i < strlen($paren); $i++) {\n            if ($paren[$i]\
    \ == '(') {\n                $nesting++;\n            } else {\n             \
    \   $nesting--;\n            }\n            if ($nesting > $max_nesting_level)\
    \ {\n                $max_nesting_level = $nesting;\n            }\n        }\n\
    \        $max_nesting[] = $max_nesting_level;\n    }\n    return $max_nesting;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_groups as $paren_group) {\n        $max_nesting[] = get_max_nesting($paren_group);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_max_nesting()\
    \ in /tmp/tmpmvm3003g.php:11\nStack trace:\n#0 /tmp/tmpmvm3003g.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpmvm3003g.php(21): candidate()\n#2 /tmp/tmpmvm3003g.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmvm3003g.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpnjin9nbl.php\
    \ on line 36\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $depth_array = [];\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            array_push($paren_stack, $paren);\n            $max_depth++;\n\
    \        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n  \
    \          array_push($depth_array, $max_depth);\n            $max_depth--;\n\
    \        }\n    }\n    return $depth_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmp58k15i.php:31\n\
    Stack trace:\n#0 /tmp/tmpmp58k15i.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpmp58k15i.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $depth_array = [];\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            array_push($paren_stack, $paren);\n            $max_depth++;\n\
    \        } else {\n            array_pop($paren_stack);\n            array_push($depth_array,\
    \ $max_depth);\n            $max_depth--;\n        }\n    }\n    return $depth_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgu8kj3je.php:31\n\
    Stack trace:\n#0 /tmp/tmpgu8kj3je.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpgu8kj3je.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ variable or \"{\" or \"$\" in /tmp/tmpde5ajue5.php on line 35\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $max_nesting[] = get_max_nesting($paren_group);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_max_nesting()\
    \ in /tmp/tmp5_x99rxz.php:11\nStack trace:\n#0 /tmp/tmp5_x99rxz.php(17): parse_nested_parens()\n\
    #1 /tmp/tmp5_x99rxz.php(21): candidate()\n#2 /tmp/tmp5_x99rxz.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5_x99rxz.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $depth_array = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $depth = 0;\n        $max_depth\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == '(') {\n                $depth++;\n            } else {\n\
    \                $depth--;\n            }\n            if ($depth > $max_depth)\
    \ {\n                $max_depth = $depth;\n            }\n        }\n        $depth_array[]\
    \ = $max_depth;\n    }\n    return $depth_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_levels = [];\n\
    \    foreach ($paren_array as $paren_group) {\n        $paren_levels[] = parse_parens($paren_group);\n\
    \    }\n    return $paren_levels;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_parens()\
    \ in /tmp/tmpmiihixql.php:11\nStack trace:\n#0 /tmp/tmpmiihixql.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpmiihixql.php(21): candidate()\n#2 /tmp/tmpmiihixql.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmiihixql.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $max_nesting[] = get_max_nesting($paren_group);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_max_nesting()\
    \ in /tmp/tmpsnb3ym6h.php:11\nStack trace:\n#0 /tmp/tmpsnb3ym6h.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpsnb3ym6h.php(21): candidate()\n#2 /tmp/tmpsnb3ym6h.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsnb3ym6h.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ variable or \"{\" or \"$\" in /tmp/tmpw4_38nvo.php on line 35\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_level = 0;\n \
    \   $level = 0;\n    $max_level_array = [];\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == '(') {\n            $level++;\n            if ($level\
    \ > $max_level) {\n                $max_level = $level;\n            }\n     \
    \       array_push($paren_stack, $paren);\n        } else {\n            if ($level\
    \ > 0) {\n                $level--;\n            }\n            array_pop($paren_stack);\n\
    \            if (count($paren_stack) == 0) {\n                array_push($max_level_array,\
    \ $max_level);\n                $max_level = 0;\n            }\n        }\n  \
    \  }\n    return $max_level_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = array();\n    $paren_count =\
    \ array();\n    $paren_count_index = 0;\n    $paren_count_max = 0;\n    $paren_count_max_index\
    \ = 0;\n    $paren_count_max_index_array = array();\n    $paren_count_max_index_array_index\
    \ = 0;\n    $paren_count_max_index_array_index_max = 0;\n    for ($i = 0; $i <\
    \ count($paren_array); $i++) {\n        if ($paren_array[$i] == '(') {\n     \
    \       array_push($paren_stack, $paren_array[$i]);\n            $paren_count[$paren_count_index]++;\n\
    \        } else if ($paren_array[$i] == ')') {\n            array_pop($paren_stack);\n\
    \            if (count($paren_stack) == 0) {\n                $paren_count_index++;\n\
    \                $paren_count_max_index_array[$paren_count_max_index_array_index]\
    \ = $paren_count_max_index;\n                $paren_count_max_index_array_index++;\n\
    \                $paren_count_max_index = 0;\n            }\n        }\n     \
    \   if ($paren_count[$paren_count_index] > $paren_count_max) {\n            $paren_count_max\
    \ = $paren_count[$paren_count_index];\n            $paren_count_max_index = $paren_count_index;\n\
    \        }\n    }\n    for ($i = 0; $i < count($paren_count_max_index_array);\
    \ $i++) {\n        if ($paren_count_max_index_array[$i] > $paren_count_max_index_array_index_max)\
    \ {\n            $paren_count_max_index_array_index_max = $paren_count_max_index_array[$i];\n\
    \        }\n    }\n    return $paren_count[$paren_count_max_index\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmpiayvjk5h.php on line 42\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $depth_array = [];\n    $current_depth = 0;\n    foreach ($paren_array as\
    \ $char) {\n        if ($char == '(') {\n            $current_depth++;\n     \
    \       if ($current_depth > $max_depth) {\n                $max_depth = $current_depth;\n\
    \            }\n        } elseif ($char == ')') {\n            $current_depth--;\n\
    \            if ($current_depth == 0) {\n                array_push($depth_array,\
    \ $max_depth);\n                $max_depth = 0;\n            }\n        }\n  \
    \  }\n    return $depth_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $max_depth = 0;\n    $current_depth = 0;\n\
    \    $max_depth_array = array();\n    foreach ($paren_array as $paren) {\n   \
    \     if ($paren == '(') {\n            $current_depth++;\n            if ($current_depth\
    \ > $max_depth) {\n                $max_depth = $current_depth;\n            }\n\
    \        } else {\n            $max_depth_array[] = $max_depth;\n            $max_depth\
    \ = 0;\n            $current_depth = 0;\n        }\n    }\n    return $max_depth_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppzoe1wz5.php:33\n\
    Stack trace:\n#0 /tmp/tmppzoe1wz5.php(38): test()\n#1 {main}\n  thrown in /tmp/tmppzoe1wz5.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $max_nesting = 0;\n    $current_nesting = 0;\n\
    \    $nesting_array = array();\n    for ($i = 0; $i < count($paren_array); $i++)\
    \ {\n        if ($paren_array[$i] == '(') {\n            $current_nesting++;\n\
    \            if ($current_nesting > $max_nesting) {\n                $max_nesting\
    \ = $current_nesting;\n            }\n        } elseif ($paren_array[$i] == ')')\
    \ {\n            $current_nesting--;\n            if ($current_nesting == 0) {\n\
    \                array_push($nesting_array, $max_nesting);\n                $max_nesting\
    \ = 0;\n            }\n        }\n    }\n    return $nesting_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $current_depth = 0;\n    $paren_depth_array = [];\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $current_depth++;\n\
    \            if ($current_depth > $max_depth) {\n                $max_depth =\
    \ $current_depth;\n            }\n            array_push($paren_stack, $paren);\n\
    \        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n  \
    \          $current_depth--;\n            if (count($paren_stack) == 0) {\n  \
    \              array_push($paren_depth_array, $max_depth);\n                $max_depth\
    \ = 0;\n                $current_depth = 0;\n            }\n        }\n    }\n\
    \    return $paren_depth_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_nesting = 0;\n\
    \    $nesting_array = [];\n    foreach ($paren_array as $paren_group) {\n    \
    \    $nesting = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n\
    \            if ($paren_group[$i] == '(') {\n                $nesting++;\n   \
    \         } elseif ($paren_group[$i] == ')') {\n                $nesting--;\n\
    \            }\n        }\n        $nesting_array[] = $nesting;\n    }\n    return\
    \ $nesting_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjsp58ukz.php:30\n\
    Stack trace:\n#0 /tmp/tmpjsp58ukz.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpjsp58ukz.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ variable or \"{\" or \"$\" in /tmp/tmpcdzufjnj.php on line 35\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_groups as $paren_group) {\n        $max_nesting[] = get_max_nesting($paren_group);\n\
    \    }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_max_nesting()\
    \ in /tmp/tmpitcy1em6.php:11\nStack trace:\n#0 /tmp/tmpitcy1em6.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpitcy1em6.php(21): candidate()\n#2 /tmp/tmpitcy1em6.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpitcy1em6.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_groups = explode(' ',\
    \ $paren_string);\n    $paren_levels = [];\n    foreach ($paren_groups as $group)\
    \ {\n        $paren_levels[] = parse_nested_parens_group($group);\n    }\n   \
    \ return $paren_levels;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_parens_group()\
    \ in /tmp/tmp3doyu888.php:12\nStack trace:\n#0 /tmp/tmp3doyu888.php(18): parse_nested_parens()\n\
    #1 /tmp/tmp3doyu888.php(22): candidate()\n#2 /tmp/tmp3doyu888.php(27): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3doyu888.php on line 12\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n   \
    \ $paren_string = array_filter($paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbz25ykyk.php:25\n\
    Stack trace:\n#0 /tmp/tmpbz25ykyk.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpbz25ykyk.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\(\\s+/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\s+/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+\\)/', ')', $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\s+/', '(', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\s+/', '(', $paren_string);\n    $paren_string = preg_replace('/\\s+\\)/', ')',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\s+/', '(', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+\\)/', ')', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\(\\s+/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpjtcpor1_.php\
    \ on line 29\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $depth_array = [];\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            array_push($paren_stack, $paren);\n            if (count($paren_stack)\
    \ > $max_depth) {\n                $max_depth = count($paren_stack);\n       \
    \     }\n        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n\
    \            array_push($depth_array, $max_depth);\n            $max_depth = 0;\n\
    \        }\n    }\n    return $depth_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjg5goan5.php:33\n\
    Stack trace:\n#0 /tmp/tmpjg5goan5.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpjg5goan5.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $paren_levels = [];\n\
    \    foreach ($paren_groups as $group) {\n        $paren_levels[] = parse_nested_parens_helper($group);\n\
    \    }\n    return $paren_levels;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function parse_nested_parens_helper()\
    \ in /tmp/tmpy5u7tz0v.php:11\nStack trace:\n#0 /tmp/tmpy5u7tz0v.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpy5u7tz0v.php(21): candidate()\n#2 /tmp/tmpy5u7tz0v.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpy5u7tz0v.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_arr\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $depth_arr = [];\n    foreach ($paren_arr as $paren) {\n        if ($paren\
    \ == '(') {\n            array_push($paren_stack, $paren);\n            $max_depth++;\n\
    \        } else {\n            if (count($paren_stack) > 0) {\n              \
    \  array_pop($paren_stack);\n                $max_depth--;\n            } else\
    \ {\n                $depth_arr[] = 0;\n                $max_depth = 0;\n    \
    \        }\n        }\n    }\n    $depth_arr[] = $max_depth;\n    return $depth_arr;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjj1qd8_i.php:36\n\
    Stack trace:\n#0 /tmp/tmpjj1qd8_i.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpjj1qd8_i.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n  \
    \  $paren_max_array = array();\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == '(') {\n            $paren_count++;\n            if ($paren_count\
    \ > $paren_max) {\n                $paren_max = $paren_count;\n            }\n\
    \        } elseif ($paren == ')') {\n            $paren_count--;\n           \
    \ if ($paren_count == 0) {\n                array_push($paren_max_array, $paren_max);\n\
    \                $paren_max = 0;\n            }\n        }\n    }\n    return\
    \ $paren_max_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '0', $paren_string);\n    $paren_string = str_replace('(',\
    \ '1', $paren_string);\n    $paren_string = str_replace(')', '2', $paren_string);\n\
    \    $paren_string = str_replace('0', '', $paren_string);\n    $paren_string =\
    \ str_replace('1', '0', $paren_string);\n    $paren_string = str_replace('2',\
    \ '1', $paren_string);\n    $paren_string = str_replace('0', '', $paren_string);\n\
    \    $paren_string = str_replace('1', '0', $paren_string);\n    $paren_string\
    \ = str_replace('0', '', $paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '0', $paren_string);\n\
    \    $paren_string = str_replace('(', '1', $paren_string);\n    $paren_string\
    \ = str_replace(')', '2', $paren_string);\n    $paren_string = str_replace('0',\
    \ '', $paren_string);\n    $paren_string = str_replace('1', '0', $paren_string);\n\
    \    $paren_string = str_replace('2', '1', $paren_string);\n    $paren_string\
    \ = str_replace('0', '', $paren_string);\n    $paren_string = str_replace('1',\
    \ '0', $paren_string);\n    $paren_string = str_replace('0', '', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '0', $paren_string);\n    $paren_string = str_replace('(',\
    \ '1', $paren_string);\n    $paren_string = str_replace(')', '2', $paren_string);\n\
    \    $paren_string = str_replace('0', '', $paren_string);\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  Unclosed '{' on line 7 in /tmp/tmpoxqez3fw.php on line\
    \ 43\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ variable or \"{\" or \"$\" in /tmp/tmpknn6b8w6.php on line 35\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n   \
    \ $result = [];\n    foreach ($paren_string as $paren) {\n        $result[] =\
    \ strlen($paren);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa_4vxkwy.php:27\n\
    Stack trace:\n#0 /tmp/tmpa_4vxkwy.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpa_4vxkwy.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ variable or \"{\" or \"$\" in /tmp/tmp8q8yryjt.php on line 35\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_groups as $group) {\n        $nesting = 0;\n        $max_nesting_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i]\
    \ == '(') {\n                $nesting++;\n            } else if ($group[$i] ==\
    \ ')') {\n                $nesting--;\n            }\n            if ($nesting\
    \ > $max_nesting_in_group) {\n                $max_nesting_in_group = $nesting;\n\
    \            }\n        }\n        $max_nesting[] = $max_nesting_in_group;\n \
    \   }\n    return $max_nesting;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace(')(', ') (', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_array = array_filter($paren_array);\n    $paren_array = array_values($paren_array);\n\
    \    $paren_array_length = count($paren_array);\n    $paren_array_depth = [];\n\
    \    $paren_array_depth_count = 0;\n    for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n        if ($paren_array[$i] == '(') {\n            $paren_array_depth_count++;\n\
    \        } elseif ($paren_array[$i] == ')') {\n            $paren_array_depth[]\
    \ = $paren_array_depth_count;\n            $paren_array_depth_count--;\n     \
    \   }\n    }\n    return $paren_array_depth;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdn_xru7i.php:38\n\
    Stack trace:\n#0 /tmp/tmpdn_xru7i.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpdn_xru7i.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_depth = array();\n\
    \  foreach ($paren_array as $paren_group) {\n    $paren_depth[] = get_paren_depth($paren_group);\n\
    \  }\n  return $paren_depth;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_paren_depth()\
    \ in /tmp/tmpfrsencml.php:11\nStack trace:\n#0 /tmp/tmpfrsencml.php(17): parse_nested_parens()\n\
    #1 /tmp/tmpfrsencml.php(21): candidate()\n#2 /tmp/tmpfrsencml.php(26): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfrsencml.php on line 11\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmph0r0yjum.php\
    \ on line 36\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $depth_array = [];\n    $current_depth = 0;\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            $current_depth++;\n   \
    \         $max_depth = max($max_depth, $current_depth);\n            array_push($paren_stack,\
    \ $paren);\n        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n\
    \            $current_depth--;\n            if (empty($paren_stack)) {\n     \
    \           array_push($depth_array, $max_depth);\n                $max_depth\
    \ = 0;\n            }\n        }\n    }\n    return $depth_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_stack = array();\n\
    \    $paren_level = 0;\n    $paren_max_level = 0;\n    $paren_max_level_array\
    \ = array();\n    foreach ($paren_array as $paren) {\n        if ($paren == '(')\
    \ {\n            $paren_level++;\n            if ($paren_level > $paren_max_level)\
    \ {\n                $paren_max_level = $paren_level;\n            }\n       \
    \ } else if ($paren == ')') {\n            $paren_level--;\n            if ($paren_level\
    \ == 0) {\n                $paren_max_level_array[] = $paren_max_level;\n    \
    \            $paren_max_level = 0;\n            }\n        }\n    }\n    return\
    \ $paren_max_level_array;\n}\n\n$paren_string = '(()()) ((())) () ((())()())';\n\
    $paren_max_level_array = parse_nested_parens($paren_string);\nprint_r($paren_max_level_array);\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 1\n    [3] => 3\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_nesting = 0;\n\
    \    $nesting_array = [];\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            array_push($paren_stack, $paren);\n        }\
    \ else {\n            array_pop($paren_stack);\n            $max_nesting = max($max_nesting,\
    \ count($paren_stack));\n        }\n        if ($paren == ')') {\n           \
    \ array_push($nesting_array, $max_nesting);\n        }\n    }\n    return $nesting_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6wdjb0km.php:32\n\
    Stack trace:\n#0 /tmp/tmp6wdjb0km.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6wdjb0km.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
