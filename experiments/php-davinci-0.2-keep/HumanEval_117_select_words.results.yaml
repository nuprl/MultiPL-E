name: HumanEval_117_select_words
language: php
results:
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $words = explode(' ',\
    \ $s);\n    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1av718xk.php:37\n\
    Stack trace:\n#0 /tmp/tmp1av718xk.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp1av718xk.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa017vdxg.php:29\n\
    Stack trace:\n#0 /tmp/tmpa017vdxg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpa017vdxg.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpjks5vo_s.php:17\nStack trace:\n#0 /tmp/tmpjks5vo_s.php(25): select_words()\n\
    #1 /tmp/tmpjks5vo_s.php(29): candidate()\n#2 /tmp/tmpjks5vo_s.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjks5vo_s.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj001bary.php:40\n\
    Stack trace:\n#0 /tmp/tmpj001bary.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpj001bary.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3ndgxndo.php:29\n\
    Stack trace:\n#0 /tmp/tmp3ndgxndo.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp3ndgxndo.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp937s0dba.php:40\n\
    Stack trace:\n#0 /tmp/tmp937s0dba.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp937s0dba.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $consonants = ['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n   \
    \     for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb5vho844.php:37\n\
    Stack trace:\n#0 /tmp/tmpb5vho844.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpb5vho844.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnh8ik7kc.php:40\n\
    Stack trace:\n#0 /tmp/tmpnh8ik7kc.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnh8ik7kc.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_oq26i60.php:40\n\
    Stack trace:\n#0 /tmp/tmp_oq26i60.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp_oq26i60.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $consonants = ['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n   \
    \     for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeukg1b_h.php:37\n\
    Stack trace:\n#0 /tmp/tmpeukg1b_h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpeukg1b_h.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmp8rrnyyie.php:17\nStack trace:\n#0 /tmp/tmp8rrnyyie.php(25): select_words()\n\
    #1 /tmp/tmp8rrnyyie.php(29): candidate()\n#2 /tmp/tmp8rrnyyie.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8rrnyyie.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdzlzk_f0.php:40\n\
    Stack trace:\n#0 /tmp/tmpdzlzk_f0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdzlzk_f0.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmper0i5hfb.php:17\nStack trace:\n#0 /tmp/tmper0i5hfb.php(24): select_words()\n\
    #1 /tmp/tmper0i5hfb.php(28): candidate()\n#2 /tmp/tmper0i5hfb.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmper0i5hfb.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $result = [];\n    foreach ($s as $word)\
    \ {\n        $consonants = 0;\n        $vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp66sf763s.php:40\n\
    Stack trace:\n#0 /tmp/tmp66sf763s.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp66sf763s.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_aqf0yrm.php:40\n\
    Stack trace:\n#0 /tmp/tmp_aqf0yrm.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp_aqf0yrm.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpfwb9friz.php:17\nStack trace:\n#0 /tmp/tmpfwb9friz.php(25): select_words()\n\
    #1 /tmp/tmpfwb9friz.php(29): candidate()\n#2 /tmp/tmpfwb9friz.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpfwb9friz.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptp_p7sxe.php:29\n\
    Stack trace:\n#0 /tmp/tmptp_p7sxe.php(38): test()\n#1 {main}\n  thrown in /tmp/tmptp_p7sxe.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"z\"];\n    $words = explode(\" \", $s);\n    $result = [];\n    foreach\
    \ ($words as $word) {\n        $count = 0;\n        for ($i = 0; $i < strlen($word);\
    \ $i++) {\n            if (in_array(strtolower($word[$i]), $consonants)) {\n \
    \               $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfigeo5jr.php:37\n\
    Stack trace:\n#0 /tmp/tmpfigeo5jr.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfigeo5jr.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjy9xs9hi.php:40\n\
    Stack trace:\n#0 /tmp/tmpjy9xs9hi.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjy9xs9hi.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = array('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z');\n    $words = explode('\
    \ ', $s);\n    $result = array();\n    foreach ($words as $word) {\n        $consonant_count\
    \ = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $consonant_count++;\n            }\n      \
    \  }\n        if ($consonant_count == $n) {\n            array_push($result, $word);\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgdwy5eqa.php:37\n\
    Stack trace:\n#0 /tmp/tmpgdwy5eqa.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpgdwy5eqa.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg18_zm3y.php:40\n\
    Stack trace:\n#0 /tmp/tmpg18_zm3y.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpg18_zm3y.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfi0e4zcg.php:40\n\
    Stack trace:\n#0 /tmp/tmpfi0e4zcg.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfi0e4zcg.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpoutr_ya6.php:40\n\
    Stack trace:\n#0 /tmp/tmpoutr_ya6.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpoutr_ya6.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpevn9gp0j.php:40\n\
    Stack trace:\n#0 /tmp/tmpevn9gp0j.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpevn9gp0j.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx4d1818n.php:40\n\
    Stack trace:\n#0 /tmp/tmpx4d1818n.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpx4d1818n.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptx4pcohn.php:40\n\
    Stack trace:\n#0 /tmp/tmptx4pcohn.php(45): test()\n#1 {main}\n  thrown in /tmp/tmptx4pcohn.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp_7iuo9aq.php:17\nStack trace:\n#0 /tmp/tmp_7iuo9aq.php(25): select_words()\n\
    #1 /tmp/tmp_7iuo9aq.php(29): candidate()\n#2 /tmp/tmp_7iuo9aq.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_7iuo9aq.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfzb2dsi_.php:29\n\
    Stack trace:\n#0 /tmp/tmpfzb2dsi_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpfzb2dsi_.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $result = [];\n    foreach ($s as $word)\
    \ {\n        $consonants = 0;\n        for ($i = 0; $i < strlen($word); $i++)\
    \ {\n            if (strpos('aeiou', $word[$i]) === false) {\n               \
    \ $consonants++;\n            }\n        }\n        if ($consonants === $n) {\n\
    \            $result[] = $word;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz9fojfh9.php:39\n\
    Stack trace:\n#0 /tmp/tmpz9fojfh9.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpz9fojfh9.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $consonants = ['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n   \
    \     for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9cucjs45.php:37\n\
    Stack trace:\n#0 /tmp/tmp9cucjs45.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp9cucjs45.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\necho '<pre>';\nprint_r(select_words(\"Mary had a little lamb\"\
    , 4));\necho '</pre>';\n\necho '<pre>';\nprint_r(select_words(\"Mary had a little\
    \ lamb\", 3));\necho '</pre>';\n\necho '<pre>';\nprint_r(select_words(\"simple\
    \ white space\", 2));\necho '</pre>';\n\necho '<pre>';\nprint_r(select_words(\"\
    Hello world\", 4));\necho '</pre>';\n\necho '<pre>';\nprint_r(select_words(\"\
    Uncle sam\", 3));\necho '</pre>';\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0]\
    \ => simple\n    [1] => white\n    [2] => space\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n\
    (\n)\n</pre>"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1l88qfzp.php:48\n\
    Stack trace:\n#0 /tmp/tmp1l88qfzp.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp1l88qfzp.php\
    \ on line 48\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $words = explode(' ',\
    \ $s);\n    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpupu1a9rn.php:37\n\
    Stack trace:\n#0 /tmp/tmpupu1a9rn.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpupu1a9rn.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $words = explode(' ',\
    \ $s);\n    $result = [];\n    foreach ($words as $word) {\n        $consonantCount\
    \ = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array(strtolower($word[$i]),\
    \ $consonants)) {\n                $consonantCount++;\n            }\n       \
    \ }\n        if ($consonantCount == $n) {\n            $result[] = $word;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfw9c30iy.php:37\n\
    Stack trace:\n#0 /tmp/tmpfw9c30iy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfw9c30iy.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (consonants_count($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpdazzo20y.php:17\nStack trace:\n#0 /tmp/tmpdazzo20y.php(25): select_words()\n\
    #1 /tmp/tmpdazzo20y.php(29): candidate()\n#2 /tmp/tmpdazzo20y.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdazzo20y.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $words = explode('\
    \ ', $s);\n    $result = array();\n    foreach ($words as $word) {\n        $consonants\
    \ = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp23439sr8.php:40\n\
    Stack trace:\n#0 /tmp/tmp23439sr8.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp23439sr8.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $consonants = ['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n   \
    \     foreach (str_split($word) as $letter) {\n            if (in_array($letter,\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1f7t_feg.php:37\n\
    Stack trace:\n#0 /tmp/tmp1f7t_feg.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp1f7t_feg.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (strlen($word) == $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppohx6j3j.php:29\n\
    Stack trace:\n#0 /tmp/tmppohx6j3j.php(38): test()\n#1 {main}\n  thrown in /tmp/tmppohx6j3j.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkwvg6om5.php:29\n\
    Stack trace:\n#0 /tmp/tmpkwvg6om5.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpkwvg6om5.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $arr = explode(\" \", $s);\n  $result = [];\n  foreach ($arr as $word)\
    \ {\n    if (consonants($word) == $n) {\n      $result[] = $word;\n    }\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function consonants()\
    \ in /tmp/tmpoguykzx8.php:17\nStack trace:\n#0 /tmp/tmpoguykzx8.php(25): select_words()\n\
    #1 /tmp/tmpoguykzx8.php(29): candidate()\n#2 /tmp/tmpoguykzx8.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpoguykzx8.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphbh1o3qa.php:29\n\
    Stack trace:\n#0 /tmp/tmphbh1o3qa.php(38): test()\n#1 {main}\n  thrown in /tmp/tmphbh1o3qa.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $words = explode(' ',\
    \ $s);\n    $result = [];\n    foreach ($words as $word) {\n        $consonantCount\
    \ = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array(strtolower($word[$i]),\
    \ $consonants)) {\n                $consonantCount++;\n            }\n       \
    \ }\n        if ($consonantCount == $n) {\n            $result[] = $word;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3yaekawj.php:37\n\
    Stack trace:\n#0 /tmp/tmp3yaekawj.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3yaekawj.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpxm4g3ds_.php:17\nStack trace:\n#0 /tmp/tmpxm4g3ds_.php(25): select_words()\n\
    #1 /tmp/tmpxm4g3ds_.php(29): candidate()\n#2 /tmp/tmpxm4g3ds_.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxm4g3ds_.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpww19q_47.php:40\n\
    Stack trace:\n#0 /tmp/tmpww19q_47.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpww19q_47.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (strlen($word) == $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4rqq6jqq.php:29\n\
    Stack trace:\n#0 /tmp/tmp4rqq6jqq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp4rqq6jqq.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $result = [];\n    $words\
    \ = explode(' ', $s);\n    foreach ($words as $word) {\n        $consonants =\
    \ 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm9gzmneb.php:40\n\
    Stack trace:\n#0 /tmp/tmpm9gzmneb.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpm9gzmneb.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpo5onlnyi.php:40\n\
    Stack trace:\n#0 /tmp/tmpo5onlnyi.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpo5onlnyi.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $words = explode(' ',\
    \ $s);\n    $result = [];\n    foreach ($words as $word) {\n        $consonantCount\
    \ = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array(strtolower($word[$i]),\
    \ $consonants)) {\n                $consonantCount++;\n            }\n       \
    \ }\n        if ($consonantCount == $n) {\n            $result[] = $word;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0_57h4_y.php:37\n\
    Stack trace:\n#0 /tmp/tmp0_57h4_y.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp0_57h4_y.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm0n43rbd.php:40\n\
    Stack trace:\n#0 /tmp/tmpm0n43rbd.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpm0n43rbd.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $words = explode(' ',\
    \ $s);\n    $result = [];\n    foreach ($words as $word) {\n        $consonant_count\
    \ = 0;\n        foreach (str_split($word) as $letter) {\n            if (in_array($letter,\
    \ $consonants)) {\n                $consonant_count++;\n            }\n      \
    \  }\n        if ($consonant_count == $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpo4admjph.php:37\n\
    Stack trace:\n#0 /tmp/tmpo4admjph.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpo4admjph.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n   \
    \     for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $count++;\n            }\n        }\n        if\
    \ ($count == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsvchqjdg.php:40\n\
    Stack trace:\n#0 /tmp/tmpsvchqjdg.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpsvchqjdg.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $words = explode(' ',\
    \ $s);\n    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpftms7haj.php:37\n\
    Stack trace:\n#0 /tmp/tmpftms7haj.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpftms7haj.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpoikmpxus.php:29\n\
    Stack trace:\n#0 /tmp/tmpoikmpxus.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpoikmpxus.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmporh__4z9.php:29\n\
    Stack trace:\n#0 /tmp/tmporh__4z9.php(38): test()\n#1 {main}\n  thrown in /tmp/tmporh__4z9.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8xh59w2k.php:40\n\
    Stack trace:\n#0 /tmp/tmp8xh59w2k.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp8xh59w2k.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpdobx51vs.php:17\nStack trace:\n#0 /tmp/tmpdobx51vs.php(25): select_words()\n\
    #1 /tmp/tmpdobx51vs.php(29): candidate()\n#2 /tmp/tmpdobx51vs.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdobx51vs.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5ztgzs1w.php:29\n\
    Stack trace:\n#0 /tmp/tmp5ztgzs1w.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp5ztgzs1w.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmp5p0bg_3z.php:17\nStack trace:\n#0 /tmp/tmp5p0bg_3z.php(25): select_words()\n\
    #1 /tmp/tmp5p0bg_3z.php(29): candidate()\n#2 /tmp/tmp5p0bg_3z.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5p0bg_3z.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n   \
    \     for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $count++;\n            }\n        }\n        if\
    \ ($count == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => Mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpub93it_v.php:45\n\
    Stack trace:\n#0 /tmp/tmpub93it_v.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpub93it_v.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0pp6bwwc.php:29\n\
    Stack trace:\n#0 /tmp/tmp0pp6bwwc.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp0pp6bwwc.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp90neoi0_.php:40\n\
    Stack trace:\n#0 /tmp/tmp90neoi0_.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp90neoi0_.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $vowels = array('a', 'e', 'i', 'o', 'u');\n  $words = explode(' ',\
    \ $s);\n  $result = array();\n  foreach ($words as $word) {\n    $consonants =\
    \ 0;\n    for ($i = 0; $i < strlen($word); $i++) {\n      if (!in_array($word[$i],\
    \ $vowels)) {\n        $consonants++;\n      }\n    }\n    if ($consonants ==\
    \ $n) {\n      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => Mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6h7ujmvp.php:46\n\
    Stack trace:\n#0 /tmp/tmp6h7ujmvp.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp6h7ujmvp.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $words = explode(' ',\
    \ $s);\n    $result = [];\n    foreach ($words as $word) {\n        $consonant_count\
    \ = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $consonant_count++;\n            }\n      \
    \  }\n        if ($consonant_count == $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjhatjj3w.php:37\n\
    Stack trace:\n#0 /tmp/tmpjhatjj3w.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjhatjj3w.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $words = explode(' ',\
    \ $s);\n    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmploz6qe1m.php:37\n\
    Stack trace:\n#0 /tmp/tmploz6qe1m.php(45): test()\n#1 {main}\n  thrown in /tmp/tmploz6qe1m.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9cie4lx8.php:40\n\
    Stack trace:\n#0 /tmp/tmp9cie4lx8.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp9cie4lx8.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7g5awxqq.php:34\n\
    Stack trace:\n#0 /tmp/tmp7g5awxqq.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp7g5awxqq.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $words = explode(' ', $s);\n  $result = [];\n  foreach ($words as $word)\
    \ {\n    if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      $result[]\
    \ = $word;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdq2d0k61.php:29\n\
    Stack trace:\n#0 /tmp/tmpdq2d0k61.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpdq2d0k61.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp9cnh0c45.php:17\nStack trace:\n#0 /tmp/tmp9cnh0c45.php(25): select_words()\n\
    #1 /tmp/tmp9cnh0c45.php(29): candidate()\n#2 /tmp/tmp9cnh0c45.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp9cnh0c45.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmprmokxd8q.php:17\nStack trace:\n#0 /tmp/tmprmokxd8q.php(25): select_words()\n\
    #1 /tmp/tmprmokxd8q.php(29): candidate()\n#2 /tmp/tmprmokxd8q.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmprmokxd8q.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $result = [];\n    foreach ($s as $word)\
    \ {\n        $consonants = 0;\n        for ($i = 0; $i < strlen($word); $i++)\
    \ {\n            if (!in_array($word[$i], ['a', 'e', 'i', 'o', 'u'])) {\n    \
    \            $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbmks72uk.php:39\n\
    Stack trace:\n#0 /tmp/tmpbmks72uk.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbmks72uk.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpzolgs90q.php:17\nStack trace:\n#0 /tmp/tmpzolgs90q.php(25): select_words()\n\
    #1 /tmp/tmpzolgs90q.php(29): candidate()\n#2 /tmp/tmpzolgs90q.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzolgs90q.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $words = explode(' ',\
    \ $s);\n    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmphcwbte.php:37\n\
    Stack trace:\n#0 /tmp/tmpmphcwbte.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpmphcwbte.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6lnto7ie.php:29\n\
    Stack trace:\n#0 /tmp/tmp6lnto7ie.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6lnto7ie.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2pvqd2vp.php:40\n\
    Stack trace:\n#0 /tmp/tmp2pvqd2vp.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp2pvqd2vp.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $result = [];\n  $words = explode(' ', $s);\n  foreach ($words as $word)\
    \ {\n    if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      $result[]\
    \ = $word;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpadpkju3h.php:29\n\
    Stack trace:\n#0 /tmp/tmpadpkju3h.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpadpkju3h.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4l1ep6e0.php:40\n\
    Stack trace:\n#0 /tmp/tmp4l1ep6e0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp4l1ep6e0.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $words = explode(' ',\
    \ $s);\n    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbsrk01yp.php:37\n\
    Stack trace:\n#0 /tmp/tmpbsrk01yp.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpbsrk01yp.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmp15rb16ag.php:17\nStack trace:\n#0 /tmp/tmp15rb16ag.php(25): select_words()\n\
    #1 /tmp/tmp15rb16ag.php(29): candidate()\n#2 /tmp/tmp15rb16ag.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp15rb16ag.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $words = explode(' ',\
    \ $s);\n    $result = [];\n    foreach ($words as $word) {\n        $consonantCount\
    \ = 0;\n        foreach (str_split($word) as $letter) {\n            if (in_array($letter,\
    \ $consonants)) {\n                $consonantCount++;\n            }\n       \
    \ }\n        if ($consonantCount === $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpd83vckg2.php:37\n\
    Stack trace:\n#0 /tmp/tmpd83vckg2.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpd83vckg2.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpbbn49130.php:17\nStack trace:\n#0 /tmp/tmpbbn49130.php(25): select_words()\n\
    #1 /tmp/tmpbbn49130.php(29): candidate()\n#2 /tmp/tmpbbn49130.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbbn49130.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjvdhjg6t.php:40\n\
    Stack trace:\n#0 /tmp/tmpjvdhjg6t.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjvdhjg6t.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $result = [];\n    foreach ($s as $word)\
    \ {\n        $consonants = 0;\n        for ($i = 0; $i < strlen($word); $i++)\
    \ {\n            if (!in_array($word[$i], ['a', 'e', 'i', 'o', 'u'])) {\n    \
    \            $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkqpxzku0.php:39\n\
    Stack trace:\n#0 /tmp/tmpkqpxzku0.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkqpxzku0.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq3rigm59.php:40\n\
    Stack trace:\n#0 /tmp/tmpq3rigm59.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpq3rigm59.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzf5u_ec9.php:40\n\
    Stack trace:\n#0 /tmp/tmpzf5u_ec9.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpzf5u_ec9.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7cp8a7p6.php:29\n\
    Stack trace:\n#0 /tmp/tmp7cp8a7p6.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7cp8a7p6.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\necho \"<pre>\";\nprint_r(select_words(\"Mary had a little lamb\"\
    , 4));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n)\n</pre>"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp__dwicrl.php:31\n\
    Stack trace:\n#0 /tmp/tmp__dwicrl.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp__dwicrl.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $consonants = ['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n   \
    \     for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy2mzhyub.php:37\n\
    Stack trace:\n#0 /tmp/tmpy2mzhyub.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpy2mzhyub.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6dme6feh.php:40\n\
    Stack trace:\n#0 /tmp/tmp6dme6feh.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6dme6feh.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $words = explode(' ', $s);\n  $result = [];\n  foreach ($words as $word)\
    \ {\n    if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      $result[]\
    \ = $word;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_ccnh3of.php:29\n\
    Stack trace:\n#0 /tmp/tmp_ccnh3of.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_ccnh3of.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjdyxjqxn.php:29\n\
    Stack trace:\n#0 /tmp/tmpjdyxjqxn.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpjdyxjqxn.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $words = explode(' ',\
    \ $s);\n    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1e6shxjg.php:37\n\
    Stack trace:\n#0 /tmp/tmp1e6shxjg.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp1e6shxjg.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n   \
    \     for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $count++;\n            }\n        }\n        if\
    \ ($count == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp515sgagr.php:40\n\
    Stack trace:\n#0 /tmp/tmp515sgagr.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp515sgagr.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpksce0v_f.php:29\n\
    Stack trace:\n#0 /tmp/tmpksce0v_f.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpksce0v_f.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmp7ryvm0s_.php:17\nStack trace:\n#0 /tmp/tmp7ryvm0s_.php(25): select_words()\n\
    #1 /tmp/tmp7ryvm0s_.php(29): candidate()\n#2 /tmp/tmp7ryvm0s_.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7ryvm0s_.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n   \
    \     for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $count++;\n            }\n        }\n        if\
    \ ($count == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpee35maoz.php:40\n\
    Stack trace:\n#0 /tmp/tmpee35maoz.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpee35maoz.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp86zm3lyq.php:40\n\
    Stack trace:\n#0 /tmp/tmp86zm3lyq.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp86zm3lyq.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmphpinem3p.php:17\nStack trace:\n#0 /tmp/tmphpinem3p.php(25): select_words()\n\
    #1 /tmp/tmphpinem3p.php(29): candidate()\n#2 /tmp/tmphpinem3p.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmphpinem3p.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc_qeofdk.php:40\n\
    Stack trace:\n#0 /tmp/tmpc_qeofdk.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpc_qeofdk.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph0j58sh2.php:40\n\
    Stack trace:\n#0 /tmp/tmph0j58sh2.php(45): test()\n#1 {main}\n  thrown in /tmp/tmph0j58sh2.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5kl2ubuh.php:40\n\
    Stack trace:\n#0 /tmp/tmp5kl2ubuh.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp5kl2ubuh.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpp0gl7day.php:40\n\
    Stack trace:\n#0 /tmp/tmpp0gl7day.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpp0gl7day.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpg1r4ohl5.php:17\nStack trace:\n#0 /tmp/tmpg1r4ohl5.php(25): select_words()\n\
    #1 /tmp/tmpg1r4ohl5.php(29): candidate()\n#2 /tmp/tmpg1r4ohl5.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpg1r4ohl5.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptkancwe_.php:40\n\
    Stack trace:\n#0 /tmp/tmptkancwe_.php(45): test()\n#1 {main}\n  thrown in /tmp/tmptkancwe_.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n   \
    \     for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $count++;\n            }\n        }\n        if\
    \ ($count == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4nswksgn.php:40\n\
    Stack trace:\n#0 /tmp/tmp4nswksgn.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp4nswksgn.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp27e1ja21.php:29\n\
    Stack trace:\n#0 /tmp/tmp27e1ja21.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp27e1ja21.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $words = explode(' ',\
    \ $s);\n    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnno97nly.php:37\n\
    Stack trace:\n#0 /tmp/tmpnno97nly.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnno97nly.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $result = [];\n    foreach ($s as $word)\
    \ {\n        $consonants = 0;\n        for ($i = 0; $i < strlen($word); $i++)\
    \ {\n            if (strpos('aeiou', $word[$i]) === false) {\n               \
    \ $consonants++;\n            }\n        }\n        if ($consonants === $n) {\n\
    \            $result[] = $word;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqbjh567s.php:39\n\
    Stack trace:\n#0 /tmp/tmpqbjh567s.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpqbjh567s.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6jqryt0s.php:40\n\
    Stack trace:\n#0 /tmp/tmp6jqryt0s.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6jqryt0s.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpixbog8oz.php:40\n\
    Stack trace:\n#0 /tmp/tmpixbog8oz.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpixbog8oz.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpuze9y02g.php:17\nStack trace:\n#0 /tmp/tmpuze9y02g.php(25): select_words()\n\
    #1 /tmp/tmpuze9y02g.php(29): candidate()\n#2 /tmp/tmpuze9y02g.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpuze9y02g.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = 'bcdfghjklmnpqrstvwxyz';\n    $words = explode(' ',\
    \ $s);\n    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (strpos($consonants,\
    \ strtolower($word[$i])) !== false) {\n                $count++;\n           \
    \ }\n        }\n        if ($count === $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz147z2ig.php:40\n\
    Stack trace:\n#0 /tmp/tmpz147z2ig.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpz147z2ig.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $consonants = ['b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n\
    \    $result = [];\n    foreach ($s as $word) {\n        $count = 0;\n       \
    \ for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array(strtolower($word[$i]),\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\n\
    print_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => lamb\n)\nArray\n(\n\
    )\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpni81704r.php:42\n\
    Stack trace:\n#0 /tmp/tmpni81704r.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpni81704r.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpez_gbuu2.php:40\n\
    Stack trace:\n#0 /tmp/tmpez_gbuu2.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpez_gbuu2.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $words = explode(' ',\
    \ $s);\n    $result = [];\n    foreach ($words as $word) {\n        $consonantCount\
    \ = 0;\n        foreach (str_split($word) as $letter) {\n            if (in_array($letter,\
    \ $consonants)) {\n                $consonantCount++;\n            }\n       \
    \ }\n        if ($consonantCount === $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbx_v5npv.php:37\n\
    Stack trace:\n#0 /tmp/tmpbx_v5npv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpbx_v5npv.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqd40bvfn.php:29\n\
    Stack trace:\n#0 /tmp/tmpqd40bvfn.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqd40bvfn.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa_fkpi68.php:29\n\
    Stack trace:\n#0 /tmp/tmpa_fkpi68.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpa_fkpi68.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn8ybqu2k.php:29\n\
    Stack trace:\n#0 /tmp/tmpn8ybqu2k.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpn8ybqu2k.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpp_tqpvq2.php:17\nStack trace:\n#0 /tmp/tmpp_tqpvq2.php(25): select_words()\n\
    #1 /tmp/tmpp_tqpvq2.php(29): candidate()\n#2 /tmp/tmpp_tqpvq2.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpp_tqpvq2.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmp7vonoj0x.php:17\nStack trace:\n#0 /tmp/tmp7vonoj0x.php(25): select_words()\n\
    #1 /tmp/tmp7vonoj0x.php(29): candidate()\n#2 /tmp/tmp7vonoj0x.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7vonoj0x.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfc2xe71z.php:29\n\
    Stack trace:\n#0 /tmp/tmpfc2xe71z.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpfc2xe71z.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptg_8hw0s.php:29\n\
    Stack trace:\n#0 /tmp/tmptg_8hw0s.php(38): test()\n#1 {main}\n  thrown in /tmp/tmptg_8hw0s.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $consonants = ['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n   \
    \     for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcls1r1hk.php:37\n\
    Stack trace:\n#0 /tmp/tmpcls1r1hk.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpcls1r1hk.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpze1h39qd.php:17\nStack trace:\n#0 /tmp/tmpze1h39qd.php(25): select_words()\n\
    #1 /tmp/tmpze1h39qd.php(29): candidate()\n#2 /tmp/tmpze1h39qd.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpze1h39qd.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n   \
    \     for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $count++;\n            }\n        }\n        if\
    \ ($count == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp764f5uym.php:40\n\
    Stack trace:\n#0 /tmp/tmp764f5uym.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp764f5uym.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpz86r_4iy.php:17\nStack trace:\n#0 /tmp/tmpz86r_4iy.php(25): select_words()\n\
    #1 /tmp/tmpz86r_4iy.php(29): candidate()\n#2 /tmp/tmpz86r_4iy.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpz86r_4iy.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n   \
    \     for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $count++;\n            }\n        }\n        if\
    \ ($count == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkb0v0xwd.php:40\n\
    Stack trace:\n#0 /tmp/tmpkb0v0xwd.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpkb0v0xwd.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3qlcwav7.php:40\n\
    Stack trace:\n#0 /tmp/tmp3qlcwav7.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3qlcwav7.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpg_yflul_.php:17\nStack trace:\n#0 /tmp/tmpg_yflul_.php(25): select_words()\n\
    #1 /tmp/tmpg_yflul_.php(29): candidate()\n#2 /tmp/tmpg_yflul_.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpg_yflul_.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $result = [];\n    $words\
    \ = explode(' ', $s);\n    foreach ($words as $word) {\n        $consonants =\
    \ 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbv20ho7x.php:40\n\
    Stack trace:\n#0 /tmp/tmpbv20ho7x.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpbv20ho7x.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmphbj14gvk.php:17\nStack trace:\n#0 /tmp/tmphbj14gvk.php(24): select_words()\n\
    #1 /tmp/tmphbj14gvk.php(28): candidate()\n#2 /tmp/tmphbj14gvk.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmphbj14gvk.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuh_368m5.php:40\n\
    Stack trace:\n#0 /tmp/tmpuh_368m5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpuh_368m5.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (consonants_count($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmpo8sgreaq.php:17\nStack trace:\n#0 /tmp/tmpo8sgreaq.php(25): select_words()\n\
    #1 /tmp/tmpo8sgreaq.php(29): candidate()\n#2 /tmp/tmpo8sgreaq.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpo8sgreaq.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpd96jbrbb.php:17\nStack trace:\n#0 /tmp/tmpd96jbrbb.php(25): select_words()\n\
    #1 /tmp/tmpd96jbrbb.php(29): candidate()\n#2 /tmp/tmpd96jbrbb.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpd96jbrbb.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpblhdkc76.php:29\n\
    Stack trace:\n#0 /tmp/tmpblhdkc76.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpblhdkc76.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfrhcwayb.php:29\n\
    Stack trace:\n#0 /tmp/tmpfrhcwayb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpfrhcwayb.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpntg4pqnz.php:17\nStack trace:\n#0 /tmp/tmpntg4pqnz.php(25): select_words()\n\
    #1 /tmp/tmpntg4pqnz.php(29): candidate()\n#2 /tmp/tmpntg4pqnz.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpntg4pqnz.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr0uyhmd_.php:40\n\
    Stack trace:\n#0 /tmp/tmpr0uyhmd_.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpr0uyhmd_.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp8aa1vw98.php:17\nStack trace:\n#0 /tmp/tmp8aa1vw98.php(25): select_words()\n\
    #1 /tmp/tmp8aa1vw98.php(29): candidate()\n#2 /tmp/tmp8aa1vw98.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8aa1vw98.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa_rqnjae.php:40\n\
    Stack trace:\n#0 /tmp/tmpa_rqnjae.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpa_rqnjae.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmp99yvrhj4.php:17\nStack trace:\n#0 /tmp/tmp99yvrhj4.php(25): select_words()\n\
    #1 /tmp/tmp99yvrhj4.php(29): candidate()\n#2 /tmp/tmp99yvrhj4.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp99yvrhj4.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpta52iuyc.php:17\nStack trace:\n#0 /tmp/tmpta52iuyc.php(25): select_words()\n\
    #1 /tmp/tmpta52iuyc.php(29): candidate()\n#2 /tmp/tmpta52iuyc.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpta52iuyc.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzfgcz5av.php:40\n\
    Stack trace:\n#0 /tmp/tmpzfgcz5av.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpzfgcz5av.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphrcsx85d.php:29\n\
    Stack trace:\n#0 /tmp/tmphrcsx85d.php(38): test()\n#1 {main}\n  thrown in /tmp/tmphrcsx85d.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpyhu0c4sb.php:17\nStack trace:\n#0 /tmp/tmpyhu0c4sb.php(25): select_words()\n\
    #1 /tmp/tmpyhu0c4sb.php(29): candidate()\n#2 /tmp/tmpyhu0c4sb.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpyhu0c4sb.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpdq33kgz3.php:17\nStack trace:\n#0 /tmp/tmpdq33kgz3.php(25): select_words()\n\
    #1 /tmp/tmpdq33kgz3.php(29): candidate()\n#2 /tmp/tmpdq33kgz3.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdq33kgz3.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp0_n7bbx2.php:17\nStack trace:\n#0 /tmp/tmp0_n7bbx2.php(24): select_words()\n\
    #1 /tmp/tmp0_n7bbx2.php(28): candidate()\n#2 /tmp/tmp0_n7bbx2.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0_n7bbx2.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbwm0sxm_.php:29\n\
    Stack trace:\n#0 /tmp/tmpbwm0sxm_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbwm0sxm_.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9rq314cv.php:40\n\
    Stack trace:\n#0 /tmp/tmp9rq314cv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp9rq314cv.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpze9p2xsg.php:17\nStack trace:\n#0 /tmp/tmpze9p2xsg.php(25): select_words()\n\
    #1 /tmp/tmpze9p2xsg.php(29): candidate()\n#2 /tmp/tmpze9p2xsg.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpze9p2xsg.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $result = [];\n  $words = explode(' ', $s);\n  foreach ($words as $word)\
    \ {\n    if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      $result[]\
    \ = $word;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9dblomic.php:29\n\
    Stack trace:\n#0 /tmp/tmp9dblomic.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp9dblomic.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpat6tx_lm.php:17\nStack trace:\n#0 /tmp/tmpat6tx_lm.php(25): select_words()\n\
    #1 /tmp/tmpat6tx_lm.php(29): candidate()\n#2 /tmp/tmpat6tx_lm.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpat6tx_lm.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $words = explode(' ',\
    \ $s);\n    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp27q3p6hd.php:37\n\
    Stack trace:\n#0 /tmp/tmp27q3p6hd.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp27q3p6hd.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n   \
    \     for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $count++;\n            }\n        }\n        if\
    \ ($count == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9tr5zoe1.php:40\n\
    Stack trace:\n#0 /tmp/tmp9tr5zoe1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp9tr5zoe1.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq71l779t.php:34\n\
    Stack trace:\n#0 /tmp/tmpq71l779t.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpq71l779t.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $arr = explode(\" \", $s);\n  $result = [];\n  foreach ($arr as $word)\
    \ {\n    if (substr_count($word, \"a\") + substr_count($word, \"e\") + substr_count($word,\
    \ \"i\") + substr_count($word, \"o\") + substr_count($word, \"u\") == $n) {\n\
    \      array_push($result, $word);\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf2dh0j6_.php:29\n\
    Stack trace:\n#0 /tmp/tmpf2dh0j6_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpf2dh0j6_.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzx7nrpf9.php:40\n\
    Stack trace:\n#0 /tmp/tmpzx7nrpf9.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpzx7nrpf9.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpmr1ntg4v.php:17\nStack trace:\n#0 /tmp/tmpmr1ntg4v.php(25): select_words()\n\
    #1 /tmp/tmpmr1ntg4v.php(29): candidate()\n#2 /tmp/tmpmr1ntg4v.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmr1ntg4v.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $words = explode(' ', $s);\n  $result = [];\n  foreach ($words as $word)\
    \ {\n    if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      $result[]\
    \ = $word;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpukikgrd7.php:29\n\
    Stack trace:\n#0 /tmp/tmpukikgrd7.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpukikgrd7.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (consonants($word) == $n) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function consonants()\
    \ in /tmp/tmp2j_xnhej.php:17\nStack trace:\n#0 /tmp/tmp2j_xnhej.php(25): select_words()\n\
    #1 /tmp/tmp2j_xnhej.php(29): candidate()\n#2 /tmp/tmp2j_xnhej.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2j_xnhej.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\"\
    , 4));\nprint_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => Mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzprb70jh.php:45\n\
    Stack trace:\n#0 /tmp/tmpzprb70jh.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpzprb70jh.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpznb46b98.php:17\nStack trace:\n#0 /tmp/tmpznb46b98.php(25): select_words()\n\
    #1 /tmp/tmpznb46b98.php(29): candidate()\n#2 /tmp/tmpznb46b98.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpznb46b98.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphdf44ssg.php:40\n\
    Stack trace:\n#0 /tmp/tmphdf44ssg.php(45): test()\n#1 {main}\n  thrown in /tmp/tmphdf44ssg.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpf6ysjtgg.php:17\nStack trace:\n#0 /tmp/tmpf6ysjtgg.php(24): select_words()\n\
    #1 /tmp/tmpf6ysjtgg.php(28): candidate()\n#2 /tmp/tmpf6ysjtgg.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpf6ysjtgg.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpngqoon7i.php:29\n\
    Stack trace:\n#0 /tmp/tmpngqoon7i.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpngqoon7i.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmperhwvi_b.php:40\n\
    Stack trace:\n#0 /tmp/tmperhwvi_b.php(45): test()\n#1 {main}\n  thrown in /tmp/tmperhwvi_b.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpshn4ef91.php:17\nStack trace:\n#0 /tmp/tmpshn4ef91.php(25): select_words()\n\
    #1 /tmp/tmpshn4ef91.php(29): candidate()\n#2 /tmp/tmpshn4ef91.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpshn4ef91.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1_7s_koo.php:29\n\
    Stack trace:\n#0 /tmp/tmp1_7s_koo.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp1_7s_koo.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjnlzqteu.php:40\n\
    Stack trace:\n#0 /tmp/tmpjnlzqteu.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjnlzqteu.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt93bvuoc.php:29\n\
    Stack trace:\n#0 /tmp/tmpt93bvuoc.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpt93bvuoc.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\necho '<pre>';\nprint_r(select_words(\"Mary had\
    \ a little lamb\", 4));\necho '</pre>';\n\necho '<pre>';\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\necho '</pre>';\n\necho '<pre>';\nprint_r(select_words(\"\
    simple white space\", 2));\necho '</pre>';\n\necho '<pre>';\nprint_r(select_words(\"\
    Hello world\", 4));\necho '</pre>';\n\necho '<pre>';\nprint_r(select_words(\"\
    Uncle sam\", 3));\necho '</pre>';\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => little\n)\n</pre><pre>Array\n(\n    [0] => Mary\n\
    \    [1] => lamb\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0] => world\n\
    )\n</pre><pre>Array\n(\n)\n</pre>"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyz5nlft9.php:59\n\
    Stack trace:\n#0 /tmp/tmpyz5nlft9.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpyz5nlft9.php\
    \ on line 59\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3lhgjwy2.php:40\n\
    Stack trace:\n#0 /tmp/tmp3lhgjwy2.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3lhgjwy2.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmp4j2gqxy4.php:17\nStack trace:\n#0 /tmp/tmp4j2gqxy4.php(25): select_words()\n\
    #1 /tmp/tmp4j2gqxy4.php(29): candidate()\n#2 /tmp/tmp4j2gqxy4.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4j2gqxy4.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (strlen($word) == $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpodpeeb0n.php:29\n\
    Stack trace:\n#0 /tmp/tmpodpeeb0n.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpodpeeb0n.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp836it_5b.php:29\n\
    Stack trace:\n#0 /tmp/tmp836it_5b.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp836it_5b.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbu4w94hh.php:40\n\
    Stack trace:\n#0 /tmp/tmpbu4w94hh.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpbu4w94hh.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp_0teukrg.php:17\nStack trace:\n#0 /tmp/tmp_0teukrg.php(25): select_words()\n\
    #1 /tmp/tmp_0teukrg.php(29): candidate()\n#2 /tmp/tmp_0teukrg.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_0teukrg.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe6kuph42.php:29\n\
    Stack trace:\n#0 /tmp/tmpe6kuph42.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpe6kuph42.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7rsyx7zg.php:29\n\
    Stack trace:\n#0 /tmp/tmp7rsyx7zg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7rsyx7zg.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzy1ibvem.php:34\n\
    Stack trace:\n#0 /tmp/tmpzy1ibvem.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpzy1ibvem.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9gjogaag.php:30\n\
    Stack trace:\n#0 /tmp/tmp9gjogaag.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp9gjogaag.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n   \
    \     for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $count++;\n            }\n        }\n        if\
    \ ($count == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2wecnurw.php:40\n\
    Stack trace:\n#0 /tmp/tmp2wecnurw.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp2wecnurw.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $words = explode(' ',\
    \ $s);\n    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptiimvrsy.php:37\n\
    Stack trace:\n#0 /tmp/tmptiimvrsy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmptiimvrsy.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmp3q_ejivd.php:17\nStack trace:\n#0 /tmp/tmp3q_ejivd.php(25): select_words()\n\
    #1 /tmp/tmp3q_ejivd.php(29): candidate()\n#2 /tmp/tmp3q_ejivd.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3q_ejivd.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpnzq8j_q7.php:17\nStack trace:\n#0 /tmp/tmpnzq8j_q7.php(25): select_words()\n\
    #1 /tmp/tmpnzq8j_q7.php(29): candidate()\n#2 /tmp/tmpnzq8j_q7.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnzq8j_q7.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $words = explode(' ',\
    \ $s);\n    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmecek11g.php:37\n\
    Stack trace:\n#0 /tmp/tmpmecek11g.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpmecek11g.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp5ui9ils6.php:17\nStack trace:\n#0 /tmp/tmp5ui9ils6.php(25): select_words()\n\
    #1 /tmp/tmp5ui9ils6.php(29): candidate()\n#2 /tmp/tmp5ui9ils6.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5ui9ils6.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $s = str_replace(' ', '', $s);\n    $vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    $words = [];\n    $word = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if (in_array($s[$i], $vowels)) {\n            if (strlen($word)\
    \ == $n) {\n                $words[] = $word;\n            }\n            $word\
    \ = '';\n        } else {\n            $word .= $s[$i];\n        }\n    }\n  \
    \  if (strlen($word) == $n) {\n        $words[] = $word;\n    }\n    return $words;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0vzadkcc.php:39\n\
    Stack trace:\n#0 /tmp/tmp0vzadkcc.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp0vzadkcc.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmppxmfq1qa.php:17\nStack trace:\n#0 /tmp/tmppxmfq1qa.php(25): select_words()\n\
    #1 /tmp/tmppxmfq1qa.php(29): candidate()\n#2 /tmp/tmppxmfq1qa.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmppxmfq1qa.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n  $vowels = ['a', 'e', 'i', 'o', 'u'];\n  $words = explode(' ', $s);\n\
    \  $result = [];\n  foreach ($words as $word) {\n    $consonants = 0;\n    for\
    \ ($i = 0; $i < strlen($word); $i++) {\n      if (!in_array($word[$i], $vowels))\
    \ {\n        $consonants++;\n      }\n    }\n    if ($consonants == $n) {\n  \
    \    $result[] = $word;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp15095kee.php:40\n\
    Stack trace:\n#0 /tmp/tmp15095kee.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp15095kee.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgf94vqgl.php:29\n\
    Stack trace:\n#0 /tmp/tmpgf94vqgl.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpgf94vqgl.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9_tj0x47.php:29\n\
    Stack trace:\n#0 /tmp/tmp9_tj0x47.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp9_tj0x47.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $words =\
    \ explode(\" \", $s);\n    $result = array();\n    foreach ($words as $word) {\n\
    \        $consonants = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n\
    \            if (!in_array($word[$i], $vowels)) {\n                $consonants++;\n\
    \            }\n        }\n        if ($consonants == $n) {\n            array_push($result,\
    \ $word);\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpasf8gn75.php:40\n\
    Stack trace:\n#0 /tmp/tmpasf8gn75.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpasf8gn75.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    $words = explode(' ',\
    \ $s);\n    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (in_array($word[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnxuoqh90.php:37\n\
    Stack trace:\n#0 /tmp/tmpnxuoqh90.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnxuoqh90.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $s = explode(' ', $s);\n    $result = [];\n    foreach ($s as $word)\
    \ {\n        $consonants = 0;\n        for ($i = 0; $i < strlen($word); $i++)\
    \ {\n            if (!in_array($word[$i], ['a', 'e', 'i', 'o', 'u'])) {\n    \
    \            $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuqqy8pb5.php:39\n\
    Stack trace:\n#0 /tmp/tmpuqqy8pb5.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpuqqy8pb5.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $count = 0;\n   \
    \     for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $count++;\n            }\n        }\n        if\
    \ ($count == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2pomqx4n.php:40\n\
    Stack trace:\n#0 /tmp/tmp2pomqx4n.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp2pomqx4n.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $result = [];\n    $words = explode(' ', $s);\n    foreach ($words\
    \ as $word) {\n        if (substr_count($word, 'a') + substr_count($word, 'e')\
    \ + substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word,\
    \ 'u') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5z_m5_tp.php:29\n\
    Stack trace:\n#0 /tmp/tmp5z_m5_tp.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp5z_m5_tp.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxvt_rgqh.php:40\n\
    Stack trace:\n#0 /tmp/tmpxvt_rgqh.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpxvt_rgqh.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (countConsonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmp7lsbl_4h.php:17\nStack trace:\n#0 /tmp/tmp7lsbl_4h.php(25): select_words()\n\
    #1 /tmp/tmp7lsbl_4h.php(29): candidate()\n#2 /tmp/tmp7lsbl_4h.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7lsbl_4h.php on line 17\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw2ire7sm.php:40\n\
    Stack trace:\n#0 /tmp/tmpw2ire7sm.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpw2ire7sm.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns a list of all words from string s\
    \ that contain exactly \n// n consonants, in order these words appear in the string\
    \ s.\n// If the string s is empty then the function should return an empty list.\n\
    // Note: you may assume the input string contains only letters and spaces.\n//\
    \ Examples:\n// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    // select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"\
    simple white space\", 2) ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words($s,\
    \ $n) {\n    $words = explode(' ', $s);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (count_consonants($word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp15gu6fe4.php:17\nStack trace:\n#0 /tmp/tmp15gu6fe4.php(25): select_words()\n\
    #1 /tmp/tmp15gu6fe4.php(29): candidate()\n#2 /tmp/tmp15gu6fe4.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp15gu6fe4.php on line 17\n"
  exit_code: 255
  status: Exception
