name: HumanEval_136_largest_smallest_integers
language: php
results:
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $v) {\n        if ($v < 0) {\n         \
    \   $neg[] = $v;\n        } elseif ($v > 0) {\n            $pos[] = $v;\n    \
    \    }\n    }\n    return [max($neg), min($pos)];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught ValueError: max(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpzpjdcoa7.php:20\nStack trace:\n#0 /tmp/tmpzpjdcoa7.php(20):\
    \ max()\n#1 /tmp/tmpzpjdcoa7.php(24): largest_smallest_integers()\n#2 /tmp/tmpzpjdcoa7.php(28):\
    \ candidate()\n#3 /tmp/tmpzpjdcoa7.php(41): test()\n#4 {main}\n  thrown in /tmp/tmpzpjdcoa7.php\
    \ on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg == null || $num > $neg) {\n                $neg = $num;\n \
    \           }\n        } else if ($num > 0) {\n            if ($pos == null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return array($neg, $pos);\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } else if ($num > 0) {\n            if ($pos === null\
    \ || $num < $pos) {\n                $pos = $num;\n            }\n        }\n\
    \    }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $v) {\n        if ($v < 0) {\n       \
    \     if ($neg === null || $v > $neg) {\n                $neg = $v;\n        \
    \    }\n        } else if ($v > 0) {\n            if ($pos === null || $v < $pos)\
    \ {\n                $pos = $v;\n            }\n        }\n    }\n    return [$neg,\
    \ $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (count($neg) > 0) {\n        $neg = max($neg);\n   \
    \ } else {\n        $neg = null;\n    }\n    if (count($pos) > 0) {\n        $pos\
    \ = min($pos);\n    } else {\n        $pos = null;\n    }\n    return [$neg, $pos];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = null;\n\
    \  $pos = null;\n  foreach ($lst as $v) {\n    if ($v < 0) {\n      if ($neg ===\
    \ null || $v > $neg) {\n        $neg = $v;\n      }\n    } else if ($v > 0) {\n\
    \      if ($pos === null || $v < $pos) {\n        $pos = $v;\n      }\n    }\n\
    \  }\n  return array($neg, $pos);\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $n) {\n    if ($n < 0) {\n      $neg[] = $n;\n\
    \    } elseif ($n > 0) {\n      $pos[] = $n;\n    }\n  }\n  return [max($neg),\
    \ min($pos)];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught ValueError: max(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpdubkh1eu.php:20\nStack trace:\n#0 /tmp/tmpdubkh1eu.php(20):\
    \ max()\n#1 /tmp/tmpdubkh1eu.php(24): largest_smallest_integers()\n#2 /tmp/tmpdubkh1eu.php(28):\
    \ candidate()\n#3 /tmp/tmpdubkh1eu.php(41): test()\n#4 {main}\n  thrown in /tmp/tmpdubkh1eu.php\
    \ on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $max = null;\n\
    \  $min = null;\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      if ($max\
    \ === null || $num > $max) {\n        $max = $num;\n      }\n    } elseif ($num\
    \ > 0) {\n      if ($min === null || $num < $min) {\n        $min = $num;\n  \
    \    }\n    }\n  }\n  return [$max, $min];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = array_filter($lst,\
    \ function($x) { return $x < 0; });\n    $pos = array_filter($lst, function($x)\
    \ { return $x > 0; });\n    return [max($neg), min($pos)];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught ValueError: max(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpxv170hal.php:13\nStack trace:\n#0 /tmp/tmpxv170hal.php(13):\
    \ max()\n#1 /tmp/tmpxv170hal.php(17): largest_smallest_integers()\n#2 /tmp/tmpxv170hal.php(21):\
    \ candidate()\n#3 /tmp/tmpxv170hal.php(34): test()\n#4 {main}\n  thrown in /tmp/tmpxv170hal.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    $neg = empty($neg) ? null : max($neg);\n    $pos = empty($pos)\
    \ ? null : min($pos);\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $v) {\n        if ($v < 0) {\n         \
    \   $neg[] = $v;\n        } elseif ($v > 0) {\n            $pos[] = $v;\n    \
    \    }\n    }\n    if (empty($neg)) {\n        $neg = null;\n    } else {\n  \
    \      $neg = max($neg);\n    }\n    if (empty($pos)) {\n        $pos = null;\n\
    \    } else {\n        $pos = min($pos);\n    }\n    return [$neg, $pos];\n}\n\
    \nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (count($neg) > 0) {\n        $neg = max($neg);\n   \
    \ } else {\n        $neg = null;\n    }\n    if (count($pos) > 0) {\n        $pos\
    \ = min($pos);\n    } else {\n        $pos = null;\n    }\n    return [$neg, $pos];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] =\
    \ $num;\n    } elseif ($num > 0) {\n      $pos[] = $num;\n    }\n  }\n  if (empty($neg)\
    \ || empty($pos)) {\n    return [null, null];\n  }\n  return [max($neg), min($pos)];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa7_n2ild.php:31\n\
    Stack trace:\n#0 /tmp/tmpa7_n2ild.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpa7_n2ild.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $elem) {\n        if ($elem < 0) {\n \
    \           if ($neg === null || $elem > $neg) {\n                $neg = $elem;\n\
    \            }\n        } else if ($elem > 0) {\n            if ($pos === null\
    \ || $elem < $pos) {\n                $pos = $elem;\n            }\n        }\n\
    \    }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $val) {\n        if ($val < 0) {\n     \
    \       $neg[] = $val;\n        } else if ($val > 0) {\n            $pos[] = $val;\n\
    \        }\n    }\n    if (count($neg) == 0) {\n        $neg = null;\n    } else\
    \ {\n        $neg = max($neg);\n    }\n    if (count($pos) == 0) {\n        $pos\
    \ = null;\n    } else {\n        $pos = min($pos);\n    }\n    return [$neg, $pos];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $positives =\
    \ [];\n  $negatives = [];\n  foreach ($lst as $num) {\n    if ($num > 0) {\n \
    \     $positives[] = $num;\n    } elseif ($num < 0) {\n      $negatives[] = $num;\n\
    \    }\n  }\n  if (empty($positives) && empty($negatives)) {\n    return [null,\
    \ null];\n  } elseif (empty($positives)) {\n    return [max($negatives), null];\n\
    \  } elseif (empty($negatives)) {\n    return [null, min($positives)];\n  } else\
    \ {\n    return [max($negatives), min($positives)];\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $val) {\n        if ($val < 0) {\n     \
    \       $neg[] = $val;\n        } elseif ($val > 0) {\n            $pos[] = $val;\n\
    \        }\n    }\n    if (empty($neg) && empty($pos)) {\n        return [null,\
    \ null];\n    } elseif (empty($neg)) {\n        return [null, min($pos)];\n  \
    \  } elseif (empty($pos)) {\n        return [max($neg), null];\n    } else {\n\
    \        return [max($neg), min($pos)];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = null;\n\
    \  $pos = null;\n  foreach ($lst as $v) {\n    if ($v < 0) {\n      if ($neg ===\
    \ null || $v > $neg) {\n        $neg = $v;\n      }\n    } else if ($v > 0) {\n\
    \      if ($pos === null || $v < $pos) {\n        $pos = $v;\n      }\n    }\n\
    \  }\n  return array($neg, $pos);\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $negatives\
    \ = array_filter($lst, function($x) { return $x < 0; });\n    $positives = array_filter($lst,\
    \ function($x) { return $x > 0; });\n    return [max($negatives), min($positives)];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught ValueError: max(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpm4kdriji.php:13\nStack trace:\n#0 /tmp/tmpm4kdriji.php(13):\
    \ max()\n#1 /tmp/tmpm4kdriji.php(17): largest_smallest_integers()\n#2 /tmp/tmpm4kdriji.php(21):\
    \ candidate()\n#3 /tmp/tmpm4kdriji.php(34): test()\n#4 {main}\n  thrown in /tmp/tmpm4kdriji.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $x) {\n        if ($x < 0) {\n       \
    \     if ($neg === null || $x > $neg) {\n                $neg = $x;\n        \
    \    }\n        } elseif ($x > 0) {\n            if ($pos === null || $x < $pos)\
    \ {\n                $pos = $x;\n            }\n        }\n    }\n    return array($neg,\
    \ $pos);\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $elem) {\n        if ($elem < 0) {\n \
    \           if ($neg === null || $elem > $neg) {\n                $neg = $elem;\n\
    \            }\n        } else if ($elem > 0) {\n            if ($pos === null\
    \ || $elem < $pos) {\n                $pos = $elem;\n            }\n        }\n\
    \    }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $negatives\
    \ = [];\n    $positives = [];\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            $negatives[] = $num;\n        } elseif ($num > 0) {\n  \
    \          $positives[] = $num;\n        }\n    }\n    if (empty($negatives) &&\
    \ empty($positives)) {\n        return [null, null];\n    } elseif (empty($negatives))\
    \ {\n        return [null, min($positives)];\n    } elseif (empty($positives))\
    \ {\n        return [max($negatives), null];\n    } else {\n        return [max($negatives),\
    \ min($positives)];\n    }\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $item) {\n        if ($item < 0) {\n   \
    \         $neg[] = $item;\n        } elseif ($item > 0) {\n            $pos[]\
    \ = $item;\n        }\n    }\n    if (empty($neg) && empty($pos)) {\n        return\
    \ [null, null];\n    } elseif (empty($neg)) {\n        return [null, min($pos)];\n\
    \    } elseif (empty($pos)) {\n        return [max($neg), null];\n    } else {\n\
    \        return [max($neg), min($pos)];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = null;\n\
    \  $pos = null;\n  foreach ($lst as $item) {\n    if ($item < 0) {\n      if ($neg\
    \ === null || $item > $neg) {\n        $neg = $item;\n      }\n    } elseif ($item\
    \ > 0) {\n      if ($pos === null || $item < $pos) {\n        $pos = $item;\n\
    \      }\n    }\n  }\n  return array($neg, $pos);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $negatives\
    \ = array_filter($lst, function($n) { return $n < 0; });\n    $positives = array_filter($lst,\
    \ function($n) { return $n > 0; });\n    $negatives = empty($negatives) ? null\
    \ : max($negatives);\n    $positives = empty($positives) ? null : min($positives);\n\
    \    return [$negatives, $positives];\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3,\
    \ 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] =\
    \ $num;\n    } elseif ($num > 0) {\n      $pos[] = $num;\n    }\n  }\n  if (empty($neg)\
    \ || empty($pos)) {\n    return [null, null];\n  }\n  return [max($neg), min($pos)];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc41t2g60.php:31\n\
    Stack trace:\n#0 /tmp/tmpc41t2g60.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpc41t2g60.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    $neg = empty($neg) ? null : max($neg);\n    $pos = empty($pos)\
    \ ? null : min($pos);\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $v) {\n    if ($v < 0) {\n      $neg[] = $v;\n\
    \    } elseif ($v > 0) {\n      $pos[] = $v;\n    }\n  }\n  if (count($neg) >\
    \ 0) {\n    $neg = max($neg);\n  } else {\n    $neg = null;\n  }\n  if (count($pos)\
    \ > 0) {\n    $pos = min($pos);\n  } else {\n    $pos = null;\n  }\n  return [$neg,\
    \ $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $negatives =\
    \ [];\n  $positives = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n \
    \     $negatives[] = $num;\n    } else if ($num > 0) {\n      $positives[] = $num;\n\
    \    }\n  }\n  if (count($negatives) == 0) {\n    $negatives = null;\n  } else\
    \ {\n    $negatives = max($negatives);\n  }\n  if (count($positives) == 0) {\n\
    \    $positives = null;\n  } else {\n    $positives = min($positives);\n  }\n\
    \  return [$negatives, $positives];\n}\n\nfunction candidate(...$args) {\n   \
    \ return largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3,\
    \ 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (empty($neg) && empty($pos)) {\n        return [null,\
    \ null];\n    } elseif (empty($neg)) {\n        return [null, min($pos)];\n  \
    \  } elseif (empty($pos)) {\n        return [max($neg), null];\n    } else {\n\
    \        return [max($neg), min($pos)];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] =\
    \ $num;\n    } elseif ($num > 0) {\n      $pos[] = $num;\n    }\n  }\n  if (empty($neg)\
    \ && empty($pos)) {\n    return [null, null];\n  } elseif (empty($neg)) {\n  \
    \  return [null, min($pos)];\n  } elseif (empty($pos)) {\n    return [max($neg),\
    \ null];\n  } else {\n    return [max($neg), min($pos)];\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $negs = array_filter($lst,\
    \ function($n) { return $n < 0; });\n    $pos = array_filter($lst, function($n)\
    \ { return $n > 0; });\n    return [max($negs), min($pos)];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught ValueError: max(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmp5pqw8c_n.php:13\nStack trace:\n#0 /tmp/tmp5pqw8c_n.php(13):\
    \ max()\n#1 /tmp/tmp5pqw8c_n.php(17): largest_smallest_integers()\n#2 /tmp/tmp5pqw8c_n.php(21):\
    \ candidate()\n#3 /tmp/tmp5pqw8c_n.php(34): test()\n#4 {main}\n  thrown in /tmp/tmp5pqw8c_n.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $v) {\n        if ($v < 0) {\n         \
    \   $neg[] = $v;\n        } elseif ($v > 0) {\n            $pos[] = $v;\n    \
    \    }\n    }\n    return [max($neg), min($pos)];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught ValueError: max(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpxg8cai15.php:20\nStack trace:\n#0 /tmp/tmpxg8cai15.php(20):\
    \ max()\n#1 /tmp/tmpxg8cai15.php(24): largest_smallest_integers()\n#2 /tmp/tmpxg8cai15.php(28):\
    \ candidate()\n#3 /tmp/tmpxg8cai15.php(41): test()\n#4 {main}\n  thrown in /tmp/tmpxg8cai15.php\
    \ on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $negatives\
    \ = [];\n    $positives = [];\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            $negatives[] = $num;\n        } elseif ($num > 0) {\n  \
    \          $positives[] = $num;\n        }\n    }\n    if (empty($negatives) &&\
    \ empty($positives)) {\n        return [null, null];\n    } elseif (empty($negatives))\
    \ {\n        return [null, min($positives)];\n    } elseif (empty($positives))\
    \ {\n        return [max($negatives), null];\n    } else {\n        return [max($negatives),\
    \ min($positives)];\n    }\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $item) {\n        if ($item < 0) {\n \
    \           if ($neg === null || $item > $neg) {\n                $neg = $item;\n\
    \            }\n        } elseif ($item > 0) {\n            if ($pos === null\
    \ || $item < $pos) {\n                $pos = $item;\n            }\n        }\n\
    \    }\n    return array($neg, $pos);\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3,\
    \ 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (empty($neg) || empty($pos)) {\n        return [null,\
    \ null];\n    }\n    return [max($neg), min($pos)];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwq5q46se.php:31\n\
    Stack trace:\n#0 /tmp/tmpwq5q46se.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpwq5q46se.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (empty($neg) || empty($pos)) {\n        return [null,\
    \ null];\n    }\n    return [max($neg), min($pos)];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_4ct7thq.php:31\n\
    Stack trace:\n#0 /tmp/tmp_4ct7thq.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp_4ct7thq.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    $neg = empty($neg) ? null : max($neg);\n    $pos = empty($pos)\
    \ ? null : min($pos);\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $val) {\n        if ($val < 0) {\n     \
    \       $neg[] = $val;\n        } elseif ($val > 0) {\n            $pos[] = $val;\n\
    \        }\n    }\n    if (empty($neg) && empty($pos)) {\n        return [null,\
    \ null];\n    } elseif (empty($neg)) {\n        return [null, min($pos)];\n  \
    \  } elseif (empty($pos)) {\n        return [max($neg), null];\n    } else {\n\
    \        return [max($neg), min($pos)];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = array_filter($lst,\
    \ function($n) { return $n < 0; });\n  $pos = array_filter($lst, function($n)\
    \ { return $n > 0; });\n  if (count($neg) == 0) {\n    $neg = null;\n  } else\
    \ {\n    $neg = max($neg);\n  }\n  if (count($pos) == 0) {\n    $pos = null;\n\
    \  } else {\n    $pos = min($pos);\n  }\n  return array($neg, $pos);\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_smallest_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (empty($neg) && empty($pos)) {\n        return [null,\
    \ null];\n    } elseif (empty($neg)) {\n        return [null, min($pos)];\n  \
    \  } elseif (empty($pos)) {\n        return [max($neg), null];\n    } else {\n\
    \        return [max($neg), min($pos)];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $v) {\n        if ($v < 0) {\n         \
    \   $neg[] = $v;\n        } else if ($v > 0) {\n            $pos[] = $v;\n   \
    \     }\n    }\n    if (empty($neg)) {\n        $neg = null;\n    } else {\n \
    \       $neg = max($neg);\n    }\n    if (empty($pos)) {\n        $pos = null;\n\
    \    } else {\n        $pos = min($pos);\n    }\n    return [$neg, $pos];\n}\n\
    \nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $i) {\n        if ($i < 0) {\n       \
    \     if ($neg === null || $i > $neg) {\n                $neg = $i;\n        \
    \    }\n        } elseif ($i > 0) {\n            if ($pos === null || $i < $pos)\
    \ {\n                $pos = $i;\n            }\n        }\n    }\n    return [$neg,\
    \ $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $item) {\n        if ($item < 0) {\n   \
    \         $neg[] = $item;\n        } elseif ($item > 0) {\n            $pos[]\
    \ = $item;\n        }\n    }\n    if (empty($neg) && empty($pos)) {\n        return\
    \ [null, null];\n    } elseif (empty($neg)) {\n        return [null, min($pos)];\n\
    \    } elseif (empty($pos)) {\n        return [max($neg), null];\n    } else {\n\
    \        return [max($neg), min($pos)];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (count($neg) > 0) {\n        $neg = max($neg);\n   \
    \ } else {\n        $neg = null;\n    }\n    if (count($pos) > 0) {\n        $pos\
    \ = min($pos);\n    } else {\n        $pos = null;\n    }\n    return [$neg, $pos];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } else if ($num > 0) {\n            if ($pos === null\
    \ || $num < $pos) {\n                $pos = $num;\n            }\n        }\n\
    \    }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $v) {\n        if ($v < 0) {\n         \
    \   $neg[] = $v;\n        } elseif ($v > 0) {\n            $pos[] = $v;\n    \
    \    }\n    }\n    if (empty($neg)) {\n        $neg = null;\n    } else {\n  \
    \      $neg = max($neg);\n    }\n    if (empty($pos)) {\n        $pos = null;\n\
    \    } else {\n        $pos = min($pos);\n    }\n    return [$neg, $pos];\n}\n\
    \nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (empty($neg) && empty($pos)) {\n        return [null,\
    \ null];\n    } elseif (empty($neg)) {\n        return [null, min($pos)];\n  \
    \  } elseif (empty($pos)) {\n        return [max($neg), null];\n    } else {\n\
    \        return [max($neg), min($pos)];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $item) {\n        if ($item < 0) {\n \
    \           if ($neg == null) {\n                $neg = $item;\n            }\
    \ else {\n                $neg = max($neg, $item);\n            }\n        } else\
    \ if ($item > 0) {\n            if ($pos == null) {\n                $pos = $item;\n\
    \            } else {\n                $pos = min($pos, $item);\n            }\n\
    \        }\n    }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } else if ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (count($neg) == 0) {\n        $neg = null;\n    } else\
    \ {\n        $neg = max($neg);\n    }\n    if (count($pos) == 0) {\n        $pos\
    \ = null;\n    } else {\n        $pos = min($pos);\n    }\n    return [$neg, $pos];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (empty($neg) && empty($pos)) {\n        return [null,\
    \ null];\n    } elseif (empty($neg)) {\n        return [null, min($pos)];\n  \
    \  } elseif (empty($pos)) {\n        return [max($neg), null];\n    } else {\n\
    \        return [max($neg), min($pos)];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    $neg = count($neg) ? max($neg) : null;\n    $pos = count($pos)\
    \ ? min($pos) : null;\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (count($neg) > 0) {\n        $a = max($neg);\n    }\
    \ else {\n        $a = null;\n    }\n    if (count($pos) > 0) {\n        $b =\
    \ min($pos);\n    } else {\n        $b = null;\n    }\n    return [$a, $b];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    $neg = empty($neg) ? null : max($neg);\n    $pos = empty($pos)\
    \ ? null : min($pos);\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $v) {\n        if ($v < 0) {\n         \
    \   $neg[] = $v;\n        } elseif ($v > 0) {\n            $pos[] = $v;\n    \
    \    }\n    }\n    if (count($neg) == 0) {\n        $neg = null;\n    } else {\n\
    \        $neg = max($neg);\n    }\n    if (count($pos) == 0) {\n        $pos =\
    \ null;\n    } else {\n        $pos = min($pos);\n    }\n    return [$neg, $pos];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = array_filter($lst,\
    \ function($n) { return $n < 0; });\n    $pos = array_filter($lst, function($n)\
    \ { return $n > 0; });\n    return [max($neg), min($pos)];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught ValueError: max(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpvz143yjd.php:13\nStack trace:\n#0 /tmp/tmpvz143yjd.php(13):\
    \ max()\n#1 /tmp/tmpvz143yjd.php(17): largest_smallest_integers()\n#2 /tmp/tmpvz143yjd.php(21):\
    \ candidate()\n#3 /tmp/tmpvz143yjd.php(34): test()\n#4 {main}\n  thrown in /tmp/tmpvz143yjd.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $v) {\n        if ($v < 0) {\n         \
    \   $neg[] = $v;\n        } elseif ($v > 0) {\n            $pos[] = $v;\n    \
    \    }\n    }\n    if (count($neg) == 0) {\n        $neg = null;\n    } else {\n\
    \        $neg = max($neg);\n    }\n    if (count($pos) == 0) {\n        $pos =\
    \ null;\n    } else {\n        $pos = min($pos);\n    }\n    return [$neg, $pos];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $pos = null;\n\
    \    $neg = null;\n    foreach ($lst as $num) {\n        if ($num > 0) {\n   \
    \         if ($pos === null || $num < $pos) {\n                $pos = $num;\n\
    \            }\n        } elseif ($num < 0) {\n            if ($neg === null ||\
    \ $num > $neg) {\n                $neg = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = $pos\
    \ = null;\n    foreach ($lst as $v) {\n        if ($v < 0) {\n            if ($neg\
    \ === null || $v > $neg) {\n                $neg = $v;\n            }\n      \
    \  } elseif ($v > 0) {\n            if ($pos === null || $v < $pos) {\n      \
    \          $pos = $v;\n            }\n        }\n    }\n    return [$neg, $pos];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $i) {\n        if ($i < 0) {\n         \
    \   $neg[] = $i;\n        } elseif ($i > 0) {\n            $pos[] = $i;\n    \
    \    }\n    }\n    $a = count($neg) ? max($neg) : null;\n    $b = count($pos)\
    \ ? min($pos) : null;\n    return [$a, $b];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (count($neg) == 0) {\n        $neg = null;\n    } else\
    \ {\n        $neg = max($neg);\n    }\n    if (count($pos) == 0) {\n        $pos\
    \ = null;\n    } else {\n        $pos = min($pos);\n    }\n    return [$neg, $pos];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = null;\n\
    \  $pos = null;\n  foreach ($lst as $i) {\n    if ($i < 0) {\n      if ($neg ===\
    \ null || $i > $neg) {\n        $neg = $i;\n      }\n    } else if ($i > 0) {\n\
    \      if ($pos === null || $i < $pos) {\n        $pos = $i;\n      }\n    }\n\
    \  }\n  return array($neg, $pos);\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $n) {\n    if ($n < 0) {\n      $neg[] = $n;\n\
    \    } elseif ($n > 0) {\n      $pos[] = $n;\n    }\n  }\n  $neg = count($neg)\
    \ ? max($neg) : null;\n  $pos = count($pos) ? min($pos) : null;\n  return [$neg,\
    \ $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg_max =\
    \ null;\n    $pos_min = null;\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            if ($neg_max === null || $num > $neg_max) {\n          \
    \      $neg_max = $num;\n            }\n        } elseif ($num > 0) {\n      \
    \      if ($pos_min === null || $num < $pos_min) {\n                $pos_min =\
    \ $num;\n            }\n        }\n    }\n    return [$neg_max, $pos_min];\n}\n\
    \nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $v) {\n        if ($v < 0) {\n         \
    \   $neg[] = $v;\n        } elseif ($v > 0) {\n            $pos[] = $v;\n    \
    \    }\n    }\n    if (empty($neg)) {\n        $neg = null;\n    } else {\n  \
    \      $neg = max($neg);\n    }\n    if (empty($pos)) {\n        $pos = null;\n\
    \    } else {\n        $pos = min($pos);\n    }\n    return [$neg, $pos];\n}\n\
    \nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $item) {\n        if ($item < 0) {\n   \
    \         $neg[] = $item;\n        } else if ($item > 0) {\n            $pos[]\
    \ = $item;\n        }\n    }\n    if (count($neg) == 0) {\n        $neg = null;\n\
    \    } else {\n        $neg = max($neg);\n    }\n    if (count($pos) == 0) {\n\
    \        $pos = null;\n    } else {\n        $pos = min($pos);\n    }\n    return\
    \ [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] =\
    \ $num;\n    } elseif ($num > 0) {\n      $pos[] = $num;\n    }\n  }\n  if (empty($neg)\
    \ && empty($pos)) {\n    return [null, null];\n  } elseif (empty($neg)) {\n  \
    \  return [null, min($pos)];\n  } elseif (empty($pos)) {\n    return [max($neg),\
    \ null];\n  } else {\n    return [max($neg), min($pos)];\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    if (empty($lst))\
    \ {\n        return [null, null];\n    }\n    $negatives = array_filter($lst,\
    \ function ($n) {\n        return $n < 0;\n    });\n    $positives = array_filter($lst,\
    \ function ($n) {\n        return $n > 0;\n    });\n    if (empty($negatives)\
    \ || empty($positives)) {\n        return [null, null];\n    }\n    return [max($negatives),\
    \ min($positives)];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplnq_t28x.php:31\n\
    Stack trace:\n#0 /tmp/tmplnq_t28x.php(44): test()\n#1 {main}\n  thrown in /tmp/tmplnq_t28x.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } else if ($num > 0) {\n            if ($pos === null\
    \ || $num < $pos) {\n                $pos = $num;\n            }\n        }\n\
    \    }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] =\
    \ $num;\n    } elseif ($num > 0) {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg)\
    \ == 0) {\n    $neg = null;\n  } else {\n    $neg = max($neg);\n  }\n  if (count($pos)\
    \ == 0) {\n    $pos = null;\n  } else {\n    $pos = min($pos);\n  }\n  return\
    \ [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    $neg = count($neg) ? max($neg) : null;\n    $pos = count($pos)\
    \ ? min($pos) : null;\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = null;\n\
    \  $pos = null;\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      if ($neg\
    \ === null || $num > $neg) {\n        $neg = $num;\n      }\n    } else if ($num\
    \ > 0) {\n      if ($pos === null || $num < $pos) {\n        $pos = $num;\n  \
    \    }\n    }\n  }\n  return [$neg, $pos];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] =\
    \ $num;\n    } elseif ($num > 0) {\n      $pos[] = $num;\n    }\n  }\n  return\
    \ [max($neg), min($pos)];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught ValueError: max(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmplyd_fzkw.php:20\nStack trace:\n#0 /tmp/tmplyd_fzkw.php(20):\
    \ max()\n#1 /tmp/tmplyd_fzkw.php(24): largest_smallest_integers()\n#2 /tmp/tmplyd_fzkw.php(28):\
    \ candidate()\n#3 /tmp/tmplyd_fzkw.php(41): test()\n#4 {main}\n  thrown in /tmp/tmplyd_fzkw.php\
    \ on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $v) {\n        if ($v < 0) {\n       \
    \     if ($neg === null || $v > $neg) {\n                $neg = $v;\n        \
    \    }\n        } else if ($v > 0) {\n            if ($pos === null || $v < $pos)\
    \ {\n                $pos = $v;\n            }\n        }\n    }\n    return [$neg,\
    \ $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $i) {\n        if ($i < 0) {\n       \
    \     if ($neg === null || $i > $neg) {\n                $neg = $i;\n        \
    \    }\n        } else if ($i > 0) {\n            if ($pos === null || $i < $pos)\
    \ {\n                $pos = $i;\n            }\n        }\n    }\n    return [$neg,\
    \ $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = null;\n\
    \  $pos = null;\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      if ($neg\
    \ === null || $num > $neg) {\n        $neg = $num;\n      }\n    } elseif ($num\
    \ > 0) {\n      if ($pos === null || $num < $pos) {\n        $pos = $num;\n  \
    \    }\n    }\n  }\n  return [$neg, $pos];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $negatives\
    \ = array_filter($lst, function($x) { return $x < 0; });\n    $positives = array_filter($lst,\
    \ function($x) { return $x > 0; });\n    $negatives = empty($negatives) ? null\
    \ : max($negatives);\n    $positives = empty($positives) ? null : min($positives);\n\
    \    return array($negatives, $positives);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $item) {\n        if ($item < 0) {\n   \
    \         $neg[] = $item;\n        } elseif ($item > 0) {\n            $pos[]\
    \ = $item;\n        }\n    }\n    if (count($neg) == 0) {\n        $neg = null;\n\
    \    } else {\n        $neg = max($neg);\n    }\n    if (count($pos) == 0) {\n\
    \        $pos = null;\n    } else {\n        $pos = min($pos);\n    }\n    return\
    \ [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = $pos\
    \ = null;\n    foreach ($lst as $v) {\n        if ($v < 0) {\n            if ($neg\
    \ === null || $v > $neg) {\n                $neg = $v;\n            }\n      \
    \  } elseif ($v > 0) {\n            if ($pos === null || $v < $pos) {\n      \
    \          $pos = $v;\n            }\n        }\n    }\n    return [$neg, $pos];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $negatives\
    \ = array_filter($lst, function($n) { return $n < 0; });\n    $positives = array_filter($lst,\
    \ function($n) { return $n > 0; });\n    return [max($negatives), min($positives)];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught ValueError: max(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmppd4zrr1r.php:13\nStack trace:\n#0 /tmp/tmppd4zrr1r.php(13):\
    \ max()\n#1 /tmp/tmppd4zrr1r.php(17): largest_smallest_integers()\n#2 /tmp/tmppd4zrr1r.php(21):\
    \ candidate()\n#3 /tmp/tmppd4zrr1r.php(34): test()\n#4 {main}\n  thrown in /tmp/tmppd4zrr1r.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] =\
    \ $num;\n    } elseif ($num > 0) {\n      $pos[] = $num;\n    }\n  }\n  $a = empty($neg)\
    \ ? null : max($neg);\n  $b = empty($pos) ? null : min($pos);\n  return [$a, $b];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $v) {\n    if ($v < 0) {\n      $neg[] = $v;\n\
    \    } elseif ($v > 0) {\n      $pos[] = $v;\n    }\n  }\n  if (count($neg) ==\
    \ 0) {\n    $neg = null;\n  } else {\n    $neg = max($neg);\n  }\n  if (count($pos)\
    \ == 0) {\n    $pos = null;\n  } else {\n    $pos = min($pos);\n  }\n  return\
    \ [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $i) {\n        if ($i < 0) {\n         \
    \   $neg[] = $i;\n        } elseif ($i > 0) {\n            $pos[] = $i;\n    \
    \    }\n    }\n    if (count($neg) == 0) {\n        $neg = null;\n    } else {\n\
    \        $neg = max($neg);\n    }\n    if (count($pos) == 0) {\n        $pos =\
    \ null;\n    } else {\n        $pos = min($pos);\n    }\n    return [$neg, $pos];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $elem) {\n        if ($elem < 0) {\n   \
    \         $neg[] = $elem;\n        } elseif ($elem > 0) {\n            $pos[]\
    \ = $elem;\n        }\n    }\n    if (count($neg) > 0) {\n        $a = max($neg);\n\
    \    } else {\n        $a = null;\n    }\n    if (count($pos) > 0) {\n       \
    \ $b = min($pos);\n    } else {\n        $b = null;\n    }\n    return [$a, $b];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $v) {\n    if ($v < 0) {\n      $neg[] = $v;\n\
    \    } elseif ($v > 0) {\n      $pos[] = $v;\n    }\n  }\n  $neg = empty($neg)\
    \ ? null : max($neg);\n  $pos = empty($pos) ? null : min($pos);\n  return [$neg,\
    \ $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] =\
    \ $num;\n    } else if ($num > 0) {\n      $pos[] = $num;\n    }\n  }\n  if (empty($neg)\
    \ && empty($pos)) {\n    return [null, null];\n  } else if (empty($neg)) {\n \
    \   return [null, min($pos)];\n  } else if (empty($pos)) {\n    return [max($neg),\
    \ null];\n  } else {\n    return [max($neg), min($pos)];\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $val) {\n        if ($val < 0) {\n     \
    \       $neg[] = $val;\n        } else if ($val > 0) {\n            $pos[] = $val;\n\
    \        }\n    }\n    if (empty($neg) && empty($pos)) {\n        return [null,\
    \ null];\n    } else if (empty($neg)) {\n        return [null, min($pos)];\n \
    \   } else if (empty($pos)) {\n        return [max($neg), null];\n    } else {\n\
    \        return [max($neg), min($pos)];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $v) {\n        if ($v < 0) {\n       \
    \     if ($neg === null || $v > $neg) {\n                $neg = $v;\n        \
    \    }\n        } else if ($v > 0) {\n            if ($pos === null || $v < $pos)\
    \ {\n                $pos = $v;\n            }\n        }\n    }\n    return [$neg,\
    \ $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $n) {\n        if ($n < 0) {\n       \
    \     if ($neg === null || $n > $neg) {\n                $neg = $n;\n        \
    \    }\n        } else if ($n > 0) {\n            if ($pos === null || $n < $pos)\
    \ {\n                $pos = $n;\n            }\n        }\n    }\n    return [$neg,\
    \ $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] =\
    \ $num;\n    } elseif ($num > 0) {\n      $pos[] = $num;\n    }\n  }\n  if (empty($neg)\
    \ || empty($pos)) {\n    return [null, null];\n  }\n  return [max($neg), min($pos)];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppkzz8hzr.php:31\n\
    Stack trace:\n#0 /tmp/tmppkzz8hzr.php(44): test()\n#1 {main}\n  thrown in /tmp/tmppkzz8hzr.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (empty($neg) || empty($pos)) {\n        return [null,\
    \ null];\n    }\n    return [max($neg), min($pos)];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1lbdaz1w.php:31\n\
    Stack trace:\n#0 /tmp/tmp1lbdaz1w.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp1lbdaz1w.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    return [max($neg), min($pos)];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught ValueError: max(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpo8ek9aiq.php:20\nStack trace:\n#0 /tmp/tmpo8ek9aiq.php(20):\
    \ max()\n#1 /tmp/tmpo8ek9aiq.php(24): largest_smallest_integers()\n#2 /tmp/tmpo8ek9aiq.php(28):\
    \ candidate()\n#3 /tmp/tmpo8ek9aiq.php(41): test()\n#4 {main}\n  thrown in /tmp/tmpo8ek9aiq.php\
    \ on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (empty($neg) || empty($pos)) {\n        return [null,\
    \ null];\n    }\n    return [max($neg), min($pos)];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2u3jn19o.php:31\n\
    Stack trace:\n#0 /tmp/tmp2u3jn19o.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp2u3jn19o.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = null;\n\
    \  $pos = null;\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      if ($neg\
    \ === null || $num > $neg) {\n        $neg = $num;\n      }\n    } elseif ($num\
    \ > 0) {\n      if ($pos === null || $num < $pos) {\n        $pos = $num;\n  \
    \    }\n    }\n  }\n  return [$neg, $pos];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (empty($neg) && empty($pos)) {\n        return [null,\
    \ null];\n    } elseif (empty($neg)) {\n        return [null, min($pos)];\n  \
    \  } elseif (empty($pos)) {\n        return [max($neg), null];\n    } else {\n\
    \        return [max($neg), min($pos)];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $negatives\
    \ = [];\n    $positives = [];\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            $negatives[] = $num;\n        } elseif ($num > 0) {\n  \
    \          $positives[] = $num;\n        }\n    }\n    $a = empty($negatives)\
    \ ? null : max($negatives);\n    $b = empty($positives) ? null : min($positives);\n\
    \    return [$a, $b];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $min = null;\n\
    \    $max = null;\n    foreach ($lst as $item) {\n        if ($item > 0) {\n \
    \           if ($min === null || $item < $min) {\n                $min = $item;\n\
    \            }\n        } elseif ($item < 0) {\n            if ($max === null\
    \ || $item > $max) {\n                $max = $item;\n            }\n        }\n\
    \    }\n    return [$max, $min];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $item) {\n        if ($item < 0) {\n \
    \           if ($neg === null || $item > $neg) {\n                $neg = $item;\n\
    \            }\n        } elseif ($item > 0) {\n            if ($pos === null\
    \ || $item < $pos) {\n                $pos = $item;\n            }\n        }\n\
    \    }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (empty($neg) && empty($pos)) {\n        return [null,\
    \ null];\n    } elseif (empty($neg)) {\n        return [null, min($pos)];\n  \
    \  } elseif (empty($pos)) {\n        return [max($neg), null];\n    } else {\n\
    \        return [max($neg), min($pos)];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $v) {\n        if ($v < 0) {\n       \
    \     if ($neg === null || $v > $neg) {\n                $neg = $v;\n        \
    \    }\n        } elseif ($v > 0) {\n            if ($pos === null || $v < $pos)\
    \ {\n                $pos = $v;\n            }\n        }\n    }\n    return [$neg,\
    \ $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $v) {\n        if ($v < 0) {\n       \
    \     if ($neg === null || $v > $neg) {\n                $neg = $v;\n        \
    \    }\n        } else if ($v > 0) {\n            if ($pos === null || $v < $pos)\
    \ {\n                $pos = $v;\n            }\n        }\n    }\n    return [$neg,\
    \ $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (empty($neg) && empty($pos)) {\n        return [null,\
    \ null];\n    } elseif (empty($neg)) {\n        return [null, min($pos)];\n  \
    \  } elseif (empty($pos)) {\n        return [max($neg), null];\n    } else {\n\
    \        return [max($neg), min($pos)];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (count($neg) == 0) {\n        $neg = null;\n    } else\
    \ {\n        $neg = max($neg);\n    }\n    if (count($pos) == 0) {\n        $pos\
    \ = null;\n    } else {\n        $pos = min($pos);\n    }\n    return [$neg, $pos];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } else if ($num > 0) {\n            if ($pos === null\
    \ || $num < $pos) {\n                $pos = $num;\n            }\n        }\n\
    \    }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (empty($neg) || empty($pos)) {\n        return [null,\
    \ null];\n    }\n    return [max($neg), min($pos)];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxvakuooi.php:31\n\
    Stack trace:\n#0 /tmp/tmpxvakuooi.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpxvakuooi.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    $neg = count($neg) > 0 ? max($neg) : null;\n    $pos =\
    \ count($pos) > 0 ? min($pos) : null;\n    return [$neg, $pos];\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_smallest_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (empty($neg) && empty($pos)) {\n        return [null,\
    \ null];\n    } elseif (empty($neg)) {\n        return [null, min($pos)];\n  \
    \  } elseif (empty($pos)) {\n        return [max($neg), null];\n    } else {\n\
    \        return [max($neg), min($pos)];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $min = null;\n\
    \    $max = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($max === null || $num > $max) {\n                $max = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($min === null ||\
    \ $num < $min) {\n                $min = $num;\n            }\n        }\n   \
    \ }\n    return [$max, $min];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $positive =\
    \ null;\n    $negative = null;\n    foreach ($lst as $num) {\n        if ($num\
    \ > 0) {\n            if ($positive === null || $num < $positive) {\n        \
    \        $positive = $num;\n            }\n        } elseif ($num < 0) {\n   \
    \         if ($negative === null || $num > $negative) {\n                $negative\
    \ = $num;\n            }\n        }\n    }\n    return [$negative, $positive];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $elem) {\n        if ($elem < 0) {\n   \
    \         $neg[] = $elem;\n        } elseif ($elem > 0) {\n            $pos[]\
    \ = $elem;\n        }\n    }\n    $a = count($neg) > 0 ? max($neg) : null;\n \
    \   $b = count($pos) > 0 ? min($pos) : null;\n    return [$a, $b];\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_smallest_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (count($neg) == 0) {\n        $neg = null;\n    } else\
    \ {\n        $neg = max($neg);\n    }\n    if (count($pos) == 0) {\n        $pos\
    \ = null;\n    } else {\n        $pos = min($pos);\n    }\n    return [$neg, $pos];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] =\
    \ $num;\n    } elseif ($num > 0) {\n      $pos[] = $num;\n    }\n  }\n  if (empty($neg)\
    \ && empty($pos)) {\n    return [null, null];\n  } elseif (empty($neg)) {\n  \
    \  return [null, min($pos)];\n  } elseif (empty($pos)) {\n    return [max($neg),\
    \ null];\n  } else {\n    return [max($neg), min($pos)];\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } else if ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (count($neg) == 0) {\n        $neg = null;\n    } else\
    \ {\n        $neg = max($neg);\n    }\n    if (count($pos) == 0) {\n        $pos\
    \ = null;\n    } else {\n        $pos = min($pos);\n    }\n    return [$neg, $pos];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $i) {\n        if ($i < 0) {\n       \
    \     if ($neg === null || $i > $neg) {\n                $neg = $i;\n        \
    \    }\n        } else if ($i > 0) {\n            if ($pos === null || $i < $pos)\
    \ {\n                $pos = $i;\n            }\n        }\n    }\n    return [$neg,\
    \ $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $i) {\n        if ($i < 0) {\n       \
    \     if ($neg === null || $i > $neg) {\n                $neg = $i;\n        \
    \    }\n        } elseif ($i > 0) {\n            if ($pos === null || $i < $pos)\
    \ {\n                $pos = $i;\n            }\n        }\n    }\n    return [$neg,\
    \ $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (empty($neg) && empty($pos)) {\n        return [null,\
    \ null];\n    } elseif (empty($neg)) {\n        return [null, min($pos)];\n  \
    \  } elseif (empty($pos)) {\n        return [max($neg), null];\n    } else {\n\
    \        return [max($neg), min($pos)];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (empty($neg) && empty($pos)) {\n        return [null,\
    \ null];\n    } elseif (empty($neg)) {\n        return [null, min($pos)];\n  \
    \  } elseif (empty($pos)) {\n        return [max($neg), null];\n    } else {\n\
    \        return [max($neg), min($pos)];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $v) {\n        if ($v < 0) {\n       \
    \     if ($neg === null || $v > $neg) {\n                $neg = $v;\n        \
    \    }\n        } else if ($v > 0) {\n            if ($pos === null || $v < $pos)\
    \ {\n                $pos = $v;\n            }\n        }\n    }\n    return [$neg,\
    \ $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } else if ($num > 0) {\n            if ($pos === null\
    \ || $num < $pos) {\n                $pos = $num;\n            }\n        }\n\
    \    }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $item) {\n        if ($item < 0) {\n   \
    \         $neg[] = $item;\n        } elseif ($item > 0) {\n            $pos[]\
    \ = $item;\n        }\n    }\n    $a = count($neg) ? max($neg) : null;\n    $b\
    \ = count($pos) ? min($pos) : null;\n    return [$a, $b];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (empty($neg) && empty($pos)) {\n        return [null,\
    \ null];\n    } elseif (empty($neg)) {\n        return [null, min($pos)];\n  \
    \  } elseif (empty($pos)) {\n        return [max($neg), null];\n    } else {\n\
    \        return [max($neg), min($pos)];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $val) {\n        if ($val < 0) {\n   \
    \         if ($neg === null || $val > $neg) {\n                $neg = $val;\n\
    \            }\n        } elseif ($val > 0) {\n            if ($pos === null ||\
    \ $val < $pos) {\n                $pos = $val;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    $neg = empty($neg) ? null : max($neg);\n    $pos = empty($pos)\
    \ ? null : min($pos);\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] =\
    \ $num;\n    } elseif ($num > 0) {\n      $pos[] = $num;\n    }\n  }\n  $neg =\
    \ empty($neg) ? null : max($neg);\n  $pos = empty($pos) ? null : min($pos);\n\
    \  return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $negative =\
    \ null;\n    $positive = null;\n    foreach ($lst as $num) {\n        if ($num\
    \ < 0) {\n            if ($negative === null || $num > $negative) {\n        \
    \        $negative = $num;\n            }\n        } elseif ($num > 0) {\n   \
    \         if ($positive === null || $num < $positive) {\n                $positive\
    \ = $num;\n            }\n        }\n    }\n    return [$negative, $positive];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $n) {\n        if ($n < 0) {\n       \
    \     if ($neg === null || $n > $neg) {\n                $neg = $n;\n        \
    \    }\n        } else if ($n > 0) {\n            if ($pos === null || $n < $pos)\
    \ {\n                $pos = $n;\n            }\n        }\n    }\n    return [$neg,\
    \ $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $n) {\n        if ($n < 0) {\n       \
    \     if ($neg === null || $n > $neg) {\n                $neg = $n;\n        \
    \    }\n        } elseif ($n > 0) {\n            if ($pos === null || $n < $pos)\
    \ {\n                $pos = $n;\n            }\n        }\n    }\n    return [$neg,\
    \ $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $i) {\n        if ($i < 0) {\n       \
    \     if ($neg === null || $i > $neg) {\n                $neg = $i;\n        \
    \    }\n        } elseif ($i > 0) {\n            if ($pos === null || $i < $pos)\
    \ {\n                $pos = $i;\n            }\n        }\n    }\n    return [$neg,\
    \ $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (count($neg) == 0) {\n        $neg = null;\n    } else\
    \ {\n        $neg = max($neg);\n    }\n    if (count($pos) == 0) {\n        $pos\
    \ = null;\n    } else {\n        $pos = min($pos);\n    }\n    return [$neg, $pos];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $v) {\n        if ($v < 0) {\n       \
    \     if ($neg === null || $v > $neg) {\n                $neg = $v;\n        \
    \    }\n        } else if ($v > 0) {\n            if ($pos === null || $v < $pos)\
    \ {\n                $pos = $v;\n            }\n        }\n    }\n    return [$neg,\
    \ $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $v) {\n        if ($v < 0) {\n         \
    \   $neg[] = $v;\n        } elseif ($v > 0) {\n            $pos[] = $v;\n    \
    \    }\n    }\n    if (count($neg) == 0) {\n        $neg = null;\n    } else {\n\
    \        $neg = max($neg);\n    }\n    if (count($pos) == 0) {\n        $pos =\
    \ null;\n    } else {\n        $pos = min($pos);\n    }\n    return [$neg, $pos];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $min = null;\n\
    \    $max = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($max === null || $num > $max) {\n                $max = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($min === null ||\
    \ $num < $min) {\n                $min = $num;\n            }\n        }\n   \
    \ }\n    return [$max, $min];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $n) {\n    if ($n < 0) {\n      $neg[] = $n;\n\
    \    } else if ($n > 0) {\n      $pos[] = $n;\n    }\n  }\n  if (count($neg) ==\
    \ 0) {\n    $neg = null;\n  } else {\n    $neg = max($neg);\n  }\n  if (count($pos)\
    \ == 0) {\n    $pos = null;\n  } else {\n    $pos = min($pos);\n  }\n  return\
    \ [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] =\
    \ $num;\n    } elseif ($num > 0) {\n      $pos[] = $num;\n    }\n  }\n  if (empty($neg)\
    \ && empty($pos)) {\n    return [null, null];\n  } elseif (empty($neg)) {\n  \
    \  return [null, min($pos)];\n  } elseif (empty($pos)) {\n    return [max($neg),\
    \ null];\n  } else {\n    return [max($neg), min($pos)];\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $v) {\n        if ($v < 0) {\n         \
    \   $neg[] = $v;\n        } elseif ($v > 0) {\n            $pos[] = $v;\n    \
    \    }\n    }\n    if (empty($neg)) {\n        $neg = null;\n    } else {\n  \
    \      $neg = max($neg);\n    }\n    if (empty($pos)) {\n        $pos = null;\n\
    \    } else {\n        $pos = min($pos);\n    }\n    return [$neg, $pos];\n}\n\
    \nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $n) {\n        if ($n < 0) {\n       \
    \     if ($neg === null || $n > $neg) {\n                $neg = $n;\n        \
    \    }\n        } else if ($n > 0) {\n            if ($pos === null || $n < $pos)\
    \ {\n                $pos = $n;\n            }\n        }\n    }\n    return [$neg,\
    \ $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $v) {\n        if ($v < 0) {\n         \
    \   $neg[] = $v;\n        } elseif ($v > 0) {\n            $pos[] = $v;\n    \
    \    }\n    }\n    return [max($neg) ?: null, min($pos) ?: null];\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_smallest_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught ValueError: max(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpu7r12fdo.php:20\nStack trace:\n#0 /tmp/tmpu7r12fdo.php(20):\
    \ max()\n#1 /tmp/tmpu7r12fdo.php(24): largest_smallest_integers()\n#2 /tmp/tmpu7r12fdo.php(28):\
    \ candidate()\n#3 /tmp/tmpu7r12fdo.php(41): test()\n#4 {main}\n  thrown in /tmp/tmpu7r12fdo.php\
    \ on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (empty($neg) && empty($pos)) {\n        return [null,\
    \ null];\n    } elseif (empty($neg)) {\n        return [null, min($pos)];\n  \
    \  } elseif (empty($pos)) {\n        return [max($neg), null];\n    } else {\n\
    \        return [max($neg), min($pos)];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    if (count($neg) == 0) {\n        $neg = null;\n    } else\
    \ {\n        $neg = max($neg);\n    }\n    if (count($pos) == 0) {\n        $pos\
    \ = null;\n    } else {\n        $pos = min($pos);\n    }\n    return [$neg, $pos];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] =\
    \ $num;\n    } elseif ($num > 0) {\n      $pos[] = $num;\n    }\n  }\n  $neg =\
    \ empty($neg) ? null : max($neg);\n  $pos = empty($pos) ? null : min($pos);\n\
    \  return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = null;\n\
    \  $pos = null;\n  foreach ($lst as $n) {\n    if ($n < 0) {\n      if ($neg ===\
    \ null || $n > $neg) {\n        $neg = $n;\n      }\n    } else if ($n > 0) {\n\
    \      if ($pos === null || $n < $pos) {\n        $pos = $n;\n      }\n    }\n\
    \  }\n  return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $v) {\n        if ($v < 0) {\n         \
    \   $neg[] = $v;\n        } elseif ($v > 0) {\n            $pos[] = $v;\n    \
    \    }\n    }\n    if (count($neg) == 0) {\n        $neg = null;\n    } else {\n\
    \        $neg = max($neg);\n    }\n    if (count($pos) == 0) {\n        $pos =\
    \ null;\n    } else {\n        $pos = min($pos);\n    }\n    return [$neg, $pos];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } else if ($num > 0) {\n            if ($pos === null\
    \ || $num < $pos) {\n                $pos = $num;\n            }\n        }\n\
    \    }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $v) {\n        if ($v < 0) {\n         \
    \   $neg[] = $v;\n        } elseif ($v > 0) {\n            $pos[] = $v;\n    \
    \    }\n    }\n    $neg = empty($neg) ? null : max($neg);\n    $pos = empty($pos)\
    \ ? null : min($pos);\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $val) {\n        if ($val < 0) {\n   \
    \         if ($neg === null || $val > $neg) {\n                $neg = $val;\n\
    \            }\n        } elseif ($val > 0) {\n            if ($pos === null ||\
    \ $val < $pos) {\n                $pos = $val;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] =\
    \ $num;\n    } elseif ($num > 0) {\n      $pos[] = $num;\n    }\n  }\n  return\
    \ [max($neg), min($pos)];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught ValueError: max(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpzfeb_b5o.php:20\nStack trace:\n#0 /tmp/tmpzfeb_b5o.php(20):\
    \ max()\n#1 /tmp/tmpzfeb_b5o.php(24): largest_smallest_integers()\n#2 /tmp/tmpzfeb_b5o.php(28):\
    \ candidate()\n#3 /tmp/tmpzfeb_b5o.php(41): test()\n#4 {main}\n  thrown in /tmp/tmpzfeb_b5o.php\
    \ on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $item) {\n        if ($item < 0) {\n   \
    \         $neg[] = $item;\n        } elseif ($item > 0) {\n            $pos[]\
    \ = $item;\n        }\n    }\n    if (count($neg) == 0) {\n        $neg = null;\n\
    \    } else {\n        $neg = max($neg);\n    }\n    if (count($pos) == 0) {\n\
    \        $pos = null;\n    } else {\n        $pos = min($pos);\n    }\n    return\
    \ [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = array_filter($lst,\
    \ function($n) { return $n < 0; });\n    $pos = array_filter($lst, function($n)\
    \ { return $n > 0; });\n    return [max($neg), min($pos)];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught ValueError: max(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpw2qmg5z3.php:13\nStack trace:\n#0 /tmp/tmpw2qmg5z3.php(13):\
    \ max()\n#1 /tmp/tmpw2qmg5z3.php(17): largest_smallest_integers()\n#2 /tmp/tmpw2qmg5z3.php(21):\
    \ candidate()\n#3 /tmp/tmpw2qmg5z3.php(34): test()\n#4 {main}\n  thrown in /tmp/tmpw2qmg5z3.php\
    \ on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $v) {\n        if ($v < 0) {\n       \
    \     if ($neg === null || $v > $neg) {\n                $neg = $v;\n        \
    \    }\n        } else if ($v > 0) {\n            if ($pos === null || $v < $pos)\
    \ {\n                $pos = $v;\n            }\n        }\n    }\n    return [$neg,\
    \ $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if (is_null($neg) || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if (is_null($pos) ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = null;\n\
    \  $pos = null;\n  foreach ($lst as $n) {\n    if ($n < 0) {\n      if ($neg ===\
    \ null || $n > $neg) {\n        $neg = $n;\n      }\n    } else if ($n > 0) {\n\
    \      if ($pos === null || $n < $pos) {\n        $pos = $n;\n      }\n    }\n\
    \  }\n  return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $val) {\n    if ($val < 0) {\n      $neg[] =\
    \ $val;\n    } elseif ($val > 0) {\n      $pos[] = $val;\n    }\n  }\n  return\
    \ [max($neg), min($pos)];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught ValueError: max(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmp9f3kk7f6.php:20\nStack trace:\n#0 /tmp/tmp9f3kk7f6.php(20):\
    \ max()\n#1 /tmp/tmp9f3kk7f6.php(24): largest_smallest_integers()\n#2 /tmp/tmp9f3kk7f6.php(28):\
    \ candidate()\n#3 /tmp/tmp9f3kk7f6.php(41): test()\n#4 {main}\n  thrown in /tmp/tmp9f3kk7f6.php\
    \ on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = $pos\
    \ = null;\n    foreach ($lst as $v) {\n        if ($v < 0) {\n            if ($neg\
    \ === null || $v > $neg) {\n                $neg = $v;\n            }\n      \
    \  } elseif ($v > 0) {\n            if ($pos === null || $v < $pos) {\n      \
    \          $pos = $v;\n            }\n        }\n    }\n    return [$neg, $pos];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n\t$neg = null;\n\
    \t$pos = null;\n\tforeach ($lst as $num) {\n\t\tif ($num < 0) {\n\t\t\tif ($neg\
    \ === null || $num > $neg) {\n\t\t\t\t$neg = $num;\n\t\t\t}\n\t\t} elseif ($num\
    \ > 0) {\n\t\t\tif ($pos === null || $num < $pos) {\n\t\t\t\t$pos = $num;\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n\
    \    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3,\
    \ 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $negatives =\
    \ array_filter($lst, function($n) { return $n < 0; });\n  $positives = array_filter($lst,\
    \ function($n) { return $n > 0; });\n  return [\n    count($negatives) > 0 ? max($negatives)\
    \ : null,\n    count($positives) > 0 ? min($positives) : null\n  ];\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_smallest_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } elseif ($num > 0) {\n            if ($pos === null ||\
    \ $num < $pos) {\n                $pos = $num;\n            }\n        }\n   \
    \ }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $item) {\n        if ($item < 0) {\n \
    \           if ($neg === null || $item > $neg) {\n                $neg = $item;\n\
    \            }\n        } elseif ($item > 0) {\n            if ($pos === null\
    \ || $item < $pos) {\n                $pos = $item;\n            }\n        }\n\
    \    }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $num) {\n        if ($num < 0) {\n     \
    \       $neg[] = $num;\n        } elseif ($num > 0) {\n            $pos[] = $num;\n\
    \        }\n    }\n    $neg = count($neg) > 0 ? max($neg) : null;\n    $pos =\
    \ count($pos) > 0 ? min($pos) : null;\n    return [$neg, $pos];\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_smallest_integers(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $item) {\n        if ($item < 0) {\n   \
    \         $neg[] = $item;\n        } elseif ($item > 0) {\n            $pos[]\
    \ = $item;\n        }\n    }\n    $neg = count($neg) > 0 ? max($neg) : null;\n\
    \    $pos = count($pos) > 0 ? min($pos) : null;\n    return [$neg, $pos];\n}\n\
    \nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $v) {\n        if ($v < 0) {\n         \
    \   $neg[] = $v;\n        } elseif ($v > 0) {\n            $pos[] = $v;\n    \
    \    }\n    }\n    if (empty($neg)) {\n        $neg = null;\n    } else {\n  \
    \      $neg = max($neg);\n    }\n    if (empty($pos)) {\n        $pos = null;\n\
    \    } else {\n        $pos = min($pos);\n    }\n    return [$neg, $pos];\n}\n\
    \nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $v) {\n        if ($v < 0) {\n       \
    \     if ($neg === null || $v > $neg) {\n                $neg = $v;\n        \
    \    }\n        } else if ($v > 0) {\n            if ($pos === null || $v < $pos)\
    \ {\n                $pos = $v;\n            }\n        }\n    }\n    return [$neg,\
    \ $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $v) {\n    if ($v < 0) {\n      $neg[] = $v;\n\
    \    } elseif ($v > 0) {\n      $pos[] = $v;\n    }\n  }\n  return [max($neg),\
    \ min($pos)];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught ValueError: max(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmp03vxc0iy.php:20\nStack trace:\n#0 /tmp/tmp03vxc0iy.php(20):\
    \ max()\n#1 /tmp/tmp03vxc0iy.php(24): largest_smallest_integers()\n#2 /tmp/tmp03vxc0iy.php(28):\
    \ candidate()\n#3 /tmp/tmp03vxc0iy.php(41): test()\n#4 {main}\n  thrown in /tmp/tmp03vxc0iy.php\
    \ on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = $pos\
    \ = null;\n    foreach ($lst as $v) {\n        if ($v < 0) {\n            if ($neg\
    \ === null || $v > $neg) {\n                $neg = $v;\n            }\n      \
    \  } elseif ($v > 0) {\n            if ($pos === null || $v < $pos) {\n      \
    \          $pos = $v;\n            }\n        }\n    }\n    return [$neg, $pos];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = [];\n\
    \    $pos = [];\n    foreach ($lst as $val) {\n        if ($val < 0) {\n     \
    \       $neg[] = $val;\n        } elseif ($val > 0) {\n            $pos[] = $val;\n\
    \        }\n    }\n    if (empty($neg) || empty($pos)) {\n        return [null,\
    \ null];\n    }\n    return [max($neg), min($pos)];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_smallest_integers(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0))\
    \ !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3, 8, 4, 9, 2,\
    \ 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array(null, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0)) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1, null))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3,\
    \ -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk0q9k0db.php:31\n\
    Stack trace:\n#0 /tmp/tmpk0q9k0db.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpk0q9k0db.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n    $neg = null;\n\
    \    $pos = null;\n    foreach ($lst as $num) {\n        if ($num < 0) {\n   \
    \         if ($neg === null || $num > $neg) {\n                $neg = $num;\n\
    \            }\n        } else if ($num > 0) {\n            if ($pos === null\
    \ || $num < $pos) {\n                $pos = $num;\n            }\n        }\n\
    \    }\n    return [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_smallest_integers(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2,\
    \ 4, 1, 3, 5, 7)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 1, 3, 5, 7, 0)) !== array(null, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6,\
    \ -2)) !== array(-2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 5, 3, 6, 2, 7, -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(7, 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array(null,\
    \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0))\
    \ !== array(null, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6)) !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(-1, -3, -5, -6, 0)) !== array(-1, null)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, 1))\
    \ !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-6,\
    \ -4, -4, -3, -100, 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that returns a tuple (a, b), where 'a' is\n\
    // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
    \ in a list.\n// If there is no negative or positive integers, return them as\
    \ None.\n// Examples:\n// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None,\
    \ 1)\n// largest_smallest_integers([]) == (None, None)\n// largest_smallest_integers([0])\
    \ == (None, None)\nfunction largest_smallest_integers($lst) {\n  $neg = [];\n\
    \  $pos = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n      $neg[] =\
    \ $num;\n    } elseif ($num > 0) {\n      $pos[] = $num;\n    }\n  }\n  if (count($neg)\
    \ === 0) {\n    $neg = null;\n  } else {\n    $neg = max($neg);\n  }\n  if (count($pos)\
    \ === 0) {\n    $pos = null;\n  } else {\n    $pos = min($pos);\n  }\n  return\
    \ [$neg, $pos];\n}\n\nfunction candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
    \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7,\
    \ -7)) !== array(-7, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 3, 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6))\
    \ !== array(-1, null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100,\
    \ 1)) !== array(-3, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
