name: HumanEval_17_parse_music
language: php
results:
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $current_note = '';\n    foreach ($notes as $note) {\n        if\
    \ ($note == ' ') {\n            if ($current_note == 'o') {\n                $result[]\
    \ = 4;\n            } elseif ($current_note == 'o|') {\n                $result[]\
    \ = 2;\n            } elseif ($current_note == '.|') {\n                $result[]\
    \ = 1;\n            }\n            $current_note = '';\n        } else {\n   \
    \         $current_note .= $note;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6gfdp697.php:38\n\
    Stack trace:\n#0 /tmp/tmp6gfdp697.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp6gfdp697.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        }\n        if ($note == ' ') {\n            $beats[] = $beat;\n     \
    \       $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvk6m6599.php:37\n\
    Stack trace:\n#0 /tmp/tmpvk6m6599.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpvk6m6599.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $current_note = '';\n    foreach ($notes as $note) {\n        if\
    \ ($note == 'o') {\n            $current_note .= $note;\n        } elseif ($note\
    \ == '|') {\n            $current_note .= $note;\n        } elseif ($note == '.')\
    \ {\n            $current_note .= $note;\n        } elseif ($note == ' ') {\n\
    \            if ($current_note == 'o') {\n                $result[] = 4;\n   \
    \         } elseif ($current_note == 'o|') {\n                $result[] = 2;\n\
    \            } elseif ($current_note == '.|') {\n                $result[] = 1;\n\
    \            }\n            $current_note = '';\n        }\n    }\n    if ($current_note\
    \ == 'o') {\n        $result[] = 4;\n    } elseif ($current_note == 'o|') {\n\
    \        $result[] = 2;\n    } elseif ($current_note == '.|') {\n        $result[]\
    \ = 1;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace(' ', '', $music_string);\n\
    \    $music_string = str_replace('o', 'o|', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  Unclosed '{' on line 11 in /tmp/tmppnlllpja.php on line\
    \ 47\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = explode(' ', $music_string);\n  \
    \  $result = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n\
    \            case 'o':\n                $result[] = 4;\n                break;\n\
    \            case 'o|':\n                $result[] = 2;\n                break;\n\
    \            case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note_length = 4;\n    foreach ($notes as $note) {\n        if ($note\
    \ == 'o') {\n            $result[] = $note_length;\n        } elseif ($note ==\
    \ '|') {\n            $note_length /= 2;\n        } elseif ($note == '.') {\n\
    \            $result[] = $note_length;\n            $note_length = 4;\n      \
    \  }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjvdjd6n4.php:35\n\
    Stack trace:\n#0 /tmp/tmpjvdjd6n4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpjvdjd6n4.php\
    \ on line 35\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_array = str_split($music_string);\n\
    \    $result = [];\n    $beat = 0;\n    foreach ($music_array as $key => $value)\
    \ {\n        if ($value == 'o') {\n            $beat = 4;\n        } elseif ($value\
    \ == 'o' && $music_array[$key + 1] == '|') {\n            $beat = 2;\n       \
    \ } elseif ($value == '.' && $music_array[$key + 1] == '|') {\n            $beat\
    \ = 1;\n        }\n        $result[] = $beat;\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdozn4u93.php:33\n\
    Stack trace:\n#0 /tmp/tmpdozn4u93.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpdozn4u93.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace(' ', '', $music_string);\n\
    \    $music_string = str_replace('o', 'o|', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  Unclosed '{' on line 11 in /tmp/tmp_tgz_ivt.php on line\
    \ 47\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat = 4;\n        } elseif ($note == 'o|') {\n       \
    \     $beat = 2;\n        } elseif ($note == '.|') {\n            $beat = 1;\n\
    \        }\n        $beats[] = $beat;\n    }\n    return $beats;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg9ypbf4m.php:33\n\
    Stack trace:\n#0 /tmp/tmpg9ypbf4m.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpg9ypbf4m.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3vvq6eyt.php:33\n\
    Stack trace:\n#0 /tmp/tmp3vvq6eyt.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp3vvq6eyt.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = [];\n    $notes = explode(' ', $music_string);\n\
    \    foreach ($notes as $note) {\n        switch ($note) {\n            case 'o':\n\
    \                $result[] = 4;\n                break;\n            case 'o|':\n\
    \                $result[] = 2;\n                break;\n            case '.|':\n\
    \                $result[] = 1;\n                break;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            array_push($beats, $beat);\n \
    \           $beat = 0;\n        }\n    }\n    array_push($beats, $beat);\n   \
    \ return $beats;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp52nn9en0.php:36\n\
    Stack trace:\n#0 /tmp/tmp52nn9en0.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp52nn9en0.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note_length = 4;\n    $note_count = 0;\n    foreach ($notes as $note)\
    \ {\n        if ($note === 'o') {\n            $note_count++;\n        } elseif\
    \ ($note === '|') {\n            $result[] = $note_length * $note_count;\n   \
    \         $note_count = 0;\n            $note_length /= 2;\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppdmf2c9v.php:34\n\
    Stack trace:\n#0 /tmp/tmppdmf2c9v.php(40): test()\n#1 {main}\n  thrown in /tmp/tmppdmf2c9v.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = [];\n    $music_string = str_replace('o|',\
    \ '|', $music_string);\n    $music_string = str_replace('o', '|', $music_string);\n\
    \    $music_string = str_replace('.', '', $music_string);\n    $music_string =\
    \ str_replace(' ', '', $music_string);\n    $music_array = str_split($music_string);\n\
    \    foreach ($music_array as $key => $value) {\n        if ($value == '|') {\n\
    \            $result[] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7r30_20d.php:32\n\
    Stack trace:\n#0 /tmp/tmp7r30_20d.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7r30_20d.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $beats[] = 4;\n        } elseif ($note == 'o|') {\n            $beats[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $beats[] = 1;\n      \
    \  }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpla_c46oa.php:33\n\
    Stack trace:\n#0 /tmp/tmpla_c46oa.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpla_c46oa.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = [];\n    $notes = explode(' ', $music_string);\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o|') {\n            $result[] = 2;\n     \
    \   } elseif ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace(' ', '', $music_string);\n\
    \    $music_string = str_replace('o|', '|', $music_string);\n    $music_string\
    \ = str_replace('o', '|', $music_string);\n    $music_string = str_replace('.',\
    \ '', $music_string);\n    $music_string = str_replace('|', '| ', $music_string);\n\
    \    $music_string = trim($music_string);\n    $music_array = explode(' ', $music_string);\n\
    \    $music_array = array_map(function($value) {\n        if ($value == '|') {\n\
    \            return 1;\n        } else {\n            return 4;\n        }\n \
    \   }, $music_array);\n    return $music_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4eh0jmjd.php:34\n\
    Stack trace:\n#0 /tmp/tmp4eh0jmjd.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp4eh0jmjd.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            $beats[] = $beat;\n          \
    \  $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpovlr2y2c.php:36\n\
    Stack trace:\n#0 /tmp/tmpovlr2y2c.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpovlr2y2c.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note_length = 0;\n    foreach ($notes as $note) {\n        if ($note\
    \ === 'o') {\n            $note_length += 4;\n        } else if ($note === '|')\
    \ {\n            $result[] = $note_length;\n            $note_length = 0;\n  \
    \      } else if ($note === '.') {\n            $note_length += 1;\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7mxpjw1a.php:34\n\
    Stack trace:\n#0 /tmp/tmp7mxpjw1a.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp7mxpjw1a.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat_count = 0;\n    foreach ($notes as $note) {\n        if ($note\
    \ == 'o') {\n            $beat_count += 4;\n        } elseif ($note == 'o|') {\n\
    \            $beat_count += 2;\n        } elseif ($note == '.|') {\n         \
    \   $beat_count += 1;\n        } elseif ($note == ' ') {\n            $beats[]\
    \ = $beat_count;\n            $beat_count = 0;\n        }\n    }\n    $beats[]\
    \ = $beat_count;\n    return $beats;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuwip4t83.php:36\n\
    Stack trace:\n#0 /tmp/tmpuwip4t83.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpuwip4t83.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            $beats[] = $beat;\n          \
    \  $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpid4r5pxm.php:36\n\
    Stack trace:\n#0 /tmp/tmpid4r5pxm.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpid4r5pxm.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o', 'o|', $music_string);\n\
    \    $music_string = str_replace('.', '.|', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|.|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|.', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|', 'o', $music_string);\n    $music_string = str_replace('|',\
    \ '', $music_string);\n    $music_string = str_replace(' ', '', $music_string);\n\
    \    $music_string = str_replace('o', '4', $music_string);\n    $music_string\
    \ = str_replace('.', '1', $music_string);\n    $music_array = str_split($music_string);\n\
    \    return $music_array;\n}\n\necho '<pre>';\nprint_r(parse_music('o o| .| o|\
    \ o| .| .| .| .| o o'));\necho '</pre>';\nfunction candidate(...$args) {\n   \
    \ return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 4\n    [2] => 1\n    [3] => 4\n\
    \    [4] => 4\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9]\
    \ => 4\n    [10] => 4\n)\n</pre>"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb93zsxhi.php:35\n\
    Stack trace:\n#0 /tmp/tmpb93zsxhi.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpb93zsxhi.php\
    \ on line 35\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $beats[] = 4;\n        } elseif ($note == 'o|') {\n            $beats[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $beats[] = 1;\n      \
    \  }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppter2sii.php:33\n\
    Stack trace:\n#0 /tmp/tmppter2sii.php(38): test()\n#1 {main}\n  thrown in /tmp/tmppter2sii.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n            $result[] = $beat;\n          \
    \  $beat = 0;\n        } elseif ($note == 'o|') {\n            $beat += 2;\n \
    \           $result[] = $beat;\n            $beat = 0;\n        } elseif ($note\
    \ == '.|') {\n            $beat += 1;\n            $result[] = $beat;\n      \
    \      $beat = 0;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwkve1aw3.php:40\n\
    Stack trace:\n#0 /tmp/tmpwkve1aw3.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpwkve1aw3.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $beats[] = 4;\n        } elseif ($note == 'o|') {\n            $beats[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $beats[] = 1;\n      \
    \  }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptxb3tys0.php:33\n\
    Stack trace:\n#0 /tmp/tmptxb3tys0.php(38): test()\n#1 {main}\n  thrown in /tmp/tmptxb3tys0.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0juga51f.php:33\n\
    Stack trace:\n#0 /tmp/tmp0juga51f.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp0juga51f.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note_length = 0;\n    foreach ($notes as $note) {\n        if ($note\
    \ == 'o') {\n            $note_length = 4;\n        } elseif ($note == 'o|') {\n\
    \            $note_length = 2;\n        } elseif ($note == '.|') {\n         \
    \   $note_length = 1;\n        }\n        $result[] = $note_length;\n    }\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeto2ree8.php:33\n\
    Stack trace:\n#0 /tmp/tmpeto2ree8.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpeto2ree8.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o', 'o|', $music_string);\n\
    \    $music_string = str_replace('.', '.|', $music_string);\n    $music_string\
    \ = str_replace('o|', '4', $music_string);\n    $music_string = str_replace('.|',\
    \ '1', $music_string);\n    $music_string = str_replace(' ', ',', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_array =\
    \ explode(',', $music_string);\n    return $music_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbu5u4_6g.php:27\n\
    Stack trace:\n#0 /tmp/tmpbu5u4_6g.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbu5u4_6g.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat = 4;\n        } elseif ($note == 'o|') {\n       \
    \     $beat = 2;\n        } elseif ($note == '.|') {\n            $beat = 1;\n\
    \        }\n        $beats[] = $beat;\n    }\n    return $beats;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnib8r8ne.php:33\n\
    Stack trace:\n#0 /tmp/tmpnib8r8ne.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpnib8r8ne.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9ofp6xb1.php:33\n\
    Stack trace:\n#0 /tmp/tmp9ofp6xb1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp9ofp6xb1.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            $beats[] = $beat;\n          \
    \  $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpua1hcg52.php:36\n\
    Stack trace:\n#0 /tmp/tmpua1hcg52.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpua1hcg52.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note_length = 4;\n    foreach ($notes as $note) {\n        if ($note\
    \ == 'o') {\n            $result[] = $note_length;\n        } elseif ($note ==\
    \ '|') {\n            $note_length /= 2;\n        } elseif ($note == '.') {\n\
    \            $result[] = $note_length;\n            $note_length = 4;\n      \
    \  }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx63utdu4.php:35\n\
    Stack trace:\n#0 /tmp/tmpx63utdu4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpx63utdu4.php\
    \ on line 35\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            $beats[] = $beat;\n          \
    \  $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxvi4htv8.php:36\n\
    Stack trace:\n#0 /tmp/tmpxvi4htv8.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpxvi4htv8.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note = '';\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n   \
    \         $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdn_f9wov.php:34\n\
    Stack trace:\n#0 /tmp/tmpdn_f9wov.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpdn_f9wov.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat_count = 0;\n    $note_count = 0;\n    foreach ($notes as $note)\
    \ {\n        if ($note == 'o') {\n            $note_count++;\n            $beat_count\
    \ += 4;\n        } elseif ($note == 'o|') {\n            $note_count++;\n    \
    \        $beat_count += 2;\n        } elseif ($note == '.|') {\n            $note_count++;\n\
    \            $beat_count += 1;\n        } elseif ($note == ' ') {\n          \
    \  $beats[] = $beat_count;\n            $beat_count = 0;\n        }\n    }\n \
    \   $beats[] = $beat_count;\n    return $beats;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp27mxgfz2.php:40\n\
    Stack trace:\n#0 /tmp/tmp27mxgfz2.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp27mxgfz2.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6funzor6.php:33\n\
    Stack trace:\n#0 /tmp/tmp6funzor6.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6funzor6.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = array('o' => 4, 'o|' => 2, '.|' =>\
    \ 1);\n    $result = array();\n    $notes_array = explode(' ', $music_string);\n\
    \    foreach ($notes_array as $note) {\n        $result[] = $notes[$note];\n \
    \   }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key \"\" in /tmp/tmp3qlli4zx.php on line\
    \ 16\nPHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3qlli4zx.php:26\n\
    Stack trace:\n#0 /tmp/tmp3qlli4zx.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3qlli4zx.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = [];\n    $notes = explode(' ', $music_string);\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o|') {\n            $result[] = 2;\n     \
    \   } elseif ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = preg_replace('/\\s+/', '',\
    \ $music_string);\n    $notes = str_split($music_string);\n    $beats = [];\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $beats[]\
    \ = 4;\n        } elseif ($note == 'o|') {\n            $beats[] = 2;\n      \
    \  } elseif ($note == '.|') {\n            $beats[] = 1;\n        }\n    }\n \
    \   return $beats;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgfu6ex6y.php:34\n\
    Stack trace:\n#0 /tmp/tmpgfu6ex6y.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpgfu6ex6y.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = ['o' => 4, 'o|' => 2, '.|' => 1];\n\
    \    $result = [];\n    $music_string = explode(' ', $music_string);\n    foreach\
    \ ($music_string as $note) {\n        $result[] = $notes[$note];\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key \"\" in /tmp/tmp3_xoghy7.php on line\
    \ 16\nPHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3_xoghy7.php:26\n\
    Stack trace:\n#0 /tmp/tmp3_xoghy7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3_xoghy7.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note_length = 4;\n    foreach ($notes as $note) {\n        if ($note\
    \ == 'o') {\n            $result[] = $note_length;\n        } elseif ($note ==\
    \ 'o|') {\n            $result[] = $note_length / 2;\n        } elseif ($note\
    \ == '.|') {\n            $result[] = $note_length / 4;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpiiqpnzud.php:34\n\
    Stack trace:\n#0 /tmp/tmpiiqpnzud.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpiiqpnzud.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n         \
    \   case 'o':\n                $beats[] = 4;\n                break;\n       \
    \     case 'o|':\n                $beats[] = 2;\n                break;\n    \
    \        case '.|':\n                $beats[] = 1;\n                break;\n \
    \       }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjnn8_8ia.php:37\n\
    Stack trace:\n#0 /tmp/tmpjnn8_8ia.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpjnn8_8ia.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o', 'o|', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace('.', '', $music_string);\n    $music_string = str_replace(' ', '',\
    \ $music_string);\n    $music_string = str_split($music_string);\n    $music_string\
    \ = array_count_values($music_string);\n    $music_string = array_values($music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp97aeo46f.php:27\n\
    Stack trace:\n#0 /tmp/tmp97aeo46f.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp97aeo46f.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o', 'o|', $music_string);\n\
    \    $music_string = str_replace('o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o', 'o', $music_string);\n    $music_string = str_replace('o|',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', ',', $music_string);\n    $music_string = str_replace('4',\
    \ '4,', $music_string);\n    $music_string = str_replace('1', '1,', $music_string);\n\
    \    $music_string = str_replace(',,', ',', $music_string);\n    $music_string\
    \ = str_replace(',,', ',', $music_string);\n    $music_string = str_replace(',,',\
    \ ',', $music_string);\n    $music_string = str_replace(',,', ',', $music_string);\n\
    \    $music_string = str_replace(',,', ',', $music_string);\n    $music_string\
    \ = str_replace(',,', ',', $music_string);\n    $music_string = str_replace(',,',\
    \ ',', $music_string);\n    $music_string = str_replace(',,', ',', $music_string);\n\
    \    $music_string = str_replace(',,', ',', $music_string);\n    $music_string\
    \ = str_replace(',,', ',', $music_string);\n    $music_string = str_replace(',,',\
    \ ',', $music_string);\n    $music_string = str_replace(',,', ',', $music_string);\n\
    \    $music_string = str_replace(',,', ',', $music_string);\n    $music_string\
    \ = str_replace(',,', ',', $music_string);\n    $music_string = str_replace(',,',\
    \ ',', $music_string);\n   \nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  Unclosed '{' on line 11 in /tmp/tmpz9o3yeqo.php on line\
    \ 49\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $beat = 4;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $result[] = $beat;\n        } elseif ($note == 'o|') {\n\
    \            $result[] = $beat / 2;\n        } elseif ($note == '.|') {\n    \
    \        $result[] = $beat / 4;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpswxvs2zp.php:34\n\
    Stack trace:\n#0 /tmp/tmpswxvs2zp.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpswxvs2zp.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note_length = 4;\n    $note_count = 0;\n    foreach ($notes as $note)\
    \ {\n        if ($note == 'o') {\n            $note_count++;\n        } elseif\
    \ ($note == '|') {\n            $result[] = $note_length * $note_count;\n    \
    \        $note_count = 0;\n        } elseif ($note == '.') {\n            $note_length\
    \ = $note_length / 2;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa7ksy43a.php:35\n\
    Stack trace:\n#0 /tmp/tmpa7ksy43a.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa7ksy43a.php\
    \ on line 35\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $beats[] = 4;\n        } elseif ($note == 'o|') {\n            $beats[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $beats[] = 1;\n      \
    \  }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgiaf9h_0.php:33\n\
    Stack trace:\n#0 /tmp/tmpgiaf9h_0.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpgiaf9h_0.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $beats[] = 4;\n        } elseif ($note == 'o|') {\n            $beats[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $beats[] = 1;\n      \
    \  }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn4vlr1v1.php:33\n\
    Stack trace:\n#0 /tmp/tmpn4vlr1v1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpn4vlr1v1.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note_length = 0;\n    foreach ($notes as $note) {\n        if ($note\
    \ == 'o') {\n            $note_length += 4;\n        } elseif ($note == '|') {\n\
    \            $result[] = $note_length;\n            $note_length = 0;\n      \
    \  } elseif ($note == '.') {\n            $note_length += 1;\n        }\n    }\n\
    \    $result[] = $note_length;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj10n1xwd.php:34\n\
    Stack trace:\n#0 /tmp/tmpj10n1xwd.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpj10n1xwd.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $current_note = '';\n    foreach ($notes as $note) {\n        if\
    \ ($note == 'o') {\n            $current_note .= $note;\n        } elseif ($note\
    \ == '|') {\n            $current_note .= $note;\n        } elseif ($note == '.')\
    \ {\n            $current_note .= $note;\n        } elseif ($note == ' ') {\n\
    \            if ($current_note == 'o') {\n                $result[] = 4;\n   \
    \         } elseif ($current_note == 'o|') {\n                $result[] = 2;\n\
    \            } elseif ($current_note == '.|') {\n                $result[] = 1;\n\
    \            }\n            $current_note = '';\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbzq70di2.php:42\n\
    Stack trace:\n#0 /tmp/tmpbzq70di2.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpbzq70di2.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $music_string = str_replace('o|', 'o', $music_string);\n\
    \  $music_string = str_replace('.|', '.', $music_string);\n  $music_string = str_replace('o',\
    \ '4', $music_string);\n  $music_string = str_replace('.', '1', $music_string);\n\
    \  $music_string = str_replace(' ', ',', $music_string);\n  $music_string = str_replace(',,',\
    \ ',', $music_string);\n  $music_string = str_replace(',', ' ', $music_string);\n\
    \  $music_string = trim($music_string);\n  $music_array = explode(' ', $music_string);\n\
    \  return $music_array;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb35ys1dl.php:29\n\
    Stack trace:\n#0 /tmp/tmpb35ys1dl.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpb35ys1dl.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat_count = 0;\n    foreach ($notes as $note) {\n        if ($note\
    \ == 'o') {\n            $beat_count += 4;\n        } elseif ($note == 'o|') {\n\
    \            $beat_count += 2;\n        } elseif ($note == '.|') {\n         \
    \   $beat_count += 1;\n        } elseif ($note == ' ') {\n            $beats[]\
    \ = $beat_count;\n            $beat_count = 0;\n        }\n    }\n    $beats[]\
    \ = $beat_count;\n    return $beats;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbafwreyl.php:36\n\
    Stack trace:\n#0 /tmp/tmpbafwreyl.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpbafwreyl.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = [];\n    $music_array = explode('\
    \ ', $music_string);\n    foreach ($music_array as $note) {\n        switch ($note)\
    \ {\n            case 'o':\n                $result[] = 4;\n                break;\n\
    \            case 'o|':\n                $result[] = 2;\n                break;\n\
    \            case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_array = explode(' ', $music_string);\n\
    \    $result = [];\n    foreach ($music_array as $note) {\n        $result[] =\
    \ strlen($note) == 1 ? 4 : 2;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb5wtj9s3.php:25\n\
    Stack trace:\n#0 /tmp/tmpb5wtj9s3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpb5wtj9s3.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace(' ', '', $music_string);\n\
    \    $music_string = str_replace('o', 'o|', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  Unclosed '{' on line 11 in /tmp/tmpss15ruj2.php on line\
    \ 47\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n         \
    \   case 'o':\n                $beats[] = 4;\n                break;\n       \
    \     case 'o|':\n                $beats[] = 2;\n                break;\n    \
    \        case '.|':\n                $beats[] = 1;\n                break;\n \
    \       }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl_thg_gb.php:37\n\
    Stack trace:\n#0 /tmp/tmpl_thg_gb.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpl_thg_gb.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note_length = 4;\n    foreach ($notes as $note) {\n        if ($note\
    \ == 'o') {\n            $result[] = $note_length;\n        } elseif ($note ==\
    \ '|') {\n            $note_length /= 2;\n        } elseif ($note == '.') {\n\
    \            $result[] = $note_length;\n            $note_length = 4;\n      \
    \  }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplb7eumzb.php:35\n\
    Stack trace:\n#0 /tmp/tmplb7eumzb.php(40): test()\n#1 {main}\n  thrown in /tmp/tmplb7eumzb.php\
    \ on line 35\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o', 'o|', $music_string);\n\
    \    $music_string = str_replace('.', '.|', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|.|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o', 'o', $music_string);\n\
    \    $music_string = str_replace('o|.|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|', 'o', $music_string);\n    $music_string = str_replace('o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|', 'o', $music_string);\n    $music_string = str_replace('o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|', 'o', $music_string);\n    $music_string = str_replace('o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|', 'o', $music_string);\n    $music_string = str_replace('o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|', 'o', $music_string);\nfunction candidate(...$args) {\n \
    \   return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  Unclosed '{' on line 11 in /tmp/tmprqesqs16.php on line\
    \ 47\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n         \
    \   case 'o':\n                $result[] = 4;\n                break;\n      \
    \      case 'o|':\n                $result[] = 2;\n                break;\n  \
    \          case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0ufz21xr.php:37\n\
    Stack trace:\n#0 /tmp/tmp0ufz21xr.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0ufz21xr.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat_count = 0;\n    foreach ($notes as $note) {\n        if ($note\
    \ == 'o') {\n            $beat_count += 4;\n        } elseif ($note == 'o|') {\n\
    \            $beat_count += 2;\n        } elseif ($note == '.|') {\n         \
    \   $beat_count += 1;\n        } elseif ($note == ' ') {\n            $beats[]\
    \ = $beat_count;\n            $beat_count = 0;\n        }\n    }\n    $beats[]\
    \ = $beat_count;\n    return $beats;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6w9rw21x.php:36\n\
    Stack trace:\n#0 /tmp/tmp6w9rw21x.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6w9rw21x.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        }\n        if ($note == ' ') {\n            $beats[] = $beat;\n     \
    \       $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpd09iu_w3.php:37\n\
    Stack trace:\n#0 /tmp/tmpd09iu_w3.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpd09iu_w3.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o', 'o|', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace('.', '1', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = explode(' ', $music_string);\n   \
    \ $music_string = array_map('intval', $music_string);\n    return $music_string;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi5g88qmb.php:26\n\
    Stack trace:\n#0 /tmp/tmpi5g88qmb.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpi5g88qmb.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    // Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp97sk030f.php:20\n\
    Stack trace:\n#0 /tmp/tmp97sk030f.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp97sk030f.php\
    \ on line 20\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $current_note = '';\n    foreach ($notes as $note) {\n        if\
    \ ($note == ' ') {\n            $result[] = get_note_length($current_note);\n\
    \            $current_note = '';\n        } else {\n            $current_note\
    \ .= $note;\n        }\n    }\n    $result[] = get_note_length($current_note);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_note_length()\
    \ in /tmp/tmpobnowc_n.php:23\nStack trace:\n#0 /tmp/tmpobnowc_n.php(28): parse_music()\n\
    #1 /tmp/tmpobnowc_n.php(32): candidate()\n#2 /tmp/tmpobnowc_n.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpobnowc_n.php on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n         \
    \   case 'o':\n                $beats[] = 4;\n                break;\n       \
    \     case 'o|':\n                $beats[] = 2;\n                break;\n    \
    \        case '.|':\n                $beats[] = 1;\n                break;\n \
    \       }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphdkssyg0.php:37\n\
    Stack trace:\n#0 /tmp/tmphdkssyg0.php(42): test()\n#1 {main}\n  thrown in /tmp/tmphdkssyg0.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            $beats[] = $beat;\n          \
    \  $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpraovc6zo.php:36\n\
    Stack trace:\n#0 /tmp/tmpraovc6zo.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpraovc6zo.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            $beats[] = $beat;\n          \
    \  $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpckug0dv0.php:36\n\
    Stack trace:\n#0 /tmp/tmpckug0dv0.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpckug0dv0.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2_4pd5ex.php:33\n\
    Stack trace:\n#0 /tmp/tmp2_4pd5ex.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2_4pd5ex.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace(' ', '', $music_string);\n\
    \    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o', '4', $music_string);\n    $music_string = str_replace('.',\
    \ '1', $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_split($music_string);\n    return $music_string;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdg0zxg27.php:26\n\
    Stack trace:\n#0 /tmp/tmpdg0zxg27.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdg0zxg27.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            $beats[] = $beat;\n          \
    \  $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsw2xozg3.php:36\n\
    Stack trace:\n#0 /tmp/tmpsw2xozg3.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpsw2xozg3.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $current_note = '';\n    foreach ($notes as $note) {\n        if\
    \ ($note == ' ') {\n            $result[] = get_note_length($current_note);\n\
    \            $current_note = '';\n        } else {\n            $current_note\
    \ .= $note;\n        }\n    }\n    $result[] = get_note_length($current_note);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_note_length()\
    \ in /tmp/tmpgdvpgbmt.php:23\nStack trace:\n#0 /tmp/tmpgdvpgbmt.php(28): parse_music()\n\
    #1 /tmp/tmpgdvpgbmt.php(32): candidate()\n#2 /tmp/tmpgdvpgbmt.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpgdvpgbmt.php on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o', 'o|', $music_string);\n\
    \    $music_string = str_replace('o| ', 'o|', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o| o|', $music_string);\n    $music_string = str_replace('o|o|',\
    \ 'o| o|', $music_string);\n    $music_string = str_replace('o|o|', 'o| o|', $music_string);\n\
    \    $music_string = str_replace('o|o|', 'o| o|', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o| o|', $music_string);\n    $music_string = str_replace('o|o|',\
    \ 'o| o|', $music_string);\n    $music_string = str_replace('o|o|', 'o| o|', $music_string);\n\
    \    $music_string = str_replace('o|o|', 'o| o|', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o| o|', $music_string);\n    $music_string = str_replace('o|o|',\
    \ 'o| o|', $music_string);\n    $music_string = str_replace('o|o|', 'o| o|', $music_string);\n\
    \    $music_string = str_replace('o|o|', 'o| o|', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o| o|', $music_string);\n    $music_string = str_replace('o|o|',\
    \ 'o| o|', $music_string);\n    $music_string = str_replace('o|o|', 'o| o|', $music_string);\n\
    \    $music_string = str_replace('o|o|', 'o| o|', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o| o|', $music_string);\n    $music_string = str\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpvvm6giwg.php\
    \ on line 32\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            $beats[] = $beat;\n          \
    \  $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuof6uqno.php:36\n\
    Stack trace:\n#0 /tmp/tmpuof6uqno.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpuof6uqno.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o', '4', $music_string);\n\
    \    $music_string = str_replace('o|', '2', $music_string);\n    $music_string\
    \ = str_replace('.|', '1', $music_string);\n    $music_string = str_replace('\
    \ ', '', $music_string);\n    $music_string = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($music_string as $item) {\n        $result[] = (int)$item;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr_4cmfg9.php:29\n\
    Stack trace:\n#0 /tmp/tmpr_4cmfg9.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpr_4cmfg9.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat_count = 0;\n    $note_count = 0;\n    foreach ($notes as $note)\
    \ {\n        if ($note == 'o') {\n            $beat_count += 4;\n            $note_count++;\n\
    \        } elseif ($note == 'o|') {\n            $beat_count += 2;\n         \
    \   $note_count++;\n        } elseif ($note == '.|') {\n            $beat_count\
    \ += 1;\n            $note_count++;\n        } elseif ($note == ' ') {\n     \
    \       $beats[] = $beat_count;\n            $beat_count = 0;\n        }\n   \
    \ }\n    if ($note_count == count($notes)) {\n        $beats[] = $beat_count;\n\
    \    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplnpg7evt.php:43\n\
    Stack trace:\n#0 /tmp/tmplnpg7evt.php(49): test()\n#1 {main}\n  thrown in /tmp/tmplnpg7evt.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = [];\n    $music_array = explode('\
    \ ', $music_string);\n    foreach ($music_array as $music_note) {\n        if\
    \ ($music_note == 'o') {\n            $result[] = 4;\n        } elseif ($music_note\
    \ == 'o|') {\n            $result[] = 2;\n        } elseif ($music_note == '.|')\
    \ {\n            $result[] = 1;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note = '';\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n   \
    \         $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxopcrvxc.php:33\n\
    Stack trace:\n#0 /tmp/tmpxopcrvxc.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpxopcrvxc.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            $beats[] = $beat;\n          \
    \  $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp97x87hob.php:36\n\
    Stack trace:\n#0 /tmp/tmp97x87hob.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp97x87hob.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n         \
    \   case 'o':\n                $result[] = 4;\n                break;\n      \
    \      case 'o|':\n                $result[] = 2;\n                break;\n  \
    \          case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz3giub5q.php:37\n\
    Stack trace:\n#0 /tmp/tmpz3giub5q.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpz3giub5q.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace(' ', '', $music_string);\n\
    \    $music_string = str_replace('o', '4', $music_string);\n    $music_string\
    \ = str_replace('o|', '2', $music_string);\n    $music_string = str_replace('.|',\
    \ '1', $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_array = str_split($music_string);\n    return $music_array;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjxivctso.php:26\n\
    Stack trace:\n#0 /tmp/tmpjxivctso.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpjxivctso.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            $beats[] = $beat;\n          \
    \  $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6vbsdiq_.php:36\n\
    Stack trace:\n#0 /tmp/tmp6vbsdiq_.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6vbsdiq_.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $current_beat = 0;\n    foreach ($notes as $note) {\n        if ($note\
    \ == 'o') {\n            $current_beat += 4;\n        } elseif ($note == 'o|')\
    \ {\n            $current_beat += 2;\n        } elseif ($note == '.|') {\n   \
    \         $current_beat += 1;\n        } elseif ($note == ' ') {\n           \
    \ $beats[] = $current_beat;\n            $current_beat = 0;\n        }\n    }\n\
    \    $beats[] = $current_beat;\n    return $beats;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpiq8wipi4.php:36\n\
    Stack trace:\n#0 /tmp/tmpiq8wipi4.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpiq8wipi4.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n         \
    \   case 'o':\n                $beats[] = 4;\n                break;\n       \
    \     case 'o|':\n                $beats[] = 2;\n                break;\n    \
    \        case '.|':\n                $beats[] = 1;\n                break;\n \
    \       }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1e2qurrx.php:37\n\
    Stack trace:\n#0 /tmp/tmp1e2qurrx.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp1e2qurrx.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note_length = 4;\n    foreach ($notes as $note) {\n        if ($note\
    \ === 'o') {\n            $result[] = $note_length;\n        } elseif ($note ===\
    \ 'o|') {\n            $result[] = $note_length / 2;\n        } elseif ($note\
    \ === '.|') {\n            $result[] = $note_length / 4;\n        }\n    }\n \
    \   return $result;\n}\n\nprint_r(parse_music('o o| .| o| o| .| .| .| .| o o'));\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 4\n    [1] => 4\n    [2] => 4\n    [3] => 4\n    [4]\
    \ => 4\n    [5] => 4\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpju2bn__y.php:35\n\
    Stack trace:\n#0 /tmp/tmpju2bn__y.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpju2bn__y.php\
    \ on line 35\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $beats[] = 4;\n        } elseif ($note == 'o|') {\n            $beats[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $beats[] = 1;\n      \
    \  }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfkekdusn.php:33\n\
    Stack trace:\n#0 /tmp/tmpfkekdusn.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpfkekdusn.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $beats[] = 4;\n        } elseif ($note == 'o|') {\n            $beats[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $beats[] = 1;\n      \
    \  }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphsaum62r.php:33\n\
    Stack trace:\n#0 /tmp/tmphsaum62r.php(38): test()\n#1 {main}\n  thrown in /tmp/tmphsaum62r.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note_length = 4;\n    foreach ($notes as $note) {\n        if ($note\
    \ === 'o') {\n            $result[] = $note_length;\n        } elseif ($note ===\
    \ 'o' && $note === '|') {\n            $result[] = $note_length / 2;\n       \
    \ } elseif ($note === '.' && $note === '|') {\n            $result[] = $note_length\
    \ / 4;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz8vnu0a4.php:34\n\
    Stack trace:\n#0 /tmp/tmpz8vnu0a4.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpz8vnu0a4.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpveugtjz8.php:33\n\
    Stack trace:\n#0 /tmp/tmpveugtjz8.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpveugtjz8.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat_count = 0;\n    foreach ($notes as $note) {\n        if ($note\
    \ == 'o') {\n            $beat_count += 4;\n        } elseif ($note == 'o|') {\n\
    \            $beat_count += 2;\n        } elseif ($note == '.|') {\n         \
    \   $beat_count += 1;\n        } elseif ($note == ' ') {\n            $beats[]\
    \ = $beat_count;\n            $beat_count = 0;\n        }\n    }\n    $beats[]\
    \ = $beat_count;\n    return $beats;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk8n46775.php:36\n\
    Stack trace:\n#0 /tmp/tmpk8n46775.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpk8n46775.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = [];\n    $notes = explode(' ', $music_string);\n\
    \    foreach ($notes as $note) {\n        switch ($note) {\n            case 'o':\n\
    \                $result[] = 4;\n                break;\n            case 'o|':\n\
    \                $result[] = 2;\n                break;\n            case '.|':\n\
    \                $result[] = 1;\n                break;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note = '';\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n   \
    \         $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgfwvw4a4.php:34\n\
    Stack trace:\n#0 /tmp/tmpgfwvw4a4.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpgfwvw4a4.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o', 'o|', $music_string);\n\
    \    $music_string = str_replace('.', '.|', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \")\" in /tmp/tmp_j1yw96h.php on line 34\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkwk77gxn.php:33\n\
    Stack trace:\n#0 /tmp/tmpkwk77gxn.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpkwk77gxn.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $beats[] = 4;\n        } elseif ($note == 'o|') {\n            $beats[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $beats[] = 1;\n      \
    \  }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfg0_f7gq.php:33\n\
    Stack trace:\n#0 /tmp/tmpfg0_f7gq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpfg0_f7gq.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $count = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n   \
    \         $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8w7t8g1p.php:34\n\
    Stack trace:\n#0 /tmp/tmp8w7t8g1p.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp8w7t8g1p.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o', 'o|', $music_string);\n\
    \    $music_string = str_replace('o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o', 'o', $music_string);\n    $music_string = str_replace('o|o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|o', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|o|o', 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|o|o|o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|o|o|o|o', 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o|o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o|o|o', 'o',\
    \ $music_string);\n    $music_string = str_replace('o|o|o|o|o|o|o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|o|o|o|o|o|o', 'o', $music_string);\n   \
    \ $music_string = str_replace('o|o|o|o|o|o|o|o|o|', 'o', $music_string);\n   \
    \ $music_string = str_replace('o|o|o|o|o|o|o|o|o', 'o', $music_string);\n   \n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  Unclosed '{' on line 11 in /tmp/tmpa3ks7n6a.php on line\
    \ 42\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat = 4;\n        } elseif ($note == 'o|') {\n       \
    \     $beat = 2;\n        } elseif ($note == '.|') {\n            $beat = 1;\n\
    \        }\n        $beats[] = $beat;\n    }\n    return $beats;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnm8ub2i2.php:33\n\
    Stack trace:\n#0 /tmp/tmpnm8ub2i2.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpnm8ub2i2.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $current_note = '';\n    foreach ($notes as $note) {\n        if\
    \ ($note == ' ') {\n            if ($current_note == 'o') {\n                $result[]\
    \ = 4;\n            } elseif ($current_note == 'o|') {\n                $result[]\
    \ = 2;\n            } elseif ($current_note == '.|') {\n                $result[]\
    \ = 1;\n            }\n            $current_note = '';\n        } else {\n   \
    \         $current_note .= $note;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzhk4heyt.php:38\n\
    Stack trace:\n#0 /tmp/tmpzhk4heyt.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzhk4heyt.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o|', '|', $music_string);\n\
    \    $music_string = str_replace('o', '|', $music_string);\n    $music_string\
    \ = str_replace('.', '', $music_string);\n    $music_string = str_replace('|',\
    \ '1', $music_string);\n    $music_string = str_replace(' ', '', $music_string);\n\
    \    $music_string = str_split($music_string);\n    $music_string = array_map('intval',\
    \ $music_string);\n    return $music_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8tu4ixs8.php:27\n\
    Stack trace:\n#0 /tmp/tmp8tu4ixs8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp8tu4ixs8.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_array = str_split($music_string);\n\
    \    $result = [];\n    foreach ($music_array as $key => $value) {\n        if\
    \ ($value == 'o') {\n            $result[] = 4;\n        } elseif ($value == 'o'\
    \ && $music_array[$key + 1] == '|') {\n            $result[] = 2;\n        } elseif\
    \ ($value == '.' && $music_array[$key + 1] == '|') {\n            $result[] =\
    \ 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyl7kvu_c.php:34\n\
    Stack trace:\n#0 /tmp/tmpyl7kvu_c.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpyl7kvu_c.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            $beats[] = $beat;\n          \
    \  $beat = 0;\n        }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpymvg9_kk.php:36\n\
    Stack trace:\n#0 /tmp/tmpymvg9_kk.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpymvg9_kk.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note_length = 0;\n    foreach ($notes as $note) {\n        if ($note\
    \ == 'o') {\n            $note_length += 4;\n        } elseif ($note == '|') {\n\
    \            $result[] = $note_length;\n            $note_length = 0;\n      \
    \  } elseif ($note == '.') {\n            $note_length += 1;\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmporfomna6.php:34\n\
    Stack trace:\n#0 /tmp/tmporfomna6.php(40): test()\n#1 {main}\n  thrown in /tmp/tmporfomna6.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            array_push($beats, $beat);\n \
    \           $beat = 0;\n        }\n    }\n    array_push($beats, $beat);\n   \
    \ return $beats;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp97z8cbds.php:36\n\
    Stack trace:\n#0 /tmp/tmp97z8cbds.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp97z8cbds.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n         \
    \   case 'o':\n                $result[] = 4;\n                break;\n      \
    \      case 'o|':\n                $result[] = 2;\n                break;\n  \
    \          case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwk24o4kp.php:37\n\
    Stack trace:\n#0 /tmp/tmpwk24o4kp.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpwk24o4kp.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note_length = 0;\n    foreach ($notes as $note) {\n        if ($note\
    \ === 'o') {\n            $note_length += 4;\n        } elseif ($note === '|')\
    \ {\n            $result[] = $note_length;\n            $note_length = 0;\n  \
    \      } elseif ($note === '.') {\n            $note_length += 1;\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7_s0w5rj.php:34\n\
    Stack trace:\n#0 /tmp/tmp7_s0w5rj.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp7_s0w5rj.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o', 'o|', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace('.', '|', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('|', '1', $music_string);\n\
    \    $music_string = str_replace(' ', ',', $music_string);\n    $music_string\
    \ = explode(',', $music_string);\n    return $music_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr1_qf6to.php:27\n\
    Stack trace:\n#0 /tmp/tmpr1_qf6to.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpr1_qf6to.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o', '4', $music_string);\n    $music_string\
    \ = str_replace('.', '1', $music_string);\n    $music_string = str_replace('|',\
    \ ' ', $music_string);\n    $music_string = str_replace('  ', ' ', $music_string);\n\
    \    $music_string = explode(' ', $music_string);\n    $music_string = array_map('intval',\
    \ $music_string);\n    return $music_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpd72c8o02.php:27\n\
    Stack trace:\n#0 /tmp/tmpd72c8o02.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpd72c8o02.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note_length = 0;\n    foreach ($notes as $note) {\n        if ($note\
    \ == 'o') {\n            $note_length += 4;\n        } elseif ($note == '|') {\n\
    \            $result[] = $note_length;\n            $note_length = 0;\n      \
    \  } elseif ($note == '.') {\n            $note_length += 1;\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5k8vu5kn.php:34\n\
    Stack trace:\n#0 /tmp/tmp5k8vu5kn.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5k8vu5kn.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            $beats[] = $beat;\n          \
    \  $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpde_tudnw.php:36\n\
    Stack trace:\n#0 /tmp/tmpde_tudnw.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpde_tudnw.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $beats[] = 4;\n        } elseif ($note == 'o|') {\n            $beats[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $beats[] = 1;\n      \
    \  }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_seupmn3.php:33\n\
    Stack trace:\n#0 /tmp/tmp_seupmn3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_seupmn3.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = [];\n    $notes = explode(' ', $music_string);\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o|') {\n            $result[] = 2;\n     \
    \   } elseif ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $current_note = '';\n    foreach ($notes as $note) {\n        if\
    \ ($note === ' ') {\n            $result[] = get_note_length($current_note);\n\
    \            $current_note = '';\n        } else {\n            $current_note\
    \ .= $note;\n        }\n    }\n    $result[] = get_note_length($current_note);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_note_length()\
    \ in /tmp/tmpju_ap7is.php:23\nStack trace:\n#0 /tmp/tmpju_ap7is.php(28): parse_music()\n\
    #1 /tmp/tmpju_ap7is.php(32): candidate()\n#2 /tmp/tmpju_ap7is.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpju_ap7is.php on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_array = explode(' ', $music_string);\n\
    \    $result = [];\n    foreach ($music_array as $note) {\n        if ($note ==\
    \ 'o') {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n   \
    \         $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o|', '|', $music_string);\n\
    \    $music_string = str_replace('o', '|', $music_string);\n    $music_string\
    \ = str_replace('.', '', $music_string);\n    $music_string = str_replace(' ',\
    \ '', $music_string);\n    $music_string = str_replace('|', '| ', $music_string);\n\
    \    $music_string = trim($music_string);\n    $music_array = explode(' ', $music_string);\n\
    \    $music_array = array_map(function($x) {\n        return strlen($x);\n   \
    \ }, $music_array);\n    return $music_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1fpfdpxb.php:30\n\
    Stack trace:\n#0 /tmp/tmp1fpfdpxb.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp1fpfdpxb.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note_length = 0;\n    foreach ($notes as $note) {\n        if ($note\
    \ === 'o') {\n            $note_length += 4;\n        } elseif ($note === 'o|')\
    \ {\n            $note_length += 2;\n        } elseif ($note === '.|') {\n   \
    \         $note_length += 1;\n        } elseif ($note === ' ') {\n           \
    \ $result[] = $note_length;\n            $note_length = 0;\n        }\n    }\n\
    \    $result[] = $note_length;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfk8khp1_.php:36\n\
    Stack trace:\n#0 /tmp/tmpfk8khp1_.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpfk8khp1_.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace(' ', '', $music_string);\n\
    \    $notes = str_split($music_string);\n    $beats = [];\n    foreach ($notes\
    \ as $note) {\n        if ($note == 'o') {\n            $beats[] = 4;\n      \
    \  } elseif ($note == 'o|') {\n            $beats[] = 2;\n        } elseif ($note\
    \ == '.|') {\n            $beats[] = 1;\n        }\n    }\n    return $beats;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvlg7c9v_.php:34\n\
    Stack trace:\n#0 /tmp/tmpvlg7c9v_.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpvlg7c9v_.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o o', 'oo', $music_string);\n    $music_string\
    \ = str_replace('o', '4', $music_string);\n    $music_string = str_replace('.',\
    \ '1', $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace(' ', '', $music_string);\n    $music_string =\
    \ str_split($music_string);\n    return $music_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyvpndm_o.php:27\n\
    Stack trace:\n#0 /tmp/tmpyvpndm_o.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpyvpndm_o.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat = 4;\n        } elseif ($note == 'o|') {\n       \
    \     $beat = 2;\n        } elseif ($note == '.|') {\n            $beat = 1;\n\
    \        } else {\n            $beat = 0;\n        }\n        $beats[] = $beat;\n\
    \    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0ts6w1v_.php:35\n\
    Stack trace:\n#0 /tmp/tmp0ts6w1v_.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0ts6w1v_.php\
    \ on line 35\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace(' ', '', $music_string);\n\
    \    $notes = explode('|', $music_string);\n    $result = [];\n    foreach ($notes\
    \ as $note) {\n        if ($note === 'o') {\n            $result[] = 4;\n    \
    \    } elseif ($note === 'o') {\n            $result[] = 2;\n        } else {\n\
    \            $result[] = 1;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm9ebj11x.php:32\n\
    Stack trace:\n#0 /tmp/tmpm9ebj11x.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpm9ebj11x.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $beats[] = 4;\n        } elseif ($note == 'o|') {\n            $beats[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $beats[] = 1;\n      \
    \  }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4g52clu2.php:33\n\
    Stack trace:\n#0 /tmp/tmp4g52clu2.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp4g52clu2.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat_count = 0;\n    foreach ($notes as $note) {\n        if ($note\
    \ == 'o') {\n            $beat_count += 4;\n        } elseif ($note == 'o|') {\n\
    \            $beat_count += 2;\n        } elseif ($note == '.|') {\n         \
    \   $beat_count += 1;\n        } elseif ($note == ' ') {\n            $beats[]\
    \ = $beat_count;\n            $beat_count = 0;\n        }\n    }\n    $beats[]\
    \ = $beat_count;\n    return $beats;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp88z3rwlo.php:36\n\
    Stack trace:\n#0 /tmp/tmp88z3rwlo.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp88z3rwlo.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_array = str_split($music_string);\n\
    \    $result = [];\n    $beat = 0;\n    foreach ($music_array as $key => $value)\
    \ {\n        if ($value == 'o') {\n            $beat = 4;\n        } elseif ($value\
    \ == 'o|') {\n            $beat = 2;\n        } elseif ($value == '.|') {\n  \
    \          $beat = 1;\n        }\n        $result[] = $beat;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc0njdift.php:33\n\
    Stack trace:\n#0 /tmp/tmpc0njdift.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpc0njdift.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            $beats[] = $beat;\n          \
    \  $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2d6rfl17.php:36\n\
    Stack trace:\n#0 /tmp/tmp2d6rfl17.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp2d6rfl17.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        }\n        if ($note == ' ') {\n            $beats[] = $beat;\n     \
    \       $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg_g69yzd.php:37\n\
    Stack trace:\n#0 /tmp/tmpg_g69yzd.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpg_g69yzd.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = [\n        'o' => 4,\n        'o|'\
    \ => 2,\n        '.|' => 1\n    ];\n    $music_array = explode(' ', $music_string);\n\
    \    $result = [];\n    foreach ($music_array as $note) {\n        $result[] =\
    \ $notes[$note];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key \"\" in /tmp/tmpxbkd9qnm.php on line\
    \ 20\nPHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxbkd9qnm.php:30\n\
    Stack trace:\n#0 /tmp/tmpxbkd9qnm.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxbkd9qnm.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 1;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beats[] = $beat * 4;\n        } elseif ($note == 'o|')\
    \ {\n            $beats[] = $beat * 2;\n        } elseif ($note == '.|') {\n \
    \           $beats[] = $beat;\n        }\n    }\n    return $beats;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2_cwrc7s.php:34\n\
    Stack trace:\n#0 /tmp/tmp2_cwrc7s.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp2_cwrc7s.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvh132r9p.php:33\n\
    Stack trace:\n#0 /tmp/tmpvh132r9p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpvh132r9p.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o', 'o|', $music_string);\n\
    \    $music_string = str_replace('o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o', 'o', $music_string);\n    $music_string = str_replace('o|',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', ',', $music_string);\n    $music_string = str_replace('o',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', ',', $music_string);\n    return explode(',', $music_string);\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg6p_nl41.php:31\n\
    Stack trace:\n#0 /tmp/tmpg6p_nl41.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpg6p_nl41.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o', '4', $music_string);\n\
    \    $music_string = str_replace('o|', '2', $music_string);\n    $music_string\
    \ = str_replace('.|', '1', $music_string);\n    $music_string = str_replace('\
    \ ', ',', $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('.', '', $music_string);\n    $music_string =\
    \ str_replace('o', '', $music_string);\n    $music_string = str_replace('|', '',\
    \ $music_string);\n    $music_string = str_replace('.', '', $music_string);\n\
    \    $music_string = str_replace('o', '', $music_string);\n    $music_string =\
    \ str_replace('|', '', $music_string);\n    $music_string = str_replace('.', '',\
    \ $music_string);\n    $music_string = str_replace('o', '', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace('.', '', $music_string);\n    $music_string = str_replace('o', '',\
    \ $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('.', '', $music_string);\n    $music_string =\
    \ str_replace('o', '', $music_string);\n    $music_string = str_replace('|', '',\
    \ $music_string);\n    $music_string = str_replace('.', '', $music_string);\n\
    \    $music_string = str_replace('o', '', $music_string);\n    $music_string =\
    \ str_replace('|', '', $music_string);\n    $music_string = str_replace('.', '',\
    \ $music_string);\n    $music_string = str_replace('o', '', $music_string);\n\
    \    $music_string = str\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpk6rx180d.php\
    \ on line 38\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $current_note = '';\n    foreach ($notes as $note) {\n        if\
    \ ($note == ' ') {\n            $result[] = get_note_value($current_note);\n \
    \           $current_note = '';\n        } else {\n            $current_note .=\
    \ $note;\n        }\n    }\n    $result[] = get_note_value($current_note);\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function get_note_value()\
    \ in /tmp/tmpm78063wr.php:23\nStack trace:\n#0 /tmp/tmpm78063wr.php(28): parse_music()\n\
    #1 /tmp/tmpm78063wr.php(32): candidate()\n#2 /tmp/tmpm78063wr.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpm78063wr.php on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note = '';\n    foreach ($notes as $note) {\n        if ($note ===\
    \ 'o') {\n            $result[] = 4;\n        } elseif ($note === 'o|') {\n  \
    \          $result[] = 2;\n        } elseif ($note === '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0n7190xy.php:34\n\
    Stack trace:\n#0 /tmp/tmp0n7190xy.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0n7190xy.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n  $music_string = str_replace('o|', 'o', $music_string);\n\
    \  $music_string = str_replace('.|', '.', $music_string);\n  $music_string = str_replace('\
    \ ', '', $music_string);\n  $music_string = str_replace('o', '4', $music_string);\n\
    \  $music_string = str_replace('.', '1', $music_string);\n  $music_string = str_split($music_string);\n\
    \  $music_string = array_map('intval', $music_string);\n  return $music_string;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpisu40yve.php:27\n\
    Stack trace:\n#0 /tmp/tmpisu40yve.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpisu40yve.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_array = str_split($music_string);\n\
    \    $music_array_length = count($music_array);\n    $result = [];\n    $i = 0;\n\
    \    while ($i < $music_array_length) {\n        if ($music_array[$i] == 'o')\
    \ {\n            if ($music_array[$i + 1] == ' ') {\n                $result[]\
    \ = 4;\n                $i += 2;\n            } else {\n                $result[]\
    \ = 2;\n                $i += 3;\n            }\n        } else {\n          \
    \  $result[] = 1;\n            $i += 3;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkv1sl17q.php:38\n\
    Stack trace:\n#0 /tmp/tmpkv1sl17q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpkv1sl17q.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o|', 'o', $music_string);\n\
    \    $music_string = str_replace('.', '', $music_string);\n    $music_string =\
    \ str_replace('o', '1', $music_string);\n    $music_string = str_replace(' ',\
    \ '', $music_string);\n    $music_string = str_split($music_string);\n    $result\
    \ = [];\n    $count = 1;\n    for ($i = 0; $i < count($music_string); $i++) {\n\
    \        if ($music_string[$i] == $music_string[$i + 1]) {\n            $count++;\n\
    \        } else {\n            $result[] = $count;\n            $count = 1;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 1 in /tmp/tmpl3oevlza.php on line 20\n\
    PHP Warning:  Undefined array key 4 in /tmp/tmpl3oevlza.php on line 20\nPHP Fatal\
    \ error:  Uncaught Exception: Test failed! in /tmp/tmpl3oevlza.php:36\nStack trace:\n\
    #0 /tmp/tmpl3oevlza.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpl3oevlza.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note_length = 0;\n    foreach ($notes as $note) {\n        if ($note\
    \ == 'o') {\n            $note_length += 4;\n        } elseif ($note == '|') {\n\
    \            $result[] = $note_length;\n            $note_length = 0;\n      \
    \  } elseif ($note == '.') {\n            $note_length += 1;\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi58y9di3.php:34\n\
    Stack trace:\n#0 /tmp/tmpi58y9di3.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpi58y9di3.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $i = 0;\n    while ($i < count($notes)) {\n        if ($notes[$i]\
    \ == 'o') {\n            if ($notes[$i + 1] == ' ') {\n                $result[]\
    \ = 4;\n                $i += 2;\n            } else {\n                $result[]\
    \ = 2;\n                $i += 3;\n            }\n        } else {\n          \
    \  $result[] = 1;\n            $i += 3;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprf7fp3yr.php:37\n\
    Stack trace:\n#0 /tmp/tmprf7fp3yr.php(44): test()\n#1 {main}\n  thrown in /tmp/tmprf7fp3yr.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $current_note = '';\n    foreach ($notes as $note) {\n        if\
    \ ($note == ' ') {\n            if ($current_note == 'o') {\n                $result[]\
    \ = 4;\n            } elseif ($current_note == 'o|') {\n                $result[]\
    \ = 2;\n            } elseif ($current_note == '.|') {\n                $result[]\
    \ = 1;\n            }\n            $current_note = '';\n        } else {\n   \
    \         $current_note .= $note;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvghpb7t5.php:38\n\
    Stack trace:\n#0 /tmp/tmpvghpb7t5.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpvghpb7t5.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note_length = 0;\n    foreach ($notes as $note) {\n        if ($note\
    \ === 'o') {\n            $note_length += 4;\n        } elseif ($note === '|')\
    \ {\n            $result[] = $note_length;\n            $note_length = 0;\n  \
    \      } elseif ($note === '.') {\n            $note_length += 1;\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprv2uj5c1.php:34\n\
    Stack trace:\n#0 /tmp/tmprv2uj5c1.php(40): test()\n#1 {main}\n  thrown in /tmp/tmprv2uj5c1.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            $beats[] = $beat;\n          \
    \  $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n}\n\
    \n$music = 'o o| .| o| o| .| .| .| .| o o';\n$beats = parse_music($music);\nvar_dump($beats);\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(11) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(4)\n  [2]=>\n  int(0)\n\
    \  [3]=>\n  int(4)\n  [4]=>\n  int(4)\n  [5]=>\n  int(0)\n  [6]=>\n  int(0)\n\
    \  [7]=>\n  int(0)\n  [8]=>\n  int(0)\n  [9]=>\n  int(4)\n  [10]=>\n  int(4)\n\
    }\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkrpjptif.php:40\n\
    Stack trace:\n#0 /tmp/tmpkrpjptif.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpkrpjptif.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note_length = 4;\n    foreach ($notes as $note) {\n        if ($note\
    \ == 'o') {\n            $result[] = $note_length;\n        } elseif ($note ==\
    \ '|') {\n            $note_length /= 2;\n        } elseif ($note == '.') {\n\
    \            $result[] = $note_length;\n            $note_length = 4;\n      \
    \  }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp32gfkpkp.php:35\n\
    Stack trace:\n#0 /tmp/tmp32gfkpkp.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp32gfkpkp.php\
    \ on line 35\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            $beats[] = $beat;\n          \
    \  $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcdkeq8of.php:36\n\
    Stack trace:\n#0 /tmp/tmpcdkeq8of.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpcdkeq8of.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n         \
    \   case 'o':\n                $result[] = 4;\n                break;\n      \
    \      case 'o|':\n                $result[] = 2;\n                break;\n  \
    \          case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxe_eb67f.php:37\n\
    Stack trace:\n#0 /tmp/tmpxe_eb67f.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpxe_eb67f.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbdzrmvuu.php:33\n\
    Stack trace:\n#0 /tmp/tmpbdzrmvuu.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbdzrmvuu.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat = 4;\n        } elseif ($note == 'o|') {\n       \
    \     $beat = 2;\n        } elseif ($note == '.|') {\n            $beat = 1;\n\
    \        }\n        $beats[] = $beat;\n    }\n    return $beats;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzwr562qg.php:33\n\
    Stack trace:\n#0 /tmp/tmpzwr562qg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpzwr562qg.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            $beats[] = $beat;\n          \
    \  $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0mstbxex.php:36\n\
    Stack trace:\n#0 /tmp/tmp0mstbxex.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp0mstbxex.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $beats[] = 4;\n        } elseif ($note == 'o|') {\n            $beats[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $beats[] = 1;\n      \
    \  }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpaxxufibm.php:33\n\
    Stack trace:\n#0 /tmp/tmpaxxufibm.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpaxxufibm.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzyq13cog.php:33\n\
    Stack trace:\n#0 /tmp/tmpzyq13cog.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpzyq13cog.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o', 'o|', $music_string);\n\
    \    $music_string = str_replace('.', '.|', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|.|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|.', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|', 'o', $music_string);\n    $music_string = str_replace('.',\
    \ '', $music_string);\n    $music_string = str_replace('o', '4', $music_string);\n\
    \    $music_string = str_replace('|', ' ', $music_string);\n    $music_string\
    \ = trim($music_string);\n    $music_string = explode(' ', $music_string);\n \
    \   return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp76s7fvi_.php:32\n\
    Stack trace:\n#0 /tmp/tmp76s7fvi_.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp76s7fvi_.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpug4byxcf.php:33\n\
    Stack trace:\n#0 /tmp/tmpug4byxcf.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpug4byxcf.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $beats[] = 4;\n        } elseif ($note == 'o|') {\n            $beats[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $beats[] = 1;\n      \
    \  }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfrs4uqtp.php:33\n\
    Stack trace:\n#0 /tmp/tmpfrs4uqtp.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpfrs4uqtp.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n         \
    \   case 'o':\n                $result[] = 4;\n                break;\n      \
    \      case 'o|':\n                $result[] = 2;\n                break;\n  \
    \          case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfqul7l5o.php:37\n\
    Stack trace:\n#0 /tmp/tmpfqul7l5o.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpfqul7l5o.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o', 'o|', $music_string);\n\
    \    $music_string = str_replace('o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o', 'o', $music_string);\n    $music_string = str_replace('o|o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|o', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|o|o', 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|o|o|o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|o|o|o|o', 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o|o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o|o|o', 'o',\
    \ $music_string);\n    $music_string = str_replace('o|o|o|o|o|o|o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|o|o|o|o|o|o', 'o', $music_string);\n   \
    \ $music_string = str_replace('o|o|o|o|o|o|o|o|o|', 'o', $music_string);\n   \
    \ $music_string = str_replace('o|o|o|o|o|o|o|o|o', 'o', $music_string);\n   \n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  Unclosed '{' on line 11 in /tmp/tmpuokcydqa.php on line\
    \ 42\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n         \
    \   case 'o':\n                $beats[] = 4;\n                break;\n       \
    \     case 'o|':\n                $beats[] = 2;\n                break;\n    \
    \        case '.|':\n                $beats[] = 1;\n                break;\n \
    \       }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphq1zvk2j.php:37\n\
    Stack trace:\n#0 /tmp/tmphq1zvk2j.php(42): test()\n#1 {main}\n  thrown in /tmp/tmphq1zvk2j.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = [];\n    $music_array = str_split($music_string);\n\
    \    $music_array = array_map('trim', $music_array);\n    foreach ($music_array\
    \ as $key => $value) {\n        if ($value == 'o') {\n            $result[] =\
    \ 4;\n        } elseif ($value == 'o|') {\n            $result[] = 2;\n      \
    \  } elseif ($value == '.|') {\n            $result[] = 1;\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe5s0p2p1.php:34\n\
    Stack trace:\n#0 /tmp/tmpe5s0p2p1.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpe5s0p2p1.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace(' ', '', $music_string);\n\
    \    $music_string = str_replace('o', '4', $music_string);\n    $music_string\
    \ = str_replace('o|', '2', $music_string);\n    $music_string = str_replace('.|',\
    \ '1', $music_string);\n    $music_string = explode('|', $music_string);\n   \
    \ $music_string = array_map('intval', $music_string);\n    return $music_string;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpd7ylyw6g.php:26\n\
    Stack trace:\n#0 /tmp/tmpd7ylyw6g.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpd7ylyw6g.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpp_g22o9o.php:33\n\
    Stack trace:\n#0 /tmp/tmpp_g22o9o.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpp_g22o9o.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o', 'o|', $music_string);\n\
    \    $music_string = str_replace('o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o', 'o', $music_string);\n    $music_string = str_replace('o|o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|o', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|o|o', 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|o|o|o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|o|o|o|o', 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o|o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o|o|o', 'o',\
    \ $music_string);\n    $music_string = str_replace('o|o|o|o|o|o|o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|o|o|o|o|o|o', 'o', $music_string);\n   \
    \ $music_string = str_replace('o|o|o|o|o|o|o|o|o|', 'o', $music_string);\n   \
    \ $music_string = str_replace('o|o|o|o|o|o|o|o|o', 'o', $music_string);\n   \n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  Unclosed '{' on line 11 in /tmp/tmpthhfxged.php on line\
    \ 42\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $current_beat = 0;\n    foreach ($notes as $note) {\n        switch\
    \ ($note) {\n            case 'o':\n                $current_beat += 4;\n    \
    \            break;\n            case 'o|':\n                $current_beat +=\
    \ 2;\n                break;\n            case '.|':\n                $current_beat\
    \ += 1;\n                break;\n            case ' ':\n                $beats[]\
    \ = $current_beat;\n                $current_beat = 0;\n                break;\n\
    \        }\n    }\n    $beats[] = $current_beat;\n    return $beats;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnetju11x.php:41\n\
    Stack trace:\n#0 /tmp/tmpnetju11x.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpnetju11x.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp23927os0.php:33\n\
    Stack trace:\n#0 /tmp/tmp23927os0.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp23927os0.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxuzgtr7i.php:33\n\
    Stack trace:\n#0 /tmp/tmpxuzgtr7i.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpxuzgtr7i.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note = '';\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n   \
    \         $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_wvz10au.php:34\n\
    Stack trace:\n#0 /tmp/tmp_wvz10au.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp_wvz10au.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note_length = 0;\n    foreach ($notes as $note) {\n        if ($note\
    \ == 'o') {\n            $note_length += 4;\n        } elseif ($note == '|') {\n\
    \            $result[] = $note_length;\n            $note_length = 0;\n      \
    \  } elseif ($note == '.') {\n            $note_length += 1;\n        }\n    }\n\
    \    $result[] = $note_length;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_qh9ss0r.php:34\n\
    Stack trace:\n#0 /tmp/tmp_qh9ss0r.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp_qh9ss0r.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = [];\n    $notes = explode(' ', $music_string);\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o|') {\n            $result[] = 2;\n     \
    \   } elseif ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            $beats[] = $beat;\n          \
    \  $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx8qr8mzr.php:36\n\
    Stack trace:\n#0 /tmp/tmpx8qr8mzr.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpx8qr8mzr.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdhw8aedy.php:33\n\
    Stack trace:\n#0 /tmp/tmpdhw8aedy.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpdhw8aedy.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $beats[] = 4;\n        } elseif ($note == 'o|') {\n            $beats[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $beats[] = 1;\n      \
    \  }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptg5sw1mx.php:33\n\
    Stack trace:\n#0 /tmp/tmptg5sw1mx.php(38): test()\n#1 {main}\n  thrown in /tmp/tmptg5sw1mx.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat = 4;\n        } elseif ($note == 'o|') {\n       \
    \     $beat = 2;\n        } elseif ($note == '.|') {\n            $beat = 1;\n\
    \        }\n        $beats[] = $beat;\n    }\n    return $beats;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyfl2kwvq.php:33\n\
    Stack trace:\n#0 /tmp/tmpyfl2kwvq.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpyfl2kwvq.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note = '';\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n   \
    \         $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl1dyiduy.php:34\n\
    Stack trace:\n#0 /tmp/tmpl1dyiduy.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpl1dyiduy.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o', 'o|', $music_string);\n\
    \    $music_string = str_replace('.', '.|', $music_string);\n    $music_string\
    \ = str_replace('|', '', $music_string);\n    $music_string = str_replace(' ',\
    \ '', $music_string);\n    $music_string = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($music_string as $note) {\n        if ($note == 'o') {\n\
    \            $result[] = 4;\n        } elseif ($note == '.') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3sz56q_j.php:36\n\
    Stack trace:\n#0 /tmp/tmp3sz56q_j.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp3sz56q_j.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace(' ', '', $music_string);\n\
    \    $music_string = str_replace('o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('|', '', $music_string);\n    $music_string = str_replace('.',\
    \ '', $music_string);\n    $music_string = str_replace('o', '4', $music_string);\n\
    \    $music_string = str_replace('|', '2', $music_string);\n    $music_string\
    \ = str_replace('.', '1', $music_string);\n    $music_string = str_split($music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpoymeksy_.php:28\n\
    Stack trace:\n#0 /tmp/tmpoymeksy_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpoymeksy_.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace(' ', '', $music_string);\n\
    \    $music_string = str_replace('o', '4', $music_string);\n    $music_string\
    \ = str_replace('o|', '2', $music_string);\n    $music_string = str_replace('.|',\
    \ '1', $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_split($music_string);\n    $music_string = array_map('intval',\
    \ $music_string);\n    return $music_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7ng9ox9_.php:27\n\
    Stack trace:\n#0 /tmp/tmp7ng9ox9_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp7ng9ox9_.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            $beats[] = $beat;\n          \
    \  $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxae4ory0.php:36\n\
    Stack trace:\n#0 /tmp/tmpxae4ory0.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpxae4ory0.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat = 4;\n        } elseif ($note == 'o|') {\n       \
    \     $beat = 2;\n        } elseif ($note == '.|') {\n            $beat = 1;\n\
    \        }\n        $beats[] = $beat;\n    }\n    return $beats;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp13i9_wx8.php:33\n\
    Stack trace:\n#0 /tmp/tmp13i9_wx8.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp13i9_wx8.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            $beats[] = $beat;\n          \
    \  $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n}\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfsf1ygeg.php:35\n\
    Stack trace:\n#0 /tmp/tmpfsf1ygeg.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpfsf1ygeg.php\
    \ on line 35\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace(' ', '', $music_string);\n\
    \    $music_string = str_replace('o', 'o|', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  Unclosed '{' on line 11 in /tmp/tmpa6jdyh7k.php on line\
    \ 47\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        }\n        if ($note == ' ') {\n            $beats[] = $beat;\n     \
    \       $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp34xmne5m.php:37\n\
    Stack trace:\n#0 /tmp/tmp34xmne5m.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp34xmne5m.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat = 4;\n        } elseif ($note == 'o|') {\n       \
    \     $beat = 2;\n        } elseif ($note == '.|') {\n            $beat = 1;\n\
    \        }\n        $beats[] = $beat;\n    }\n    return $beats;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi1hwb373.php:33\n\
    Stack trace:\n#0 /tmp/tmpi1hwb373.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpi1hwb373.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            $beats[] = $beat;\n          \
    \  $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxgghfybs.php:36\n\
    Stack trace:\n#0 /tmp/tmpxgghfybs.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpxgghfybs.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace(' ', '', $music_string);\n\
    \    $music_string = str_replace('o', 'o|', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|', 'o', $music_string);\n    $music_string = str_replace('o|o',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o', 'o', $music_string);\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  Unclosed '{' on line 11 in /tmp/tmp9a8e1dcz.php on line\
    \ 47\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = explode(' ', $music_string);\n  \
    \  $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n\
    \            $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = explode(' ', $music_string);\n  \
    \  $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n\
    \            $result[] = 4;\n        } elseif ($note == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $result[] = 1;\n     \
    \   }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $result = [];\n    $notes = explode(' ', $music_string);\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $result[]\
    \ = 4;\n        } elseif ($note == 'o|') {\n            $result[] = 2;\n     \
    \   } elseif ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace(' ', '', $music_string);\n\
    \    $music_array = str_split($music_string);\n    $result = [];\n    foreach\
    \ ($music_array as $key => $value) {\n        if ($value == 'o') {\n         \
    \   $result[] = 4;\n        } elseif ($value == 'o|') {\n            $result[]\
    \ = 2;\n        } elseif ($value == '.|') {\n            $result[] = 1;\n    \
    \    }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplwtqdusj.php:34\n\
    Stack trace:\n#0 /tmp/tmplwtqdusj.php(39): test()\n#1 {main}\n  thrown in /tmp/tmplwtqdusj.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat = 4;\n        } elseif ($note == 'o|') {\n       \
    \     $beat = 2;\n        } elseif ($note == '.|') {\n            $beat = 1;\n\
    \        }\n        $result[] = $beat;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpamrmevxw.php:33\n\
    Stack trace:\n#0 /tmp/tmpamrmevxw.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpamrmevxw.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace(' ', '', $music_string);\n\
    \    $music_string = str_replace('o', '4', $music_string);\n    $music_string\
    \ = str_replace('o|', '2', $music_string);\n    $music_string = str_replace('.|',\
    \ '1', $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    return str_split($music_string);\n}\n\nfunction candidate(...$args) {\n \
    \   return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpga4iffh3.php:25\n\
    Stack trace:\n#0 /tmp/tmpga4iffh3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpga4iffh3.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n         \
    \   case 'o':\n                $result[] = 4;\n                break;\n      \
    \      case 'o|':\n                $result[] = 2;\n                break;\n  \
    \          case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzrw4z1dy.php:37\n\
    Stack trace:\n#0 /tmp/tmpzrw4z1dy.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpzrw4z1dy.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o', '4', $music_string);\n    $music_string\
    \ = str_replace('.', '1', $music_string);\n    $music_string = str_replace('|',\
    \ ' ', $music_string);\n    $music_string = str_replace('  ', ' ', $music_string);\n\
    \    $music_string = str_replace('  ', ' ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = str_replace('\
    \  ', ' ', $music_string);\n    $music_string = str_replace('  ', ' ', $music_string);\n\
    \    $music_string = str_replace('  ', ' ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = str_replace('\
    \  ', ' ', $music_string);\n    $music_string = str_replace('  ', ' ', $music_string);\n\
    \    $music_string = str_replace('  ', ' ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = str_replace('\
    \  ', ' ', $music_string);\n    $music_string = str_replace('  ', ' ', $music_string);\n\
    \    $music_string = str_replace('  ', ' ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = str_replace('\
    \  ', ' ', $music_string);\n    $music_string = str_replace('  ', ' ', $music_string);\n\
    \    $music_string = str_replace('  ', ' ', $music_string);\n    $music_string\
    \ = str_replace('  ', ' ', $music_string);\n    $music_string = str_replace('\
    \  ', ' ', $music_string);\n    $music_string = str_replace('  ', ' ', $music_string);\n\
    \    $music_string = str\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpvc2dabvj.php\
    \ on line 38\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o', 'o|', $music_string);\n\
    \    $music_string = str_replace('o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o', 'o', $music_string);\n    $music_string = str_replace('o|',\
    \ '4', $music_string);\n    $music_string = str_replace('.', '1', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace(' ', ',', $music_string);\n    $music_string = explode(',', $music_string);\n\
    \    return $music_string;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm4_8swvd.php:28\n\
    Stack trace:\n#0 /tmp/tmpm4_8swvd.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpm4_8swvd.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            array_push($beats, $beat);\n \
    \           $beat = 0;\n        }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm61vrxgv.php:36\n\
    Stack trace:\n#0 /tmp/tmpm61vrxgv.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpm61vrxgv.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o', 'o|', $music_string);\n\
    \    $music_string = str_replace('o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o', 'o', $music_string);\n    $music_string = str_replace('o|o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|o', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|o|o', 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|o|o|o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|o|o|o|o', 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o|o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o|o|o', 'o',\
    \ $music_string);\n    $music_string = str_replace('o|o|o|o|o|o|o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|o|o|o|o|o|o', 'o', $music_string);\n   \
    \ $music_string = str_replace('o|o|o|o|o|o|o|o|o|', 'o', $music_string);\n   \
    \ $music_string = str_replace('o|o|o|o|o|o|o|o|o', 'o', $music_string);\n   \n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  Unclosed '{' on line 11 in /tmp/tmps_854hki.php on line\
    \ 42\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat += 4;\n        } elseif ($note == 'o|') {\n      \
    \      $beat += 2;\n        } elseif ($note == '.|') {\n            $beat += 1;\n\
    \        } elseif ($note == ' ') {\n            $beats[] = $beat;\n          \
    \  $beat = 0;\n        }\n    }\n    $beats[] = $beat;\n    return $beats;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyu93rac4.php:36\n\
    Stack trace:\n#0 /tmp/tmpyu93rac4.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpyu93rac4.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $beat = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beat = 4;\n        } elseif ($note == 'o|') {\n       \
    \     $beat = 2;\n        } elseif ($note == '.|') {\n            $beat = 1;\n\
    \        }\n        $beats[] = $beat;\n    }\n    return $beats;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjsbpskk4.php:33\n\
    Stack trace:\n#0 /tmp/tmpjsbpskk4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpjsbpskk4.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note_length = 0;\n    foreach ($notes as $note) {\n        if ($note\
    \ === 'o') {\n            $note_length += 4;\n        } elseif ($note === '|')\
    \ {\n            $result[] = $note_length;\n            $note_length = 0;\n  \
    \      } elseif ($note === '.') {\n            $note_length += 1;\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplevptugp.php:34\n\
    Stack trace:\n#0 /tmp/tmplevptugp.php(40): test()\n#1 {main}\n  thrown in /tmp/tmplevptugp.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o', '4', $music_string);\n\
    \    $music_string = str_replace('o|', '2', $music_string);\n    $music_string\
    \ = str_replace('.|', '1', $music_string);\n    $music_string = str_replace('\
    \ ', ',', $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('.', '', $music_string);\n    $music_string =\
    \ str_replace('o', '', $music_string);\n    $music_string = str_replace('|', '',\
    \ $music_string);\n    $music_string = str_replace('.', '', $music_string);\n\
    \    $music_string = str_replace('o', '', $music_string);\n    $music_string =\
    \ str_replace('|', '', $music_string);\n    $music_string = str_replace('.', '',\
    \ $music_string);\n    $music_string = str_replace('o', '', $music_string);\n\
    \    $music_string = str_replace('|', '', $music_string);\n    $music_string =\
    \ str_replace('.', '', $music_string);\n    $music_string = str_replace('o', '',\
    \ $music_string);\n    $music_string = str_replace('|', '', $music_string);\n\
    \    $music_string = str_replace('.', '', $music_string);\n    $music_string =\
    \ str_replace('o', '', $music_string);\n    $music_string = str_replace('|', '',\
    \ $music_string);\n    $music_string = str_replace('.', '', $music_string);\n\
    \    $music_string = str_replace('o', '', $music_string);\n    $music_string =\
    \ str_replace('|', '', $music_string);\n    $music_string = str_replace('.', '',\
    \ $music_string);\n    $music_string = str_replace('o', '', $music_string);\n\
    \    $music_string = str\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmp8_ohc0lf.php\
    \ on line 38\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $music_string = str_replace('o', 'o|', $music_string);\n\
    \    $music_string = str_replace('o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o', 'o', $music_string);\n    $music_string = str_replace('o|o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|o', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|o|o', 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|o|o|o|o|', 'o', $music_string);\n    $music_string\
    \ = str_replace('o|o|o|o|o|o', 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o|o|o|',\
    \ 'o', $music_string);\n    $music_string = str_replace('o|o|o|o|o|o|o', 'o',\
    \ $music_string);\n    $music_string = str_replace('o|o|o|o|o|o|o|o|', 'o', $music_string);\n\
    \    $music_string = str_replace('o|o|o|o|o|o|o|o', 'o', $music_string);\n   \
    \ $music_string = str_replace('o|o|o|o|o|o|o|o|o|', 'o', $music_string);\n   \
    \ $music_string = str_replace('o|o|o|o|o|o|o|o|o', 'o', $music_string);\n   \n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  Unclosed '{' on line 11 in /tmp/tmphkgm4wck.php on line\
    \ 42\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $beats = 0;\n    foreach ($notes as $note) {\n        if ($note ==\
    \ 'o') {\n            $beats += 4;\n        } elseif ($note == 'o|') {\n     \
    \       $beats += 2;\n        } elseif ($note == '.|') {\n            $beats +=\
    \ 1;\n        } elseif ($note == ' ') {\n            $result[] = $beats;\n   \
    \         $beats = 0;\n        }\n    }\n    $result[] = $beats;\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppqmol2tu.php:36\n\
    Stack trace:\n#0 /tmp/tmppqmol2tu.php(43): test()\n#1 {main}\n  thrown in /tmp/tmppqmol2tu.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n         \
    \   case 'o':\n                $beats[] = 4;\n                break;\n       \
    \     case 'o|':\n                $beats[] = 2;\n                break;\n    \
    \        case '.|':\n                $beats[] = 1;\n                break;\n \
    \       }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6sde969t.php:37\n\
    Stack trace:\n#0 /tmp/tmp6sde969t.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6sde969t.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    $current_beat = 0;\n    foreach ($notes as $note) {\n        if ($note\
    \ == 'o') {\n            $current_beat += 4;\n        } elseif ($note == 'o|')\
    \ {\n            $current_beat += 2;\n        } elseif ($note == '.|') {\n   \
    \         $current_beat += 1;\n        } elseif ($note == ' ') {\n           \
    \ $beats[] = $current_beat;\n            $current_beat = 0;\n        }\n    }\n\
    \    $beats[] = $current_beat;\n    return $beats;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpytum1nq6.php:36\n\
    Stack trace:\n#0 /tmp/tmpytum1nq6.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpytum1nq6.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $beats\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $beats[] = 4;\n        } elseif ($note == 'o|') {\n            $beats[]\
    \ = 2;\n        } elseif ($note == '.|') {\n            $beats[] = 1;\n      \
    \  }\n    }\n    return $beats;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3fgs4liu.php:33\n\
    Stack trace:\n#0 /tmp/tmp3fgs4liu.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp3fgs4liu.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ list of integers corresponding to how many beats does each\n// not last.\n//\
    \ Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction\
    \ parse_music($music_string) {\n    $notes = str_split($music_string);\n    $result\
    \ = [];\n    $note_length = 4;\n    foreach ($notes as $note) {\n        if ($note\
    \ == 'o') {\n            $result[] = $note_length;\n        } elseif ($note ==\
    \ 'o|') {\n            $result[] = $note_length / 2;\n        } elseif ($note\
    \ == '.|') {\n            $result[] = $note_length / 4;\n        }\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzadmlrdx.php:34\n\
    Stack trace:\n#0 /tmp/tmpzadmlrdx.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpzadmlrdx.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
