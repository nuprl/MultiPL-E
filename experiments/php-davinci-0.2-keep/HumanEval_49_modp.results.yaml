name: HumanEval_49_modp
language: php
results:
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp414m1i8w.php:31\n\
    Stack trace:\n#0 /tmp/tmp414m1i8w.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp414m1i8w.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $lastp = $p;\n        if (($p & 1)\
    \ == 1) {\n            $r = ($r * $b) % 1000000007;\n        }\n        $p >>=\
    \ 1;\n        $b = ($b * $b) % 1000000007;\n    }\n    return $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu7jmqzr5.php:32\n\
    Stack trace:\n#0 /tmp/tmpu7jmqzr5.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpu7jmqzr5.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpihzxu3w_.php:31\n\
    Stack trace:\n#0 /tmp/tmpihzxu3w_.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpihzxu3w_.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$b = $n;\n\twhile ($p > 0) {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % 1000000007;\n\
    \t\t}\n\t\t$p >>= 1;\n\t\t$b = ($b * $b) % 1000000007;\n\t}\n\treturn $r;\n}\n\
    \nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpiq7w4rir.php:31\n\
    Stack trace:\n#0 /tmp/tmpiq7w4rir.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpiq7w4rir.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe_dng8gh.php:31\n\
    Stack trace:\n#0 /tmp/tmpe_dng8gh.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpe_dng8gh.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw5otdwua.php:31\n\
    Stack trace:\n#0 /tmp/tmpw5otdwua.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpw5otdwua.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r = ($r\
    \ * $b) % $p;\n        }\n        $b = ($b * $b) % $p;\n        $n >>= 1;\n  \
    \  }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplwspj70p.php:31\n\
    Stack trace:\n#0 /tmp/tmplwspj70p.php(40): test()\n#1 {main}\n  thrown in /tmp/tmplwspj70p.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $lastp = $p;\n        if (($p & 1)\
    \ == 1) {\n            $r = ($r * $b) % $n;\n        }\n        $p = $p >> 1;\n\
    \        $b = ($b * $b) % $n;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9i2674yk.php:32\n\
    Stack trace:\n#0 /tmp/tmp9i2674yk.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp9i2674yk.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $lastp = $p;\n        if (($p & 1)\
    \ == 1) {\n            $r = ($r * $b) % $n;\n        }\n        $p = $p >> 1;\n\
    \        $b = ($b * $b) % $n;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9fuhj5j8.php:32\n\
    Stack trace:\n#0 /tmp/tmp9fuhj5j8.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp9fuhj5j8.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$n = $n % $p;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $n) %\
    \ $p;\n\t\t}\n\t\t$n = $n >> 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $r;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p) {\n        if ($p & 1) {\n            $r = ($r *\
    \ $b) % 101;\n        }\n        $b = ($b * $b) % 101;\n        $p >>= 1;\n  \
    \  }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_t3po897.php:31\n\
    Stack trace:\n#0 /tmp/tmp_t3po897.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_t3po897.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp28yqsxm7.php:31\n\
    Stack trace:\n#0 /tmp/tmp28yqsxm7.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp28yqsxm7.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$n = $n % $p;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $n) %\
    \ $p;\n\t\t}\n\t\t$n = $n >> 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $r;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$n = (int)$n;\n\
    \t$p = (int)$p;\n\tif ($n == 0) {\n\t\treturn 1;\n\t}\n\tif ($n % 2 == 0) {\n\t\
    \treturn modp(($n / 2) % $p, $p) ** 2 % $p;\n\t}\n\treturn ($n % $p) * modp(($n\
    \ - 1) % $p, $p) % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp51llk7uk.php:31\n\
    Stack trace:\n#0 /tmp/tmp51llk7uk.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp51llk7uk.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($n > 0) {\n        if (($n & 1) == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $b = ($b * $b) % $p;\n        $n >>=\
    \ 1;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptucxpgqm.php:31\n\
    Stack trace:\n#0 /tmp/tmptucxpgqm.php(40): test()\n#1 {main}\n  thrown in /tmp/tmptucxpgqm.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % $n;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % $n;\n  \
    \  }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptk_tg5tk.php:31\n\
    Stack trace:\n#0 /tmp/tmptk_tg5tk.php(40): test()\n#1 {main}\n  thrown in /tmp/tmptk_tg5tk.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv87czu22.php:31\n\
    Stack trace:\n#0 /tmp/tmpv87czu22.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpv87czu22.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppeh1jm6l.php:31\n\
    Stack trace:\n#0 /tmp/tmppeh1jm6l.php(40): test()\n#1 {main}\n  thrown in /tmp/tmppeh1jm6l.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $x = $p & 1;\n        if ($x) {\n\
    \            $r = ($r * $b) % 1000000007;\n        }\n        $b = ($b * $b) %\
    \ 1000000007;\n        $p = $p >> 1;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_l220nya.php:32\n\
    Stack trace:\n#0 /tmp/tmp_l220nya.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp_l220nya.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) {\n\t\treturn 1;\n\t}\n\tif ($n % 2 == 0) {\n\t\treturn modp(($n / 2) % $p,\
    \ $p) * modp(($n / 2) % $p, $p) % $p;\n\t}\n\treturn modp(($n / 2) % $p, $p) *\
    \ modp(($n / 2) % $p, $p) * $n % $p;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkmg0xgt5.php:29\n\
    Stack trace:\n#0 /tmp/tmpkmg0xgt5.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpkmg0xgt5.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        $x = modp($n\
    \ / 2, $p);\n        return ($x * $x) % $p;\n    } else {\n        $x = modp($n\
    \ - 1, $p);\n        return ($x * $n) % $p;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9xtcbuf2.php:32\n\
    Stack trace:\n#0 /tmp/tmp9xtcbuf2.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp9xtcbuf2.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    $r = modp($n / 2, $p);\n    $r = ($r\
    \ * $r) % $p;\n    if ($n % 2 == 1) {\n        $r = ($r * 2) % $p;\n    }\n  \
    \  return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$b = $n;\n\twhile ($p > 0) {\n\t\t$lastp = $p;\n\t\tif ($p % 2 == 1) {\n\t\t\
    \t$r = ($r * $b) % $p;\n\t\t}\n\t\t$p = (int)($p / 2);\n\t\t$b = ($b * $b) % $lastp;\n\
    \t}\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5bf7ndv2.php:32\n\
    Stack trace:\n#0 /tmp/tmp5bf7ndv2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp5bf7ndv2.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $lastp = $p;\n        if (($p & 1)\
    \ == 1) {\n            $r = ($r * $b) % $n;\n        }\n        $p = $p >> 1;\n\
    \        $b = ($b * $b) % $n;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm4kx_0o0.php:32\n\
    Stack trace:\n#0 /tmp/tmpm4kx_0o0.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpm4kx_0o0.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnxe7tmwv.php:31\n\
    Stack trace:\n#0 /tmp/tmpnxe7tmwv.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpnxe7tmwv.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r = ($r\
    \ * $b) % $p;\n        }\n        $b = ($b * $b) % $p;\n        $n >>= 1;\n  \
    \  }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1ff6kvif.php:31\n\
    Stack trace:\n#0 /tmp/tmp1ff6kvif.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp1ff6kvif.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $lastp = $p;\n        if (($p & 1)\
    \ == 1) {\n            $r = ($r * $b) % $n;\n        }\n        $p = $p >> 1;\n\
    \        $b = ($b * $b) % $n;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsg4dhz0o.php:32\n\
    Stack trace:\n#0 /tmp/tmpsg4dhz0o.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpsg4dhz0o.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        $m = modp($n\
    \ / 2, $p);\n        return ($m * $m) % $p;\n    } else {\n        $m = modp(($n\
    \ - 1) / 2, $p);\n        return ($m * $m * $n) % $p;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpan80obwc.php:32\n\
    Stack trace:\n#0 /tmp/tmpan80obwc.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpan80obwc.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($n > 0) {\n        if (($n & 1) == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $b = ($b * $b) % $p;\n        $n >>=\
    \ 1;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbcvgr2k8.php:31\n\
    Stack trace:\n#0 /tmp/tmpbcvgr2k8.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpbcvgr2k8.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($n > 0) {\n        if (($n & 1) == 1) {\n          \
    \  $r = ($r * $b) % $p;\n        }\n        $b = ($b * $b) % $p;\n        $n >>=\
    \ 1;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwk_ybwdv.php:31\n\
    Stack trace:\n#0 /tmp/tmpwk_ybwdv.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpwk_ybwdv.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$b = $n;\n\twhile ($p > 0) {\n\t\t$x = $p & 1;\n\t\tif ($x) $r = ($r * $b) %\
    \ 101;\n\t\t$b = ($b * $b) % 101;\n\t\t$p = $p >> 1;\n\t}\n\treturn $r;\n}\n\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpekik8g78.php:30\n\
    Stack trace:\n#0 /tmp/tmpekik8g78.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpekik8g78.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7ej1ik2d.php:31\n\
    Stack trace:\n#0 /tmp/tmp7ej1ik2d.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp7ej1ik2d.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    $r = modp($n >> 1, $p);\n    $r = ($r\
    \ * $r) % $p;\n    if ($n & 1) {\n        $r = ($r * 2) % $p;\n    }\n    return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) {\n\t\treturn 1;\n\t}\n\tif ($n % 2 == 0) {\n\t\treturn modp(($n / 2) % $p,\
    \ $p) * modp(($n / 2) % $p, $p) % $p;\n\t}\n\telse {\n\t\treturn modp(($n / 2)\
    \ % $p, $p) * modp(($n / 2) % $p, $p) * $n % $p;\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3aq5eva8.php:31\n\
    Stack trace:\n#0 /tmp/tmp3aq5eva8.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp3aq5eva8.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$b = $n;\n\twhile ($p > 0) {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % 1000000007;\n\
    \t\t}\n\t\t$p >>= 1;\n\t\t$b = ($b * $b) % 1000000007;\n\t}\n\treturn $r;\n}\n\
    \nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpawad858f.php:31\n\
    Stack trace:\n#0 /tmp/tmpawad858f.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpawad858f.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$n = $n % $p;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $n) %\
    \ $p;\n\t\t}\n\t\t$n = $n >> 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $r;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $lastp = $p;\n        if (($p & 1)\
    \ == 1) {\n            $r = ($r * $b) % $n;\n        }\n        $p = $p >> 1;\n\
    \        $b = ($b * $b) % $n;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphhtj9fnv.php:32\n\
    Stack trace:\n#0 /tmp/tmphhtj9fnv.php(41): test()\n#1 {main}\n  thrown in /tmp/tmphhtj9fnv.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyex9gt7l.php:31\n\
    Stack trace:\n#0 /tmp/tmpyex9gt7l.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpyex9gt7l.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$b = $n;\n\twhile ($p > 0) {\n\t\t$lastp = $p;\n\t\tif ($p & 1) {\n\t\t\t$r\
    \ = ($r * $b) % $lastp;\n\t\t}\n\t\t$p >>= 1;\n\t\t$b = ($b * $b) % $lastp;\n\t\
    }\n\treturn $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvl0ztadz.php:32\n\
    Stack trace:\n#0 /tmp/tmpvl0ztadz.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpvl0ztadz.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn76fih98.php:31\n\
    Stack trace:\n#0 /tmp/tmpn76fih98.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpn76fih98.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % $p;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % $p;\n  \
    \  }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmphceekm4o.php:21\n\
    Stack trace:\n#0 /tmp/tmphceekm4o.php(27): modp()\n#1 /tmp/tmphceekm4o.php(31):\
    \ candidate()\n#2 /tmp/tmphceekm4o.php(40): test()\n#3 {main}\n  thrown in /tmp/tmphceekm4o.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9gbihqfv.php:31\n\
    Stack trace:\n#0 /tmp/tmp9gbihqfv.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp9gbihqfv.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % $p;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % $p;\n  \
    \  }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpv63_cr2q.php:21\n\
    Stack trace:\n#0 /tmp/tmpv63_cr2q.php(27): modp()\n#1 /tmp/tmpv63_cr2q.php(31):\
    \ candidate()\n#2 /tmp/tmpv63_cr2q.php(40): test()\n#3 {main}\n  thrown in /tmp/tmpv63_cr2q.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % $p;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % $p;\n  \
    \  }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpdrjaca9d.php:21\n\
    Stack trace:\n#0 /tmp/tmpdrjaca9d.php(27): modp()\n#1 /tmp/tmpdrjaca9d.php(31):\
    \ candidate()\n#2 /tmp/tmpdrjaca9d.php(40): test()\n#3 {main}\n  thrown in /tmp/tmpdrjaca9d.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    $r = modp($n >> 1, $p);\n    $r = ($r\
    \ * $r) % $p;\n    if ($n & 1) {\n        $r = ($r * 2) % $p;\n    }\n    return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3ib1vyep.php:31\n\
    Stack trace:\n#0 /tmp/tmp3ib1vyep.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp3ib1vyep.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r = ($r\
    \ * $b) % $p;\n        }\n        $b = ($b * $b) % $p;\n        $n >>= 1;\n  \
    \  }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnnvks837.php:31\n\
    Stack trace:\n#0 /tmp/tmpnnvks837.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpnnvks837.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        $x = modp($n\
    \ / 2, $p);\n        return ($x * $x) % $p;\n    } else {\n        $x = modp($n\
    \ - 1, $p);\n        return ($x * $n) % $p;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr7ym8669.php:32\n\
    Stack trace:\n#0 /tmp/tmpr7ym8669.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpr7ym8669.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$b = $n;\n\twhile ($p > 0) {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % 101;\n\
    \t\t}\n\t\t$p >>= 1;\n\t\t$b = ($b * $b) % 101;\n\t}\n\treturn $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9172uhkb.php:31\n\
    Stack trace:\n#0 /tmp/tmp9172uhkb.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp9172uhkb.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$n = $n % $p;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $n) %\
    \ $p;\n\t\t}\n\t\t$n = $n >> 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $r;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r = ($r\
    \ * $b) % $p;\n        }\n        $b = ($b * $b) % $p;\n        $n >>= 1;\n  \
    \  }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq7ejvyj4.php:31\n\
    Stack trace:\n#0 /tmp/tmpq7ejvyj4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpq7ejvyj4.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        return modp(($n\
    \ / 2) % $p, $p) ** 2 % $p;\n    } else {\n        return modp(($n - 1) % $p,\
    \ $p) * modp(($n + 1) % $p, $p) % $p;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $n;\n\
    \    }\n    if ($n % 2 == 0) {\n        $t = modp($n / 2, $p);\n        return\
    \ ($t * $t) % $p;\n    }\n    return ($n * modp($n - 1, $p)) % $p;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp246rmcqf.php:33\n\
    Stack trace:\n#0 /tmp/tmp246rmcqf.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp246rmcqf.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $lastp = $p;\n        if (($p & 1)\
    \ == 1) {\n            $r = ($r * $b) % $n;\n        }\n        $p = $p >> 1;\n\
    \        $b = ($b * $b) % $n;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpoxxb8dhx.php:32\n\
    Stack trace:\n#0 /tmp/tmpoxxb8dhx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpoxxb8dhx.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ < 0) {\n        $n = $n + $p;\n    }\n    if ($n == 0) {\n        return 1;\n\
    \    }\n    if ($n == 1) {\n        return 2;\n    }\n    $r = 2;\n    $n = $n\
    \ - 1;\n    while ($n > 0) {\n        $r = ($r * 2) % $p;\n        $n = $n - 1;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $r = ($r * $b) % 1000000007;\n  \
    \      }\n        $p >>= 1;\n        $b = ($b * $b) % 1000000007;\n    }\n   \
    \ return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvzddmbhz.php:34\n\
    Stack trace:\n#0 /tmp/tmpvzddmbhz.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpvzddmbhz.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_j1v60ez.php:31\n\
    Stack trace:\n#0 /tmp/tmp_j1v60ez.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_j1v60ez.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpya4oounf.php:31\n\
    Stack trace:\n#0 /tmp/tmpya4oounf.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpya4oounf.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $lastp = $p;\n        if (($p & 1)\
    \ == 1) {\n            $r = ($r * $b) % $n;\n        }\n        $p = $p >> 1;\n\
    \        $b = ($b * $b) % $n;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr6_yj66z.php:32\n\
    Stack trace:\n#0 /tmp/tmpr6_yj66z.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpr6_yj66z.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r = ($r\
    \ * $b) % $p;\n        }\n        $b = ($b * $b) % $p;\n        $n >>= 1;\n  \
    \  }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp84vqemfj.php:31\n\
    Stack trace:\n#0 /tmp/tmp84vqemfj.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp84vqemfj.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        return modp(($n\
    \ / 2) % $p, $p) ** 2 % $p;\n    } else {\n        return ($n % $p) * modp(($n\
    \ - 1) % $p, $p) % $p;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8u30ghrh.php:30\n\
    Stack trace:\n#0 /tmp/tmp8u30ghrh.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8u30ghrh.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbi5j4rie.php:31\n\
    Stack trace:\n#0 /tmp/tmpbi5j4rie.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpbi5j4rie.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        $x = modp($n\
    \ / 2, $p);\n        return ($x * $x) % $p;\n    } else {\n        $x = modp($n\
    \ - 1, $p);\n        return ($x * $n) % $p;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3m75bo39.php:32\n\
    Stack trace:\n#0 /tmp/tmp3m75bo39.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp3m75bo39.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % $p;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % $p;\n  \
    \  }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpjinlsfc6.php:21\n\
    Stack trace:\n#0 /tmp/tmpjinlsfc6.php(27): modp()\n#1 /tmp/tmpjinlsfc6.php(31):\
    \ candidate()\n#2 /tmp/tmpjinlsfc6.php(40): test()\n#3 {main}\n  thrown in /tmp/tmpjinlsfc6.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $result\
    \ = 1;\n    $base = $n % $p;\n    $exponent = $n;\n    while ($exponent > 0) {\n\
    \        if ($exponent & 1) {\n            $result = ($result * $base) % $p;\n\
    \        }\n        $exponent >>= 1;\n        $base = ($base * $base) % $p;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuq8sr5cy.php:32\n\
    Stack trace:\n#0 /tmp/tmpuq8sr5cy.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpuq8sr5cy.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        $t = modp($n\
    \ / 2, $p);\n        return ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n\
    \ - 1, $p) % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsfm41hci.php:30\n\
    Stack trace:\n#0 /tmp/tmpsfm41hci.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpsfm41hci.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        return modp(($n\
    \ / 2) % $p, $p) ** 2 % $p;\n    } else {\n        return ($n % $p) * modp(($n\
    \ - 1) % $p, $p) % $p;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphr2wa46n.php:30\n\
    Stack trace:\n#0 /tmp/tmphr2wa46n.php(38): test()\n#1 {main}\n  thrown in /tmp/tmphr2wa46n.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $lastp = $p;\n        if (($p & 1)\
    \ == 1) {\n            $r = ($r * $b) % $n;\n        }\n        $p = $p >> 1;\n\
    \        $b = ($b * $b) % $n;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsx8eljzp.php:32\n\
    Stack trace:\n#0 /tmp/tmpsx8eljzp.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpsx8eljzp.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$n = $n % $p;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $n) %\
    \ $p;\n\t\t}\n\t\t$n = $n >> 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $r;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpieg1k1y0.php:31\n\
    Stack trace:\n#0 /tmp/tmpieg1k1y0.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpieg1k1y0.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$b = $n;\n\twhile ($p > 0) {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % 1000000007;\n\
    \t\t}\n\t\t$p >>= 1;\n\t\t$b = ($b * $b) % 1000000007;\n\t}\n\treturn $r;\n}\n\
    \nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpseckuffw.php:31\n\
    Stack trace:\n#0 /tmp/tmpseckuffw.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpseckuffw.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r = ($r\
    \ * $b) % $p;\n        }\n        $b = ($b * $b) % $p;\n        $n >>= 1;\n  \
    \  }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuf5is07p.php:31\n\
    Stack trace:\n#0 /tmp/tmpuf5is07p.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpuf5is07p.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        $x = modp($n\
    \ / 2, $p);\n        return ($x * $x) % $p;\n    } else {\n        $x = modp($n\
    \ - 1, $p);\n        return ($x * $n) % $p;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1w42sy9d.php:32\n\
    Stack trace:\n#0 /tmp/tmp1w42sy9d.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp1w42sy9d.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $n = (int)$n;\n\
    \    $p = (int)$p;\n    if ($n == 0) {\n        return 1;\n    }\n    if ($n %\
    \ 2 == 0) {\n        return modp(($n / 2) % $p, $p) ** 2 % $p;\n    } else {\n\
    \        return ($n % $p) * modp(($n - 1) % $p, $p) % $p;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvmcdjstv.php:32\n\
    Stack trace:\n#0 /tmp/tmpvmcdjstv.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvmcdjstv.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        return modp(($n\
    \ / 2) % $p, $p) ** 2 % $p;\n    } else {\n        return ($n % $p) * modp(($n\
    \ - 1) % $p, $p) % $p;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0j5h0awi.php:30\n\
    Stack trace:\n#0 /tmp/tmp0j5h0awi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp0j5h0awi.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$n = $n % $p;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $n) %\
    \ $p;\n\t\t}\n\t\t$n = $n >> 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $r;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$b = $n;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $b) % $p;\n\
    \t\t}\n\t\t$b = ($b * $b) % $p;\n\t\t$n >>= 1;\n\t}\n\treturn $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5sun24m5.php:31\n\
    Stack trace:\n#0 /tmp/tmp5sun24m5.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5sun24m5.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r = ($r\
    \ * $b) % $p;\n        }\n        $b = ($b * $b) % $p;\n        $n >>= 1;\n  \
    \  }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptt9up0ct.php:31\n\
    Stack trace:\n#0 /tmp/tmptt9up0ct.php(40): test()\n#1 {main}\n  thrown in /tmp/tmptt9up0ct.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp36f23_he.php:31\n\
    Stack trace:\n#0 /tmp/tmp36f23_he.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp36f23_he.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        $x = modp($n\
    \ / 2, $p);\n        return ($x * $x) % $p;\n    } else {\n        $x = modp($n\
    \ - 1, $p);\n        return ($x * $n) % $p;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpym02pogw.php:32\n\
    Stack trace:\n#0 /tmp/tmpym02pogw.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpym02pogw.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$n = $n % $p;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $n) %\
    \ $p;\n\t\t}\n\t\t$n = $n >> 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $r;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy27zpht4.php:31\n\
    Stack trace:\n#0 /tmp/tmpy27zpht4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpy27zpht4.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % $n;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % $n;\n  \
    \  }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplmrzuuzf.php:31\n\
    Stack trace:\n#0 /tmp/tmplmrzuuzf.php(40): test()\n#1 {main}\n  thrown in /tmp/tmplmrzuuzf.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    while ($n > 0) {\n        if ($n & 1) {\n            $r = ($r * $n) % $p;\n\
    \        }\n        $n = $n >> 1;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb225tnl8.php:30\n\
    Stack trace:\n#0 /tmp/tmpb225tnl8.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpb225tnl8.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $result\
    \ = 1;\n    $base = $n % $p;\n    $exponent = $n;\n    while ($exponent > 0) {\n\
    \        if ($exponent & 1) {\n            $result = ($result * $base) % $p;\n\
    \        }\n        $exponent >>= 1;\n        $base = ($base * $base) % $p;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk1g1mojt.php:32\n\
    Stack trace:\n#0 /tmp/tmpk1g1mojt.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpk1g1mojt.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzr1s5c89.php:31\n\
    Stack trace:\n#0 /tmp/tmpzr1s5c89.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpzr1s5c89.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    $r = 1;\n    while ($n > 0) {\n     \
    \   if ($n & 1) {\n            $r = ($r * $r) % $p;\n        }\n        $n >>=\
    \ 1;\n        $r = ($r * $r) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4t0d21ho.php:33\n\
    Stack trace:\n#0 /tmp/tmp4t0d21ho.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp4t0d21ho.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp79isg_p5.php:31\n\
    Stack trace:\n#0 /tmp/tmp79isg_p5.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp79isg_p5.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $lastp = $p;\n        if (($p & 1)\
    \ == 1) {\n            $r = ($r * $b) % 1000000007;\n        }\n        $p >>=\
    \ 1;\n        $b = ($b * $b) % 1000000007;\n    }\n    return $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl_dz0cs6.php:32\n\
    Stack trace:\n#0 /tmp/tmpl_dz0cs6.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpl_dz0cs6.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvdl3k68s.php:31\n\
    Stack trace:\n#0 /tmp/tmpvdl3k68s.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvdl3k68s.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbvf9lumz.php:31\n\
    Stack trace:\n#0 /tmp/tmpbvf9lumz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpbvf9lumz.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp82k55ug4.php:31\n\
    Stack trace:\n#0 /tmp/tmp82k55ug4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp82k55ug4.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        $x = modp($n\
    \ / 2, $p);\n        return ($x * $x) % $p;\n    } else {\n        $x = modp($n\
    \ - 1, $p);\n        return ($x * $n) % $p;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl128bx5g.php:32\n\
    Stack trace:\n#0 /tmp/tmpl128bx5g.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpl128bx5g.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    while ($n > 0) {\n        if ($n & 1) {\n            $r = ($r * $n) % $p;\n\
    \        }\n        $n = $n >> 1;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0a783gdk.php:30\n\
    Stack trace:\n#0 /tmp/tmp0a783gdk.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp0a783gdk.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7_ub1fee.php:31\n\
    Stack trace:\n#0 /tmp/tmp7_ub1fee.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp7_ub1fee.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $n;\n\
    \    }\n    if ($n % 2 == 0) {\n        return modp(($n / 2) * ($n / 2), $p);\n\
    \    }\n    return ($n % $p) * modp(($n - 1) / 2, $p) * modp(($n - 1) / 2, $p);\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8551ly7k.php:31\n\
    Stack trace:\n#0 /tmp/tmp8551ly7k.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp8551ly7k.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $lastp = $p;\n        if (($p & 1)\
    \ == 1) {\n            $r = ($r * $b) % $n;\n        }\n        $p = $p >> 1;\n\
    \        $b = ($b * $b) % $n;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpygz2m8xo.php:32\n\
    Stack trace:\n#0 /tmp/tmpygz2m8xo.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpygz2m8xo.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_022vdln.php:31\n\
    Stack trace:\n#0 /tmp/tmp_022vdln.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_022vdln.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$b = $n;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $b) % $p;\n\
    \t\t}\n\t\t$b = ($b * $b) % $p;\n\t\t$n >>= 1;\n\t}\n\treturn $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpo1p88p1v.php:31\n\
    Stack trace:\n#0 /tmp/tmpo1p88p1v.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpo1p88p1v.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpff2yr7tg.php:31\n\
    Stack trace:\n#0 /tmp/tmpff2yr7tg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpff2yr7tg.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        $t = modp($n\
    \ / 2, $p);\n        return ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n\
    \ - 1, $p) % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqzdfykq1.php:30\n\
    Stack trace:\n#0 /tmp/tmpqzdfykq1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqzdfykq1.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % $p;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % $p;\n  \
    \  }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpfp1_9t6t.php:21\n\
    Stack trace:\n#0 /tmp/tmpfp1_9t6t.php(27): modp()\n#1 /tmp/tmpfp1_9t6t.php(31):\
    \ candidate()\n#2 /tmp/tmpfp1_9t6t.php(40): test()\n#3 {main}\n  thrown in /tmp/tmpfp1_9t6t.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) {\n\t\treturn 1;\n\t}\n\tif ($n % 2 == 0) {\n\t\t$t = modp($n / 2, $p);\n\
    \t\treturn ($t * $t) % $p;\n\t}\n\treturn ($n % $p) * modp($n - 1, $p) % $p;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf_cw6vvj.php:30\n\
    Stack trace:\n#0 /tmp/tmpf_cw6vvj.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpf_cw6vvj.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % $p;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % $p;\n  \
    \  }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpp8uedxbj.php:21\n\
    Stack trace:\n#0 /tmp/tmpp8uedxbj.php(27): modp()\n#1 /tmp/tmpp8uedxbj.php(31):\
    \ candidate()\n#2 /tmp/tmpp8uedxbj.php(40): test()\n#3 {main}\n  thrown in /tmp/tmpp8uedxbj.php\
    \ on line 21\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl91lbj1y.php:31\n\
    Stack trace:\n#0 /tmp/tmpl91lbj1y.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpl91lbj1y.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    $r = 1;\n    $b = 2;\n    while ($n >\
    \ 0) {\n        if ($n & 1) {\n            $r = ($r * $b) % $p;\n        }\n \
    \       $n >>= 1;\n        $b = ($b * $b) % $p;\n    }\n    return $r;\n}\n\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfl52plpv.php:31\n\
    Stack trace:\n#0 /tmp/tmpfl52plpv.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpfl52plpv.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r = ($r\
    \ * $b) % $p;\n        }\n        $b = ($b * $b) % $p;\n        $n >>= 1;\n  \
    \  }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzr8ges1d.php:31\n\
    Stack trace:\n#0 /tmp/tmpzr8ges1d.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpzr8ges1d.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr9lxxx9d.php:31\n\
    Stack trace:\n#0 /tmp/tmpr9lxxx9d.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpr9lxxx9d.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $lastp = $p;\n        if (($p & 1)\
    \ == 1) {\n            $r = ($r * $b) % $n;\n        }\n        $p >>= 1;\n  \
    \      $b = ($b * $b) % $n;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxmfkhovb.php:32\n\
    Stack trace:\n#0 /tmp/tmpxmfkhovb.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpxmfkhovb.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv_kqnqqm.php:31\n\
    Stack trace:\n#0 /tmp/tmpv_kqnqqm.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpv_kqnqqm.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        $x = modp($n\
    \ / 2, $p);\n        return ($x * $x) % $p;\n    } else {\n        $x = modp($n\
    \ - 1, $p);\n        return ($x * $n) % $p;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwakh6q56.php:32\n\
    Stack trace:\n#0 /tmp/tmpwakh6q56.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpwakh6q56.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        return modp(($n\
    \ / 2) % $p, $p) ** 2 % $p;\n    } else {\n        return ($n % $p) * modp(($n\
    \ - 1) % $p, $p) % $p;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppvjxvjfz.php:30\n\
    Stack trace:\n#0 /tmp/tmppvjxvjfz.php(38): test()\n#1 {main}\n  thrown in /tmp/tmppvjxvjfz.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf_u5bu4p.php:31\n\
    Stack trace:\n#0 /tmp/tmpf_u5bu4p.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpf_u5bu4p.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $r = ($r * $b) % $p;\n        $p\
    \ = $p - 1;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx2q3pg5q.php:28\n\
    Stack trace:\n#0 /tmp/tmpx2q3pg5q.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpx2q3pg5q.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $lastp = $p;\n        if (($p & 1)\
    \ == 1) {\n            $r = ($r * $b) % $n;\n        }\n        $p = $p >> 1;\n\
    \        $b = ($b * $b) % $n;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp28pal026.php:32\n\
    Stack trace:\n#0 /tmp/tmp28pal026.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp28pal026.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$n = $n % $p;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $n) %\
    \ $p;\n\t\t}\n\t\t$n = $n >> 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $r;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp79fotsil.php:31\n\
    Stack trace:\n#0 /tmp/tmp79fotsil.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp79fotsil.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    $r = 1;\n    $b = $n;\n    while ($p\
    \ > 0) {\n        if ($p & 1) {\n            $r = ($r * $b) % $n;\n        }\n\
    \        $p >>= 1;\n        $b = ($b * $b) % $n;\n    }\n    return $r;\n}\n\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7fndx4xn.php:34\n\
    Stack trace:\n#0 /tmp/tmp7fndx4xn.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp7fndx4xn.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        return modp(($n\
    \ / 2) % $p, $p) ** 2 % $p;\n    } else {\n        return modp(($n - 1) % $p,\
    \ $p) * modp(($n + 1) % $p, $p) % $p;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % $n;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % $n;\n  \
    \  }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyanh01i0.php:31\n\
    Stack trace:\n#0 /tmp/tmpyanh01i0.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpyanh01i0.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxd4xo5p8.php:31\n\
    Stack trace:\n#0 /tmp/tmpxd4xo5p8.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpxd4xo5p8.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$b = $n;\n\twhile ($p > 0) {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % $n;\n\
    \t\t}\n\t\t$p >>= 1;\n\t\t$b = ($b * $b) % $n;\n\t}\n\treturn $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpve6w92j2.php:31\n\
    Stack trace:\n#0 /tmp/tmpve6w92j2.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpve6w92j2.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $lastp = $p;\n        if (($p & 1)\
    \ == 1) {\n            $r = ($r * $b) % $n;\n        }\n        $p = $p >> 1;\n\
    \        $b = ($b * $b) % $n;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr_on8c_x.php:32\n\
    Stack trace:\n#0 /tmp/tmpr_on8c_x.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpr_on8c_x.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjvl6zyli.php:31\n\
    Stack trace:\n#0 /tmp/tmpjvl6zyli.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpjvl6zyli.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnko3d4uc.php:31\n\
    Stack trace:\n#0 /tmp/tmpnko3d4uc.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpnko3d4uc.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$b = $n;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $b) % $p;\n\
    \t\t}\n\t\t$b = ($b * $b) % $p;\n\t\t$n >>= 1;\n\t}\n\treturn $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmparcfz76z.php:31\n\
    Stack trace:\n#0 /tmp/tmparcfz76z.php(40): test()\n#1 {main}\n  thrown in /tmp/tmparcfz76z.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $n = (int)$n;\n\
    \    $p = (int)$p;\n    if ($n == 0) {\n        return 1;\n    }\n    if ($n %\
    \ 2 == 0) {\n        $t = modp($n / 2, $p);\n        return ($t * $t) % $p;\n\
    \    }\n    return ($n % $p) * modp($n - 1, $p) % $p;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphd6jl81l.php:32\n\
    Stack trace:\n#0 /tmp/tmphd6jl81l.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphd6jl81l.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $lastp = $p;\n        if (($p & 1)\
    \ == 1) {\n            $r = ($r * $b) % $n;\n        }\n        $p >>= 1;\n  \
    \      $b = ($b * $b) % $n;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppxae5le3.php:32\n\
    Stack trace:\n#0 /tmp/tmppxae5le3.php(41): test()\n#1 {main}\n  thrown in /tmp/tmppxae5le3.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) {\n\t\treturn 1;\n\t}\n\tif ($n % 2 == 0) {\n\t\treturn modp(($n / 2) * ($n\
    \ / 2), $p);\n\t}\n\treturn ($n % $p) * modp(($n - 1) / 2, $p) * modp(($n - 1)\
    \ / 2, $p);\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppo1hbbsk.php:31\n\
    Stack trace:\n#0 /tmp/tmppo1hbbsk.php(40): test()\n#1 {main}\n  thrown in /tmp/tmppo1hbbsk.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$n = $n % $p;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $n) %\
    \ $p;\n\t\t}\n\t\t$n = $n >> 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $r;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    $r = modp($n / 2, $p);\n    $r = ($r\
    \ * $r) % $p;\n    if ($n % 2 == 1) {\n        $r = ($r * 2) % $p;\n    }\n  \
    \  return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $lastp = $p;\n        if (($p & 1)\
    \ == 1) {\n            $r = ($r * $b) % 1000000007;\n        }\n        $p >>=\
    \ 1;\n        $b = ($b * $b) % 1000000007;\n    }\n    return $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkifj7k3k.php:32\n\
    Stack trace:\n#0 /tmp/tmpkifj7k3k.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpkifj7k3k.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) {\n\t\treturn 1;\n\t}\n\tif ($n % 2 == 0) {\n\t\treturn modp(($n / 2) % $p,\
    \ $p) ** 2 % $p;\n\t}\n\treturn ($n % $p) * modp(($n - 1) % $p, $p) % $p;\n}\n\
    \nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbodgqb6o.php:29\n\
    Stack trace:\n#0 /tmp/tmpbodgqb6o.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpbodgqb6o.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb_sj3jqx.php:31\n\
    Stack trace:\n#0 /tmp/tmpb_sj3jqx.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpb_sj3jqx.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2b2cyzw3.php:31\n\
    Stack trace:\n#0 /tmp/tmp2b2cyzw3.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp2b2cyzw3.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        $x = modp($n\
    \ / 2, $p);\n        return ($x * $x) % $p;\n    } else {\n        $x = modp($n\
    \ - 1, $p);\n        return ($x * $n) % $p;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp29qgeb14.php:32\n\
    Stack trace:\n#0 /tmp/tmp29qgeb14.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp29qgeb14.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $lastp = $p;\n        if (($p & 1)\
    \ == 1) {\n            $r = ($r * $b) % 1000000007;\n        }\n        $p >>=\
    \ 1;\n        $b = ($b * $b) % 1000000007;\n    }\n    return $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx9gury0i.php:32\n\
    Stack trace:\n#0 /tmp/tmpx9gury0i.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpx9gury0i.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    while ($n > 0) {\n        if ($n & 1) {\n            $r = ($r * $n) % $p;\n\
    \        }\n        $n = $n >> 1;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9pa_ambz.php:30\n\
    Stack trace:\n#0 /tmp/tmp9pa_ambz.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp9pa_ambz.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $lastp = $p;\n        if (($p & 1)\
    \ == 1) {\n            $r = ($r * $b) % 1000000007;\n        }\n        $p >>=\
    \ 1;\n        $b = ($b * $b) % 1000000007;\n    }\n    return $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvpx7zg08.php:32\n\
    Stack trace:\n#0 /tmp/tmpvpx7zg08.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpvpx7zg08.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    while ($n > 0) {\n        if ($n & 1) {\n            $r = ($r * $n) % $p;\n\
    \        }\n        $n = $n >> 1;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6qsdq839.php:30\n\
    Stack trace:\n#0 /tmp/tmp6qsdq839.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6qsdq839.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % $n;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % $n;\n  \
    \  }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqxml52ml.php:31\n\
    Stack trace:\n#0 /tmp/tmpqxml52ml.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqxml52ml.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppers2ohd.php:31\n\
    Stack trace:\n#0 /tmp/tmppers2ohd.php(40): test()\n#1 {main}\n  thrown in /tmp/tmppers2ohd.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        $t = modp($n\
    \ / 2, $p);\n        return ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n\
    \ - 1, $p) % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2lbk51lw.php:30\n\
    Stack trace:\n#0 /tmp/tmp2lbk51lw.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2lbk51lw.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $res =\
    \ 1;\n    $n %= $p;\n    while ($n > 0) {\n        if ($n & 1) {\n           \
    \ $res = ($res * $n) % $p;\n        }\n        $n = ($n * $n) % $p;\n    }\n \
    \   return $res;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5npsd46u.php:31\n\
    Stack trace:\n#0 /tmp/tmp5npsd46u.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5npsd46u.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp65ajidjg.php:31\n\
    Stack trace:\n#0 /tmp/tmp65ajidjg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp65ajidjg.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$b = $n;\n\twhile ($p > 0) {\n\t\tif ($p & 1) {\n\t\t\t$r = ($r * $b) % 1000000007;\n\
    \t\t}\n\t\t$p >>= 1;\n\t\t$b = ($b * $b) % 1000000007;\n\t}\n\treturn $r;\n}\n\
    \nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8ngxs1dc.php:31\n\
    Stack trace:\n#0 /tmp/tmp8ngxs1dc.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp8ngxs1dc.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n %= $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r =\
    \ ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n) %\
    \ $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$n = $n % $p;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $n) %\
    \ $p;\n\t\t}\n\t\t$n = $n >> 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $r;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx007slkn.php:31\n\
    Stack trace:\n#0 /tmp/tmpx007slkn.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpx007slkn.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r = ($r\
    \ * $b) % $p;\n        }\n        $b = ($b * $b) % $p;\n        $n >>= 1;\n  \
    \  }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi1nxdk_g.php:31\n\
    Stack trace:\n#0 /tmp/tmpi1nxdk_g.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpi1nxdk_g.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    $result = 1;\n    $b = $n;\n    while\
    \ ($p > 0) {\n        if ($p & 1) {\n            $result = ($result * $b) % $p;\n\
    \        }\n        $p >>= 1;\n        $b = ($b * $b) % $p;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpa1cc283p.php:24\n\
    Stack trace:\n#0 /tmp/tmpa1cc283p.php(30): modp()\n#1 /tmp/tmpa1cc283p.php(34):\
    \ candidate()\n#2 /tmp/tmpa1cc283p.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpa1cc283p.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        return modp(($n\
    \ / 2) % $p, $p) ** 2 % $p;\n    } else {\n        return ($n % $p) * modp(($n\
    \ - 1) % $p, $p) % $p;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3smybdvd.php:30\n\
    Stack trace:\n#0 /tmp/tmp3smybdvd.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp3smybdvd.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnbo4b53_.php:31\n\
    Stack trace:\n#0 /tmp/tmpnbo4b53_.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpnbo4b53_.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\t$r = 1;\n\
    \t$n = $n % $p;\n\twhile ($n > 0) {\n\t\tif ($n & 1) {\n\t\t\t$r = ($r * $n) %\
    \ $p;\n\t\t}\n\t\t$n = $n >> 1;\n\t\t$n = ($n * $n) % $p;\n\t}\n\treturn $r;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv2gm24es.php:31\n\
    Stack trace:\n#0 /tmp/tmpv2gm24es.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpv2gm24es.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $lastp = $p;\n        // Divide $p\
    \ by 2, ignoring remainder.\n        $p = (int)($p / 2);\n        if (($lastp\
    \ % 2) == 1) {\n            $r = ($r * $b) % 101;\n        }\n        $b = ($b\
    \ * $b) % 101;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n \
    \   return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppc9gpufz.php:33\n\
    Stack trace:\n#0 /tmp/tmppc9gpufz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmppc9gpufz.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $lastp = $p;\n        $lastb = $b;\n\
    \        $q = (int)($p / 2);\n        $b = (int)($b * $b) % $n;\n        if ($p\
    \ != 2 * $q) {\n            $r = (int)($r * $b) % $n;\n        }\n        $p =\
    \ $q;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp85yl1yj9.php:34\n\
    Stack trace:\n#0 /tmp/tmp85yl1yj9.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp85yl1yj9.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n\tif ($n ==\
    \ 0) {\n\t\treturn 1;\n\t}\n\tif ($n % 2 == 0) {\n\t\t$t = modp($n / 2, $p);\n\
    \t\treturn ($t * $t) % $p;\n\t}\n\treturn ($n % $p) * modp($n - 1, $p) % $p;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqpxazv71.php:30\n\
    Stack trace:\n#0 /tmp/tmpqpxazv71.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqpxazv71.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_9o552dd.php:31\n\
    Stack trace:\n#0 /tmp/tmp_9o552dd.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_9o552dd.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $lastp = $p;\n        if (($p & 1)\
    \ == 1) {\n            $r = ($r * $b) % $n;\n        }\n        $p = $p >> 1;\n\
    \        $b = ($b * $b) % $n;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7ks6kisx.php:32\n\
    Stack trace:\n#0 /tmp/tmp7ks6kisx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp7ks6kisx.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $lastp = $p;\n        if (($p & 1)\
    \ == 1) {\n            $r = ($r * $b) % 1000000007;\n        }\n        $p >>=\
    \ 1;\n        $b = ($b * $b) % 1000000007;\n    }\n    return $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfu8toy9p.php:32\n\
    Stack trace:\n#0 /tmp/tmpfu8toy9p.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpfu8toy9p.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n == 1) {\n        return $n;\n\
    \    }\n    $r = 1;\n    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n\
    \            $r = ($r * $b) % $p;\n        }\n        $p >>= 1;\n        $b =\
    \ ($b * $b) % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpm50i4j0p.php:27\n\
    Stack trace:\n#0 /tmp/tmpm50i4j0p.php(33): modp()\n#1 /tmp/tmpm50i4j0p.php(37):\
    \ candidate()\n#2 /tmp/tmpm50i4j0p.php(46): test()\n#3 {main}\n  thrown in /tmp/tmpm50i4j0p.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 1000000007;\n        }\n        $p >>= 1;\n        $b = ($b * $b) %\
    \ 1000000007;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7d_eqddt.php:31\n\
    Stack trace:\n#0 /tmp/tmp7d_eqddt.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp7d_eqddt.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzyo1g1w3.php:31\n\
    Stack trace:\n#0 /tmp/tmpzyo1g1w3.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpzyo1g1w3.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        $t = modp($n\
    \ / 2, $p);\n        return ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n\
    \ - 1, $p) % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqn80yokw.php:30\n\
    Stack trace:\n#0 /tmp/tmpqn80yokw.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqn80yokw.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    if ($n\
    \ == 0) {\n        return 1;\n    }\n    if ($n % 2 == 0) {\n        $t = modp($n\
    \ / 2, $p);\n        return ($t * $t) % $p;\n    }\n    return ($n % $p) * modp($n\
    \ - 1, $p) % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa60smt13.php:30\n\
    Stack trace:\n#0 /tmp/tmpa60smt13.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpa60smt13.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        $lastp = $p;\n        if (($p & 1)\
    \ == 1) {\n            $r = ($r * $b) % $n;\n        }\n        $p = $p >> 1;\n\
    \        $b = ($b * $b) % $n;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_uzh5yix.php:32\n\
    Stack trace:\n#0 /tmp/tmp_uzh5yix.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp_uzh5yix.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $b = $n;\n    while ($p > 0) {\n        if ($p & 1) {\n            $r = ($r\
    \ * $b) % 101;\n        }\n        $p >>= 1;\n        $b = ($b * $b) % 101;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwjsktb0q.php:31\n\
    Stack trace:\n#0 /tmp/tmpwjsktb0q.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpwjsktb0q.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    while ($n > 0) {\n        if ($n & 1) {\n            $r = ($r * $n) % $p;\n\
    \        }\n        $n = $n >> 1;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmply00vlj1.php:30\n\
    Stack trace:\n#0 /tmp/tmply00vlj1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmply00vlj1.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3,\
    \ 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3,\
    \ 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp($n, $p) {\n    $r = 1;\n\
    \    $n = $n % $p;\n    while ($n > 0) {\n        if ($n & 1) {\n            $r\
    \ = ($r * $n) % $p;\n        }\n        $n = $n >> 1;\n        $n = ($n * $n)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
