name: HumanEval_112_reverse_delete
language: php
results:
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode('', $s);\n    $s = str_split($s);\n    $s_rev = array_reverse($s);\n\
    \    if ($s === $s_rev) {\n        return [implode('', $s), true];\n    } else\
    \ {\n        return [implode('', $s), false];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result = str_split($result);\n    $result_reverse = array_reverse($result);\n\
    \    $result_reverse = implode('', $result_reverse);\n    if ($result_reverse\
    \ == $result) {\n        return [$result_reverse, true];\n    } else {\n     \
    \   return [$result_reverse, false];\n    }\n}\n\nprint_r(reverse_delete(\"abcde\"\
    , \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => dcb\n    [1] => \n)\nArray\n(\n    [0] => fedca\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => \n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphiwphx34.php:39\n\
    Stack trace:\n#0 /tmp/tmphiwphx34.php(50): test()\n#1 {main}\n  thrown in /tmp/tmphiwphx34.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $letter) {\n        if (!in_array($letter, $c)) {\n            $result[]\
    \ = $letter;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    $result\
    \ = implode('', $result);\n    $result_reverse = implode('', $result_reverse);\n\
    \    if ($result == $result_reverse) {\n        return [$result, true];\n    }\
    \ else {\n        return [$result, false];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $value) {\n        if (!in_array($value, $c)) {\n            $result\
    \ .= $value;\n        }\n    }\n    return [$result, $result == strrev($result)];\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $char) {\n        if (!in_array($char, $c)) {\n            $result[]\
    \ = $char;\n        }\n    }\n    $result = implode('', $result);\n    return\
    \ [$result, $result == strrev($result)];\n}\nfunction candidate(...$args) {\n\
    \    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $char) {\n        if (!in_array($char, $c)) {\n            $result[]\
    \ = $char;\n        }\n    }\n    $result = implode('', $result);\n    return\
    \ [$result, $result == strrev($result)];\n}\nfunction candidate(...$args) {\n\
    \    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result_reverse\
    \ = strrev($result);\n    if ($result == $result_reverse) {\n        return [$result,\
    \ true];\n    } else {\n        return [$result, false];\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $char) {\n        if (!in_array($char, $c)) {\n            $result[]\
    \ = $char;\n        }\n    }\n    $result = implode('', $result);\n    return\
    \ [$result, $result == strrev($result)];\n}\nfunction candidate(...$args) {\n\
    \    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode('', $s);\n    return [$s, $s === strrev($s)];\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $value) {\n        if (!in_array($value, $c)) {\n            $result\
    \ .= $value;\n        }\n    }\n    $result = str_split($result);\n    $reverse\
    \ = array_reverse($result);\n    $result = implode('', $result);\n    $reverse\
    \ = implode('', $reverse);\n    if ($result == $reverse) {\n        return [$result,\
    \ true];\n    } else {\n        return [$result, false];\n    }\n}\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($c,\
    \ $s[$i]) === false) {\n            $result .= $s[$i];\n        }\n    }\n   \
    \ return [$result, $result === strrev($result)];\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $new_s = [];\n    foreach\
    \ ($s as $char) {\n        if (!in_array($char, $c)) {\n            $new_s[] =\
    \ $char;\n        }\n    }\n    $new_s = implode('', $new_s);\n    $is_palindrome\
    \ = $new_s == strrev($new_s);\n    return [$new_s, $is_palindrome];\n}\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    for($i\
    \ = 0; $i < count($s); $i++){\n        if(!in_array($s[$i], $c)){\n          \
    \  $result .= $s[$i];\n        }\n    }\n    $result = str_split($result);\n \
    \   $result_reverse = array_reverse($result);\n    $result = implode($result);\n\
    \    $result_reverse = implode($result_reverse);\n    if($result == $result_reverse){\n\
    \        return [$result, true];\n    }\n    return [$result, false];\n}\n\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result = str_split($result);\n    $result_reverse = array_reverse($result);\n\
    \    $result_reverse = implode('', $result_reverse);\n    if ($result_reverse\
    \ == $result) {\n        return [$result_reverse, true];\n    } else {\n     \
    \   return [$result_reverse, false];\n    }\n}\nprint_r(reverse_delete(\"abcde\"\
    , \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => dcb\n    [1] => \n)\nArray\n(\n    [0] => fedca\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => \n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2c_vhd8t.php:38\n\
    Stack trace:\n#0 /tmp/tmp2c_vhd8t.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp2c_vhd8t.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result = str_split($result);\n    $result_reverse = array_reverse($result);\n\
    \    $result_reverse = implode('', $result_reverse);\n    if ($result_reverse\
    \ == $result) {\n        return [$result_reverse, true];\n    } else {\n     \
    \   return [$result_reverse, false];\n    }\n}\nprint_r(reverse_delete(\"abcde\"\
    , \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => dcb\n    [1] => \n)\nArray\n(\n    [0] => fedca\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => \n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp16w0z2ju.php:38\n\
    Stack trace:\n#0 /tmp/tmp16w0z2ju.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp16w0z2ju.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    return [$result, $result == strrev($result)];\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result_reverse\
    \ = strrev($result);\n    if ($result == $result_reverse) {\n        return [$result,\
    \ true];\n    } else {\n        return [$result, false];\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $res = '';\n    foreach ($s\
    \ as $v) {\n        if (!in_array($v, $c)) {\n            $res .= $v;\n      \
    \  }\n    }\n    $res = str_split($res);\n    $res_rev = array_reverse($res);\n\
    \    return [implode('', $res), $res === $res_rev];\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $char) {\n        if (!in_array($char, $c)) {\n            $result[]\
    \ = $char;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $reverse = array_reverse($result);\n    if ($result\
    \ == $reverse) {\n        return [$result, true];\n    } else {\n        return\
    \ [$result, false];\n    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfd_pq02g.php:35\n\
    Stack trace:\n#0 /tmp/tmpfd_pq02g.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpfd_pq02g.php\
    \ on line 35\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode($result);\n   \
    \ $result = str_split($result);\n    $reverse = array_reverse($result);\n    $reverse\
    \ = implode($reverse);\n    $result = implode($result);\n    if ($result == $reverse)\
    \ {\n        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode('', $s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode('', $s);\n    return [$s, $s == strrev($s)];\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_405lyhu.php:26\n\
    Stack trace:\n#0 /tmp/tmp_405lyhu.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_405lyhu.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpsl4m951y.php\
    \ on line 60\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result = str_split($result);\n    $result_reverse = array_reverse($result);\n\
    \    $result_reverse = implode('', $result_reverse);\n    $result = implode('',\
    \ $result);\n    if ($result == $result_reverse) {\n        return [$result, true];\n\
    \    } else {\n        return [$result, false];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $reverse\
    \ = strrev($result);\n    if ($result == $reverse) {\n        return [$result,\
    \ true];\n    } else {\n        return [$result, false];\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = \"\";\n    foreach\
    \ ($s as $value) {\n        if (!in_array($value, $c)) {\n            $result\
    \ .= $value;\n        }\n    }\n    return [$result, $result == strrev($result)];\n\
    }\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n  $s\
    \ = str_split($s);\n  $c = str_split($c);\n  $new_s = [];\n  foreach($s as $char){\n\
    \    if(!in_array($char, $c)){\n      $new_s[] = $char;\n    }\n  }\n  $new_s\
    \ = implode($new_s);\n  $new_s_reverse = strrev($new_s);\n  if($new_s === $new_s_reverse){\n\
    \    return [$new_s, true];\n  }\n  return [$new_s, false];\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = \"\";\n    foreach\
    \ ($s as $char) {\n        if (!in_array($char, $c)) {\n            $result .=\
    \ $char;\n        }\n    }\n    return array($result, $result == strrev($result));\n\
    }\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $result = \"\";\n    for($i = 0; $i < strlen($s); $i++){\n        if(strpos($c,\
    \ $s[$i]) === false){\n            $result .= $s[$i];\n        }\n    }\n    return\
    \ array($result, $result == strrev($result));\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if(!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $reverse = array_reverse($result);\n    $reverse\
    \ = implode('', $reverse);\n    $result = implode('', $result);\n    return [$result,\
    \ $result == $reverse];\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result .= $value;\n        }\n    }\n    $result = str_split($result);\n  \
    \  $reverse = array_reverse($result);\n    $result = implode('', $result);\n \
    \   $reverse = implode('', $reverse);\n    if ($result == $reverse) {\n      \
    \  return [$result, true];\n    } else {\n        return [$result, false];\n \
    \   }\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $char) {\n        if (!in_array($char, $c)) {\n            $result[]\
    \ = $char;\n        }\n    }\n    $result = implode($result);\n    $result = [$result,\
    \ $result == strrev($result)];\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result = str_split($result);\n    $result_reverse = array_reverse($result);\n\
    \    $result_reverse = implode('', $result_reverse);\n    if ($result_reverse\
    \ == $result) {\n        return [$result_reverse, true];\n    } else {\n     \
    \   return [$result_reverse, false];\n    }\n}\nprint_r(reverse_delete(\"abcde\"\
    , \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => dcb\n    [1] => \n)\nArray\n(\n    [0] => fedca\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => \n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0dwbq7jv.php:38\n\
    Stack trace:\n#0 /tmp/tmp0dwbq7jv.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp0dwbq7jv.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = \"\";\n    for($i\
    \ = 0; $i < count($s); $i++){\n        if(!in_array($s[$i], $c)){\n          \
    \  $result .= $s[$i];\n        }\n    }\n    $result = str_split($result);\n \
    \   $result2 = \"\";\n    for($i = count($result) - 1; $i >= 0; $i--){\n     \
    \   $result2 .= $result[$i];\n    }\n    return array($result2, $result2 == implode(\"\
    \", $result));\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp07xcbnex.php:32\n\
    Stack trace:\n#0 /tmp/tmp07xcbnex.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp07xcbnex.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $reverse = strrev($result);\n    if ($result == $reverse) {\n        return\
    \ [$result, true];\n    } else {\n        return [$result, false];\n    }\n}\n\
    function candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"\
    b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $c = array_flip($c);\n   \
    \ foreach ($s as $key => $value) {\n        if (isset($c[$value])) {\n       \
    \     unset($s[$key]);\n        }\n    }\n    $s = implode($s);\n    $s = str_split($s);\n\
    \    $s = array_reverse($s);\n    $s = implode($s);\n    $s = str_split($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = implode($s);\n    if\
    \ ($s == $s) {\n        return [$s, true];\n    } else {\n        return [$s,\
    \ false];\n    }\n}\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplob6okj4.php:43\n\
    Stack trace:\n#0 /tmp/tmplob6okj4.php(54): test()\n#1 {main}\n  thrown in /tmp/tmplob6okj4.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result = str_split($result);\n    $result_reverse = array_reverse($result);\n\
    \    $result_reverse = implode('', $result_reverse);\n    if ($result_reverse\
    \ == $result) {\n        return [$result_reverse, true];\n    } else {\n     \
    \   return [$result_reverse, false];\n    }\n}\nprint_r(reverse_delete(\"abcde\"\
    , \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => dcb\n    [1] => \n)\nArray\n(\n    [0] => fedca\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => \n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_22__faw.php:38\n\
    Stack trace:\n#0 /tmp/tmp_22__faw.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp_22__faw.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $letter) {\n        if (!in_array($letter, $c)) {\n            $result[]\
    \ = $letter;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    if\
    \ ($result === $result_reverse) {\n        return [implode('', $result), true];\n\
    \    } else {\n        return [implode('', $result), false];\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = \"\";\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result .= $value;\n        }\n    }\n    $result = str_split($result);\n  \
    \  $result_reverse = array_reverse($result);\n    if ($result == $result_reverse)\
    \ {\n        return [implode($result), true];\n    } else {\n        return [implode($result),\
    \ false];\n    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $result = [];\n    $result[0] = str_replace(str_split($c), '', $s);\n    $result[1]\
    \ = $result[0] == strrev($result[0]);\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $char) {\n        if (!in_array($char, $c)) {\n            $result .=\
    \ $char;\n        }\n    }\n    return [$result, $result === strrev($result)];\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode('', $s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode('', $s);\n    return [$s, $s == strrev($s)];\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe2lzsjq8.php:26\n\
    Stack trace:\n#0 /tmp/tmpe2lzsjq8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpe2lzsjq8.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode('', $s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode('', $s);\n    return [$s, $s == strrev($s)];\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5iy80nww.php:26\n\
    Stack trace:\n#0 /tmp/tmp5iy80nww.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5iy80nww.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $result = \"\";\n    $s = str_split($s);\n    $c = str_split($c);\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result .= $value;\n        }\n    }\n    $result = str_split($result);\n  \
    \  $result_reverse = array_reverse($result);\n    $result = implode(\"\", $result);\n\
    \    $result_reverse = implode(\"\", $result_reverse);\n    if ($result == $result_reverse)\
    \ {\n        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n  $s\
    \ = str_split($s);\n  $c = str_split($c);\n  $res = [];\n  foreach($s as $v){\n\
    \    if(!in_array($v, $c)){\n      $res[] = $v;\n    }\n  }\n  $res = implode('',\
    \ $res);\n  $res_rev = strrev($res);\n  if($res == $res_rev){\n    return [$res,\
    \ true];\n  }\n  return [$res, false];\n}\n\nfunction candidate(...$args) {\n\
    \    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode($result);\n   \
    \ $result = str_split($result);\n    $reverse = array_reverse($result);\n    if\
    \ ($result == $reverse) {\n        return [implode($result), true];\n    } else\
    \ {\n        return [implode($result), false];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n  $s\
    \ = str_split($s);\n  $c = str_split($c);\n  $s = array_diff($s, $c);\n  $s =\
    \ implode($s);\n  $s = str_split($s);\n  $s = array_reverse($s);\n  $s = implode($s);\n\
    \  $s = str_split($s);\n  $s = array_reverse($s);\n  $s = implode($s);\n  $s =\
    \ str_split($s);\n  $s = array_reverse($s);\n  $s = implode($s);\n  $s = str_split($s);\n\
    \  $s = array_reverse($s);\n  $s = implode($s);\n  $s = str_split($s);\n  $s =\
    \ array_reverse($s);\n  $s = implode($s);\n  $s = str_split($s);\n  $s = array_reverse($s);\n\
    \  $s = implode($s);\n  $s = str_split($s);\n  $s = array_reverse($s);\n  $s =\
    \ implode($s);\n  $s = str_split($s);\n  $s = array_reverse($s);\n  $s = implode($s);\n\
    \  $s = str_split($s);\n  $s = array_reverse($s);\n  $s = implode($s);\n  $s =\
    \ str_split($s);\n  $s = array_reverse($s);\n  $s = implode($s);\n  $s = str_split($s);\n\
    \  $s = array_reverse($s);\n  $s = implode($s);\n  $s = str_split($s);\n  $s =\
    \ array_reverse($s);\n  $s = implode($s);\n  $s = str_split($s);\n  $s = array_reverse($s);\n\
    \  $s = implode($s);\n  $s = str_split($s);\n  $s = array_reverse($s);\n  $s =\
    \ implode($s);\n  $s = str_split($s);\n  $s = array_\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmp_03qin1e.php\
    \ on line 60\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $char) {\n        if (!in_array($char, $c)) {\n            $result .=\
    \ $char;\n        }\n    }\n    return [$result, $result === strrev($result)];\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode('', $s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode('', $s);\n    $s = str_split($s);\n    $c = implode('', $c);\n\
    \    $c = str_split($c);\n    $c = array_reverse($c);\n    $c = implode('', $c);\n\
    \    $c = str_split($c);\n    $s = implode('', $s);\n    $c = implode('', $c);\n\
    \    $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode('', $s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode('', $s);\n    $s = str_split($s);\n    $c = implode('', $c);\n\
    \    $c = str_split($c);\n    $c = array_reverse($c);\n    $c = implode('', $c);\n\
    \    $c = str_split($c);\n    $s = implode('', $s);\n    $c = implode('', $c);\n\
    \    $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode('', $s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode('', $s);\n    $s = str_split($s);\n    $c = implode('', $c);\n\
    \    $c = str_split($c);\n    $c = array_reverse($c);\n    $c = implode('', $c);\n\
    \    $c = str_split($c);\n    $s = implode('', $s);\n   \nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  Unclosed '{' on line 11 in /tmp/tmph1ut3phc.php on line\
    \ 73\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $palindrome = $result == strrev($result) ? true : false;\n    return [$result,\
    \ $palindrome];\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = \"\";\n    foreach\
    \ ($s as $char) {\n        if (!in_array($char, $c)) {\n            $result .=\
    \ $char;\n        }\n    }\n    return [$result, $result == strrev($result)];\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $palindrome = true;\n    for ($i = 0; $i < strlen($result) / 2; $i++) {\n\
    \        if ($result[$i] != $result[strlen($result) - $i - 1]) {\n           \
    \ $palindrome = false;\n            break;\n        }\n    }\n    return [$result,\
    \ $palindrome];\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    return [implode($result), $result == array_reverse($result)];\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = \"\";\n    foreach\
    \ ($s as $char) {\n        if (!in_array($char, $c)) {\n            $result .=\
    \ $char;\n        }\n    }\n    return [$result, $result == strrev($result)];\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $letter) {\n        if (!in_array($letter, $c)) {\n            $result[]\
    \ = $letter;\n        }\n    }\n    $result = implode('', $result);\n    $result_reverse\
    \ = strrev($result);\n    if ($result === $result_reverse) {\n        return [$result,\
    \ true];\n    } else {\n        return [$result, false];\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    return [$result, $result_reverse\
    \ == $result];\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result .= $value;\n        }\n    }\n    return [$result, $result == strrev($result)];\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result === $result_reverse)\
    \ {\n        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $letter) {\n        if (!in_array($letter, $c)) {\n            $result[]\
    \ = $letter;\n        }\n    }\n    $result = implode('', $result);\n    $result_reverse\
    \ = strrev($result);\n    return [$result, $result == $result_reverse];\n}\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result = str_split($result);\n    $result_reverse = array_reverse($result);\n\
    \    $result_reverse = implode('', $result_reverse);\n    if ($result_reverse\
    \ == $result) {\n        return [$result_reverse, true];\n    } else {\n     \
    \   return [$result_reverse, false];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppx0ek8mq.php:36\n\
    Stack trace:\n#0 /tmp/tmppx0ek8mq.php(47): test()\n#1 {main}\n  thrown in /tmp/tmppx0ek8mq.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result === $result_reverse)\
    \ {\n        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $res = [];\n    foreach ($s\
    \ as $v) {\n        if (!in_array($v, $c)) {\n            $res[] = $v;\n     \
    \   }\n    }\n    $res = implode('', $res);\n    $res_rev = strrev($res);\n  \
    \  if ($res == $res_rev) {\n        return [$res, true];\n    } else {\n     \
    \   return [$res, false];\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    return [$result, $result == $result_reverse];\n\
    }\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result = str_split($result);\n    $result_reverse = array_reverse($result);\n\
    \    $result_reverse = implode('', $result_reverse);\n    if ($result_reverse\
    \ == $result) {\n        return [$result_reverse, true];\n    } else {\n     \
    \   return [$result_reverse, false];\n    }\n}\nprint_r(reverse_delete(\"abcde\"\
    , \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => dcb\n    [1] => \n)\nArray\n(\n    [0] => fedca\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => \n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuujcu_yc.php:38\n\
    Stack trace:\n#0 /tmp/tmpuujcu_yc.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpuujcu_yc.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result .= $value;\n        }\n    }\n    $result = str_split($result);\n  \
    \  $reverse = array_reverse($result);\n    $result = implode('', $result);\n \
    \   $reverse = implode('', $reverse);\n    if ($result == $reverse) {\n      \
    \  return [$result, true];\n    } else {\n        return [$result, false];\n \
    \   }\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $key2 => $value2) {\n            if ($value == $value2)\
    \ {\n                unset($s[$key]);\n            }\n        }\n    }\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s_reverse = array_reverse($s);\n\
    \    $s_reverse = implode($s_reverse);\n    $s = implode($s);\n    if ($s == $s_reverse)\
    \ {\n        return [$s, true];\n    } else {\n        return [$s, false];\n \
    \   }\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode('', $s);\n    $s = str_split($s);\n    $s_rev = array_reverse($s);\n\
    \    $s_rev = implode('', $s_rev);\n    $s = implode('', $s);\n    if ($s == $s_rev)\
    \ {\n        return [$s, true];\n    } else {\n        return [$s, false];\n \
    \   }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    for($i\
    \ = 0; $i < count($s); $i++){\n        if(!in_array($s[$i], $c)){\n          \
    \  $result[] = $s[$i];\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if($result == $result_reverse){\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $key2 => $value2) {\n            if ($value == $value2)\
    \ {\n                unset($s[$key]);\n            }\n        }\n    }\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s2 = array_reverse($s);\n    $s\
    \ = implode($s);\n    $s2 = implode($s2);\n    if ($s == $s2) {\n        return\
    \ [$s, true];\n    } else {\n        return [$s, false];\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $value) {\n        if (!in_array($value, $c)) {\n            $result\
    \ .= $value;\n        }\n    }\n    return [$result, $result == strrev($result)];\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $key2 => $value2) {\n            if ($value == $value2)\
    \ {\n                unset($s[$key]);\n            }\n        }\n    }\n    $s\
    \ = implode($s);\n    $s_reverse = strrev($s);\n    if ($s == $s_reverse) {\n\
    \        return [$s, true];\n    } else {\n        return [$s, false];\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpzu2bzt0o.php\
    \ on line 60\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result = str_split($result);\n    $result_reverse = array_reverse($result);\n\
    \    $result_reverse = implode('', $result_reverse);\n    if ($result_reverse\
    \ == $result) {\n        return [$result_reverse, true];\n    } else {\n     \
    \   return [$result_reverse, false];\n    }\n}\nprint_r(reverse_delete(\"abcdedcba\"\
    , \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => cdedc\n    [1] => \n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbe5vvo_5.php:36\n\
    Stack trace:\n#0 /tmp/tmpbe5vvo_5.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpbe5vvo_5.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $value) {\n        if (!in_array($value, $c)) {\n            $result\
    \ .= $value;\n        }\n    }\n    return [$result, $result == strrev($result)];\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $reverse\
    \ = strrev($result);\n    return [$result, $result == $reverse];\n}\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = \"\";\n    for($i\
    \ = 0; $i < count($s); $i++){\n        if(!in_array($s[$i], $c)){\n          \
    \  $result .= $s[$i];\n        }\n    }\n    return array($result, $result ==\
    \ strrev($result));\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = array_diff($s, $c);\n\
    \    $result = implode('', $result);\n    $result_reverse = strrev($result);\n\
    \    if ($result == $result_reverse) {\n        return array($result, true);\n\
    \    } else {\n        return array($result, false);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode('', $s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode('', $s);\n    return [$s, $s == strrev($s)];\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmsz132bx.php:26\n\
    Stack trace:\n#0 /tmp/tmpmsz132bx.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpmsz132bx.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n$s = \"abcde\";\n$c = \"ae\";\nprint_r(reverse_delete($s, $c));\n$s\
    \ = \"abcdef\";\n$c = \"b\";\nprint_r(reverse_delete($s, $c));\n$s = \"abcdedcba\"\
    ;\n$c = \"ab\";\nprint_r(reverse_delete($s, $c));\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result .= $value;\n        }\n    }\n    $result = str_split($result);\n  \
    \  $reverse = array_reverse($result);\n    $result = implode('', $result);\n \
    \   $reverse = implode('', $reverse);\n    if ($result == $reverse) {\n      \
    \  return [$result, true];\n    } else {\n        return [$result, false];\n \
    \   }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result = str_split($result);\n    $result_reverse = array_reverse($result);\n\
    \    if ($result == $result_reverse) {\n        return [implode('', $result),\
    \ true];\n    } else {\n        return [implode('', $result), false];\n    }\n\
    }\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode($result);\n   \
    \ $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode($result);\n   \
    \ $result2 = strrev($result);\n    if ($result == $result2) {\n        return\
    \ [$result, true];\n    } else {\n        return [$result, false];\n    }\n}\n\
    function candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"\
    b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result = str_split($result);\n    $result_reverse = array_reverse($result);\n\
    \    if ($result == $result_reverse) {\n        return [implode('', $result),\
    \ true];\n    } else {\n        return [implode('', $result), false];\n    }\n\
    }\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $char) {\n        if (!in_array($char, $c)) {\n            $result[]\
    \ = $char;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $reverse = array_reverse($result);\n    $reverse\
    \ = implode('', $reverse);\n    $result = implode('', $result);\n    return [$result,\
    \ $result == $reverse];\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $key2 => $value2) {\n            if ($value == $value2)\
    \ {\n                unset($s[$key]);\n            }\n        }\n    }\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s_reverse = array_reverse($s);\n\
    \    $s_reverse = implode($s_reverse);\n    if ($s == $s_reverse) {\n        return\
    \ [$s, true];\n    } else {\n        return [$s, false];\n    }\n}\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => c\n         \
    \   [1] => d\n            [2] => e\n            [3] => d\n            [4] => c\n\
    \        )\n\n    [1] => \n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkzzlhk9a.php:37\n\
    Stack trace:\n#0 /tmp/tmpkzzlhk9a.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpkzzlhk9a.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result_reverse\
    \ = strrev($result);\n    if ($result === $result_reverse) {\n        return [$result,\
    \ true];\n    } else {\n        return [$result, false];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $value) {\n        if (!in_array($value, $c)) {\n            $result\
    \ .= $value;\n        }\n    }\n    return [$result, $result == strrev($result)];\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = \"\";\n    foreach\
    \ ($s as $value) {\n        if (!in_array($value, $c)) {\n            $result\
    \ .= $value;\n        }\n    }\n    $result = str_split($result);\n    $result_reverse\
    \ = array_reverse($result);\n    $result = implode(\"\", $result);\n    $result_reverse\
    \ = implode(\"\", $result_reverse);\n    if ($result == $result_reverse) {\n \
    \       return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result .= $value;\n        }\n    }\n    $result = str_split($result);\n  \
    \  $reverse = array_reverse($result);\n    return [implode('', $result), $result\
    \ == $reverse];\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $result = \"\";\n    $s = str_split($s);\n    $c = str_split($c);\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result .= $value;\n        }\n    }\n    $result = str_split($result);\n  \
    \  $result_reverse = array_reverse($result);\n    if ($result == $result_reverse)\
    \ {\n        return [implode($result), true];\n    } else {\n        return [implode($result),\
    \ false];\n    }\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result = str_split($result);\n    $reverse = array_reverse($result);\n \
    \   $reverse = implode('', $reverse);\n    if ($result == $reverse) {\n      \
    \  return [$result, true];\n    } else {\n        return [$result, false];\n \
    \   }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbvd1x9a1.php:36\n\
    Stack trace:\n#0 /tmp/tmpbvd1x9a1.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpbvd1x9a1.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result = str_split($result);\n    $result_reverse = array_reverse($result);\n\
    \    $result_reverse = implode('', $result_reverse);\n    if ($result_reverse\
    \ == $result) {\n        return [$result_reverse, true];\n    } else {\n     \
    \   return [$result_reverse, false];\n    }\n}\nprint_r(reverse_delete(\"abcde\"\
    , \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => dcb\n    [1] => \n)\nArray\n(\n    [0] => fedca\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => \n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuk5xg0nw.php:38\n\
    Stack trace:\n#0 /tmp/tmpuk5xg0nw.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpuk5xg0nw.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result = str_split($result);\n    $result_reverse = array_reverse($result);\n\
    \    $result_reverse = implode('', $result_reverse);\n    $result = implode('',\
    \ $result);\n    if ($result == $result_reverse) {\n        return [$result, true];\n\
    \    } else {\n        return [$result, false];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result_reverse\
    \ = strrev($result);\n    if ($result == $result_reverse) {\n        return [$result,\
    \ true];\n    } else {\n        return [$result, false];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $v) {\n        if (!in_array($v, $c)) {\n            $result[] = $v;\n\
    \        }\n    }\n    $result = implode('', $result);\n    $result = str_split($result);\n\
    \    $reverse = array_reverse($result);\n    $reverse = implode('', $reverse);\n\
    \    $result = implode('', $result);\n    if ($result == $reverse) {\n       \
    \ return [$result, true];\n    } else {\n        return [$result, false];\n  \
    \  }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $key2 => $value2) {\n            if ($value == $value2)\
    \ {\n                unset($s[$key]);\n            }\n        }\n    }\n    $s\
    \ = implode($s);\n    $s_reverse = strrev($s);\n    if ($s == $s_reverse) {\n\
    \        return [$s, true];\n    } else {\n        return [$s, false];\n    }\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $v) {\n            if ($value == $v) {\n         \
    \       unset($s[$key]);\n            }\n        }\n    }\n    $s = implode('',\
    \ $s);\n    $s = str_split($s);\n    $s_reverse = array_reverse($s);\n    $s =\
    \ implode('', $s);\n    $s_reverse = implode('', $s_reverse);\n    if ($s == $s_reverse)\
    \ {\n        return [$s, true];\n    } else {\n        return [$s, false];\n \
    \   }\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $key2 => $value2) {\n            if ($value == $value2)\
    \ {\n                unset($s[$key]);\n            }\n        }\n    }\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s2 = array_reverse($s);\n    $s2\
    \ = implode($s2);\n    if ($s2 == implode($s)) {\n        return [implode($s),\
    \ true];\n    } else {\n        return [implode($s), false];\n    }\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = \"\";\n    foreach\
    \ ($s as $letter) {\n        if (!in_array($letter, $c)) {\n            $result\
    \ .= $letter;\n        }\n    }\n    return array($result, $result == strrev($result));\n\
    }\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpwr7tn9jz.php\
    \ on line 60\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $k => $v) {\n            if ($value == $v) {\n   \
    \             unset($s[$key]);\n            }\n        }\n    }\n    $s = implode('',\
    \ $s);\n    $s = str_split($s);\n    $s_reverse = array_reverse($s);\n    $s =\
    \ implode('', $s);\n    $s_reverse = implode('', $s_reverse);\n    if ($s == $s_reverse)\
    \ {\n        return [$s, true];\n    } else {\n        return [$s, false];\n \
    \   }\n}\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $reverse = array_reverse($result);\n    $reverse\
    \ = implode('', $reverse);\n    $result = implode('', $result);\n    if ($result\
    \ == $reverse) {\n        return [$result, true];\n    } else {\n        return\
    \ [$result, false];\n    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode('', $s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode('', $s);\n    return [$s, $s == strrev($s)];\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsy6ycea1.php:26\n\
    Stack trace:\n#0 /tmp/tmpsy6ycea1.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpsy6ycea1.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $reverse = array_reverse($result);\n    if ($result\
    \ == $reverse) {\n        return [implode('', $result), true];\n    } else {\n\
    \        return [implode('', $result), false];\n    }\n}\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = \"\";\n    for($i\
    \ = 0; $i < count($s); $i++){\n        if(!in_array($s[$i], $c)){\n          \
    \  $result .= $s[$i];\n        }\n    }\n    $result = str_split($result);\n \
    \   $reverse = \"\";\n    for($i = count($result) - 1; $i >= 0; $i--){\n     \
    \   $reverse .= $result[$i];\n    }\n    if($result == $reverse){\n        return\
    \ array($result, true);\n    }\n    return array($result, false);\n}\n\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqb3atb4z.php:36\n\
    Stack trace:\n#0 /tmp/tmpqb3atb4z.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpqb3atb4z.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpd4w6cuf5.php\
    \ on line 60\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result = str_split($result);\n    $result_reverse = array_reverse($result);\n\
    \    $result_reverse = implode('', $result_reverse);\n    if ($result_reverse\
    \ == $result) {\n        return [$result_reverse, true];\n    } else {\n     \
    \   return [$result_reverse, false];\n    }\n}\nfunction candidate(...$args) {\n\
    \    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu8uwkho0.php:35\n\
    Stack trace:\n#0 /tmp/tmpu8uwkho0.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpu8uwkho0.php\
    \ on line 35\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result = str_split($result);\n    $reverse = array_reverse($result);\n \
    \   return [implode('', $result), $result == $reverse];\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = \"\";\n    foreach\
    \ ($s as $letter) {\n        if (!in_array($letter, $c)) {\n            $result\
    \ .= $letter;\n        }\n    }\n    return [$result, $result == strrev($result)];\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $key2 => $value2) {\n            if ($value == $value2)\
    \ {\n                unset($s[$key]);\n            }\n        }\n    }\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s_reverse = array_reverse($s);\n\
    \    $s_reverse = implode($s_reverse);\n    if ($s == $s_reverse) {\n        return\
    \ array($s, true);\n    } else {\n        return array($s, false);\n    }\n}\n\
    print_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\"\
    , \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => b\n         \
    \   [1] => c\n            [2] => d\n        )\n\n    [1] => \n)\nArray\n(\n  \
    \  [0] => Array\n        (\n            [0] => a\n            [1] => c\n     \
    \       [2] => d\n            [3] => e\n            [4] => f\n        )\n\n  \
    \  [1] => \n)\nArray\n(\n    [0] => Array\n        (\n            [0] => c\n \
    \           [1] => d\n            [2] => e\n            [3] => d\n           \
    \ [4] => c\n        )\n\n    [1] => \n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwei9n769.php:39\n\
    Stack trace:\n#0 /tmp/tmpwei9n769.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpwei9n769.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $reverse = strrev($result);\n    if ($result == $reverse) {\n        return\
    \ [$result, true];\n    } else {\n        return [$result, false];\n    }\n}\n\
    function candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"\
    b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $key2 => $value2) {\n            if ($value == $value2)\
    \ {\n                unset($s[$key]);\n            }\n        }\n    }\n    $s\
    \ = implode('', $s);\n    $s_reverse = strrev($s);\n    if ($s == $s_reverse)\
    \ {\n        return [$s, true];\n    } else {\n        return [$s, false];\n \
    \   }\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    return [$s, $s == strrev($s)];\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjja5fjgw.php:26\n\
    Stack trace:\n#0 /tmp/tmpjja5fjgw.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpjja5fjgw.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode('', $s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode('', $s);\n    return array($s, $s == strrev($s));\n}\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp27ud3f1c.php:26\n\
    Stack trace:\n#0 /tmp/tmp27ud3f1c.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp27ud3f1c.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $value) {\n        if (!in_array($value, $c)) {\n            $result\
    \ .= $value;\n        }\n    }\n    $result = str_split($result);\n    $result_reverse\
    \ = array_reverse($result);\n    $result = implode('', $result);\n    $result_reverse\
    \ = implode('', $result_reverse);\n    if ($result == $result_reverse) {\n   \
    \     return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n  $result\
    \ = '';\n  $s = str_split($s);\n  $c = str_split($c);\n  foreach ($s as $key =>\
    \ $value) {\n    if (!in_array($value, $c)) {\n      $result .= $value;\n    }\n\
    \  }\n  return [$result, $result === strrev($result)];\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $letter) {\n        if (!in_array($letter, $c)) {\n            $result[]\
    \ = $letter;\n        }\n    }\n    $result = implode('', $result);\n    $reverse\
    \ = strrev($result);\n    if ($result == $reverse) {\n        return [$result,\
    \ true];\n    } else {\n        return [$result, false];\n    }\n}\n\necho '<pre>';\n\
    print_r(reverse_delete(\"abcde\", \"ae\"));\necho '</pre>';\n\necho '<pre>';\n\
    print_r(reverse_delete(\"abcdef\", \"b\"));\necho '</pre>';\n\necho '<pre>';\n\
    print_r(reverse_delete(\"abcdedcba\", \"ab\"));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => bcd\n    [1] => \n)\n</pre><pre>Array\n(\n  \
    \  [0] => acdef\n    [1] => \n)\n</pre><pre>Array\n(\n    [0] => cdedc\n    [1]\
    \ => 1\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $v) {\n        if (!in_array($v, $c)) {\n            $result[] = $v;\n\
    \        }\n    }\n    $result = implode('', $result);\n    return [$result, $result\
    \ == strrev($result)];\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = \"\";\n    for($i\
    \ = 0; $i < count($s); $i++){\n        if(!in_array($s[$i], $c)){\n          \
    \  $result .= $s[$i];\n        }\n    }\n    $result = str_split($result);\n \
    \   $result_reverse = array_reverse($result);\n    $result = implode(\"\", $result);\n\
    \    $result_reverse = implode(\"\", $result_reverse);\n    if($result == $result_reverse){\n\
    \        return [$result, true];\n    }\n    return [$result, false];\n}\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result = str_split($result);\n    $reverse = array_reverse($result);\n \
    \   $reverse = implode('', $reverse);\n    if ($result == $reverse) {\n      \
    \  return [$result, true];\n    } else {\n        return [$result, false];\n \
    \   }\n}\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => c\n         \
    \   [1] => d\n            [2] => e\n            [3] => d\n            [4] => c\n\
    \        )\n\n    [1] => \n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpd5rrt5ra.php:36\n\
    Stack trace:\n#0 /tmp/tmpd5rrt5ra.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpd5rrt5ra.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $reverse = strrev($result);\n    if ($result == $reverse) {\n        return\
    \ [$result, true];\n    } else {\n        return [$result, false];\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if(!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $reverse = array_reverse($result);\n    if($result\
    \ == $reverse) {\n        return [implode('', $result), true];\n    }\n    return\
    \ [implode('', $result), false];\n}\nfunction candidate(...$args) {\n    return\
    \ reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $key1 => $value1) {\n            if ($value == $value1)\
    \ {\n                unset($s[$key]);\n            }\n        }\n    }\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s1 = $s;\n    $s = array_reverse($s);\n\
    \    if ($s == $s1) {\n        return [implode($s1), true];\n    } else {\n  \
    \      return [implode($s1), false];\n    }\n}\nprint_r(reverse_delete(\"abcde\"\
    , \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    $result\
    \ = implode('', $result);\n    $result_reverse = implode('', $result_reverse);\n\
    \    if ($result == $result_reverse) {\n        return [$result, true];\n    }\
    \ else {\n        return [$result, false];\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $letter) {\n        if (!in_array($letter, $c)) {\n            $result\
    \ .= $letter;\n        }\n    }\n    return [$result, $result == strrev($result)];\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = \"\";\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result .= $value;\n        }\n    }\n    $result = str_split($result);\n  \
    \  $result_reverse = array_reverse($result);\n    $result = implode(\"\", $result);\n\
    \    $result_reverse = implode(\"\", $result_reverse);\n    $result = [$result,\
    \ $result === $result_reverse];\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $char) {\n        if (!in_array($char, $c)) {\n            $result .=\
    \ $char;\n        }\n    }\n    $result = str_split($result);\n    $reverse =\
    \ array_reverse($result);\n    $result = implode('', $result);\n    $reverse =\
    \ implode('', $reverse);\n    return [$result, $result == $reverse];\n}\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result .= $value;\n        }\n    }\n    $result = str_split($result);\n  \
    \  $reverse = array_reverse($result);\n    $result = implode('', $result);\n \
    \   $reverse = implode('', $reverse);\n    if ($result == $reverse) {\n      \
    \  return [$result, true];\n    } else {\n        return [$result, false];\n \
    \   }\n}\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $new_s = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $new_s[] = $value;\n        }\n    }\n    $new_s = implode('', $new_s);\n  \
    \  $new_s_reverse = strrev($new_s);\n    if ($new_s == $new_s_reverse) {\n   \
    \     return [$new_s, true];\n    } else {\n        return [$new_s, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result .= $value;\n        }\n    }\n    return [$result, $result == strrev($result)];\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = \"\";\n    foreach\
    \ ($s as $char) {\n        if (!in_array($char, $c)) {\n            $result .=\
    \ $char;\n        }\n    }\n    return array($result, $result == strrev($result));\n\
    }\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result = str_split($result);\n    $reverse = array_reverse($result);\n \
    \   $reverse = implode('', $reverse);\n    $result = implode('', $result);\n \
    \   if ($result == $reverse) {\n        return [$result, true];\n    } else {\n\
    \        return [$result, false];\n    }\n}\n\nfunction candidate(...$args) {\n\
    \    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"ab\"\
    ) !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"\") !==\
    \ array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"v\") !==\
    \ array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $char) {\n        if (!in_array($char, $c)) {\n            $result[]\
    \ = $char;\n        }\n    }\n    $result = implode('', $result);\n    $result_reversed\
    \ = strrev($result);\n    return [$result, $result == $result_reversed];\n}\n\
    function candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"\
    b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $reverse = strrev($result);\n    if ($result == $reverse) {\n        return\
    \ [$result, true];\n    } else {\n        return [$result, false];\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    for($i\
    \ = 0; $i < count($s); $i++){\n        if(!in_array($s[$i], $c)){\n          \
    \  $result .= $s[$i];\n        }\n    }\n    $result = str_split($result);\n \
    \   $result_reverse = array_reverse($result);\n    $result = implode('', $result);\n\
    \    $result_reverse = implode('', $result_reverse);\n    if($result == $result_reverse){\n\
    \        return array($result, true);\n    }\n    return array($result, false);\n\
    }\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = \"\";\n    foreach\
    \ ($s as $char) {\n        if (!in_array($char, $c)) {\n            $result .=\
    \ $char;\n        }\n    }\n    $result = str_split($result);\n    $reverse =\
    \ array_reverse($result);\n    $result = implode(\"\", $result);\n    $reverse\
    \ = implode(\"\", $reverse);\n    if ($result == $reverse) {\n        return [$result,\
    \ true];\n    } else {\n        return [$result, false];\n    }\n}\n\nprint_r(reverse_delete(\"\
    abcde\", \"ae\"));\nprint_r(reverse_delete(\"abcdef\", \"b\"));\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $res = \"\";\n    foreach\
    \ ($s as $key => $value) {\n        if(!in_array($value, $c)){\n            $res\
    \ .= $value;\n        }\n    }\n    $res = str_split($res);\n    $res_rev = array_reverse($res);\n\
    \    $res_rev = implode(\"\", $res_rev);\n    $res = implode(\"\", $res);\n  \
    \  if($res == $res_rev){\n        return [$res, true];\n    }\n    return [$res,\
    \ false];\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $char) {\n        if (!in_array($char, $c)) {\n            $result .=\
    \ $char;\n        }\n    }\n    return [$result, $result === strrev($result)];\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpf69u2k8a.php\
    \ on line 60\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result .= $value;\n        }\n    }\n    $result = str_split($result);\n  \
    \  $result_reverse = array_reverse($result);\n    $result = implode('', $result);\n\
    \    $result_reverse = implode('', $result_reverse);\n    if ($result == $result_reverse)\
    \ {\n        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result = str_split($result);\n    $reverse = array_reverse($result);\n \
    \   $reverse = implode('', $reverse);\n    if ($result == $reverse) {\n      \
    \  return [$result, true];\n    } else {\n        return [$result, false];\n \
    \   }\n}\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => c\n         \
    \   [1] => d\n            [2] => e\n            [3] => d\n            [4] => c\n\
    \        )\n\n    [1] => \n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu0ybvkt7.php:36\n\
    Stack trace:\n#0 /tmp/tmpu0ybvkt7.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpu0ybvkt7.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $char) {\n        if (!in_array($char, $c)) {\n            $result[]\
    \ = $char;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $reverse = array_reverse($result);\n    $reverse\
    \ = implode('', $reverse);\n    $result = implode('', $result);\n    return [$result,\
    \ $result == $reverse];\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $key2 => $value2) {\n            if ($value == $value2)\
    \ {\n                unset($s[$key]);\n            }\n        }\n    }\n    $s\
    \ = implode('', $s);\n    $s = str_split($s);\n    $s2 = array_reverse($s);\n\
    \    $s = implode('', $s);\n    $s2 = implode('', $s2);\n    if ($s == $s2) {\n\
    \        return [$s, true];\n    } else {\n        return [$s, false];\n    }\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result = str_split($result);\n    $result_reverse = array_reverse($result);\n\
    \    $result_reverse = implode('', $result_reverse);\n    if ($result_reverse\
    \ == $result) {\n        return [$result_reverse, true];\n    } else {\n     \
    \   return [$result_reverse, false];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa6g73qab.php:36\n\
    Stack trace:\n#0 /tmp/tmpa6g73qab.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpa6g73qab.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result_reverse\
    \ = strrev($result);\n    if ($result == $result_reverse) {\n        return [$result,\
    \ true];\n    } else {\n        return [$result, false];\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    if\
    \ ($result === $result_reverse) {\n        return [implode('', $result), true];\n\
    \    } else {\n        return [implode('', $result), false];\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $key2 => $value2) {\n            if ($value == $value2)\
    \ {\n                unset($s[$key]);\n            }\n        }\n    }\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n    $s\
    \ = implode($s);\n    if ($s == strrev($s)) {\n        return [$s, true];\n  \
    \  } else {\n        return [$s, false];\n    }\n}\nprint_r(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdgnrxrn5.php:37\n\
    Stack trace:\n#0 /tmp/tmpdgnrxrn5.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpdgnrxrn5.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $char) {\n        if (!in_array($char, $c)) {\n            $result .=\
    \ $char;\n        }\n    }\n    return [$result, $result === strrev($result)];\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $value) {\n        if (!in_array($value, $c)) {\n            $result[]\
    \ = $value;\n        }\n    }\n    return [implode('', $result), $result === array_reverse($result)];\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result === $result_reverse)\
    \ {\n        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    return [$result, $result == $result_reverse];\n\
    }\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $value) {\n        if (!in_array($value, $c)) {\n            $result\
    \ .= $value;\n        }\n    }\n    $result = str_split($result);\n    $result_reverse\
    \ = array_reverse($result);\n    $result = implode('', $result);\n    $result_reverse\
    \ = implode('', $result_reverse);\n    if ($result == $result_reverse) {\n   \
    \     return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $char) {\n        if (!in_array($char, $c)) {\n            $result .=\
    \ $char;\n        }\n    }\n    return [$result, $result === strrev($result)];\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $c = str_split($c);\n   \
    \ $s = array_diff($s, $c);\n    $s = implode($s);\n    $s = str_split($s);\n \
    \   $s = array_reverse($s);\n    $s = implode($s);\n    $s = str_split($s);\n\
    \    $c = str_split($c);\n    $s = array_diff($s, $c);\n    $s = implode($s);\n\
    \    $s = str_split($s);\n    $s = array_reverse($s);\n    $s = implode($s);\n\
    \    $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode($s);\n    $s = str_split($s);\n    $c = str_split($c);\n   \
    \ $s = array_diff($s, $c);\n    $s = implode($s);\n    $s = str_split($s);\n \
    \   $s = array_reverse($s);\n    $s = implode($s);\n    $s = str_split($s);\n\
    \    $c = str_split($c);\n    $s = array_diff($s, $c);\n    $s = implode($s);\n\
    \    $s = str_split($s);\n    $s = array_reverse($s);\n    $s = implode($s);\n\
    \    $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode($\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ variable or \"{\" or \"$\" in /tmp/tmpctgx1957.php on line 58\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $value) {\n        if (!in_array($value, $c)) {\n            $result\
    \ .= $value;\n        }\n    }\n    $result = str_split($result);\n    $result_reverse\
    \ = array_reverse($result);\n    $result = implode('', $result);\n    $result_reverse\
    \ = implode('', $result_reverse);\n    if ($result == $result_reverse) {\n   \
    \     return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = '';\n    foreach\
    \ ($s as $char) {\n        if (!in_array($char, $c)) {\n            $result .=\
    \ $char;\n        }\n    }\n    return [$result, $result === strrev($result)];\n\
    }\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\"\
    , false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\"\
    , \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode('', $s);\n    return [$s, $s === strrev($s)];\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode('', $result);\n\
    \    $result_reverse = strrev($result);\n    if ($result == $result_reverse) {\n\
    \        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode('', $s);\n    return [$s, $s == strrev($s)];\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $char) {\n        if (!in_array($char, $c)) {\n            $result[]\
    \ = $char;\n        }\n    }\n    $result = implode('', $result);\n    $result\
    \ = str_split($result);\n    $result_reverse = array_reverse($result);\n    $result\
    \ = implode('', $result);\n    $result_reverse = implode('', $result_reverse);\n\
    \    if ($result == $result_reverse) {\n        return [$result, true];\n    }\
    \ else {\n        return [$result, false];\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $s = array_diff($s, $c);\n\
    \    $s = implode('', $s);\n    $s = str_split($s);\n    $s = array_reverse($s);\n\
    \    $s = implode('', $s);\n    return [$s, $s === strrev($s)];\n}\nfunction candidate(...$args)\
    \ {\n    return reverse_delete(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !== array(\"acdef\",\
    \ false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\") !== array(\"\
    \", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\"\
    , \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\", \"\
    v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa4ierhf3.php:26\n\
    Stack trace:\n#0 /tmp/tmpa4ierhf3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpa4ierhf3.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    foreach ($s as $key => $value)\
    \ {\n        foreach ($c as $key2 => $value2) {\n            if ($value == $value2)\
    \ {\n                unset($s[$key]);\n            }\n        }\n    }\n    $s\
    \ = implode($s);\n    $s = str_split($s);\n    $s_reverse = array_reverse($s);\n\
    \    $s = implode($s);\n    $s_reverse = implode($s_reverse);\n    if ($s == $s_reverse)\
    \ {\n        return [$s, true];\n    } else {\n        return [$s, false];\n \
    \   }\n}\nprint_r(reverse_delete(\"abcde\", \"ae\"));\nprint_r(reverse_delete(\"\
    abcdef\", \"b\"));\nprint_r(reverse_delete(\"abcdedcba\", \"ab\"));\nfunction\
    \ candidate(...$args) {\n    return reverse_delete(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"bcd\", false)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdef\", \"b\") !==\
    \ array(\"acdef\", false)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"dik\", false))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\", \"a\")\
    \ !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\") !== array(\"abcdedcba\"\
    , true)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"vabba\"\
    , \"v\") !== array(\"abba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"mamma\", \"mia\") !== array(\"\", true)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => bcd\n    [1] => \n)\nArray\n(\n    [0] => acdef\n\
    \    [1] => \n)\nArray\n(\n    [0] => cdedc\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Task\n// We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n// then check\
    \ if the result string is palindrome.\n// A string is called palindrome if it\
    \ reads the same backward as forward.\n// You should return a tuple containing\
    \ the result string and True/False for the check.\n// Example\n// For s = \"abcde\"\
    , c = \"ae\", the result should be ('bcd',False)\n// For s = \"abcdef\", c = \"\
    b\"  the result should be ('acdef',False)\n// For s = \"abcdedcba\", c = \"ab\"\
    , the result should be ('cdedc',True)\nfunction reverse_delete($s, $c) {\n   \
    \ $s = str_split($s);\n    $c = str_split($c);\n    $result = [];\n    foreach\
    \ ($s as $key => $value) {\n        if (!in_array($value, $c)) {\n           \
    \ $result[] = $value;\n        }\n    }\n    $result = implode($result);\n   \
    \ $result = str_split($result);\n    $reverse = array_reverse($result);\n    $reverse\
    \ = implode($reverse);\n    $result = implode($result);\n    if ($result == $reverse)\
    \ {\n        return [$result, true];\n    } else {\n        return [$result, false];\n\
    \    }\n}\nfunction candidate(...$args) {\n    return reverse_delete(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"abcde\", \"ae\") !== array(\"\
    bcd\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcdef\", \"b\") !== array(\"acdef\", false)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcdedcba\", \"ab\") !== array(\"cdedc\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"dwik\", \"w\") !== array(\"\
    dik\", false)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    a\", \"a\") !== array(\"\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"abcdedcba\", \"\") !== array(\"abcdedcba\", true)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcdedcba\", \"v\")\
    \ !== array(\"abcdedcba\", true)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"vabba\", \"v\") !== array(\"abba\", true)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"mamma\", \"mia\") !== array(\"\", true))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
