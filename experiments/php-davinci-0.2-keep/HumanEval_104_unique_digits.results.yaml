name: HumanEval_104_unique_digits
language: php
results:
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsxi9uz4r.php:27\n\
    Stack trace:\n#0 /tmp/tmpsxi9uz4r.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpsxi9uz4r.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $has_even = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even) {\n            $result[] = $num;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            $result[] = $value;\n       \
    \ } else {\n            $is_unique = true;\n            for ($i = 0; $i < strlen($value);\
    \ $i++) {\n                if ($value[$i] % 2 == 0) {\n                    $is_unique\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if ($is_unique) {\n                $result[] = $value;\n           \
    \ }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Trying to access array offset on value of type int in /tmp/tmpl2d6b6mo.php\
    \ on line 18\nPHP Warning:  Trying to access array offset on value of type int\
    \ in /tmp/tmpl2d6b6mo.php on line 18\nPHP Warning:  Trying to access array offset\
    \ on value of type int in /tmp/tmpl2d6b6mo.php on line 18\nPHP Fatal error:  Uncaught\
    \ Exception: Test failed! in /tmp/tmpl2d6b6mo.php:37\nStack trace:\n#0 /tmp/tmpl2d6b6mo.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpl2d6b6mo.php on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num = (string)$num;\n        $is_unique = true;\n        for ($i = 0;\
    \ $i < strlen($num); $i++) {\n            if ($num[$i] % 2 == 0) {\n         \
    \       $is_unique = false;\n                break;\n            }\n        }\n\
    \        if ($is_unique) {\n            $result[] = (int)$num;\n        }\n  \
    \  }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $has_even = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even) {\n            $result[] = $num;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $num) {\n\t\t\
    $num = strval($num);\n\t\t$is_unique = true;\n\t\tfor ($i = 0; $i < strlen($num);\
    \ $i++) {\n\t\t\tif (intval($num[$i]) % 2 == 0) {\n\t\t\t\t$is_unique = false;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($is_unique) {\n\t\t\tarray_push($result,\
    \ intval($num));\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (has_even_digit($num)) {\n            continue;\n        }\n     \
    \   $result[] = $num;\n    }\n    sort($result);\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function has_even_digit()\
    \ in /tmp/tmpded6gp31.php:13\nStack trace:\n#0 /tmp/tmpded6gp31.php(23): unique_digits()\n\
    #1 /tmp/tmpded6gp31.php(27): candidate()\n#2 /tmp/tmpded6gp31.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpded6gp31.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            $result[] = $value;\n       \
    \ } else {\n            $value = str_split($value);\n            $is_even = false;\n\
    \            foreach ($value as $digit) {\n                if ($digit % 2 == 0)\
    \ {\n                    $is_even = true;\n                    break;\n      \
    \          }\n            }\n            if (!$is_even) {\n                $result[]\
    \ = implode($value);\n            }\n        }\n    }\n    sort($result);\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4vpaqjkt.php:38\n\
    Stack trace:\n#0 /tmp/tmp4vpaqjkt.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp4vpaqjkt.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $num) {\n\t\t\
    if (strlen($num) == 1) {\n\t\t\t$result[] = $num;\n\t\t} else {\n\t\t\t$num_array\
    \ = str_split($num);\n\t\t\t$is_even = false;\n\t\t\tforeach ($num_array as $digit)\
    \ {\n\t\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t\t$is_even = true;\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tif (!$is_even) {\n\t\t\t\t$result[] = $num;\n\t\t\t\
    }\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $num) {\n    $str\
    \ = strval($num);\n    $is_unique = true;\n    for ($i = 0; $i < strlen($str);\
    \ $i++) {\n      if ($str[$i] % 2 == 0) {\n        $is_unique = false;\n     \
    \   break;\n      }\n    }\n    if ($is_unique) {\n      array_push($result, $num);\n\
    \    }\n  }\n  sort($result);\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strlen(strval($num)) == 1) {\n            $result[] = $num;\n   \
    \     } else {\n            $digits = str_split(strval($num));\n            $is_unique\
    \ = true;\n            foreach ($digits as $digit) {\n                if ($digit\
    \ % 2 == 0) {\n                    $is_unique = false;\n                    break;\n\
    \                }\n            }\n            if ($is_unique) {\n           \
    \     $result[] = $num;\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num = strval($num);\n        if (strpos($num, '2') === false &&\n  \
    \          strpos($num, '4') === false &&\n            strpos($num, '6') === false\
    \ &&\n            strpos($num, '8') === false) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4dgxnizd.php:30\n\
    Stack trace:\n#0 /tmp/tmp4dgxnizd.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4dgxnizd.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $num) {\n    $num_str\
    \ = strval($num);\n    $is_unique = true;\n    for ($i = 0; $i < strlen($num_str);\
    \ $i++) {\n      if (intval($num_str[$i]) % 2 == 0) {\n        $is_unique = false;\n\
    \        break;\n      }\n    }\n    if ($is_unique) {\n      array_push($result,\
    \ $num);\n    }\n  }\n  sort($result);\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            array_push($result, $value);\n\
    \        } else {\n            $str = strval($value);\n            $is_even =\
    \ false;\n            for ($i = 0; $i < strlen($str); $i++) {\n              \
    \  if ($str[$i] % 2 == 0) {\n                    $is_even = true;\n          \
    \          break;\n                }\n            }\n            if (!$is_even)\
    \ {\n                array_push($result, $value);\n            }\n        }\n\
    \    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $num) {\n\t\t\
    if (strlen(strval($num)) == 1) {\n\t\t\tarray_push($result, $num);\n\t\t} else\
    \ {\n\t\t\t$num_str = strval($num);\n\t\t\t$even = false;\n\t\t\tfor ($i = 0;\
    \ $i < strlen($num_str); $i++) {\n\t\t\t\tif ($num_str[$i] % 2 == 0) {\n\t\t\t\
    \t\t$even = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!$even) {\n\
    \t\t\t\tarray_push($result, $num);\n\t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\t\
    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        $number_string = (string) $number;\n        $has_even_digit = false;\n\
    \        for ($i = 0; $i < strlen($number_string); $i++) {\n            if ($number_string[$i]\
    \ % 2 == 0) {\n                $has_even_digit = true;\n                break;\n\
    \            }\n        }\n        if (!$has_even_digit) {\n            $result[]\
    \ = $number;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            $result[] = $value;\n       \
    \ } else {\n            $flag = true;\n            for ($i = 0; $i < strlen($value);\
    \ $i++) {\n                if ($value[$i] % 2 == 0) {\n                    $flag\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if ($flag) {\n                $result[] = $value;\n            }\n \
    \       }\n    }\n    sort($result);\n    return $result;\n}\n$x = [15, 33, 1422,\
    \ 1];\nprint_r(unique_digits($x));\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "Array\n(\n    [0] => 1\n)\n"
  stderr: "PHP Warning:  Trying to access array offset on value of type int in /tmp/tmpj3v5u5r_.php\
    \ on line 18\nPHP Warning:  Trying to access array offset on value of type int\
    \ in /tmp/tmpj3v5u5r_.php on line 18\nPHP Warning:  Trying to access array offset\
    \ on value of type int in /tmp/tmpj3v5u5r_.php on line 18\nPHP Warning:  Trying\
    \ to access array offset on value of type int in /tmp/tmpj3v5u5r_.php on line\
    \ 18\nPHP Warning:  Trying to access array offset on value of type int in /tmp/tmpj3v5u5r_.php\
    \ on line 18\nPHP Warning:  Trying to access array offset on value of type int\
    \ in /tmp/tmpj3v5u5r_.php on line 18\nPHP Fatal error:  Uncaught Exception: Test\
    \ failed! in /tmp/tmpj3v5u5r_.php:38\nStack trace:\n#0 /tmp/tmpj3v5u5r_.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpj3v5u5r_.php on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (has_even_digit($num)) {\n            continue;\n        }\n     \
    \   $result[] = $num;\n    }\n    sort($result);\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function has_even_digit()\
    \ in /tmp/tmpvtkeungs.php:13\nStack trace:\n#0 /tmp/tmpvtkeungs.php(23): unique_digits()\n\
    #1 /tmp/tmpvtkeungs.php(27): candidate()\n#2 /tmp/tmpvtkeungs.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvtkeungs.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $flag = true;\n        $temp = $value;\n        while ($temp > 0) {\n\
    \            $digit = $temp % 10;\n            if ($digit % 2 == 0) {\n      \
    \          $flag = false;\n                break;\n            }\n           \
    \ $temp = (int)($temp / 10);\n        }\n        if ($flag) {\n            $result[]\
    \ = $value;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n\
    $x = [15, 33, 1422, 1];\nprint_r(unique_digits($x));\necho \"\\n\";\n$x = [152,\
    \ 323, 1422, 10];\nprint_r(unique_digits($x));\necho \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nArray\n(\n)\n\
    \n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        $number = (string) $number;\n        $has_even_digit = false;\n     \
    \   for ($i = 0; $i < strlen($number); $i++) {\n            if ($number[$i] %\
    \ 2 == 0) {\n                $has_even_digit = true;\n                break;\n\
    \            }\n        }\n        if (!$has_even_digit) {\n            $result[]\
    \ = (int) $number;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $num) {\n    if\
    \ (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n      $result[] = $num;\n\
    \    }\n  }\n  sort($result);\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn9hurn1o.php:27\n\
    Stack trace:\n#0 /tmp/tmpn9hurn1o.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpn9hurn1o.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$y = [];\n\tforeach ($x as $i) {\n\t\tif (strlen($i)\
    \ == 1) {\n\t\t\t$y[] = $i;\n\t\t} else {\n\t\t\t$z = str_split($i);\n\t\t\t$flag\
    \ = true;\n\t\t\tforeach ($z as $j) {\n\t\t\t\tif ($j % 2 == 0) {\n\t\t\t\t\t\
    $flag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($flag) {\n\t\t\
    \t\t$y[] = $i;\n\t\t\t}\n\t\t}\n\t}\n\tsort($y);\n\treturn $y;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $digits = str_split($num);\n        $has_even = false;\n        foreach\
    \ ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                $has_even\
    \ = true;\n                break;\n            }\n        }\n        if (!$has_even)\
    \ {\n            $result[] = $num;\n        }\n    }\n    sort($result);\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num = strval($num);\n        $has_even = false;\n        for ($i = 0;\
    \ $i < strlen($num); $i++) {\n            if ($num[$i] % 2 == 0) {\n         \
    \       $has_even = true;\n                break;\n            }\n        }\n\
    \        if (!$has_even) {\n            $result[] = intval($num);\n        }\n\
    \    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkpwhhhwm.php:27\n\
    Stack trace:\n#0 /tmp/tmpkpwhhhwm.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpkpwhhhwm.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $num) {\n    if\
    \ (strlen($num) == 1) {\n      $result[] = $num;\n    } else {\n      $num_str\
    \ = strval($num);\n      $has_even = false;\n      for ($i = 0; $i < strlen($num_str);\
    \ $i++) {\n        if ($num_str[$i] % 2 == 0) {\n          $has_even = true;\n\
    \          break;\n        }\n      }\n      if (!$has_even) {\n        $result[]\
    \ = $num;\n      }\n    }\n  }\n  sort($result);\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        $number = strval($number);\n        $has_even_digit = false;\n      \
    \  for ($i = 0; $i < strlen($number); $i++) {\n            if ($number[$i] % 2\
    \ == 0) {\n                $has_even_digit = true;\n                break;\n \
    \           }\n        }\n        if (!$has_even_digit) {\n            $result[]\
    \ = intval($number);\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $value) {\n\t\t\
    $hasEven = false;\n\t\t$digits = str_split($value);\n\t\tforeach ($digits as $digit)\
    \ {\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t$hasEven = true;\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t}\n\t\tif (!$hasEven) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\t\
    sort($result);\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = (string)$num;\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $has_even = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even) {\n            $result[] = $num;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strpos($value, '2') === false && strpos($value, '4') === false &&\
    \ strpos($value, '6') === false && strpos($value, '8') === false) {\n        \
    \    $result[] = $value;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1ade6ybc.php:27\n\
    Stack trace:\n#0 /tmp/tmp1ade6ybc.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp1ade6ybc.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        if (strlen($number) == 1) {\n            $result[] = $number;\n     \
    \   } else {\n            $digits = str_split($number);\n            $has_even\
    \ = false;\n            foreach ($digits as $digit) {\n                if ($digit\
    \ % 2 == 0) {\n                    $has_even = true;\n                    break;\n\
    \                }\n            }\n            if (!$has_even) {\n           \
    \     $result[] = $number;\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $digits = str_split($value);\n        $has_even = false;\n        foreach\
    \ ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                $has_even\
    \ = true;\n                break;\n            }\n        }\n        if (!$has_even)\
    \ {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $has_even = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even) {\n            $result[] = $num;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (has_even_digit($num)) {\n            continue;\n        }\n     \
    \   $result[] = $num;\n    }\n    sort($result);\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function has_even_digit()\
    \ in /tmp/tmp_xke17hk.php:13\nStack trace:\n#0 /tmp/tmp_xke17hk.php(23): unique_digits()\n\
    #1 /tmp/tmp_xke17hk.php(27): candidate()\n#2 /tmp/tmp_xke17hk.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_xke17hk.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpugc5qjf3.php:27\n\
    Stack trace:\n#0 /tmp/tmpugc5qjf3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpugc5qjf3.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        $number = (string) $number;\n        $has_even_digit = false;\n     \
    \   for ($i = 0; $i < strlen($number); $i++) {\n            if ($number[$i] %\
    \ 2 == 0) {\n                $has_even_digit = true;\n                break;\n\
    \            }\n        }\n        if (!$has_even_digit) {\n            $result[]\
    \ = (int) $number;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $num) {\n    if\
    \ (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n      $result[] = $num;\n\
    \    }\n  }\n  sort($result);\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpigxfxdq9.php:27\n\
    Stack trace:\n#0 /tmp/tmpigxfxdq9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpigxfxdq9.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1azmc925.php:27\n\
    Stack trace:\n#0 /tmp/tmp1azmc925.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp1azmc925.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $digits = str_split($value);\n        $is_even = false;\n        foreach\
    \ ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                $is_even\
    \ = true;\n                break;\n            }\n        }\n        if (!$is_even)\
    \ {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $has_even = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even) {\n            $result[] = $num;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (has_even_digit($num)) {\n            continue;\n        }\n     \
    \   $result[] = $num;\n    }\n    sort($result);\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function has_even_digit()\
    \ in /tmp/tmp_3tl0l19.php:13\nStack trace:\n#0 /tmp/tmp_3tl0l19.php(23): unique_digits()\n\
    #1 /tmp/tmp_3tl0l19.php(27): candidate()\n#2 /tmp/tmp_3tl0l19.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_3tl0l19.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $num) {\n\t\t\
    if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n\t\t\t$result[] = $num;\n\t\
    \t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbsf9tt2n.php:27\n\
    Stack trace:\n#0 /tmp/tmpbsf9tt2n.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpbsf9tt2n.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            array_push($result, $value);\n\
    \        } else {\n            $even = false;\n            $value = str_split($value);\n\
    \            foreach ($value as $digit) {\n                if ($digit % 2 == 0)\
    \ {\n                    $even = true;\n                    break;\n         \
    \       }\n            }\n            if (!$even) {\n                array_push($result,\
    \ implode($value));\n            }\n        }\n    }\n    sort($result);\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3dzk1gin.php:38\n\
    Stack trace:\n#0 /tmp/tmp3dzk1gin.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3dzk1gin.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false &&\n            strpos($num, '4') ===\
    \ false &&\n            strpos($num, '6') === false &&\n            strpos($num,\
    \ '8') === false) {\n            $result[] = $num;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn75td_2p.php:30\n\
    Stack trace:\n#0 /tmp/tmpn75td_2p.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpn75td_2p.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpff4tszv3.php:27\n\
    Stack trace:\n#0 /tmp/tmpff4tszv3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpff4tszv3.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $num) {\n    if\
    \ (has_even_digit($num)) {\n      continue;\n    }\n    $result[] = $num;\n  }\n\
    \  sort($result);\n  return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function has_even_digit()\
    \ in /tmp/tmppk9n70ef.php:13\nStack trace:\n#0 /tmp/tmppk9n70ef.php(23): unique_digits()\n\
    #1 /tmp/tmppk9n70ef.php(27): candidate()\n#2 /tmp/tmppk9n70ef.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmppk9n70ef.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn0e9wz6k.php:27\n\
    Stack trace:\n#0 /tmp/tmpn0e9wz6k.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpn0e9wz6k.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpskg_yr_3.php:27\n\
    Stack trace:\n#0 /tmp/tmpskg_yr_3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpskg_yr_3.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (has_even_digit($num)) {\n            continue;\n        }\n     \
    \   $result[] = $num;\n    }\n    sort($result);\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function has_even_digit()\
    \ in /tmp/tmp03jggf2j.php:13\nStack trace:\n#0 /tmp/tmp03jggf2j.php(23): unique_digits()\n\
    #1 /tmp/tmp03jggf2j.php(27): candidate()\n#2 /tmp/tmp03jggf2j.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmp03jggf2j.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strpos($value, '2') === false && strpos($value, '4') === false &&\
    \ strpos($value, '6') === false && strpos($value, '8') === false) {\n        \
    \    $result[] = $value;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpd_v6iymt.php:27\n\
    Stack trace:\n#0 /tmp/tmpd_v6iymt.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpd_v6iymt.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        $number = (string) $number;\n        $has_even_digit = false;\n     \
    \   for ($i = 0; $i < strlen($number); $i++) {\n            if ($number[$i] %\
    \ 2 == 0) {\n                $has_even_digit = true;\n                break;\n\
    \            }\n        }\n        if (!$has_even_digit) {\n            $result[]\
    \ = (int) $number;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp68u22_f2.php:27\n\
    Stack trace:\n#0 /tmp/tmp68u22_f2.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp68u22_f2.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        if (strlen($number) == 1) {\n            $result[] = $number;\n     \
    \   } else {\n            $digits = str_split($number);\n            $is_even\
    \ = false;\n            foreach ($digits as $digit) {\n                if ($digit\
    \ % 2 == 0) {\n                    $is_even = true;\n                    break;\n\
    \                }\n            }\n            if (!$is_even) {\n            \
    \    $result[] = $number;\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $digits = str_split($value);\n        $is_even = false;\n        foreach\
    \ ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                $is_even\
    \ = true;\n                break;\n            }\n        }\n        if (!$is_even)\
    \ {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = (string)$value;\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($value); $i++) {\n            if ($value[$i] % 2 == 0) {\n\
    \                $has_even = true;\n                break;\n            }\n  \
    \      }\n        if (!$has_even) {\n            $result[] = $value;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8ie9aomx.php:34\n\
    Stack trace:\n#0 /tmp/tmp8ie9aomx.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp8ie9aomx.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strlen($num) == 1) {\n            $result[] = $num;\n        } else\
    \ {\n            $num_str = strval($num);\n            $is_unique = true;\n  \
    \          for ($i = 0; $i < strlen($num_str); $i++) {\n                if ($num_str[$i]\
    \ % 2 == 0) {\n                    $is_unique = false;\n                    break;\n\
    \                }\n            }\n            if ($is_unique) {\n           \
    \     $result[] = $num;\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $digits = str_split($value);\n        $is_even = false;\n        foreach\
    \ ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                $is_even\
    \ = true;\n                break;\n            }\n        }\n        if (!$is_even)\
    \ {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $digits = str_split($value);\n        $has_even = false;\n        foreach\
    \ ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                $has_even\
    \ = true;\n                break;\n            }\n        }\n        if (!$has_even)\
    \ {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = (string)$value;\n        $is_unique = true;\n        for ($i\
    \ = 0; $i < strlen($value); $i++) {\n            if ($value[$i] % 2 == 0) {\n\
    \                $is_unique = false;\n                break;\n            }\n\
    \        }\n        if ($is_unique) {\n            $result[] = (int)$value;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $digits = str_split($num);\n        $is_unique = true;\n        foreach\
    \ ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                $is_unique\
    \ = false;\n                break;\n            }\n        }\n        if ($is_unique)\
    \ {\n            $result[] = $num;\n        }\n    }\n    sort($result);\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strpos($value, '2') === false && strpos($value, '4') === false &&\
    \ strpos($value, '6') === false && strpos($value, '8') === false) {\n        \
    \    $result[] = $value;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxsj3bml1.php:27\n\
    Stack trace:\n#0 /tmp/tmpxsj3bml1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpxsj3bml1.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $has_even = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even) {\n            $result[] = $num;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $has_even = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even) {\n            $result[] = $num;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strpos($value, '2') === false &&\n            strpos($value, '4')\
    \ === false &&\n            strpos($value, '6') === false &&\n            strpos($value,\
    \ '8') === false) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpywyd573h.php:30\n\
    Stack trace:\n#0 /tmp/tmpywyd573h.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpywyd573h.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $is_unique = true;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $is_unique = false;\n                break;\n           \
    \ }\n        }\n        if ($is_unique) {\n            array_push($result, $num);\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            array_push($result, $value);\n\
    \        } else {\n            $has_even = false;\n            for ($i = 0; $i\
    \ < strlen($value); $i++) {\n                if ($value[$i] % 2 == 0) {\n    \
    \                $has_even = true;\n                    break;\n             \
    \   }\n            }\n            if (!$has_even) {\n                array_push($result,\
    \ $value);\n            }\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Trying to access array offset on value of type int in /tmp/tmpav0gdy9k.php\
    \ on line 18\nPHP Warning:  Trying to access array offset on value of type int\
    \ in /tmp/tmpav0gdy9k.php on line 18\nPHP Warning:  Trying to access array offset\
    \ on value of type int in /tmp/tmpav0gdy9k.php on line 18\nPHP Fatal error:  Uncaught\
    \ Exception: Test failed! in /tmp/tmpav0gdy9k.php:37\nStack trace:\n#0 /tmp/tmpav0gdy9k.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpav0gdy9k.php on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        if (strpos($number, '2') === false &&\n            strpos($number, '4')\
    \ === false &&\n            strpos($number, '6') === false &&\n            strpos($number,\
    \ '8') === false) {\n            $result[] = $number;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfv_spouy.php:30\n\
    Stack trace:\n#0 /tmp/tmpfv_spouy.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfv_spouy.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        if (has_unique_digits($number)) {\n            $result[] = $number;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function has_unique_digits()\
    \ in /tmp/tmpt8957sde.php:13\nStack trace:\n#0 /tmp/tmpt8957sde.php(22): unique_digits()\n\
    #1 /tmp/tmpt8957sde.php(26): candidate()\n#2 /tmp/tmpt8957sde.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpt8957sde.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $i) {\n    if\
    \ (strlen($i) == 1) {\n      $result[] = $i;\n    } else {\n      $has_even =\
    \ false;\n      for ($j = 0; $j < strlen($i); $j++) {\n        if ($i[$j] % 2\
    \ == 0) {\n          $has_even = true;\n          break;\n        }\n      }\n\
    \      if (!$has_even) {\n        $result[] = $i;\n      }\n    }\n  }\n  sort($result);\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Trying to access array offset on value of type int in /tmp/tmpk4rl5b7s.php\
    \ on line 18\nPHP Warning:  Trying to access array offset on value of type int\
    \ in /tmp/tmpk4rl5b7s.php on line 18\nPHP Warning:  Trying to access array offset\
    \ on value of type int in /tmp/tmpk4rl5b7s.php on line 18\nPHP Fatal error:  Uncaught\
    \ Exception: Test failed! in /tmp/tmpk4rl5b7s.php:37\nStack trace:\n#0 /tmp/tmpk4rl5b7s.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpk4rl5b7s.php on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        if (strpbrk($number, '02468') === false) {\n            $result[] = $number;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            array_push($result, $value);\n\
    \        } else {\n            $has_even = false;\n            $value_string =\
    \ strval($value);\n            for ($i = 0; $i < strlen($value_string); $i++)\
    \ {\n                if ($value_string[$i] % 2 == 0) {\n                    $has_even\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        if (!$has_even) {\n                array_push($result, $value);\n   \
    \         }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $num) {\n\t\t\
    $digits = str_split($num);\n\t\t$is_unique = true;\n\t\tforeach ($digits as $digit)\
    \ {\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t$is_unique = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($is_unique) {\n\t\t\t$result[] = $num;\n\t\t}\n\t}\n\t\
    sort($result);\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $has_even = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even) {\n            $result[] = $num;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            array_push($result, $value);\n\
    \        } else {\n            $is_even = false;\n            for ($i = 0; $i\
    \ < strlen($value); $i++) {\n                if ($value[$i] % 2 == 0) {\n    \
    \                $is_even = true;\n                    break;\n              \
    \  }\n            }\n            if (!$is_even) {\n                array_push($result,\
    \ $value);\n            }\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Trying to access array offset on value of type int in /tmp/tmp5iik8ipd.php\
    \ on line 18\nPHP Warning:  Trying to access array offset on value of type int\
    \ in /tmp/tmp5iik8ipd.php on line 18\nPHP Warning:  Trying to access array offset\
    \ on value of type int in /tmp/tmp5iik8ipd.php on line 18\nPHP Fatal error:  Uncaught\
    \ Exception: Test failed! in /tmp/tmp5iik8ipd.php:37\nStack trace:\n#0 /tmp/tmp5iik8ipd.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5iik8ipd.php on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2uedrzbr.php:27\n\
    Stack trace:\n#0 /tmp/tmp2uedrzbr.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2uedrzbr.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $digits = str_split($num);\n        $has_even = false;\n        foreach\
    \ ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                $has_even\
    \ = true;\n                break;\n            }\n        }\n        if (!$has_even)\
    \ {\n            $result[] = $num;\n        }\n    }\n    sort($result);\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = (string)$num;\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $has_even = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even) {\n            $result[] = $num;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $has_even = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even) {\n            $result[] = $num;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $digits = str_split($value);\n        $has_even = false;\n        foreach\
    \ ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                $has_even\
    \ = true;\n                break;\n            }\n        }\n        if (!$has_even)\
    \ {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            $result[] = $value;\n       \
    \ } else {\n            $str = strval($value);\n            $flag = true;\n  \
    \          for ($i = 0; $i < strlen($str); $i++) {\n                if ($str[$i]\
    \ % 2 == 0) {\n                    $flag = false;\n                    break;\n\
    \                }\n            }\n            if ($flag) {\n                $result[]\
    \ = $value;\n            }\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $has_even = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even) {\n            $result[] = $num;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $digits = str_split($value);\n        $has_even = false;\n        foreach\
    \ ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                $has_even\
    \ = true;\n                break;\n            }\n        }\n        if (!$has_even)\
    \ {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $digits = str_split($num);\n        $has_even = false;\n        foreach\
    \ ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                $has_even\
    \ = true;\n                break;\n            }\n        }\n        if (!$has_even)\
    \ {\n            $result[] = $num;\n        }\n    }\n    sort($result);\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strlen($num) == 1) {\n            $result[] = $num;\n        } else\
    \ {\n            $str = strval($num);\n            $has_even = false;\n      \
    \      for ($i = 0; $i < strlen($str); $i++) {\n                if ($str[$i] %\
    \ 2 == 0) {\n                    $has_even = true;\n                    break;\n\
    \                }\n            }\n            if (!$has_even) {\n           \
    \     $result[] = $num;\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpejp_ci1k.php:27\n\
    Stack trace:\n#0 /tmp/tmpejp_ci1k.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpejp_ci1k.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $digits = str_split($value);\n        $even = false;\n        foreach\
    \ ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                $even\
    \ = true;\n                break;\n            }\n        }\n        if (!$even)\
    \ {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            $result[] = $value;\n       \
    \ } else {\n            $is_unique = true;\n            for ($i = 0; $i < strlen($value);\
    \ $i++) {\n                if ($value[$i] % 2 == 0) {\n                    $is_unique\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if ($is_unique) {\n                $result[] = $value;\n           \
    \ }\n        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Trying to access array offset on value of type int in /tmp/tmpx5nbeam7.php\
    \ on line 18\nPHP Warning:  Trying to access array offset on value of type int\
    \ in /tmp/tmpx5nbeam7.php on line 18\nPHP Warning:  Trying to access array offset\
    \ on value of type int in /tmp/tmpx5nbeam7.php on line 18\nPHP Fatal error:  Uncaught\
    \ Exception: Test failed! in /tmp/tmpx5nbeam7.php:37\nStack trace:\n#0 /tmp/tmpx5nbeam7.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpx5nbeam7.php on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptp9n_icj.php:27\n\
    Stack trace:\n#0 /tmp/tmptp9n_icj.php(32): test()\n#1 {main}\n  thrown in /tmp/tmptp9n_icj.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        $number_string = (string) $number;\n        $has_even_digit = false;\n\
    \        for ($i = 0; $i < strlen($number_string); $i++) {\n            if ($number_string[$i]\
    \ % 2 == 0) {\n                $has_even_digit = true;\n                break;\n\
    \            }\n        }\n        if (!$has_even_digit) {\n            $result[]\
    \ = $number;\n        }\n    }\n    sort($result);\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323,\
    \ 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos(strval($num), '2') === false &&\n            strpos(strval($num),\
    \ '4') === false &&\n            strpos(strval($num), '6') === false &&\n    \
    \        strpos(strval($num), '8') === false) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphjp3mzn1.php:30\n\
    Stack trace:\n#0 /tmp/tmphjp3mzn1.php(35): test()\n#1 {main}\n  thrown in /tmp/tmphjp3mzn1.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $digits = str_split($value);\n        $has_even = false;\n        foreach\
    \ ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                $has_even\
    \ = true;\n                break;\n            }\n        }\n        if (!$has_even)\
    \ {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1stdbqsb.php:27\n\
    Stack trace:\n#0 /tmp/tmp1stdbqsb.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp1stdbqsb.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strpos($value, '2') === false && strpos($value, '4') === false &&\
    \ strpos($value, '6') === false && strpos($value, '8') === false) {\n        \
    \    $result[] = $value;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplfx26m9m.php:25\n\
    Stack trace:\n#0 /tmp/tmplfx26m9m.php(31): test()\n#1 {main}\n  thrown in /tmp/tmplfx26m9m.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strpos($value, '2') === false &&\n            strpos($value, '4')\
    \ === false &&\n            strpos($value, '6') === false &&\n            strpos($value,\
    \ '8') === false &&\n            strpos($value, '0') === false) {\n          \
    \  $result[] = $value;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $value) {\n\t\t\
    if (strpos($value, '2') === false && strpos($value, '4') === false && strpos($value,\
    \ '6') === false && strpos($value, '8') === false) {\n\t\t\t$result[] = $value;\n\
    \t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp38nncc_i.php:27\n\
    Stack trace:\n#0 /tmp/tmp38nncc_i.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp38nncc_i.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        if (strlen($number) == 1) {\n            $result[] = $number;\n     \
    \   } else {\n            $digits = str_split($number);\n            $has_even\
    \ = false;\n            foreach ($digits as $digit) {\n                if ($digit\
    \ % 2 == 0) {\n                    $has_even = true;\n                    break;\n\
    \                }\n            }\n            if (!$has_even) {\n           \
    \     $result[] = $number;\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $has_even = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even) {\n            $result[] = $num;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num = strval($num);\n        $has_even = false;\n        for ($i = 0;\
    \ $i < strlen($num); $i++) {\n            if ($num[$i] % 2 == 0) {\n         \
    \       $has_even = true;\n                break;\n            }\n        }\n\
    \        if (!$has_even) {\n            $result[] = intval($num);\n        }\n\
    \    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $num) {\n\t\t\
    if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n\t\t\t$result[] = $num;\n\t\
    \t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt_39rd1z.php:27\n\
    Stack trace:\n#0 /tmp/tmpt_39rd1z.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpt_39rd1z.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $is_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $is_even = true;\n                break;\n            }\n\
    \        }\n        if (!$is_even) {\n            array_push($result, $num);\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strlen($num) == 1) {\n            $result[] = $num;\n        } else\
    \ {\n            $has_even = false;\n            for ($i = 0; $i < strlen($num);\
    \ $i++) {\n                if ($num[$i] % 2 == 0) {\n                    $has_even\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        if (!$has_even) {\n                $result[] = $num;\n            }\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Trying to access array offset on value of type int in /tmp/tmp9jwtvcea.php\
    \ on line 18\nPHP Warning:  Trying to access array offset on value of type int\
    \ in /tmp/tmp9jwtvcea.php on line 18\nPHP Warning:  Trying to access array offset\
    \ on value of type int in /tmp/tmp9jwtvcea.php on line 18\nPHP Fatal error:  Uncaught\
    \ Exception: Test failed! in /tmp/tmp9jwtvcea.php:37\nStack trace:\n#0 /tmp/tmp9jwtvcea.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9jwtvcea.php on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $num) {\n\t\t\
    $digits = str_split($num);\n\t\t$is_unique = true;\n\t\tforeach ($digits as $digit)\
    \ {\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t$is_unique = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif ($is_unique) {\n\t\t\t$result[] = $num;\n\t\t}\n\t}\n\t\
    sort($result);\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = (string)$value;\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($value); $i++) {\n            if ($value[$i] % 2 == 0) {\n\
    \                $has_even = true;\n                break;\n            }\n  \
    \      }\n        if (!$has_even) {\n            $result[] = (int)$value;\n  \
    \      }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            $result[] = $value;\n       \
    \ } else {\n            $value = str_split($value);\n            $is_even = false;\n\
    \            foreach ($value as $digit) {\n                if ($digit % 2 == 0)\
    \ {\n                    $is_even = true;\n                    break;\n      \
    \          }\n            }\n            if (!$is_even) {\n                $result[]\
    \ = implode($value);\n            }\n        }\n    }\n    sort($result);\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5qmdziu4.php:38\n\
    Stack trace:\n#0 /tmp/tmp5qmdziu4.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp5qmdziu4.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $num) {\n\t\t\
    if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n\t\t\t$result[] = $num;\n\t\
    \t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptzm72jr_.php:27\n\
    Stack trace:\n#0 /tmp/tmptzm72jr_.php(32): test()\n#1 {main}\n  thrown in /tmp/tmptzm72jr_.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = (string)$value;\n        $even = false;\n        for ($i = 0;\
    \ $i < strlen($value); $i++) {\n            if ($value[$i] % 2 == 0) {\n     \
    \           $even = true;\n                break;\n            }\n        }\n\
    \        if (!$even) {\n            $result[] = (int)$value;\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $num) {\n    if\
    \ (strlen($num) == 1) {\n      $result[] = $num;\n    } else {\n      $str = strval($num);\n\
    \      $hasEven = false;\n      for ($i = 0; $i < strlen($str); $i++) {\n    \
    \    if ($str[$i] % 2 == 0) {\n          $hasEven = true;\n          break;\n\
    \        }\n      }\n      if (!$hasEven) {\n        $result[] = $num;\n     \
    \ }\n    }\n  }\n  sort($result);\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $value) {\n\t\t\
    if (strpos($value, '2') === false && strpos($value, '4') === false && strpos($value,\
    \ '6') === false && strpos($value, '8') === false) {\n\t\t\t$result[] = $value;\n\
    \t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkuh5d3rf.php:27\n\
    Stack trace:\n#0 /tmp/tmpkuh5d3rf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpkuh5d3rf.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false &&\n            strpos($num, '4') ===\
    \ false &&\n            strpos($num, '6') === false &&\n            strpos($num,\
    \ '8') === false) {\n            $result[] = $num;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf1b5n5o1.php:30\n\
    Stack trace:\n#0 /tmp/tmpf1b5n5o1.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpf1b5n5o1.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (has_unique_digits($num)) {\n            $result[] = $num;\n     \
    \   }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function has_unique_digits()\
    \ in /tmp/tmpt3xisdy2.php:13\nStack trace:\n#0 /tmp/tmpt3xisdy2.php(22): unique_digits()\n\
    #1 /tmp/tmpt3xisdy2.php(26): candidate()\n#2 /tmp/tmpt3xisdy2.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpt3xisdy2.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = strval($value);\n        $is_unique = true;\n        for ($i\
    \ = 0; $i < strlen($value); $i++) {\n            if ($value[$i] % 2 == 0) {\n\
    \                $is_unique = false;\n                break;\n            }\n\
    \        }\n        if ($is_unique) {\n            $result[] = intval($value);\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            $result[] = $value;\n       \
    \ } else {\n            $is_odd = true;\n            for ($i = 0; $i < strlen($value);\
    \ $i++) {\n                if ($value[$i] % 2 == 0) {\n                    $is_odd\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if ($is_odd) {\n                $result[] = $value;\n            }\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Trying to access array offset on value of type int in /tmp/tmpeiukmm_1.php\
    \ on line 18\nPHP Warning:  Trying to access array offset on value of type int\
    \ in /tmp/tmpeiukmm_1.php on line 18\nPHP Warning:  Trying to access array offset\
    \ on value of type int in /tmp/tmpeiukmm_1.php on line 18\nPHP Fatal error:  Uncaught\
    \ Exception: Test failed! in /tmp/tmpeiukmm_1.php:37\nStack trace:\n#0 /tmp/tmpeiukmm_1.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpeiukmm_1.php on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp80j9rv3e.php:27\n\
    Stack trace:\n#0 /tmp/tmp80j9rv3e.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp80j9rv3e.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkifdd078.php:27\n\
    Stack trace:\n#0 /tmp/tmpkifdd078.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpkifdd078.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        if (strpos($number, '2') === false && strpos($number, '4') === false\
    \ && strpos($number, '6') === false && strpos($number, '8') === false) {\n   \
    \         $result[] = $number;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1z_xs9wy.php:27\n\
    Stack trace:\n#0 /tmp/tmp1z_xs9wy.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp1z_xs9wy.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $is_unique = true;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $is_unique = false;\n                break;\n           \
    \ }\n        }\n        if ($is_unique) {\n            array_push($result, $num);\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if (intval($num_str[$i]) %\
    \ 2 == 0) {\n                $has_even = true;\n                break;\n     \
    \       }\n        }\n        if (!$has_even) {\n            array_push($result,\
    \ $num);\n        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $digits = str_split($num);\n        $even = false;\n        foreach ($digits\
    \ as $digit) {\n            if ($digit % 2 == 0) {\n                $even = true;\n\
    \                break;\n            }\n        }\n        if (!$even) {\n   \
    \         $result[] = $num;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $digits = str_split($value);\n        $is_unique = true;\n        foreach\
    \ ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                $is_unique\
    \ = false;\n                break;\n            }\n        }\n        if ($is_unique)\
    \ {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            $result[] = $value;\n       \
    \ } else {\n            $digits = str_split($value);\n            $is_unique =\
    \ true;\n            foreach ($digits as $digit) {\n                if ($digit\
    \ % 2 == 0) {\n                    $is_unique = false;\n                    break;\n\
    \                }\n            }\n            if ($is_unique) {\n           \
    \     $result[] = $value;\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$x = [15, 33, 1422, 1];\nprint_r(unique_digits($x));\n\
    echo \"\\n\";\n$x = [152, 323, 1422, 10];\nprint_r(unique_digits($x));\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 1\n    [1] => 15\n    [2] => 33\n)\n\nArray\n(\n)\n\
    \n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $has_even = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even) {\n            $result[] = $num;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $num) {\n    if\
    \ (strpos((string)$num, '2') === false &&\n        strpos((string)$num, '4') ===\
    \ false &&\n        strpos((string)$num, '6') === false &&\n        strpos((string)$num,\
    \ '8') === false &&\n        strpos((string)$num, '0') === false) {\n      $result[]\
    \ = $num;\n    }\n  }\n  sort($result);\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen(strval($value)) == 1) {\n            array_push($result, $value);\n\
    \        } else {\n            $digits = str_split(strval($value));\n        \
    \    $is_unique = true;\n            foreach ($digits as $digit) {\n         \
    \       if ($digit % 2 == 0) {\n                    $is_unique = false;\n    \
    \                break;\n                }\n            }\n            if ($is_unique)\
    \ {\n                array_push($result, $value);\n            }\n        }\n\
    \    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $value) {\n\t\t\
    $value = (string)$value;\n\t\t$hasEven = false;\n\t\tfor ($i = 0; $i < strlen($value);\
    \ $i++) {\n\t\t\tif ($value[$i] % 2 == 0) {\n\t\t\t\t$hasEven = true;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif (!$hasEven) {\n\t\t\t$result[] = (int)$value;\n\
    \t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strpos($value, '2') === false &&\n            strpos($value, '4')\
    \ === false &&\n            strpos($value, '6') === false &&\n            strpos($value,\
    \ '8') === false &&\n            strpos($value, '0') === false) {\n          \
    \  $result[] = $value;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos(strval($num), '2') === false &&\n            strpos(strval($num),\
    \ '4') === false &&\n            strpos(strval($num), '6') === false &&\n    \
    \        strpos(strval($num), '8') === false &&\n            strpos(strval($num),\
    \ '0') === false) {\n            $result[] = $num;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $num) {\n    if\
    \ (strlen($num) == 1) {\n      $result[] = $num;\n    } else {\n      $num_str\
    \ = strval($num);\n      $has_even = false;\n      for ($i = 0; $i < strlen($num_str);\
    \ $i++) {\n        if ($num_str[$i] % 2 == 0) {\n          $has_even = true;\n\
    \          break;\n        }\n      }\n      if (!$has_even) {\n        $result[]\
    \ = $num;\n      }\n    }\n  }\n  sort($result);\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $i) {\n  \
    \      $digits = str_split($i);\n        $is_unique = true;\n        foreach ($digits\
    \ as $d) {\n            if ($d % 2 == 0) {\n                $is_unique = false;\n\
    \                break;\n            }\n        }\n        if ($is_unique) {\n\
    \            $result[] = $i;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $even = array(0, 2, 4, 6, 8);\n    $result =\
    \ array();\n    foreach ($x as $num) {\n        $digits = str_split($num);\n \
    \       $has_even = false;\n        foreach ($digits as $digit) {\n          \
    \  if (in_array($digit, $even)) {\n                $has_even = true;\n       \
    \         break;\n            }\n        }\n        if (!$has_even) {\n      \
    \      $result[] = $num;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strlen($num) == 1) {\n            $result[] = $num;\n        } else\
    \ {\n            $has_even = false;\n            for ($i = 0; $i < strlen($num);\
    \ $i++) {\n                if ($num[$i] % 2 == 0) {\n                    $has_even\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        if (!$has_even) {\n                $result[] = $num;\n            }\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Trying to access array offset on value of type int in /tmp/tmp06ha7ndm.php\
    \ on line 18\nPHP Warning:  Trying to access array offset on value of type int\
    \ in /tmp/tmp06ha7ndm.php on line 18\nPHP Warning:  Trying to access array offset\
    \ on value of type int in /tmp/tmp06ha7ndm.php on line 18\nPHP Fatal error:  Uncaught\
    \ Exception: Test failed! in /tmp/tmp06ha7ndm.php:37\nStack trace:\n#0 /tmp/tmp06ha7ndm.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp06ha7ndm.php on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $even_digit = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $even_digit = true;\n                break;\n           \
    \ }\n        }\n        if (!$even_digit) {\n            array_push($result, $num);\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_36_5uge.php:27\n\
    Stack trace:\n#0 /tmp/tmp_36_5uge.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_36_5uge.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $has_even = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even) {\n            $result[] = $num;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        if (strlen($number) == 1) {\n            array_push($result, $number);\n\
    \        } else {\n            $digits = str_split($number);\n            $is_even\
    \ = false;\n            foreach ($digits as $digit) {\n                if ($digit\
    \ % 2 == 0) {\n                    $is_even = true;\n                    break;\n\
    \                }\n            }\n            if (!$is_even) {\n            \
    \    array_push($result, $number);\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num = strval($num);\n        $has_even = false;\n        for ($i = 0;\
    \ $i < strlen($num); $i++) {\n            if ($num[$i] % 2 == 0) {\n         \
    \       $has_even = true;\n                break;\n            }\n        }\n\
    \        if (!$has_even) {\n            $result[] = intval($num);\n        }\n\
    \    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $num) {\n\t\t\
    $num = (string)$num;\n\t\t$is_unique = true;\n\t\tfor ($i = 0; $i < strlen($num);\
    \ $i++) {\n\t\t\tif ($num[$i] % 2 == 0) {\n\t\t\t\t$is_unique = false;\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($is_unique) {\n\t\t\t$result[] = (int)$num;\n\
    \t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strpos($value, '2') === false && strpos($value, '4') === false &&\
    \ strpos($value, '6') === false && strpos($value, '8') === false) {\n        \
    \    $result[] = $value;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpaxpdttts.php:27\n\
    Stack trace:\n#0 /tmp/tmpaxpdttts.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpaxpdttts.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $num) {\n    $num_str\
    \ = (string)$num;\n    $has_even = false;\n    for ($i = 0; $i < strlen($num_str);\
    \ $i++) {\n      if ($num_str[$i] % 2 == 0) {\n        $has_even = true;\n   \
    \     break;\n      }\n    }\n    if (!$has_even) {\n      $result[] = $num;\n\
    \    }\n  }\n  sort($result);\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $has_even = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even) {\n            $result[] = $num;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        if (strlen($number) == 1) {\n            $result[] = $number;\n     \
    \   } else {\n            $digits = str_split($number);\n            $is_unique\
    \ = true;\n            foreach ($digits as $digit) {\n                if ($digit\
    \ % 2 == 0) {\n                    $is_unique = false;\n                    break;\n\
    \                }\n            }\n            if ($is_unique) {\n           \
    \     $result[] = $number;\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $value) {\n\t\t\
    $digits = str_split($value);\n\t\t$is_unique = true;\n\t\tforeach ($digits as\
    \ $digit) {\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t$is_unique = false;\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($is_unique) {\n\t\t\t$result[] = $value;\n\t\
    \t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strlen($num) == 1) {\n            array_push($result, $num);\n  \
    \      } else {\n            $num_str = strval($num);\n            $is_unique\
    \ = true;\n            for ($i = 0; $i < strlen($num_str); $i++) {\n         \
    \       if ($num_str[$i] % 2 == 0) {\n                    $is_unique = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ ($is_unique) {\n                array_push($result, $num);\n            }\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $digits = str_split($value);\n        $is_unique = true;\n        foreach\
    \ ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                $is_unique\
    \ = false;\n                break;\n            }\n        }\n        if ($is_unique)\
    \ {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg7ue8jyc.php:27\n\
    Stack trace:\n#0 /tmp/tmpg7ue8jyc.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpg7ue8jyc.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $num) {\n\t\t\
    $num = strval($num);\n\t\t$hasEven = false;\n\t\tfor ($i = 0; $i < strlen($num);\
    \ $i++) {\n\t\t\tif ($num[$i] % 2 == 0) {\n\t\t\t\t$hasEven = true;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif (!$hasEven) {\n\t\t\tarray_push($result, intval($num));\n\
    \t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $value) {\n\t\t\
    if (strlen($value) == 1) {\n\t\t\tarray_push($result, $value);\n\t\t} else {\n\
    \t\t\t$str = strval($value);\n\t\t\t$str_arr = str_split($str);\n\t\t\t$is_even\
    \ = false;\n\t\t\tforeach ($str_arr as $char) {\n\t\t\t\tif ($char % 2 == 0) {\n\
    \t\t\t\t\t$is_even = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!$is_even)\
    \ {\n\t\t\t\tarray_push($result, $value);\n\t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\
    \treturn $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, \"2\") === false && strpos($num, \"4\") === false &&\
    \ strpos($num, \"6\") === false && strpos($num, \"8\") === false) {\n        \
    \    $result[] = $num;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf0ke1gkm.php:27\n\
    Stack trace:\n#0 /tmp/tmpf0ke1gkm.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpf0ke1gkm.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strpos($value, '2') === false &&\n            strpos($value, '4')\
    \ === false &&\n            strpos($value, '6') === false &&\n            strpos($value,\
    \ '8') === false &&\n            strpos($value, '0') === false) {\n          \
    \  $result[] = $value;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strlen($num) == 1) {\n            $result[] = $num;\n        } else\
    \ {\n            $hasEven = false;\n            for ($i = 0; $i < strlen($num);\
    \ $i++) {\n                if ($num[$i] % 2 == 0) {\n                    $hasEven\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        if (!$hasEven) {\n                $result[] = $num;\n            }\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Trying to access array offset on value of type int in /tmp/tmpxzm7sqbz.php\
    \ on line 18\nPHP Warning:  Trying to access array offset on value of type int\
    \ in /tmp/tmpxzm7sqbz.php on line 18\nPHP Warning:  Trying to access array offset\
    \ on value of type int in /tmp/tmpxzm7sqbz.php on line 18\nPHP Fatal error:  Uncaught\
    \ Exception: Test failed! in /tmp/tmpxzm7sqbz.php:37\nStack trace:\n#0 /tmp/tmpxzm7sqbz.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxzm7sqbz.php on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        $digits = str_split($number);\n        $has_even_digit = false;\n   \
    \     foreach ($digits as $digit) {\n            if ($digit % 2 == 0) {\n    \
    \            $has_even_digit = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even_digit) {\n            $result[] = $number;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        $number = (string) $number;\n        $has_even_digit = false;\n     \
    \   for ($i = 0; $i < strlen($number); $i++) {\n            if ($number[$i] %\
    \ 2 == 0) {\n                $has_even_digit = true;\n                break;\n\
    \            }\n        }\n        if (!$has_even_digit) {\n            $result[]\
    \ = (int) $number;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $number) {\n\t\
    \t$number = str_split($number);\n\t\t$is_unique = true;\n\t\tforeach ($number\
    \ as $digit) {\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t$is_unique = false;\n\t\t\
    \t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($is_unique) {\n\t\t\t$result[] = implode($number);\n\
    \t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm9h6l2zc.php:34\n\
    Stack trace:\n#0 /tmp/tmpm9h6l2zc.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpm9h6l2zc.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = strval($value);\n        $is_unique = true;\n        for ($i\
    \ = 0; $i < strlen($value); $i++) {\n            if ($value[$i] % 2 == 0) {\n\
    \                $is_unique = false;\n                break;\n            }\n\
    \        }\n        if ($is_unique) {\n            $result[] = intval($value);\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            $result[] = $value;\n       \
    \ } else {\n            $has_even = false;\n            for ($i = 0; $i < strlen($value);\
    \ $i++) {\n                if ($value[$i] % 2 == 0) {\n                    $has_even\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        if (!$has_even) {\n                $result[] = $value;\n            }\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Trying to access array offset on value of type int in /tmp/tmp0w_ezbk3.php\
    \ on line 18\nPHP Warning:  Trying to access array offset on value of type int\
    \ in /tmp/tmp0w_ezbk3.php on line 18\nPHP Warning:  Trying to access array offset\
    \ on value of type int in /tmp/tmp0w_ezbk3.php on line 18\nPHP Fatal error:  Uncaught\
    \ Exception: Test failed! in /tmp/tmp0w_ezbk3.php:37\nStack trace:\n#0 /tmp/tmp0w_ezbk3.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0w_ezbk3.php on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        if (strlen($number) == 1) {\n            array_push($result, $number);\n\
    \        } else {\n            $digits = str_split($number);\n            $is_unique\
    \ = true;\n            foreach ($digits as $digit) {\n                if ($digit\
    \ % 2 == 0) {\n                    $is_unique = false;\n                    break;\n\
    \                }\n            }\n            if ($is_unique) {\n           \
    \     array_push($result, $number);\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $num) {\n\t\t\
    $num_str = strval($num);\n\t\t$has_even = false;\n\t\tfor ($i = 0; $i < strlen($num_str);\
    \ $i++) {\n\t\t\tif (intval($num_str[$i]) % 2 == 0) {\n\t\t\t\t$has_even = true;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!$has_even) {\n\t\t\tarray_push($result,\
    \ $num);\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $i) {\n    $digits\
    \ = str_split($i);\n    $has_even = false;\n    foreach ($digits as $d) {\n  \
    \    if ($d % 2 == 0) {\n        $has_even = true;\n        break;\n      }\n\
    \    }\n    if (!$has_even) {\n      $result[] = $i;\n    }\n  }\n  sort($result);\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $has_even = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even) {\n            $result[] = $num;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $has_even = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even) {\n            $result[] = $num;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        if (strpos($number, '2') === false &&\n            strpos($number, '4')\
    \ === false &&\n            strpos($number, '6') === false &&\n            strpos($number,\
    \ '8') === false &&\n            strpos($number, '0') === false) {\n         \
    \   $result[] = $number;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $has_even = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even) {\n            $result[] = $num;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $has_even_digit = false;\n        $digits = str_split($value);\n    \
    \    foreach ($digits as $digit) {\n            if ($digit % 2 == 0) {\n     \
    \           $has_even_digit = true;\n                break;\n            }\n \
    \       }\n        if (!$has_even_digit) {\n            $result[] = $value;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $str = (string)$value;\n        $is_even = false;\n        for ($i =\
    \ 0; $i < strlen($str); $i++) {\n            if ($str[$i] % 2 == 0) {\n      \
    \          $is_even = true;\n                break;\n            }\n        }\n\
    \        if (!$is_even) {\n            $result[] = $value;\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        if (strpos($number, '2') === false && strpos($number, '4') === false\
    \ && strpos($number, '6') === false && strpos($number, '8') === false) {\n   \
    \         $result[] = $number;\n        }\n    }\n    sort($result);\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5di6j53f.php:27\n\
    Stack trace:\n#0 /tmp/tmp5di6j53f.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5di6j53f.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $digits = str_split($num);\n        $is_even = false;\n        foreach\
    \ ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                $is_even\
    \ = true;\n                break;\n            }\n        }\n        if (!$is_even)\
    \ {\n            $result[] = $num;\n        }\n    }\n    sort($result);\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strpos($value, '2') === false && strpos($value, '4') === false &&\
    \ strpos($value, '6') === false && strpos($value, '8') === false) {\n        \
    \    $result[] = $value;\n        }\n    }\n    sort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1e9omkq2.php:27\n\
    Stack trace:\n#0 /tmp/tmp1e9omkq2.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp1e9omkq2.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num = (string)$num;\n        $has_even = false;\n        for ($i = 0;\
    \ $i < strlen($num); $i++) {\n            if ($num[$i] % 2 == 0) {\n         \
    \       $has_even = true;\n                break;\n            }\n        }\n\
    \        if (!$has_even) {\n            $result[] = (int)$num;\n        }\n  \
    \  }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $res = [];\n    foreach ($x as $num) {\n   \
    \     $str = strval($num);\n        $has_even = false;\n        for ($i = 0; $i\
    \ < strlen($str); $i++) {\n            if ($str[$i] % 2 == 0) {\n            \
    \    $has_even = true;\n                break;\n            }\n        }\n   \
    \     if (!$has_even) {\n            $res[] = $num;\n        }\n    }\n    sort($res);\n\
    \    return $res;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpo9xwsfe0.php:27\n\
    Stack trace:\n#0 /tmp/tmpo9xwsfe0.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpo9xwsfe0.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        if (strlen($number) == 1) {\n            $result[] = $number;\n     \
    \   } else {\n            $digits = str_split($number);\n            $has_even\
    \ = false;\n            foreach ($digits as $digit) {\n                if ($digit\
    \ % 2 == 0) {\n                    $has_even = true;\n                    break;\n\
    \                }\n            }\n            if (!$has_even) {\n           \
    \     $result[] = $number;\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $is_unique = true;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $is_unique = false;\n                break;\n           \
    \ }\n        }\n        if ($is_unique) {\n            array_push($result, $num);\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (has_even_digit($num)) {\n            continue;\n        }\n     \
    \   $result[] = $num;\n    }\n    sort($result);\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function has_even_digit()\
    \ in /tmp/tmpmwj2tkvm.php:13\nStack trace:\n#0 /tmp/tmpmwj2tkvm.php(23): unique_digits()\n\
    #1 /tmp/tmpmwj2tkvm.php(27): candidate()\n#2 /tmp/tmpmwj2tkvm.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmwj2tkvm.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (has_even_digit($num)) {\n            continue;\n        }\n     \
    \   $result[] = $num;\n    }\n    sort($result);\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function has_even_digit()\
    \ in /tmp/tmpnuqgt25q.php:13\nStack trace:\n#0 /tmp/tmpnuqgt25q.php(23): unique_digits()\n\
    #1 /tmp/tmpnuqgt25q.php(27): candidate()\n#2 /tmp/tmpnuqgt25q.php(33): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnuqgt25q.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $value) {\n\t\t\
    if (strlen($value) == 1) {\n\t\t\t$result[] = $value;\n\t\t} else {\n\t\t\t$count\
    \ = 0;\n\t\t\tfor ($i = 0; $i < strlen($value); $i++) {\n\t\t\t\tif ($value[$i]\
    \ % 2 == 0) {\n\t\t\t\t\t$count++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($count == 0)\
    \ {\n\t\t\t\t$result[] = $value;\n\t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Trying to access array offset on value of type int in /tmp/tmpsyz70gwa.php\
    \ on line 18\nPHP Warning:  Trying to access array offset on value of type int\
    \ in /tmp/tmpsyz70gwa.php on line 18\nPHP Warning:  Trying to access array offset\
    \ on value of type int in /tmp/tmpsyz70gwa.php on line 18\nPHP Warning:  Trying\
    \ to access array offset on value of type int in /tmp/tmpsyz70gwa.php on line\
    \ 18\nPHP Warning:  Trying to access array offset on value of type int in /tmp/tmpsyz70gwa.php\
    \ on line 18\nPHP Warning:  Trying to access array offset on value of type int\
    \ in /tmp/tmpsyz70gwa.php on line 18\nPHP Warning:  Trying to access array offset\
    \ on value of type int in /tmp/tmpsyz70gwa.php on line 18\nPHP Warning:  Trying\
    \ to access array offset on value of type int in /tmp/tmpsyz70gwa.php on line\
    \ 18\nPHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsyz70gwa.php:36\n\
    Stack trace:\n#0 /tmp/tmpsyz70gwa.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpsyz70gwa.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc6hm5ta1.php:27\n\
    Stack trace:\n#0 /tmp/tmpc6hm5ta1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpc6hm5ta1.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $has_even = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even) {\n            $result[] = $num;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n  $result = [];\n  foreach ($x as $num) {\n    if\
    \ (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n      $result[] = $num;\n\
    \    }\n  }\n  sort($result);\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbeqsc986.php:27\n\
    Stack trace:\n#0 /tmp/tmpbeqsc986.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpbeqsc986.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strlen($num) == 1) {\n            $result[] = $num;\n        } else\
    \ {\n            $num_str = strval($num);\n            $has_even = false;\n  \
    \          for ($i = 0; $i < strlen($num_str); $i++) {\n                if ($num_str[$i]\
    \ % 2 == 0) {\n                    $has_even = true;\n                    break;\n\
    \                }\n            }\n            if (!$has_even) {\n           \
    \     $result[] = $num;\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $has_even = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even) {\n            $result[] = $num;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $number) {\n\
    \        if (strlen($number) === 1) {\n            $result[] = $number;\n    \
    \    } else {\n            $is_even = false;\n            $number_array = str_split($number);\n\
    \            foreach ($number_array as $digit) {\n                if ($digit %\
    \ 2 === 0) {\n                    $is_even = true;\n                    break;\n\
    \                }\n            }\n            if (!$is_even) {\n            \
    \    $result[] = $number;\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false &&\n            strpos($num, '4') ===\
    \ false &&\n            strpos($num, '6') === false &&\n            strpos($num,\
    \ '8') === false) {\n            $result[] = $num;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvd1orn8_.php:30\n\
    Stack trace:\n#0 /tmp/tmpvd1orn8_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpvd1orn8_.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strlen($num) == 1) {\n            array_push($result, $num);\n  \
    \      } else {\n            $num_str = strval($num);\n            $is_unique\
    \ = true;\n            for ($i = 0; $i < strlen($num_str); $i++) {\n         \
    \       if ($num_str[$i] % 2 == 0) {\n                    $is_unique = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ ($is_unique) {\n                array_push($result, $num);\n            }\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgdv42a57.php:27\n\
    Stack trace:\n#0 /tmp/tmpgdv42a57.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpgdv42a57.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = strval($value);\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($value); $i++) {\n            if ($value[$i] % 2 == 0) {\n\
    \                $has_even = true;\n                break;\n            }\n  \
    \      }\n        if (!$has_even) {\n            $result[] = intval($value);\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4ivsrtnu.php:27\n\
    Stack trace:\n#0 /tmp/tmp4ivsrtnu.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp4ivsrtnu.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $num) {\n\t\t\
    $num = strval($num);\n\t\tif (strpos($num, '2') === false && strpos($num, '4')\
    \ === false && strpos($num, '6') === false && strpos($num, '8') === false) {\n\
    \t\t\t$result[] = intval($num);\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2cmmvjcy.php:28\n\
    Stack trace:\n#0 /tmp/tmp2cmmvjcy.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2cmmvjcy.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $num) {\n\t\t\
    $digits = str_split($num);\n\t\t$has_even = false;\n\t\tforeach ($digits as $digit)\
    \ {\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t$has_even = true;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\tif (!$has_even) {\n\t\t\t$result[] = $num;\n\t\t}\n\t}\n\t\
    sort($result);\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ unique_digits(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(15,\
    \ 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(152, 323, 1422, 10)) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12345, 2033, 111, 151)) !== array(111,\
    \ 151)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(135,\
    \ 103, 31)) !== array(31, 135)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $has_even = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even) {\n            $result[] = $num;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $hasEven = false;\n        $digits = str_split($value);\n        foreach\
    \ ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                $hasEven\
    \ = true;\n                break;\n            }\n        }\n        if (!$hasEven)\
    \ {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $num) {\n\t\t\
    $num = (string)$num;\n\t\t$has_even = false;\n\t\tfor ($i = 0; $i < strlen($num);\
    \ $i++) {\n\t\t\tif ($num[$i] % 2 == 0) {\n\t\t\t\t$has_even = true;\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\tif (!$has_even) {\n\t\t\t$result[] = (int)$num;\n\t\
    \t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        $num_str = strval($num);\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($num_str); $i++) {\n            if ($num_str[$i] % 2 == 0)\
    \ {\n                $has_even = true;\n                break;\n            }\n\
    \        }\n        if (!$has_even) {\n            $result[] = $num;\n       \
    \ }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (strlen($value) == 1) {\n            $result[] = $value;\n       \
    \ } else {\n            $str = strval($value);\n            $is_unique = true;\n\
    \            for ($i = 0; $i < strlen($str); $i++) {\n                if ($str[$i]\
    \ % 2 == 0) {\n                    $is_unique = false;\n                    break;\n\
    \                }\n            }\n            if ($is_unique) {\n           \
    \     $result[] = $value;\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $number) {\n\t\
    \t$digits = str_split($number);\n\t\t$has_even_digit = false;\n\t\tforeach ($digits\
    \ as $digit) {\n\t\t\tif ($digit % 2 == 0) {\n\t\t\t\t$has_even_digit = true;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!$has_even_digit) {\n\t\t\t$result[] =\
    \ $number;\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strlen($num) == 1) {\n            $result[] = $num;\n        } else\
    \ {\n            $str = strval($num);\n            $has_even = false;\n      \
    \      for ($i = 0; $i < strlen($str); $i++) {\n                if ($str[$i] %\
    \ 2 == 0) {\n                    $has_even = true;\n                    break;\n\
    \                }\n            }\n            if (!$has_even) {\n           \
    \     $result[] = $num;\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        if (!preg_match('/[02468]/', $value)) {\n            $result[] = $value;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $value = strval($value);\n        $has_even = false;\n        for ($i\
    \ = 0; $i < strlen($value); $i++) {\n            if ($value[$i] % 2 == 0) {\n\
    \                $has_even = true;\n                break;\n            }\n  \
    \      }\n        if (!$has_even) {\n            $result[] = intval($value);\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n\t$result = [];\n\tforeach ($x as $i) {\n\t\tif\
    \ (strlen(strval($i)) == 1) {\n\t\t\tarray_push($result, $i);\n\t\t} else {\n\t\
    \t\t$str = strval($i);\n\t\t\t$flag = true;\n\t\t\tfor ($j = 0; $j < strlen($str);\
    \ $j++) {\n\t\t\t\tif ($str[$j] % 2 == 0) {\n\t\t\t\t\t$flag = false;\n\t\t\t\t\
    \tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($flag) {\n\t\t\t\tarray_push($result,\
    \ $i);\n\t\t\t}\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return unique_digits(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(152, 323, 1422,\
    \ 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345,\
    \ 2033, 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $value) {\n\
    \        $digits = str_split($value);\n        $is_unique = true;\n        foreach\
    \ ($digits as $digit) {\n            if ($digit % 2 == 0) {\n                $is_unique\
    \ = false;\n                break;\n            }\n        }\n        if ($is_unique)\
    \ {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $result = [];\n    foreach ($x as $num) {\n\
    \        if (strpos($num, '2') === false && strpos($num, '4') === false && strpos($num,\
    \ '6') === false && strpos($num, '8') === false) {\n            $result[] = $num;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return unique_digits(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(15, 33, 1422, 1)) !== array(1, 15, 33)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(152, 323, 1422, 10)) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12345, 2033,\
    \ 111, 151)) !== array(111, 151)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(135, 103, 31)) !== array(31, 135)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsb831sjw.php:27\n\
    Stack trace:\n#0 /tmp/tmpsb831sjw.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpsb831sjw.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of positive integers x. return a sorted list of\
    \ all \n// elements that hasn't any even digit.\n// Note: Returned list should\
    \ be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits($x) {\n    $res = [];\n    foreach ($x as $num) {\n   \
    \     $str = strval($num);\n        $hasEven = false;\n        for ($i = 0; $i\
    \ < strlen($str); $i++) {\n            if ($str[$i] % 2 == 0) {\n            \
    \    $hasEven = true;\n                break;\n            }\n        }\n    \
    \    if (!$hasEven) {\n            $res[] = $num;\n        }\n    }\n    sort($res);\n\
    \    return $res;\n}\n\nfunction candidate(...$args) {\n    return unique_digits(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(15, 33, 1422, 1)) !== array(1,\
    \ 15, 33)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(152,\
    \ 323, 1422, 10)) !== array()) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(12345, 2033, 111, 151)) !== array(111, 151)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(135, 103, 31)) !== array(31,\
    \ 135)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
