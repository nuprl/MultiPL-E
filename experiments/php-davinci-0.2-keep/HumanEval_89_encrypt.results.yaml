name: HumanEval_89_encrypt
language: php
results:
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$new_alphabet = substr($alphabet, 2) . substr($alphabet, 0, 2);\n\t$new_string\
    \ = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$new_string .= $new_alphabet[strpos($alphabet,\
    \ $s[$i])];\n\t}\n\treturn $new_string;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeevhh0xj.php:26\n\
    Stack trace:\n#0 /tmp/tmpeevhh0xj.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpeevhh0xj.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $new_string = '';\n    for ($i = 0; $i <\
    \ strlen($s); $i++) {\n        $new_string .= $alphabet[(strpos($alphabet, $s[$i])\
    \ + (2 * 2)) % 26];\n    }\n    return $new_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\";\n\t$encrypted = \"\";\n\tfor ($i = 0; $i < strlen($s);\
    \ $i++) {\n\t\t$index = strpos($alphabet, $s[$i]);\n\t\t$encrypted .= $alphabet[($index\
    \ + 2) * 2];\n\t}\n\treturn $encrypted;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph3yfi3p_.php:26\n\
    Stack trace:\n#0 /tmp/tmph3yfi3p_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmph3yfi3p_.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    $new_string\
    \ = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $new_string .= $alphabet[(array_search($s[$i],\
    \ $alphabet) + 4) % 26];\n    }\n    return $new_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$index = strpos($alphabet,\
    \ $s[$i]);\n\t\t$encrypted .= $alphabet[($index + 2) % 26];\n\t}\n\treturn $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0q1rzueh.php:26\n\
    Stack trace:\n#0 /tmp/tmp0q1rzueh.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0q1rzueh.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypt = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $letter = substr($s, $i, 1);\n        $position = strpos($alphabet,\
    \ $letter);\n        $newPosition = $position + 2 * 2;\n        if ($newPosition\
    \ > 25) {\n            $newPosition = $newPosition - 26;\n        }\n        $newLetter\
    \ = substr($alphabet, $newPosition, 1);\n        $encrypt = $encrypt . $newLetter;\n\
    \    }\n    return $encrypt;\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    $encrypted = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $letter\
    \ = $s[$i];\n        $index = array_search($letter, $alphabet);\n        $newIndex\
    \ = ($index + 2) * 2;\n        $newLetter = $alphabet[$newIndex];\n        $encrypted\
    \ .= $newLetter;\n    }\n    return $encrypted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfz1t0w69.php:29\n\
    Stack trace:\n#0 /tmp/tmpfz1t0w69.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpfz1t0w69.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = range('a',\
    \ 'z');\n\t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$index\
    \ = array_search($s[$i], $alphabet);\n\t\t$encrypted .= $alphabet[($index + 4)\
    \ % 26];\n\t}\n\treturn $encrypted;\n}\n\nfunction candidate(...$args) {\n   \
    \ return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpta5qx56t.php:26\n\
    Stack trace:\n#0 /tmp/tmpta5qx56t.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpta5qx56t.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \t$encrypted = array();\n\t$encrypted_string = '';\n\t$s = strtolower($s);\n\t\
    for ($i = 0; $i < strlen($s); $i++) {\n\t\t$encrypted[] = $alphabet[(array_search($s[$i],\
    \ $alphabet) + 4) % 26];\n\t}\n\tforeach ($encrypted as $char) {\n\t\t$encrypted_string\
    \ .= $char;\n\t}\n\treturn $encrypted_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkjwk8bzq.php:26\n\
    Stack trace:\n#0 /tmp/tmpkjwk8bzq.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpkjwk8bzq.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 4) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 4) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfssk5bzs.php:26\n\
    Stack trace:\n#0 /tmp/tmpfssk5bzs.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfssk5bzs.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $encrypted = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    $index = strpos($alphabet,\
    \ $s[$i]);\n    $index = ($index + 2) * 2;\n    $encrypted .= $alphabet[$index];\n\
    \  }\n  return $encrypted;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzwzuz3gw.php:27\n\
    Stack trace:\n#0 /tmp/tmpzwzuz3gw.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpzwzuz3gw.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\";\n\t$encrypted = \"\";\n\tfor ($i = 0; $i < strlen($s);\
    \ $i++) {\n\t\t$letter = $s[$i];\n\t\t$index = strpos($alphabet, $letter);\n\t\
    \t$encrypted .= $alphabet[($index + 2) % 26];\n\t}\n\treturn $encrypted;\n}\n\n\
    function candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp49iksivy.php:27\n\
    Stack trace:\n#0 /tmp/tmp49iksivy.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp49iksivy.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    $new_string = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $new_string\
    \ .= $alphabet[(array_search($s[$i], $alphabet) + 2) % 26];\n    }\n    return\
    \ $new_string;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq8bc0d8x.php:25\n\
    Stack trace:\n#0 /tmp/tmpq8bc0d8x.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpq8bc0d8x.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 4) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $newAlphabet = substr($alphabet, 2) . substr($alphabet,\
    \ 0, 2);\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n  \
    \      $encrypted .= $newAlphabet[strpos($alphabet, $s[$i])];\n    }\n    return\
    \ $encrypted;\n}\n\necho encrypt('hi') . '<br>';\necho encrypt('asdfghjkl') .\
    \ '<br>';\necho encrypt('gf') . '<br>';\necho encrypt('et') . '<br>';\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: jk<br>cufhijlmn<br>ih<br>gv<br>
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvwuzmp95.php:30\n\
    Stack trace:\n#0 /tmp/tmpvwuzmp95.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvwuzmp95.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\";\n\t$encrypted = \"\";\n\tfor ($i = 0; $i < strlen($s);\
    \ $i++) {\n\t\t$index = strpos($alphabet, $s[$i]);\n\t\t$encrypted .= $alphabet[($index\
    \ + 4) % 26];\n\t}\n\treturn $encrypted;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \t$encrypted = array();\n\t$s = str_split($s);\n\tforeach ($s as $letter) {\n\t\
    \t$index = array_search($letter, $alphabet);\n\t\t$encrypted[] = $alphabet[$index\
    \ + 4];\n\t}\n\treturn implode($encrypted);\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 26 in /tmp/tmp5a6jg3tn.php on line 17\n\
    PHP Warning:  Undefined array key 26 in /tmp/tmp5a6jg3tn.php on line 17\nPHP Warning:\
    \  Undefined array key 26 in /tmp/tmp5a6jg3tn.php on line 17\nPHP Fatal error:\
    \  Uncaught Exception: Test failed! in /tmp/tmp5a6jg3tn.php:31\nStack trace:\n\
    #0 /tmp/tmp5a6jg3tn.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5a6jg3tn.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$index = strpos($alphabet,\
    \ $s[$i]);\n\t\t$encrypted .= $alphabet[($index + 2) % 26];\n\t}\n\treturn $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppgw57xh0.php:26\n\
    Stack trace:\n#0 /tmp/tmppgw57xh0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmppgw57xh0.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n\t$new_string = '';\n\tfor ($i\
    \ = 0; $i < strlen($s); $i++) {\n\t\t$index = array_search($s[$i], $alphabet);\n\
    \t\t$new_string .= $alphabet[($index + 2) % 26];\n\t}\n\treturn $new_string;\n\
    }\necho encrypt('hi');\necho encrypt('asdfghjkl');\necho encrypt('gf');\necho\
    \ encrypt('et');\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: jkcufhijlmnihgv
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphksck2xu.php:29\n\
    Stack trace:\n#0 /tmp/tmphksck2xu.php(39): test()\n#1 {main}\n  thrown in /tmp/tmphksck2xu.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $new_alphabet = substr($alphabet, 2) . substr($alphabet, 0, 2);\n  $new_string\
    \ = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    $new_string .= $new_alphabet[strpos($alphabet,\
    \ $s[$i])];\n  }\n  return $new_string;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp59f1mdnd.php:26\n\
    Stack trace:\n#0 /tmp/tmp59f1mdnd.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp59f1mdnd.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\necho encrypt('hi')\
    \ . \"\\n\";\necho encrypt('asdfghjkl') . \"\\n\";\necho encrypt('gf') . \"\\\
    n\";\necho encrypt('et') . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "jk\ncufhijlmn\nih\ngv\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9ksokq3b.php:29\n\
    Stack trace:\n#0 /tmp/tmp9ksokq3b.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp9ksokq3b.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$new_alphabet = substr($alphabet, 2) . substr($alphabet, 0, 2);\n\t$encrypted\
    \ = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$encrypted .= $new_alphabet[strpos($alphabet,\
    \ $s[$i])];\n\t}\n\treturn $encrypted;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpekwo7mqj.php:26\n\
    Stack trace:\n#0 /tmp/tmpekwo7mqj.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpekwo7mqj.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$rotated = substr($alphabet, 2) . substr($alphabet, 0, 2);\n\t$s = strtolower($s);\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$encrypted .=\
    \ $rotated[strpos($alphabet, $s[$i])];\n\t}\n\treturn $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsq2otkp6.php:27\n\
    Stack trace:\n#0 /tmp/tmpsq2otkp6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpsq2otkp6.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[$index + 2];\n    }\n    return $encrypted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu7mh3d63.php:26\n\
    Stack trace:\n#0 /tmp/tmpu7mh3d63.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpu7mh3d63.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$new_alphabet = substr($alphabet, 2) . substr($alphabet, 0, 2);\n\t$new_string\
    \ = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$index = strpos($alphabet,\
    \ $s[$i]);\n\t\t$new_string .= $new_alphabet[$index];\n\t}\n\treturn $new_string;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8q92qidr.php:27\n\
    Stack trace:\n#0 /tmp/tmp8q92qidr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8q92qidr.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpysx4aomn.php:26\n\
    Stack trace:\n#0 /tmp/tmpysx4aomn.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpysx4aomn.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    $encrypted\
    \ = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $index = array_search($s[$i],\
    \ $alphabet);\n        $encrypted .= $alphabet[($index + 2) % 26];\n    }\n  \
    \  return $encrypted;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmoc3dax3.php:26\n\
    Stack trace:\n#0 /tmp/tmpmoc3dax3.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpmoc3dax3.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpybffihpp.php:26\n\
    Stack trace:\n#0 /tmp/tmpybffihpp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpybffihpp.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    $encrypted\
    \ = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $index = array_search($s[$i],\
    \ $alphabet);\n        $encrypted .= $alphabet[($index + 2) % 26];\n    }\n  \
    \  return $encrypted;\n}\n\necho encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl')\
    \ . \"\\n\";\necho encrypt('gf') . \"\\n\";\necho encrypt('et') . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "jk\ncufhijlmn\nih\ngv\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpynovyzr_.php:30\n\
    Stack trace:\n#0 /tmp/tmpynovyzr_.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpynovyzr_.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $encrypted = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    $index = strpos($alphabet,\
    \ $s[$i]);\n    $encrypted .= $alphabet[($index + 2) % 26];\n  }\n  return $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwp2s3xkg.php:26\n\
    Stack trace:\n#0 /tmp/tmpwp2s3xkg.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpwp2s3xkg.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $new_alphabet = substr($alphabet, 2) . substr($alphabet,\
    \ 0, 2);\n    $new_string = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n \
    \       $new_string .= $new_alphabet[strpos($alphabet, $s[$i])];\n    }\n    return\
    \ $new_string;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpoxpspv9z.php:26\n\
    Stack trace:\n#0 /tmp/tmpoxpspv9z.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpoxpspv9z.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\";\n\t$new_alphabet = substr($alphabet, 2) . substr($alphabet,\
    \ 0, 2);\n\t$encrypted = \"\";\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t\
    $encrypted .= $new_alphabet[strpos($alphabet, $s[$i])];\n\t}\n\treturn $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3h3x3hgx.php:26\n\
    Stack trace:\n#0 /tmp/tmp3h3x3hgx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3h3x3hgx.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$s = strtolower($s);\n\
    \t$s = str_split($s);\n\t$alphabet = range('a', 'z');\n\t$new_alphabet = array_merge(array_slice($alphabet,\
    \ 2), array_slice($alphabet, 0, 2));\n\t$new_string = '';\n\tforeach ($s as $letter)\
    \ {\n\t\t$new_string .= $new_alphabet[array_search($letter, $alphabet)];\n\t}\n\
    \treturn $new_string;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx3359zqy.php:28\n\
    Stack trace:\n#0 /tmp/tmpx3359zqy.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpx3359zqy.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $encrypted .= $alphabet[(strpos($alphabet, $s[$i]) + 4) % 26];\n\
    \    }\n    return $encrypted;\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $rotated = substr($alphabet, 2) . substr($alphabet,\
    \ 0, 2);\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n     \
    \   $result .= $rotated[strpos($alphabet, $s[$i])];\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8fy3wzhy.php:26\n\
    Stack trace:\n#0 /tmp/tmp8fy3wzhy.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp8fy3wzhy.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$encrypted .=\
    \ $alphabet[(strpos($alphabet, $s[$i]) + 4) % 26];\n\t}\n\treturn $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    $newAlphabet = array();\n    $newString = \"\";\n    $i = 0;\n    $j = 0;\n\
    \    $k = 0;\n    $l = 0;\n    $m = 0;\n    $n = 0;\n    $o = 0;\n    $p = 0;\n\
    \    $q = 0;\n    $r = 0;\n    $s = 0;\n    $t = 0;\n    $u = 0;\n    $v = 0;\n\
    \    $w = 0;\n    $x = 0;\n    $y = 0;\n    $z = 0;\n    $length = strlen($s);\n\
    \    $s = strtolower($s);\n    for ($i = 0; $i < $length; $i++) {\n        if\
    \ ($s[$i] == 'a') {\n            $newString .= $alphabet[2];\n        } else if\
    \ ($s[$i] == 'b') {\n            $newString .= $alphabet[3];\n        } else if\
    \ ($s[$i] == 'c') {\n            $newString .= $alphabet[4];\n        } else if\
    \ ($s[$i] == 'd') {\n            $newString .= $alphabet[5];\n        } else if\
    \ ($s[$i] == 'e') {\n            $newString .= $alphabet[6];\n        } else if\
    \ ($s[$i] == 'f') {\n            $newString .= $alphabet[7];\n        } else if\
    \ ($s[$i] == 'g') {\n            $newString .= $alphabet[8];\n        } else if\
    \ ($s[$i] == 'h') {\n            $newString .= $alphabet[9];\n        } else if\
    \ ($s[$i] == 'i') {\n            $newString .= $alphabet[10];\n        } else\
    \ if ($s[$i\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmp7fm4qp4p.php on line 55\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $newAlphabet = substr($alphabet, 2) . substr($alphabet,\
    \ 0, 2);\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n  \
    \      $encrypted .= $newAlphabet[strpos($alphabet, $s[$i])];\n    }\n    return\
    \ $encrypted;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppqcp0u_a.php:26\n\
    Stack trace:\n#0 /tmp/tmppqcp0u_a.php(36): test()\n#1 {main}\n  thrown in /tmp/tmppqcp0u_a.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptvdeb3ts.php:26\n\
    Stack trace:\n#0 /tmp/tmptvdeb3ts.php(36): test()\n#1 {main}\n  thrown in /tmp/tmptvdeb3ts.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $new_alphabet = substr($alphabet, 2) . substr($alphabet,\
    \ 0, 2);\n    $encrypt = strtr($s, $alphabet, $new_alphabet);\n    return $encrypt;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvd7fkc6l.php:23\n\
    Stack trace:\n#0 /tmp/tmpvd7fkc6l.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvd7fkc6l.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \t$new_string = \"\";\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$letter =\
    \ $s[$i];\n\t\t$index = array_search($letter, $alphabet);\n\t\t$new_index = $index\
    \ + 4;\n\t\tif ($new_index > 25) {\n\t\t\t$new_index = $new_index - 26;\n\t\t\
    }\n\t\t$new_string .= $alphabet[$new_index];\n\t}\n\treturn $new_string;\n}\n\n\
    function candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8wrd4c8k.php:26\n\
    Stack trace:\n#0 /tmp/tmp8wrd4c8k.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp8wrd4c8k.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \t$newString = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$index = array_search($s[$i],\
    \ $alphabet);\n\t\t$newString .= $alphabet[$index + 4];\n\t}\n\treturn $newString;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 26 in /tmp/tmptrhlj7xk.php on line 16\n\
    PHP Warning:  Undefined array key 26 in /tmp/tmptrhlj7xk.php on line 16\nPHP Warning:\
    \  Undefined array key 26 in /tmp/tmptrhlj7xk.php on line 16\nPHP Fatal error:\
    \  Uncaught Exception: Test failed! in /tmp/tmptrhlj7xk.php:30\nStack trace:\n\
    #0 /tmp/tmptrhlj7xk.php(36): test()\n#1 {main}\n  thrown in /tmp/tmptrhlj7xk.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \t$encrypted = array();\n\t$s = str_split($s);\n\tforeach ($s as $letter) {\n\t\
    \t$index = array_search($letter, $alphabet);\n\t\t$encrypted[] = $alphabet[$index\
    \ + 2];\n\t}\n\treturn implode($encrypted);\n}\n\necho encrypt('hi') . PHP_EOL;\n\
    echo encrypt('asdfghjkl') . PHP_EOL;\necho encrypt('gf') . PHP_EOL;\necho encrypt('et')\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "jk\ncufhijlmn\nih\ngv\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgx3cxv9h.php:31\n\
    Stack trace:\n#0 /tmp/tmpgx3cxv9h.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpgx3cxv9h.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $encrypted .= $alphabet[(strpos($alphabet, $s[$i]) + 4) % 26];\n\
    \    }\n    return $encrypted;\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$new_alphabet = substr($alphabet, 2) . substr($alphabet, 0, 2);\n\t$encrypted\
    \ = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$encrypted .= $new_alphabet[strpos($alphabet,\
    \ $s[$i])];\n\t}\n\treturn $encrypted;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3vab3v7e.php:26\n\
    Stack trace:\n#0 /tmp/tmp3vab3v7e.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3vab3v7e.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2 * 2) % 26];\n    }\n    return $encrypted;\n}\necho encrypt('hi');\n\
    echo encrypt('asdfghjkl');\necho encrypt('gf');\necho encrypt('et');\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: lmewhjklnopkjix
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    $encrypted = \"\";\n    for ($i = 0; $i\
    \ < strlen($s); $i++) {\n        $index = strpos($alphabet, $s[$i]);\n       \
    \ $encrypted .= $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpealkduti.php:26\n\
    Stack trace:\n#0 /tmp/tmpealkduti.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpealkduti.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$encrypted .=\
    \ $alphabet[(strpos($alphabet, $s[$i]) + 2) % 26];\n\t}\n\treturn $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpp7g80m3y.php:25\n\
    Stack trace:\n#0 /tmp/tmpp7g80m3y.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpp7g80m3y.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypt = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $pos = strpos($alphabet, $s[$i]);\n        $encrypt .= $alphabet[($pos\
    \ + 2) * 2];\n    }\n    return $encrypt;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq7_f69so.php:26\n\
    Stack trace:\n#0 /tmp/tmpq7_f69so.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpq7_f69so.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp978_5cwq.php:26\n\
    Stack trace:\n#0 /tmp/tmp978_5cwq.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp978_5cwq.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ str_split('abcdefghijklmnopqrstuvwxyz');\n    $encrypted = '';\n    for ($i\
    \ = 0; $i < strlen($s); $i++) {\n        $index = array_search($s[$i], $alphabet);\n\
    \        $encrypted .= $alphabet[($index + 4) % 26];\n    }\n    return $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $a = str_split($s);\n\
    \    $b = [];\n    foreach ($a as $c) {\n        $b[] = chr(ord($c) + 4);\n  \
    \  }\n    return implode('', $b);\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp69ma4195.php:29\n\
    Stack trace:\n#0 /tmp/tmp69ma4195.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp69ma4195.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9e_5oomo.php:26\n\
    Stack trace:\n#0 /tmp/tmp9e_5oomo.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp9e_5oomo.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    $encrypted\
    \ = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $index = array_search($s[$i],\
    \ $alphabet);\n        if ($index + 2 > 25) {\n            $encrypted .= $alphabet[$index\
    \ + 2 - 26];\n        } else {\n            $encrypted .= $alphabet[$index + 2];\n\
    \        }\n    }\n    return $encrypted;\n}\necho encrypt('hi');\necho encrypt('asdfghjkl');\n\
    echo encrypt('gf');\necho encrypt('et');\nfunction candidate(...$args) {\n   \
    \ return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: jkcufhijlmnihgv
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpksbis97a.php:33\n\
    Stack trace:\n#0 /tmp/tmpksbis97a.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpksbis97a.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcul286i3.php:26\n\
    Stack trace:\n#0 /tmp/tmpcul286i3.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpcul286i3.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $encrypted .= $alphabet[(strpos($alphabet, $s[$i]) + 4) % 26];\n\
    \    }\n    return $encrypted;\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe334xb_m.php:26\n\
    Stack trace:\n#0 /tmp/tmpe334xb_m.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpe334xb_m.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp69idab7p.php:26\n\
    Stack trace:\n#0 /tmp/tmp69idab7p.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp69idab7p.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + ($i * 2)) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplee3jp45.php:26\n\
    Stack trace:\n#0 /tmp/tmplee3jp45.php(36): test()\n#1 {main}\n  thrown in /tmp/tmplee3jp45.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsm3_g0lp.php:26\n\
    Stack trace:\n#0 /tmp/tmpsm3_g0lp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpsm3_g0lp.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $encrypt = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    $index = strpos($alphabet,\
    \ $s[$i]);\n    $encrypt .= $alphabet[($index + 2) * 2];\n  }\n  return $encrypt;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn5sa8wf_.php:26\n\
    Stack trace:\n#0 /tmp/tmpn5sa8wf_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpn5sa8wf_.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $encrypted = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    $letter = $s[$i];\n\
    \    $index = strpos($alphabet, $letter);\n    $newIndex = ($index + 2) * 2;\n\
    \    $newLetter = $alphabet[$newIndex];\n    $encrypted .= $newLetter;\n  }\n\
    \  return $encrypted;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1gj48aco.php:29\n\
    Stack trace:\n#0 /tmp/tmp1gj48aco.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp1gj48aco.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9ckt3j9a.php:26\n\
    Stack trace:\n#0 /tmp/tmp9ckt3j9a.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp9ckt3j9a.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqxwibp5t.php:26\n\
    Stack trace:\n#0 /tmp/tmpqxwibp5t.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpqxwibp5t.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$encrypted .=\
    \ $alphabet[(array_search($s[$i], $alphabet) + 4) % 26];\n\t}\n\treturn $encrypted;\n\
    }\n\necho encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl') . \"\\n\";\necho\
    \ encrypt('gf') . \"\\n\";\necho encrypt('et') . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "lm\newhjklnop\nkj\nix\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\";\n  $newAlphabet = substr($alphabet, 2) . substr($alphabet,\
    \ 0, 2);\n  $newString = \"\";\n  for ($i = 0; $i < strlen($s); $i++) {\n    $newString\
    \ .= $newAlphabet[strpos($alphabet, $s[$i])];\n  }\n  return $newString;\n}\n\n\
    function candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3cyumnul.php:26\n\
    Stack trace:\n#0 /tmp/tmp3cyumnul.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3cyumnul.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3rwqr5ep.php:26\n\
    Stack trace:\n#0 /tmp/tmp3rwqr5ep.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3rwqr5ep.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$new_alphabet = substr($alphabet, 2) . substr($alphabet, 0, 2);\n\t$encrypted\
    \ = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$encrypted .= $new_alphabet[strpos($alphabet,\
    \ $s[$i])];\n\t}\n\treturn $encrypted;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprypruptr.php:26\n\
    Stack trace:\n#0 /tmp/tmprypruptr.php(36): test()\n#1 {main}\n  thrown in /tmp/tmprypruptr.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$encrypted .=\
    \ $alphabet[(strpos($alphabet, $s[$i]) + 4) % 26];\n\t}\n\treturn $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \t$new_alphabet = array();\n\t$new_string = '';\n\tforeach ($alphabet as $key\
    \ => $value) {\n\t\t$new_key = $key + 2;\n\t\tif ($new_key > 25) {\n\t\t\t$new_key\
    \ = $new_key - 26;\n\t\t}\n\t\t$new_alphabet[$new_key] = $value;\n\t}\n\t$s =\
    \ strtolower($s);\n\t$s = str_split($s);\n\tforeach ($s as $key => $value) {\n\
    \t\t$new_string .= $new_alphabet[array_search($value, $alphabet)];\n\t}\n\treturn\
    \ $new_string;\n}\necho encrypt('hi');\necho encrypt('asdfghjkl');\necho encrypt('gf');\n\
    echo encrypt('et');\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: fgyqbdefhijedcr
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3jes0lom.php:38\n\
    Stack trace:\n#0 /tmp/tmp3jes0lom.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp3jes0lom.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n\t$newString = \"\";\n\tfor ($i\
    \ = 0; $i < strlen($s); $i++) {\n\t\t$newString .= $alphabet[(array_search($s[$i],\
    \ $alphabet) + 2) % 26];\n\t}\n\treturn $newString;\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp606peraq.php:25\n\
    Stack trace:\n#0 /tmp/tmp606peraq.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp606peraq.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $encrypted = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    $index = strpos($alphabet,\
    \ $s[$i]);\n    $encrypted .= $alphabet[($index + 2) % 26];\n  }\n  return $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3v8i46_s.php:26\n\
    Stack trace:\n#0 /tmp/tmp3v8i46_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3v8i46_s.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $encrypted = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    $index = strpos($alphabet,\
    \ $s[$i]);\n    $encrypted .= $alphabet[($index + 2) % 26];\n  }\n  return $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_4d933kz.php:26\n\
    Stack trace:\n#0 /tmp/tmp_4d933kz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_4d933kz.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvzeovxqj.php:26\n\
    Stack trace:\n#0 /tmp/tmpvzeovxqj.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvzeovxqj.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \t$encrypted = array();\n\t$s = str_split($s);\n\tforeach ($s as $letter) {\n\t\
    \t$index = array_search($letter, $alphabet);\n\t\t$encrypted[] = $alphabet[$index\
    \ + 2];\n\t}\n\treturn implode($encrypted);\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbk1hwojd.php:27\n\
    Stack trace:\n#0 /tmp/tmpbk1hwojd.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpbk1hwojd.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$new_alphabet = substr($alphabet, 2, strlen($alphabet)) . substr($alphabet,\
    \ 0, 2);\n\t$new_string = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$new_string\
    \ .= $new_alphabet[strpos($alphabet, $s[$i])];\n\t}\n\treturn $new_string;\n}\n\
    \nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps5gipemn.php:26\n\
    Stack trace:\n#0 /tmp/tmps5gipemn.php(36): test()\n#1 {main}\n  thrown in /tmp/tmps5gipemn.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\";\n\t$new_alphabet = substr($alphabet, 2) . substr($alphabet,\
    \ 0, 2);\n\t$encrypted = \"\";\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t\
    $encrypted .= $new_alphabet[strpos($alphabet, $s[$i])];\n\t}\n\treturn $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg6ek6b7i.php:26\n\
    Stack trace:\n#0 /tmp/tmpg6ek6b7i.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpg6ek6b7i.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$index = strpos($alphabet,\
    \ $s[$i]);\n\t\t$encrypted .= $alphabet[($index + 2) % 26];\n\t}\n\treturn $encrypted;\n\
    }\n\necho encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl') . \"\\n\";\necho\
    \ encrypt('gf') . \"\\n\";\necho encrypt('et') . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "jk\ncufhijlmn\nih\ngv\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpowafww7j.php:30\n\
    Stack trace:\n#0 /tmp/tmpowafww7j.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpowafww7j.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n\t$encrypted = '';\n\tfor ($i\
    \ = 0; $i < strlen($s); $i++) {\n\t\t$index = array_search($s[$i], $alphabet);\n\
    \t\t$encrypted .= $alphabet[($index + 4) % 26];\n\t}\n\treturn $encrypted;\n}\n\
    \nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwwn4d87h.php:26\n\
    Stack trace:\n#0 /tmp/tmpwwn4d87h.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpwwn4d87h.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    $encrypted = \"\";\n    for ($i = 0; $i\
    \ < strlen($s); $i++) {\n        $index = strpos($alphabet, $s[$i]);\n       \
    \ $encrypted .= $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n\
    }\necho encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl') . \"\\n\";\necho encrypt('gf')\
    \ . \"\\n\";\necho encrypt('et') . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "jk\ncufhijlmn\nih\ngv\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq_bh7ymd.php:29\n\
    Stack trace:\n#0 /tmp/tmpq_bh7ymd.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpq_bh7ymd.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    $encrypted = \"\";\n    for ($i = 0; $i\
    \ < strlen($s); $i++) {\n        $index = strpos($alphabet, $s[$i]);\n       \
    \ $encrypted .= $alphabet[($index + 2 * 2) % 26];\n    }\n    return $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypt = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypt .= $alphabet[($index\
    \ + (2 * 2)) % 26];\n    }\n    return $encrypt;\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $newAlphabet = substr($alphabet, 2) . substr($alphabet,\
    \ 0, 2);\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n  \
    \      $encrypted .= $newAlphabet[strpos($alphabet, $s[$i])];\n    }\n    return\
    \ $encrypted;\n}\necho encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl') . \"\
    \\n\";\necho encrypt('gf') . \"\\n\";\necho encrypt('et') . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "jk\ncufhijlmn\nih\ngv\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpodi9yi42.php:29\n\
    Stack trace:\n#0 /tmp/tmpodi9yi42.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpodi9yi42.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = range('a',\
    \ 'z');\n\t$encrypted = '';\n\t$s = strtolower($s);\n\tfor ($i = 0; $i < strlen($s);\
    \ $i++) {\n\t\t$index = array_search($s[$i], $alphabet);\n\t\tif ($index === false)\
    \ {\n\t\t\t$encrypted .= $s[$i];\n\t\t} else {\n\t\t\t$encrypted .= $alphabet[($index\
    \ + 2) % 26];\n\t\t}\n\t}\n\treturn $encrypted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnv6cbu77.php:31\n\
    Stack trace:\n#0 /tmp/tmpnv6cbu77.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpnv6cbu77.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7p5ms8t2.php:26\n\
    Stack trace:\n#0 /tmp/tmp7p5ms8t2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7p5ms8t2.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpejyij8x3.php:26\n\
    Stack trace:\n#0 /tmp/tmpejyij8x3.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpejyij8x3.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnopyp6dg.php:26\n\
    Stack trace:\n#0 /tmp/tmpnopyp6dg.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpnopyp6dg.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \t$encrypted = array();\n\t$s = str_split($s);\n\tforeach ($s as $letter) {\n\t\
    \t$index = array_search($letter, $alphabet);\n\t\t$index = $index + 2;\n\t\tif\
    \ ($index > 25) {\n\t\t\t$index = $index - 26;\n\t\t}\n\t\tarray_push($encrypted,\
    \ $alphabet[$index]);\n\t}\n\t$encrypted = implode($encrypted);\n\treturn $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9nu39ld2.php:32\n\
    Stack trace:\n#0 /tmp/tmp9nu39ld2.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp9nu39ld2.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $encrypted = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    $index = strpos($alphabet,\
    \ $s[$i]);\n    $encrypted .= $alphabet[($index + 2) % 26];\n  }\n  return $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy_ilsx1n.php:26\n\
    Stack trace:\n#0 /tmp/tmpy_ilsx1n.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpy_ilsx1n.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfzlb1mxv.php:26\n\
    Stack trace:\n#0 /tmp/tmpfzlb1mxv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfzlb1mxv.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $char = $s[$i];\n        $index = strpos($alphabet, $char);\n\
    \        $encrypted .= $alphabet[($index + 4) % 26];\n    }\n    return $encrypted;\n\
    }\n\necho encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl') . \"\\n\";\necho\
    \ encrypt('gf') . \"\\n\";\necho encrypt('et') . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "lm\newhjklnop\nkj\nix\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    $s = strtolower($s);\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n        $index = strpos($alphabet,\
    \ $s[$i]);\n        $index = ($index + 2) % 26;\n        $encrypted .= $alphabet[$index];\n\
    \    }\n    return $encrypted;\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp14ii5sq8.php:28\n\
    Stack trace:\n#0 /tmp/tmp14ii5sq8.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp14ii5sq8.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$index = strpos($alphabet,\
    \ $s[$i]);\n\t\t$encrypted .= $alphabet[($index + 2) % 26];\n\t}\n\treturn $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1vhmz41x.php:26\n\
    Stack trace:\n#0 /tmp/tmp1vhmz41x.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1vhmz41x.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 4) % 26];\n    }\n    return $encrypted;\n}\n\necho encrypt('hi')\
    \ . \"\\n\";\necho encrypt('asdfghjkl') . \"\\n\";\necho encrypt('gf') . \"\\\
    n\";\necho encrypt('et') . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "lm\newhjklnop\nkj\nix\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    $newAlphabet = substr($alphabet, 2) . substr($alphabet,\
    \ 0, 2);\n    $newString = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n\
    \        $newString .= $newAlphabet[strpos($alphabet, $s[$i])];\n    }\n    return\
    \ $newString;\n}\necho encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl') . \"\
    \\n\";\necho encrypt('gf') . \"\\n\";\necho encrypt('et') . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "jk\ncufhijlmn\nih\ngv\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxwp8b3j0.php:29\n\
    Stack trace:\n#0 /tmp/tmpxwp8b3j0.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpxwp8b3j0.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 4) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \t$newString = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$letter = $s[$i];\n\
    \t\t$index = array_search($letter, $alphabet);\n\t\t$newIndex = $index + (2 *\
    \ 2);\n\t\tif ($newIndex > 25) {\n\t\t\t$newIndex = $newIndex - 26;\n\t\t}\n\t\
    \t$newString .= $alphabet[$newIndex];\n\t}\n\treturn $newString;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$newAlphabet = substr($alphabet, 2) . substr($alphabet, 0, 2);\n\t$newString\
    \ = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$newString .= $newAlphabet[strpos($alphabet,\
    \ $s[$i])];\n\t}\n\treturn $newString;\n}\n\necho encrypt('hi') . \"\\n\";\necho\
    \ encrypt('asdfghjkl') . \"\\n\";\necho encrypt('gf') . \"\\n\";\necho encrypt('et')\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "jk\ncufhijlmn\nih\ngv\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgacu64_c.php:30\n\
    Stack trace:\n#0 /tmp/tmpgacu64_c.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpgacu64_c.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$encrypted .=\
    \ $alphabet[(strpos($alphabet, $s[$i]) + (2 * 2)) % 26];\n\t}\n\treturn $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$index = strpos($alphabet,\
    \ $s[$i]);\n\t\t$encrypted .= $alphabet[($index + 2) % 26];\n\t}\n\treturn $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpim8yninc.php:26\n\
    Stack trace:\n#0 /tmp/tmpim8yninc.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpim8yninc.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $encrypted .= $alphabet[(strpos($alphabet, $s[$i]) + 2 * 2)\
    \ % 26];\n    }\n    return $encrypted;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    $encrypted = '';\n    $s = strtolower($s);\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = array_search($s[$i], $alphabet);\n        $encrypted\
    \ .= $alphabet[($index + 4) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdqhjqfee.php:26\n\
    Stack trace:\n#0 /tmp/tmpdqhjqfee.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpdqhjqfee.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n\t$new_string = \"\";\n\tfor\
    \ ($i = 0; $i < strlen($s); $i++) {\n\t\t$index = array_search($s[$i], $alphabet);\n\
    \t\t$new_string .= $alphabet[($index + 4) % 26];\n\t}\n\treturn $new_string;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $newAlphabet = substr($alphabet, 2) . substr($alphabet,\
    \ 0, 2);\n    $newString = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n  \
    \      $newString .= $newAlphabet[strpos($alphabet, $s[$i])];\n    }\n    return\
    \ $newString;\n}\necho encrypt('hi');\necho encrypt('asdfghjkl');\necho encrypt('gf');\n\
    echo encrypt('et');\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: jkcufhijlmnihgv
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnhrmf8j1.php:29\n\
    Stack trace:\n#0 /tmp/tmpnhrmf8j1.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpnhrmf8j1.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpft3z_tls.php:26\n\
    Stack trace:\n#0 /tmp/tmpft3z_tls.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpft3z_tls.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpquyuir2v.php:26\n\
    Stack trace:\n#0 /tmp/tmpquyuir2v.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpquyuir2v.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$new_alphabet = substr($alphabet, 2) . substr($alphabet, 0, 2);\n\t$new_string\
    \ = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$new_string .= $new_alphabet[strpos($alphabet,\
    \ $s[$i])];\n\t}\n\treturn $new_string;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe_ykxe7s.php:26\n\
    Stack trace:\n#0 /tmp/tmpe_ykxe7s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpe_ykxe7s.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $encrypted = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    $index = strpos($alphabet,\
    \ $s[$i]);\n    $encrypted .= $alphabet[($index + 2) % 26];\n  }\n  return $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi_87nef5.php:26\n\
    Stack trace:\n#0 /tmp/tmpi_87nef5.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpi_87nef5.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $letter = $s[$i];\n        $index = strpos($alphabet, $letter);\n\
    \        $encrypted .= $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n\
    }\necho encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl') . \"\\n\";\necho encrypt('gf')\
    \ . \"\\n\";\necho encrypt('et') . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "jk\ncufhijlmn\nih\ngv\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6k9owufx.php:30\n\
    Stack trace:\n#0 /tmp/tmp6k9owufx.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6k9owufx.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\";\n\t$encrypted = \"\";\n\tfor ($i = 0; $i < strlen($s);\
    \ $i++) {\n\t\t$index = strpos($alphabet, $s[$i]);\n\t\t$encrypted .= $alphabet[($index\
    \ + 2) % 26];\n\t}\n\treturn $encrypted;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpobykelfg.php:26\n\
    Stack trace:\n#0 /tmp/tmpobykelfg.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpobykelfg.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    $encrypted = \"\";\n    for ($i = 0; $i\
    \ < strlen($s); $i++) {\n        $index = strpos($alphabet, $s[$i]);\n       \
    \ $encrypted .= $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdctphunz.php:26\n\
    Stack trace:\n#0 /tmp/tmpdctphunz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpdctphunz.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 4) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n\t$encrypted = '';\n\tfor ($i\
    \ = 0; $i < strlen($s); $i++) {\n\t\t$encrypted .= $alphabet[(array_search($s[$i],\
    \ $alphabet) + 2) % 26];\n\t}\n\treturn $encrypted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4j1ft9ho.php:25\n\
    Stack trace:\n#0 /tmp/tmp4j1ft9ho.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp4j1ft9ho.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$new_alphabet = substr($alphabet, 2) . substr($alphabet, 0, 2);\n\t$new_string\
    \ = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$new_string .= $new_alphabet[strpos($alphabet,\
    \ $s[$i])];\n\t}\n\treturn $new_string;\n}\n\necho encrypt('hi') . \"\\n\";\n\
    echo encrypt('asdfghjkl') . \"\\n\";\necho encrypt('gf') . \"\\n\";\necho encrypt('et')\
    \ . \"\\n\";\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "jk\ncufhijlmn\nih\ngv\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg77rmw91.php:31\n\
    Stack trace:\n#0 /tmp/tmpg77rmw91.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpg77rmw91.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp43twqdp_.php:26\n\
    Stack trace:\n#0 /tmp/tmp43twqdp_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp43twqdp_.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    $encrypted = array();\n    $s = str_split($s);\n    foreach ($s as $letter)\
    \ {\n        $encrypted[] = $alphabet[array_search($letter, $alphabet) + 2];\n\
    \    }\n    return implode('', $encrypted);\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzd_f5wjb.php:26\n\
    Stack trace:\n#0 /tmp/tmpzd_f5wjb.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpzd_f5wjb.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    $encrypted = \"\";\n    for ($i = 0; $i\
    \ < strlen($s); $i++) {\n        $index = strpos($alphabet, $s[$i]);\n       \
    \ $encrypted .= $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpd5f2y957.php:26\n\
    Stack trace:\n#0 /tmp/tmpd5f2y957.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpd5f2y957.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = str_split('abcdefghijklmnopqrstuvwxyz');\n\
    \t$encrypted = '';\n\t$s = strtolower($s);\n\tfor ($i = 0; $i < strlen($s); $i++)\
    \ {\n\t\t$index = array_search($s[$i], $alphabet);\n\t\t$encrypted .= $alphabet[($index\
    \ + 4) % 26];\n\t}\n\treturn $encrypted;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0jla6u6o.php:26\n\
    Stack trace:\n#0 /tmp/tmp0jla6u6o.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0jla6u6o.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $encrypted = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    $index = strpos($alphabet,\
    \ $s[$i]);\n    $encrypted .= $alphabet[($index + 2) % 26];\n  }\n  return $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3nommqt5.php:26\n\
    Stack trace:\n#0 /tmp/tmp3nommqt5.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3nommqt5.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\";\n  $encrypted = \"\";\n  for ($i = 0; $i < strlen($s);\
    \ $i++) {\n    $index = strpos($alphabet, $s[$i]);\n    $encrypted .= $alphabet[($index\
    \ + 2) % 26];\n  }\n  return $encrypted;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5rsmnip9.php:26\n\
    Stack trace:\n#0 /tmp/tmp5rsmnip9.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp5rsmnip9.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 4) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptkye48jq.php:26\n\
    Stack trace:\n#0 /tmp/tmptkye48jq.php(36): test()\n#1 {main}\n  thrown in /tmp/tmptkye48jq.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $new_alphabet = substr($alphabet, 2) . substr($alphabet,\
    \ 0, 2);\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n  \
    \      $index = strpos($alphabet, $s[$i]);\n        $encrypted .= $new_alphabet[$index];\n\
    \    }\n    return $encrypted;\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjyttctqr.php:27\n\
    Stack trace:\n#0 /tmp/tmpjyttctqr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpjyttctqr.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdw265ku3.php:26\n\
    Stack trace:\n#0 /tmp/tmpdw265ku3.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpdw265ku3.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n    $new_alphabet = substr($alphabet, 2) .\
    \ substr($alphabet, 0, 2);\n    $encrypted = \"\";\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $encrypted .= $new_alphabet[strpos($alphabet, $s[$i])];\n \
    \   }\n    return $encrypted;\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptpyffpr7.php:26\n\
    Stack trace:\n#0 /tmp/tmptpyffpr7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmptpyffpr7.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $rotated = substr($alphabet, 2) . substr($alphabet,\
    \ 0, 2);\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n     \
    \   $result .= $rotated[strpos($alphabet, $s[$i])];\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf60o2d82.php:26\n\
    Stack trace:\n#0 /tmp/tmpf60o2d82.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpf60o2d82.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $encrypted = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    $char = $s[$i];\n\
    \    $index = strpos($alphabet, $char);\n    $newIndex = ($index + 2) * 2;\n \
    \   $encrypted .= $alphabet[$newIndex];\n  }\n  return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuww5jyc1.php:28\n\
    Stack trace:\n#0 /tmp/tmpuww5jyc1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpuww5jyc1.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2 * 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$newString = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$newString .=\
    \ $alphabet[(strpos($alphabet, $s[$i]) + 2) % 26];\n\t}\n\treturn $newString;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuy6yb8yg.php:25\n\
    Stack trace:\n#0 /tmp/tmpuy6yb8yg.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpuy6yb8yg.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk5bqgsd8.php:26\n\
    Stack trace:\n#0 /tmp/tmpk5bqgsd8.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpk5bqgsd8.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpumirqmnb.php:26\n\
    Stack trace:\n#0 /tmp/tmpumirqmnb.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpumirqmnb.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpp_svej4b.php:26\n\
    Stack trace:\n#0 /tmp/tmpp_svej4b.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpp_svej4b.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$encrypted .=\
    \ $alphabet[(array_search($s[$i], $alphabet) + 4) % 26];\n\t}\n\treturn $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyefkctdk.php:26\n\
    Stack trace:\n#0 /tmp/tmpyefkctdk.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpyefkctdk.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$s = strtolower($s);\n\
    \t$s = str_split($s);\n\t$alphabet = range('a', 'z');\n\t$new_alphabet = array_slice($alphabet,\
    \ 2, 26);\n\t$new_alphabet = array_merge($new_alphabet, array_slice($alphabet,\
    \ 0, 2));\n\t$new_string = '';\n\tforeach ($s as $letter) {\n\t\t$new_string .=\
    \ $new_alphabet[array_search($letter, $alphabet)];\n\t}\n\treturn $new_string;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgqn9mkn9.php:29\n\
    Stack trace:\n#0 /tmp/tmpgqn9mkn9.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpgqn9mkn9.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmi82pd4q.php:26\n\
    Stack trace:\n#0 /tmp/tmpmi82pd4q.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpmi82pd4q.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $encrypted .= $alphabet[(strpos($alphabet, $s[$i]) + 4) % 26];\n\
    \    }\n    return $encrypted;\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $newAlphabet = substr($alphabet, 2) . substr($alphabet,\
    \ 0, 2);\n    $newString = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n  \
    \      $newString .= $newAlphabet[strpos($alphabet, $s[$i])];\n    }\n    return\
    \ $newString;\n}\n\necho encrypt('hi');\necho encrypt('asdfghjkl');\necho encrypt('gf');\n\
    echo encrypt('et');\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: jkcufhijlmnihgv
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbsbs1hq4.php:30\n\
    Stack trace:\n#0 /tmp/tmpbsbs1hq4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpbsbs1hq4.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$s = strtolower($s);\n\
    \t$s = str_split($s);\n\t$alphabet = range('a', 'z');\n\t$new_alphabet = array_slice($alphabet,\
    \ 2);\n\t$new_alphabet = array_merge($new_alphabet, array_slice($alphabet, 0,\
    \ 2));\n\t$new_s = array();\n\tforeach ($s as $letter) {\n\t\t$new_s[] = $new_alphabet[array_search($letter,\
    \ $alphabet)];\n\t}\n\treturn implode('', $new_s);\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnh8meea5.php:29\n\
    Stack trace:\n#0 /tmp/tmpnh8meea5.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpnh8meea5.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$new_alphabet = substr($alphabet, 2) . substr($alphabet, 0, 2);\n\t$new_string\
    \ = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$new_string .= $new_alphabet[strpos($alphabet,\
    \ $s[$i])];\n\t}\n\treturn $new_string;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplvx5r6ng.php:26\n\
    Stack trace:\n#0 /tmp/tmplvx5r6ng.php(36): test()\n#1 {main}\n  thrown in /tmp/tmplvx5r6ng.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$index = strpos($alphabet,\
    \ $s[$i]);\n\t\t$encrypted .= $alphabet[($index + 2) % 26];\n\t}\n\treturn $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc78jw28c.php:26\n\
    Stack trace:\n#0 /tmp/tmpc78jw28c.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpc78jw28c.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe_b062_s.php:26\n\
    Stack trace:\n#0 /tmp/tmpe_b062_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpe_b062_s.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 4) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0h2ia4n7.php:26\n\
    Stack trace:\n#0 /tmp/tmp0h2ia4n7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0h2ia4n7.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4cuw_624.php:26\n\
    Stack trace:\n#0 /tmp/tmp4cuw_624.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4cuw_624.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \t$encrypted = array();\n\t$s = str_split($s);\n\tforeach ($s as $letter) {\n\t\
    \t$index = array_search($letter, $alphabet);\n\t\t$index = $index + 4;\n\t\tif\
    \ ($index > 25) {\n\t\t\t$index = $index - 26;\n\t\t}\n\t\tarray_push($encrypted,\
    \ $alphabet[$index]);\n\t}\n\treturn implode($encrypted);\n}\necho encrypt('hi')\
    \ . \"\\n\";\necho encrypt('asdfghjkl') . \"\\n\";\necho encrypt('gf') . \"\\\
    n\";\necho encrypt('et') . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "lm\newhjklnop\nkj\nix\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $encrypted .= $alphabet[(strpos($alphabet, $s[$i]) + 2 * 2)\
    \ % 26];\n    }\n    return $encrypted;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\";\n  $encrypted = \"\";\n  for ($i = 0; $i < strlen($s);\
    \ $i++) {\n    $letter = $s[$i];\n    $index = strpos($alphabet, $letter);\n \
    \   $newIndex = ($index + 2) * 2;\n    $encrypted .= $alphabet[$newIndex];\n \
    \ }\n  return $encrypted;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpidu9gqar.php:28\n\
    Stack trace:\n#0 /tmp/tmpidu9gqar.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpidu9gqar.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn7hwyav0.php:26\n\
    Stack trace:\n#0 /tmp/tmpn7hwyav0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpn7hwyav0.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $new_alphabet = substr($alphabet, 2) . substr($alphabet,\
    \ 0, 2);\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n  \
    \      $index = strpos($alphabet, $s[$i]);\n        $encrypted .= $new_alphabet[$index];\n\
    \    }\n    return $encrypted;\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2ibk90eo.php:27\n\
    Stack trace:\n#0 /tmp/tmp2ibk90eo.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp2ibk90eo.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \t$encrypted = array();\n\t$s = str_split($s);\n\tfor ($i=0; $i < count($s); $i++)\
    \ { \n\t\t$index = array_search($s[$i], $alphabet);\n\t\tif ($index < 24) {\n\t\
    \t\t$encrypted[] = $alphabet[$index + 2];\n\t\t} else {\n\t\t\t$encrypted[] =\
    \ $alphabet[$index - 24];\n\t\t}\n\t}\n\treturn implode($encrypted);\n}\necho\
    \ encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl') . \"\\n\";\necho encrypt('gf')\
    \ . \"\\n\";\necho encrypt('et') . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "jk\ncufhijlmn\nih\ngv\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpap91hnlc.php:34\n\
    Stack trace:\n#0 /tmp/tmpap91hnlc.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpap91hnlc.php\
    \ on line 34\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4110iv6j.php:26\n\
    Stack trace:\n#0 /tmp/tmp4110iv6j.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4110iv6j.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    $s = strtolower($s);\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n        $index = strpos($alphabet,\
    \ $s[$i]);\n        $encrypted .= $alphabet[($index + 2) % 26];\n    }\n    return\
    \ $encrypted;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkzsoabiz.php:27\n\
    Stack trace:\n#0 /tmp/tmpkzsoabiz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpkzsoabiz.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$index = strpos($alphabet,\
    \ $s[$i]);\n\t\t$encrypted .= $alphabet[($index + 2) % 26];\n\t}\n\treturn $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps18pvfow.php:26\n\
    Stack trace:\n#0 /tmp/tmps18pvfow.php(36): test()\n#1 {main}\n  thrown in /tmp/tmps18pvfow.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$index = strpos($alphabet,\
    \ $s[$i]);\n\t\t$encrypted .= $alphabet[($index + 2) % 26];\n\t}\n\treturn $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvt8t5qe0.php:26\n\
    Stack trace:\n#0 /tmp/tmpvt8t5qe0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvt8t5qe0.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n\t$encrypted = '';\n\tfor ($i\
    \ = 0; $i < strlen($s); $i++) {\n\t\t$index = array_search($s[$i], $alphabet);\n\
    \t\t$encrypted .= $alphabet[($index + 2) * 2];\n\t}\n\treturn $encrypted;\n}\n\
    \nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkfs4oxd9.php:26\n\
    Stack trace:\n#0 /tmp/tmpkfs4oxd9.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpkfs4oxd9.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    $encrypted\
    \ = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $letter = $s[$i];\n\
    \        $index = array_search($letter, $alphabet);\n        $newIndex = $index\
    \ + 2 * 2;\n        $encrypted .= $alphabet[$newIndex];\n    }\n    return $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 26 in /tmp/tmpa3yxf59m.php on line 18\n\
    PHP Warning:  Undefined array key 26 in /tmp/tmpa3yxf59m.php on line 18\nPHP Warning:\
    \  Undefined array key 26 in /tmp/tmpa3yxf59m.php on line 18\nPHP Fatal error:\
    \  Uncaught Exception: Test failed! in /tmp/tmpa3yxf59m.php:32\nStack trace:\n\
    #0 /tmp/tmpa3yxf59m.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpa3yxf59m.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \  $encrypted = array();\n  $s = str_split($s);\n  foreach ($s as $char) {\n \
    \   $index = array_search($char, $alphabet);\n    $encrypted[] = $alphabet[($index\
    \ + 4) % 26];\n  }\n  return implode('', $encrypted);\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypt = '';\n    $len = strlen($s);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $encrypt .= $alphabet[(strpos($alphabet,\
    \ $s[$i]) + 2) % 26];\n    }\n    return $encrypt;\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkx86hdw2.php:26\n\
    Stack trace:\n#0 /tmp/tmpkx86hdw2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpkx86hdw2.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n\t$newString = '';\n\tfor ($i\
    \ = 0; $i < strlen($s); $i++) {\n\t\t$newString .= $alphabet[(array_search($s[$i],\
    \ $alphabet) + 4) % 26];\n\t}\n\treturn $newString;\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $encrypted .= $alphabet[(strpos($alphabet, $s[$i]) + 2) % 26];\n\
    \    }\n    return $encrypted;\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwcdipy1g.php:25\n\
    Stack trace:\n#0 /tmp/tmpwcdipy1g.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpwcdipy1g.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$index = strpos($alphabet,\
    \ $s[$i]);\n\t\t$encrypted .= $alphabet[($index + 2) % 26];\n\t}\n\treturn $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4rs6qft8.php:26\n\
    Stack trace:\n#0 /tmp/tmp4rs6qft8.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4rs6qft8.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuyq589al.php:26\n\
    Stack trace:\n#0 /tmp/tmpuyq589al.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpuyq589al.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$s = strtolower($s);\n\
    \t$s = str_split($s);\n\t$alphabet = range('a', 'z');\n\t$encrypted = [];\n\t\
    foreach ($s as $letter) {\n\t\t$index = array_search($letter, $alphabet);\n\t\t\
    $newIndex = $index + 4;\n\t\tif ($newIndex > 25) {\n\t\t\t$newIndex = $newIndex\
    \ - 26;\n\t\t}\n\t\t$encrypted[] = $alphabet[$newIndex];\n\t}\n\treturn implode('',\
    \ $encrypted);\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $new_alphabet = substr($alphabet, 2) . substr($alphabet, 0, 2);\n  $encrypted\
    \ = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    $index = strpos($alphabet,\
    \ $s[$i]);\n    $encrypted .= $new_alphabet[$index];\n  }\n  return $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl7p_mszi.php:27\n\
    Stack trace:\n#0 /tmp/tmpl7p_mszi.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpl7p_mszi.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ range('a', 'z');\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s); $i++)\
    \ {\n        $index = array_search($s[$i], $alphabet);\n        $encrypted .=\
    \ $alphabet[($index + 4) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$index = strpos($alphabet,\
    \ $s[$i]);\n\t\t$encrypted .= $alphabet[($index + 2) % 26];\n\t}\n\treturn $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpoe24w0c8.php:26\n\
    Stack trace:\n#0 /tmp/tmpoe24w0c8.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpoe24w0c8.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\";\n\t$new_alphabet = \"cdefghijklmnopqrstuvwxyzab\"\
    ;\n\t$encrypted = \"\";\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$encrypted\
    \ .= $new_alphabet[strpos($alphabet, $s[$i])];\n\t}\n\treturn $encrypted;\n}\n\
    \nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj4lr5i7u.php:26\n\
    Stack trace:\n#0 /tmp/tmpj4lr5i7u.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpj4lr5i7u.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $encrypted = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    $index = strpos($alphabet,\
    \ $s[$i]);\n    $encrypted .= $alphabet[($index + 2) % 26];\n  }\n  return $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_s7vkii_.php:26\n\
    Stack trace:\n#0 /tmp/tmp_s7vkii_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_s7vkii_.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 4) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$new_alphabet = substr($alphabet, 2) . substr($alphabet, 0, 2);\n\t$encrypted\
    \ = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$encrypted .= $new_alphabet[strpos($alphabet,\
    \ $s[$i])];\n\t}\n\treturn $encrypted;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpth4dcd9x.php:26\n\
    Stack trace:\n#0 /tmp/tmpth4dcd9x.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpth4dcd9x.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = str_split('abcdefghijklmnopqrstuvwxyz');\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$index = array_search($s[$i],\
    \ $alphabet);\n\t\t$encrypted .= $alphabet[($index + 4) % 26];\n\t}\n\treturn\
    \ $encrypted;\n}\necho encrypt('hi');\necho encrypt('asdfghjkl');\necho encrypt('gf');\n\
    echo encrypt('et');\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: lmewhjklnopkjix
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\";\n  $encrypted = \"\";\n  for ($i = 0; $i < strlen($s);\
    \ $i++) {\n    $letter = $s[$i];\n    $index = strpos($alphabet, $letter);\n \
    \   $encrypted .= $alphabet[($index + 2) * 2];\n  }\n  return $encrypted;\n}\n\
    \nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb8iuwg23.php:27\n\
    Stack trace:\n#0 /tmp/tmpb8iuwg23.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpb8iuwg23.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$index = strpos($alphabet,\
    \ $s[$i]);\n\t\t$index = ($index + 2) * 2;\n\t\t$encrypted .= $alphabet[$index];\n\
    \t}\n\treturn $encrypted;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0r4mm9v0.php:27\n\
    Stack trace:\n#0 /tmp/tmp0r4mm9v0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp0r4mm9v0.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$letter = $s[$i];\n\
    \t\t$index = strpos($alphabet, $letter);\n\t\t$encrypted .= $alphabet[($index\
    \ + 2) * 2];\n\t}\n\treturn $encrypted;\n}\n\necho encrypt('hi') . \"\\n\";\n\
    echo encrypt('asdfghjkl') . \"\\n\";\necho encrypt('gf') . \"\\n\";\necho encrypt('et')\
    \ . \"\\n\";\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "su\nekoqswy\nqo\nm\n"
  stderr: "PHP Warning:  Uninitialized string offset 40 in /tmp/tmpoe7izm1m.php on\
    \ line 17\nPHP Warning:  Uninitialized string offset 26 in /tmp/tmpoe7izm1m.php\
    \ on line 17\nPHP Warning:  Uninitialized string offset 42 in /tmp/tmpoe7izm1m.php\
    \ on line 17\nPHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpoe7izm1m.php:32\n\
    Stack trace:\n#0 /tmp/tmpoe7izm1m.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpoe7izm1m.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$index = strpos($alphabet,\
    \ $s[$i]);\n\t\t$encrypted .= $alphabet[($index + 2) % 26];\n\t}\n\treturn $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpozr6pijw.php:26\n\
    Stack trace:\n#0 /tmp/tmpozr6pijw.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpozr6pijw.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfg5r3wpr.php:26\n\
    Stack trace:\n#0 /tmp/tmpfg5r3wpr.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfg5r3wpr.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$index = strpos($alphabet,\
    \ $s[$i]);\n\t\t$newIndex = $index + 2;\n\t\t$encrypted .= $alphabet[$newIndex];\n\
    \t}\n\treturn $encrypted;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps_t75r0h.php:27\n\
    Stack trace:\n#0 /tmp/tmps_t75r0h.php(37): test()\n#1 {main}\n  thrown in /tmp/tmps_t75r0h.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $newAlphabet = substr($alphabet, 2) . substr($alphabet,\
    \ 0, 2);\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n  \
    \      $encrypted .= $newAlphabet[strpos($alphabet, $s[$i])];\n    }\n    return\
    \ $encrypted;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprabf40ig.php:26\n\
    Stack trace:\n#0 /tmp/tmprabf40ig.php(36): test()\n#1 {main}\n  thrown in /tmp/tmprabf40ig.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    $new_string = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $letter\
    \ = $s[$i];\n        $letter_index = array_search($letter, $alphabet);\n     \
    \   $new_letter_index = ($letter_index + 2) * 2;\n        $new_letter = $alphabet[$new_letter_index];\n\
    \        $new_string .= $new_letter;\n    }\n    return $new_string;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpp11t79li.php:29\n\
    Stack trace:\n#0 /tmp/tmpp11t79li.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpp11t79li.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $letter = $s[$i];\n        $index = strpos($alphabet, $letter);\n\
    \        $newIndex = ($index + 2) * 2;\n        $encrypted .= $alphabet[$newIndex];\n\
    \    }\n    return $encrypted;\n}\n\nfunction candidate(...$args) {\n    return\
    \ encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"hi\")\
    \ !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw95cigvr.php:28\n\
    Stack trace:\n#0 /tmp/tmpw95cigvr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpw95cigvr.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$s = strtolower($s);\n\
    \t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\t$new_alphabet = substr($alphabet,\
    \ 2) . substr($alphabet, 0, 2);\n\t$new_string = '';\n\tfor ($i = 0; $i < strlen($s);\
    \ $i++) {\n\t\t$new_string .= $new_alphabet[strpos($alphabet, $s[$i])];\n\t}\n\
    \treturn $new_string;\n}\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"\
    kj\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !==\
    \ \"ix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjupccs0f.php:27\n\
    Stack trace:\n#0 /tmp/tmpjupccs0f.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpjupccs0f.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkm8h4236.php:26\n\
    Stack trace:\n#0 /tmp/tmpkm8h4236.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpkm8h4236.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $s = strtolower($s);\n  $s = str_split($s);\n  $encrypted = '';\n  foreach\
    \ ($s as $letter) {\n    $index = strpos($alphabet, $letter);\n    $encrypted\
    \ .= $alphabet[($index + 2) * 2];\n  }\n  return $encrypted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkiru350r.php:28\n\
    Stack trace:\n#0 /tmp/tmpkiru350r.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpkiru350r.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$newAlphabet = substr($alphabet, 2) . substr($alphabet, 0, 2);\n\t$newString\
    \ = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$newString .= $newAlphabet[strpos($alphabet,\
    \ $s[$i])];\n\t}\n\treturn $newString;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi4pf6xga.php:26\n\
    Stack trace:\n#0 /tmp/tmpi4pf6xga.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpi4pf6xga.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \t$encrypted = array();\n\t$s = str_split($s);\n\tforeach ($s as $letter) {\n\t\
    \t$index = array_search($letter, $alphabet);\n\t\t$encrypted[] = $alphabet[$index\
    \ + 2];\n\t}\n\treturn implode($encrypted);\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg1v3zncw.php:27\n\
    Stack trace:\n#0 /tmp/tmpg1v3zncw.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpg1v3zncw.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ array('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z');\n\
    \    $encrypted = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        $index\
    \ = array_search($s[$i], $alphabet);\n        $encrypted .= $alphabet[($index\
    \ + 2) % 26];\n    }\n    return $encrypted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphuofvnkr.php:26\n\
    Stack trace:\n#0 /tmp/tmphuofvnkr.php(36): test()\n#1 {main}\n  thrown in /tmp/tmphuofvnkr.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$index = strpos($alphabet,\
    \ $s[$i]);\n\t\t$encrypted .= $alphabet[($index + 4) % 26];\n\t}\n\treturn $encrypted;\n\
    }\n\necho encrypt('hi') . \"\\n\";\necho encrypt('asdfghjkl') . \"\\n\";\necho\
    \ encrypt('gf') . \"\\n\";\necho encrypt('et') . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "lm\newhjklnop\nkj\nix\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n  $alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $encrypted = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    $index = strpos($alphabet,\
    \ $s[$i]);\n    $encrypted .= $alphabet[($index + 2) % 26];\n  }\n  return $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9762n1wb.php:26\n\
    Stack trace:\n#0 /tmp/tmp9762n1wb.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp9762n1wb.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n    $alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz';\n    $encrypted = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        $index = strpos($alphabet, $s[$i]);\n        $encrypted .=\
    \ $alphabet[($index + 4) % 26];\n    }\n    return $encrypted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\"\
    ) !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \t$encrypted = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t$index = strpos($alphabet,\
    \ $s[$i]);\n\t\t$encrypted .= $alphabet[($index + 4) % 26];\n\t}\n\treturn $encrypted;\n\
    }\n\nfunction candidate(...$args) {\n    return encrypt(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"hi\") !== \"lm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"asdfghjkl\") !== \"ewhjklnop\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"gf\") !== \"kj\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"et\") !== \"ix\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"faewfawefaewg\"\
    ) !== \"jeiajeaijeiak\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    hellomyfriend\") !== \"lippsqcjvmirh\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !==\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a\") !== \"e\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function encrypt that takes a string as an argument\
    \ and\n// returns a string encrypted with the alphabet being rotated. \n// The\
    \ alphabet should be rotated in a manner such that the letters \n// shift down\
    \ by two multiplied to two places.\n// For example:\n// encrypt('hi') returns\
    \ 'lm'\n// encrypt('asdfghjkl') returns 'ewhjklnop'\n// encrypt('gf') returns\
    \ 'kj'\n// encrypt('et') returns 'ix'\nfunction encrypt($s) {\n\t$alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\";\n\t$encrypted = \"\";\n\tfor ($i = 0; $i < strlen($s);\
    \ $i++) {\n\t\t$index = strpos($alphabet, $s[$i]);\n\t\t$encrypted .= $alphabet[($index\
    \ + 2) % 26];\n\t}\n\treturn $encrypted;\n}\n\nfunction candidate(...$args) {\n\
    \    return encrypt(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    hi\") !== \"lm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    asdfghjkl\") !== \"ewhjklnop\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"gf\") !== \"kj\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"et\") !== \"ix\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"faewfawefaewg\") !== \"jeiajeaijeiak\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"hellomyfriend\") !== \"\
    lippsqcjvmirh\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") !== \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a\") !== \"\
    e\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyzpkpesf.php:26\n\
    Stack trace:\n#0 /tmp/tmpyzpkpesf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpyzpkpesf.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
