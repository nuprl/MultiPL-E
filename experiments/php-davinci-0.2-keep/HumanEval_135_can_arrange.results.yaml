name: HumanEval_135_can_arrange
language: php
results:
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $max_index = 0;\n \
    \ for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] <= $max) {\n      $max\
    \ = $arr[$i];\n      $max_index = $i;\n    }\n  }\n  return $max_index;\n}\n\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpapm3djza.php:26\n\
    Stack trace:\n#0 /tmp/tmpapm3djza.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpapm3djza.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $index = -1;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $max) {\n\
    \            $max = $arr[$i];\n            $index = $i;\n        }\n    }\n  \
    \  return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpls3shrz0.php:26\n\
    Stack trace:\n#0 /tmp/tmpls3shrz0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpls3shrz0.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr_len = count($arr);\n    $i = $arr_len\
    \ - 1;\n    while ($i > 0) {\n        if ($arr[$i] < $arr[$i - 1]) {\n       \
    \     return $i - 1;\n        }\n        $i--;\n    }\n    return -1;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpiut1ks8m.php:26\n\
    Stack trace:\n#0 /tmp/tmpiut1ks8m.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpiut1ks8m.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $max_index = 0;\n \
    \ for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] > $max) {\n      $max\
    \ = $arr[$i];\n      $max_index = $i;\n    }\n  }\n  for ($i = 0; $i < $max_index;\
    \ $i++) {\n    if ($arr[$i] >= $arr[$i + 1]) {\n      return -1;\n    }\n  }\n\
    \  return $max_index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5pa9u1et.php:31\n\
    Stack trace:\n#0 /tmp/tmp5pa9u1et.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp5pa9u1et.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $index = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $index\
    \ = $i - 1;\n            break;\n        }\n    }\n    return $index;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_i1wb8ti.php:25\n\
    Stack trace:\n#0 /tmp/tmp_i1wb8ti.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_i1wb8ti.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr_len = count($arr);\n    $last_index\
    \ = $arr_len - 1;\n    $last_element = $arr[$last_index];\n    $last_element_index\
    \ = $last_index;\n    $arr[$last_index] = null;\n    $arr_len--;\n    $index =\
    \ $arr_len - 1;\n    while ($index >= 0) {\n        if ($arr[$index] >= $last_element)\
    \ {\n            $last_element = $arr[$index];\n            $last_element_index\
    \ = $index;\n            $arr[$index] = null;\n            $arr_len--;\n     \
    \       $index = $arr_len - 1;\n        } else {\n            $index--;\n    \
    \    }\n    }\n    if ($last_element_index == $last_index) {\n        return -1;\n\
    \    } else {\n        return $last_element_index;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppmvirpq6.php:40\n\
    Stack trace:\n#0 /tmp/tmppmvirpq6.php(47): test()\n#1 {main}\n  thrown in /tmp/tmppmvirpq6.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbd28q1fy.php:27\n\
    Stack trace:\n#0 /tmp/tmpbd28q1fy.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbd28q1fy.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $maxIndex = 0;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] > $max) {\n      $max =\
    \ $arr[$i];\n      $maxIndex = $i;\n    }\n  }\n  return $maxIndex;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1z29w78t.php:26\n\
    Stack trace:\n#0 /tmp/tmp1z29w78t.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1z29w78t.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $last = $arr[0];\n  $index = -1;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] < $last) {\n      $index\
    \ = $i;\n    }\n    $last = $arr[$i];\n  }\n  return $index;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmpabtbwquv.php on line 10\n"
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      $max = $i;\n\
    \    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzrwsupx0.php:24\n\
    Stack trace:\n#0 /tmp/tmpzrwsupx0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpzrwsupx0.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr_len = count($arr);\n    for ($i\
    \ = $arr_len - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n  \
    \          return $i - 1;\n        }\n    }\n    return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3_trps_f.php:24\n\
    Stack trace:\n#0 /tmp/tmp3_trps_f.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3_trps_f.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $max_index = 0;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] > $max) {\n\
    \            $max = $arr[$i];\n            $max_index = $i;\n        }\n    }\n\
    \    return $max_index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpisyv5sng.php:26\n\
    Stack trace:\n#0 /tmp/tmpisyv5sng.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpisyv5sng.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      $max = $i;\n\
    \    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6htwo58j.php:24\n\
    Stack trace:\n#0 /tmp/tmp6htwo58j.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp6htwo58j.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $index = -1;\n  for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      $index = $i\
    \ - 1;\n    }\n  }\n  return $index;\n}\n\nfunction candidate(...$args) {\n  \
    \  return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppvepdgim.php:24\n\
    Stack trace:\n#0 /tmp/tmppvepdgim.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppvepdgim.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $last = $arr[0];\n  $index = -1;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] <= $last) {\n      $index\
    \ = $i;\n      $last = $arr[$i];\n    }\n  }\n  return $index;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphxn3dan7.php:26\n\
    Stack trace:\n#0 /tmp/tmphxn3dan7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphxn3dan7.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arr = array_reverse($arr);\n  $max =\
    \ $arr[0];\n  for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] < $max)\
    \ {\n      return count($arr) - $i - 1;\n    }\n    $max = max($max, $arr[$i]);\n\
    \  }\n  return -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzxai972j.php:27\n\
    Stack trace:\n#0 /tmp/tmpzxai972j.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzxai972j.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $index = -1;\n    for ($i = 1; $i <\
    \ count($arr); $i++) {\n        if ($arr[$i] <= $arr[$i - 1]) {\n            $index\
    \ = $i;\n            break;\n        }\n    }\n    return $index;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgq094e2t.php:28\n\
    Stack trace:\n#0 /tmp/tmpgq094e2t.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpgq094e2t.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arr_length = count($arr);\n  for ($i\
    \ = $arr_length - 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n   \
    \   return $i - 1;\n    }\n  }\n  return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl90qprx7.php:24\n\
    Stack trace:\n#0 /tmp/tmpl90qprx7.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpl90qprx7.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = 0;\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            return $max;\n\
    \        }\n        if ($arr[$i] > $arr[$max]) {\n            $max = $i;\n   \
    \     }\n    }\n    return -1;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphfv5pc_l.php:27\n\
    Stack trace:\n#0 /tmp/tmphfv5pc_l.php(34): test()\n#1 {main}\n  thrown in /tmp/tmphfv5pc_l.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] >= $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcpcybi5r.php:24\n\
    Stack trace:\n#0 /tmp/tmpcpcybi5r.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcpcybi5r.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      $max = $i;\n\
    \    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdqigowf5.php:24\n\
    Stack trace:\n#0 /tmp/tmpdqigowf5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpdqigowf5.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $count = count($arr);\n    $result =\
    \ -1;\n    for ($i = $count - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i\
    \ - 1]) {\n            $result = $i - 1;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3zxynh3j.php:25\n\
    Stack trace:\n#0 /tmp/tmp3zxynh3j.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp3zxynh3j.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr_len = count($arr);\n    for ($i\
    \ = $arr_len - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n  \
    \          return $i - 1;\n        }\n    }\n    return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxkbsywik.php:24\n\
    Stack trace:\n#0 /tmp/tmpxkbsywik.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxkbsywik.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arr = array_reverse($arr);\n  $arr_length\
    \ = count($arr);\n  for ($i = 0; $i < $arr_length; $i++) {\n    if ($arr[$i] <\
    \ $arr[$i+1]) {\n      return $arr_length - $i - 1;\n    }\n  }\n  return -1;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 4 in /tmp/tmp9w1yfogq.php on line 13\n"
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $max_index = 0;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $max) {\n\
    \            return $max_index;\n        }\n        if ($arr[$i] > $max) {\n \
    \           $max = $arr[$i];\n            $max_index = $i;\n        }\n    }\n\
    \    return -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnp3o79w2.php:29\n\
    Stack trace:\n#0 /tmp/tmpnp3o79w2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpnp3o79w2.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $maxIndex = 0;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] <= $max) {\n      return\
    \ $maxIndex;\n    }\n    $max = $arr[$i];\n    $maxIndex = $i;\n  }\n  return\
    \ -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeztwr1jw.php:27\n\
    Stack trace:\n#0 /tmp/tmpeztwr1jw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpeztwr1jw.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $last = $arr[0];\n    $index = -1;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $last) {\n\
    \            $index = $i;\n            $last = $arr[$i];\n        }\n    }\n \
    \   return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpni5zqt5j.php:26\n\
    Stack trace:\n#0 /tmp/tmpni5zqt5j.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpni5zqt5j.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      $max = $i;\n\
    \    }\n  }\n  return $max;\n}\n\necho can_arrange([1,2,4,3,5]) . \"\\n\";\necho\
    \ can_arrange([1,2,3]) . \"\\n\";\necho can_arrange([1,2,4,3,5,6,7,8,9,10]) .\
    \ \"\\n\";\necho can_arrange([1,2,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmp2cwixdca.php on line 23\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpepn0jd90.php:27\n\
    Stack trace:\n#0 /tmp/tmpepn0jd90.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpepn0jd90.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $index = -1;\n  for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n    if ($arr[$i] <= $arr[$i - 1]) {\n      $index = $i\
    \ - 1;\n    }\n  }\n  return $index;\n}\n\nfunction candidate(...$args) {\n  \
    \  return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9z1u3jv9.php:24\n\
    Stack trace:\n#0 /tmp/tmp9z1u3jv9.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9z1u3jv9.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $result = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $result\
    \ = $i - 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw4ke24_6.php:24\n\
    Stack trace:\n#0 /tmp/tmpw4ke24_6.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpw4ke24_6.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuqxh5f5t.php:27\n\
    Stack trace:\n#0 /tmp/tmpuqxh5f5t.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpuqxh5f5t.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arr = array_reverse($arr);\n  $max =\
    \ $arr[0];\n  for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] < $max)\
    \ {\n      return count($arr) - $i - 1;\n    }\n    $max = max($max, $arr[$i]);\n\
    \  }\n  return -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl029mpiw.php:27\n\
    Stack trace:\n#0 /tmp/tmpl029mpiw.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpl029mpiw.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $result = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $result\
    \ = $i - 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp64fos28s.php:24\n\
    Stack trace:\n#0 /tmp/tmp64fos28s.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp64fos28s.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $last = $arr[0];\n    $index = -1;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $last) {\n\
    \            $index = $i;\n            $last = $arr[$i];\n        }\n    }\n \
    \   return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxzpjdtm7.php:26\n\
    Stack trace:\n#0 /tmp/tmpxzpjdtm7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxzpjdtm7.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr = array_reverse($arr);\n    for\
    \ ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] < $arr[$i + 1]) {\n\
    \            return count($arr) - $i - 1;\n        }\n    }\n    return -1;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 4 in /tmp/tmpn1mhjn02.php on line 12\n"
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $index = -1;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $max) {\n\
    \            $max = $arr[$i];\n            $index = $i;\n        }\n    }\n  \
    \  return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxav4js3_.php:26\n\
    Stack trace:\n#0 /tmp/tmpxav4js3_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxav4js3_.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $maxIndex = 0;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] > $max) {\n      $max =\
    \ $arr[$i];\n      $maxIndex = $i;\n    }\n  }\n  return $maxIndex;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0ftgqtzt.php:26\n\
    Stack trace:\n#0 /tmp/tmp0ftgqtzt.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp0ftgqtzt.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmevae4qi.php:27\n\
    Stack trace:\n#0 /tmp/tmpmevae4qi.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpmevae4qi.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  $max_index = -1;\n  for\
    \ ($i = count($arr) - 1; $i >= 0; $i--) {\n    if ($arr[$i] >= $max) {\n     \
    \ $max = $arr[$i];\n      $max_index = $i;\n    }\n  }\n  return $max_index;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp36n771o8.php:26\n\
    Stack trace:\n#0 /tmp/tmp36n771o8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp36n771o8.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr = array_reverse($arr);\n    $max\
    \ = $arr[0];\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i]\
    \ < $max) {\n            return count($arr) - $i - 1;\n        }\n        $max\
    \ = max($max, $arr[$i]);\n    }\n    return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7yzkktw4.php:27\n\
    Stack trace:\n#0 /tmp/tmp7yzkktw4.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7yzkktw4.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $max_index = 0;\n \
    \ for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] > $max) {\n      $max\
    \ = $arr[$i];\n      $max_index = $i;\n    }\n  }\n  for ($i = 0; $i < $max_index;\
    \ $i++) {\n    if ($arr[$i] > $arr[$i + 1]) {\n      return -1;\n    }\n  }\n\
    \  return $max_index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5m1y4y0_.php:31\n\
    Stack trace:\n#0 /tmp/tmp5m1y4y0_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp5m1y4y0_.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $index = -1;\n  for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      $index = $i\
    \ - 1;\n    }\n  }\n  return $index;\n}\n\nfunction candidate(...$args) {\n  \
    \  return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpukyp39x2.php:24\n\
    Stack trace:\n#0 /tmp/tmpukyp39x2.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpukyp39x2.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $largest = -1;\n  for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      $largest = $i;\n\
    \    }\n  }\n  return $largest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpylgr03ek.php:27\n\
    Stack trace:\n#0 /tmp/tmpylgr03ek.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpylgr03ek.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $result = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] <= $arr[$i - 1]) {\n            $result\
    \ = $i - 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1sg0tuqt.php:24\n\
    Stack trace:\n#0 /tmp/tmp1sg0tuqt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp1sg0tuqt.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $index = -1;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] <= $max) {\n      $max\
    \ = $arr[$i];\n      $index = $i;\n    }\n  }\n  return $index;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxmo0n5aj.php:26\n\
    Stack trace:\n#0 /tmp/tmpxmo0n5aj.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxmo0n5aj.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      $max = $i;\n\
    \    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc4ng0udd.php:24\n\
    Stack trace:\n#0 /tmp/tmpc4ng0udd.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpc4ng0udd.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr = array_reverse($arr);\n    for\
    \ ($i = 0; $i < count($arr) - 1; $i++) {\n        if ($arr[$i] >= $arr[$i + 1])\
    \ {\n            return count($arr) - $i - 1;\n        }\n    }\n    return -1;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_35tb3pn.php:24\n\
    Stack trace:\n#0 /tmp/tmp_35tb3pn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_35tb3pn.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      $max = $i;\n\
    \    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgub9s976.php:24\n\
    Stack trace:\n#0 /tmp/tmpgub9s976.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpgub9s976.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arr_length = count($arr);\n  for ($i\
    \ = $arr_length - 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n   \
    \   return $i - 1;\n    }\n  }\n  return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqdy9jm9i.php:24\n\
    Stack trace:\n#0 /tmp/tmpqdy9jm9i.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqdy9jm9i.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $last = $arr[0];\n    $index = -1;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $last) {\n\
    \            $index = $i;\n            $last = $arr[$i];\n        }\n    }\n \
    \   return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5sd1q0nt.php:26\n\
    Stack trace:\n#0 /tmp/tmp5sd1q0nt.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp5sd1q0nt.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3aacy8b6.php:27\n\
    Stack trace:\n#0 /tmp/tmp3aacy8b6.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3aacy8b6.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $result = -1;\n  for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      $result = $i\
    \ - 1;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsx9utcah.php:24\n\
    Stack trace:\n#0 /tmp/tmpsx9utcah.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpsx9utcah.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $maxIndex = 0;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $max) {\n\
    \            return $maxIndex;\n        }\n        if ($arr[$i] > $max) {\n  \
    \          $max = $arr[$i];\n            $maxIndex = $i;\n        }\n    }\n \
    \   return -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0mc2q9ep.php:29\n\
    Stack trace:\n#0 /tmp/tmp0mc2q9ep.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0mc2q9ep.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  $maxIndex = -1;\n  for ($i\
    \ = count($arr) - 1; $i >= 0; $i--) {\n    if ($arr[$i] >= $max) {\n      $max\
    \ = $arr[$i];\n      $maxIndex = $i;\n    } else {\n      return $i;\n    }\n\
    \  }\n  return $maxIndex;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2iafgtqm.php:29\n\
    Stack trace:\n#0 /tmp/tmp2iafgtqm.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2iafgtqm.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $last = $arr[0];\n  $index = -1;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] <= $last) {\n      $index\
    \ = $i;\n      $last = $arr[$i];\n    }\n  }\n  return $index;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0y0ao14l.php:26\n\
    Stack trace:\n#0 /tmp/tmp0y0ao14l.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp0y0ao14l.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $count = count($arr);\n    for ($i =\
    \ $count - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n      \
    \      return $i - 1;\n        }\n    }\n    return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_i4pnyze.php:24\n\
    Stack trace:\n#0 /tmp/tmp_i4pnyze.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_i4pnyze.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      $max = $i;\n \
    \   } else {\n      $arr[$i - 1] = $max;\n    }\n  }\n  return $arr[0];\n}\n\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyr3iupkh.php:27\n\
    Stack trace:\n#0 /tmp/tmpyr3iupkh.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpyr3iupkh.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $last = $arr[0];\n  $index = -1;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] <= $last) {\n      $index\
    \ = $i;\n      $last = $arr[$i];\n    }\n  }\n  return $index;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa6d0qfkt.php:26\n\
    Stack trace:\n#0 /tmp/tmpa6d0qfkt.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpa6d0qfkt.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      $max = $i;\n \
    \   } else {\n      $arr[$i - 1] = $max;\n    }\n  }\n  return $arr[0];\n}\n\n\
    echo can_arrange([1,2,4,3,5]) . \"\\n\";\necho can_arrange([1,2,3]) . \"\\n\"\
    ;\necho can_arrange([1,2,4,3,5,6,7,8,9,10]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "3\n1\n8\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu_zp9z7w.php:30\n\
    Stack trace:\n#0 /tmp/tmpu_zp9z7w.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpu_zp9z7w.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr_len = count($arr);\n    $max_index\
    \ = -1;\n    for ($i = $arr_len - 1; $i > 0; $i--) {\n        if ($arr[$i] <=\
    \ $arr[$i - 1]) {\n            $max_index = $i;\n        }\n    }\n    return\
    \ $max_index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz3f49upp.php:28\n\
    Stack trace:\n#0 /tmp/tmpz3f49upp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpz3f49upp.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $last = $arr[0];\n    $max = 0;\n  \
    \  for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $last) {\n\
    \            $max = $i;\n        }\n        $last = $arr[$i];\n    }\n    return\
    \ $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm840dxrc.php:27\n\
    Stack trace:\n#0 /tmp/tmpm840dxrc.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpm840dxrc.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $max_index = 0;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $max) {\n\
    \            return $max_index;\n        }\n        if ($arr[$i] > $max) {\n \
    \           $max = $arr[$i];\n            $max_index = $i;\n        }\n    }\n\
    \    return -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpavzdnf7h.php:29\n\
    Stack trace:\n#0 /tmp/tmpavzdnf7h.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpavzdnf7h.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $maxIndex = 0;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $max) {\n\
    \            return $maxIndex;\n        }\n        if ($arr[$i] > $max) {\n  \
    \          $max = $arr[$i];\n            $maxIndex = $i;\n        }\n    }\n \
    \   return -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbfo5mihy.php:29\n\
    Stack trace:\n#0 /tmp/tmpbfo5mihy.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpbfo5mihy.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arr_length = count($arr);\n  $index =\
    \ -1;\n  for ($i = 1; $i < $arr_length; $i++) {\n    if ($arr[$i] < $arr[$i -\
    \ 1]) {\n      $index = $i - 1;\n      break;\n    }\n  }\n  return $index;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp27ho2vs8.php:26\n\
    Stack trace:\n#0 /tmp/tmp27ho2vs8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp27ho2vs8.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $count = count($arr);\n    $last = $arr[0];\n\
    \    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $last) {\n    \
    \        return $i - 1;\n        }\n        $last = $arr[$i];\n    }\n    return\
    \ -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkf4hitj0.php:26\n\
    Stack trace:\n#0 /tmp/tmpkf4hitj0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpkf4hitj0.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $index = -1;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] <= $max) {\n      $max\
    \ = $arr[$i];\n      $index = $i;\n    }\n  }\n  return $index;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdutpf05p.php:26\n\
    Stack trace:\n#0 /tmp/tmpdutpf05p.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdutpf05p.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $prev = $arr[0];\n  $index = -1;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] <= $prev) {\n      $index\
    \ = $i;\n    }\n    $prev = $arr[$i];\n  }\n  return $index;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 0 in /tmp/tmp6tza08tj.php on line 10\n"
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arr_len = count($arr);\n  $last_index\
    \ = $arr_len - 1;\n  $last_element = $arr[$last_index];\n  for ($i = $last_index\
    \ - 1; $i >= 0; $i--) {\n    if ($arr[$i] <= $last_element) {\n      return $i;\n\
    \    }\n  }\n  return -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpusgbm72l.php:27\n\
    Stack trace:\n#0 /tmp/tmpusgbm72l.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpusgbm72l.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $index = -1;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $max) {\n\
    \            $max = $arr[$i];\n            $index = $i;\n        }\n    }\n  \
    \  return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp34bt7kkb.php:26\n\
    Stack trace:\n#0 /tmp/tmp34bt7kkb.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp34bt7kkb.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $index = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $index\
    \ = $i - 1;\n        }\n    }\n    return $index;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7zuo_1l7.php:24\n\
    Stack trace:\n#0 /tmp/tmp7zuo_1l7.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp7zuo_1l7.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      $max = $i;\n\
    \    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwo2btre4.php:24\n\
    Stack trace:\n#0 /tmp/tmpwo2btre4.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwo2btre4.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $index = -1;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] <= $max) {\n      $max\
    \ = $arr[$i];\n      $index = $i;\n    }\n  }\n  return $index;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcmxie2us.php:26\n\
    Stack trace:\n#0 /tmp/tmpcmxie2us.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpcmxie2us.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $maxIndex = 0;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] > $max) {\n\
    \            $max = $arr[$i];\n            $maxIndex = $i;\n        }\n    }\n\
    \    return $maxIndex;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc8j42w1o.php:26\n\
    Stack trace:\n#0 /tmp/tmpc8j42w1o.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpc8j42w1o.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr = array_reverse($arr);\n    for\
    \ ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $arr[$i - 1]) {\n\
    \            return count($arr) - $i;\n        }\n    }\n    return -1;\n}\n\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprg96y30v.php:24\n\
    Stack trace:\n#0 /tmp/tmprg96y30v.php(31): test()\n#1 {main}\n  thrown in /tmp/tmprg96y30v.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $max_index = 0;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $max) {\n\
    \            return $max_index;\n        }\n        if ($arr[$i] > $max) {\n \
    \           $max = $arr[$i];\n            $max_index = $i;\n        }\n    }\n\
    \    return -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0wfppm0z.php:29\n\
    Stack trace:\n#0 /tmp/tmp0wfppm0z.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0wfppm0z.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      $max = $i;\n\
    \    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxykur_cp.php:24\n\
    Stack trace:\n#0 /tmp/tmpxykur_cp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxykur_cp.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $index = -1;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $max) {\n\
    \            $max = $arr[$i];\n            $index = $i;\n        }\n    }\n  \
    \  return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2r66neva.php:26\n\
    Stack trace:\n#0 /tmp/tmp2r66neva.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2r66neva.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8bgavlg9.php:27\n\
    Stack trace:\n#0 /tmp/tmp8bgavlg9.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8bgavlg9.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqy3g62rv.php:27\n\
    Stack trace:\n#0 /tmp/tmpqy3g62rv.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqy3g62rv.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $max_index = 0;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] > $max) {\n\
    \            $max = $arr[$i];\n            $max_index = $i;\n        }\n    }\n\
    \    return $max_index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsgtvnqpk.php:26\n\
    Stack trace:\n#0 /tmp/tmpsgtvnqpk.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpsgtvnqpk.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $result = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] <= $arr[$i - 1]) {\n            $result\
    \ = $i - 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt0lp366s.php:24\n\
    Stack trace:\n#0 /tmp/tmpt0lp366s.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpt0lp366s.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arr_length = count($arr);\n  $last_index\
    \ = $arr_length - 1;\n  $last_element = $arr[$last_index];\n  $last_element_index\
    \ = $last_index;\n  for ($i = $last_index - 1; $i >= 0; $i--) {\n    if ($arr[$i]\
    \ <= $last_element) {\n      $last_element = $arr[$i];\n      $last_element_index\
    \ = $i;\n    }\n  }\n  if ($last_element_index == $last_index) {\n    return -1;\n\
    \  }\n  return $last_element_index;\n}\n\nfunction candidate(...$args) {\n   \
    \ return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc9uswsjq.php:31\n\
    Stack trace:\n#0 /tmp/tmpc9uswsjq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpc9uswsjq.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $index = -1;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $max) {\n\
    \            $max = $arr[$i];\n            $index = $i;\n        }\n    }\n  \
    \  return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4intmw7k.php:26\n\
    Stack trace:\n#0 /tmp/tmp4intmw7k.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4intmw7k.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $index = -1;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] > $max) {\n      $max =\
    \ $arr[$i];\n      $index = $i;\n    }\n  }\n  return $index;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb306tsd0.php:26\n\
    Stack trace:\n#0 /tmp/tmpb306tsd0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpb306tsd0.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $index = -1;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] <= $max) {\n      $max\
    \ = $arr[$i];\n      $index = $i;\n    }\n  }\n  return $index;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc3qg8bov.php:26\n\
    Stack trace:\n#0 /tmp/tmpc3qg8bov.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpc3qg8bov.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $last = $arr[0];\n    $max = 0;\n  \
    \  for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $last) {\n\
    \            if ($i > $max) {\n                $max = $i;\n            }\n   \
    \     }\n        $last = $arr[$i];\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3ajh1vz1.php:29\n\
    Stack trace:\n#0 /tmp/tmp3ajh1vz1.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp3ajh1vz1.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $count = count($arr);\n  for ($i = $count\
    \ - 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      return $i -\
    \ 1;\n    }\n  }\n  return -1;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk63izxl7.php:24\n\
    Stack trace:\n#0 /tmp/tmpk63izxl7.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpk63izxl7.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $maxIndex = 0;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] <= $max) {\n      $max\
    \ = $arr[$i];\n      $maxIndex = $i;\n    }\n  }\n  return $maxIndex;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplprz_ojt.php:26\n\
    Stack trace:\n#0 /tmp/tmplprz_ojt.php(33): test()\n#1 {main}\n  thrown in /tmp/tmplprz_ojt.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $index = -1;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $max) {\n\
    \            $max = $arr[$i];\n            $index = $i;\n        }\n    }\n  \
    \  return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphbod4w0u.php:26\n\
    Stack trace:\n#0 /tmp/tmphbod4w0u.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphbod4w0u.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] >= $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5o1slv48.php:24\n\
    Stack trace:\n#0 /tmp/tmp5o1slv48.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp5o1slv48.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $result = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $result\
    \ = $i - 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmlc66n_e.php:24\n\
    Stack trace:\n#0 /tmp/tmpmlc66n_e.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpmlc66n_e.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr = array_reverse($arr);\n    $max\
    \ = $arr[0];\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i]\
    \ < $max) {\n            return count($arr) - $i - 1;\n        }\n        $max\
    \ = max($max, $arr[$i]);\n    }\n    return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp95dxl0y7.php:27\n\
    Stack trace:\n#0 /tmp/tmp95dxl0y7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp95dxl0y7.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arr = array_reverse($arr);\n  for ($i\
    \ = 0; $i < count($arr) - 1; $i++) {\n    if ($arr[$i] > $arr[$i + 1]) {\n   \
    \   return count($arr) - $i - 1;\n    }\n  }\n  return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl1dct_4t.php:24\n\
    Stack trace:\n#0 /tmp/tmpl1dct_4t.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpl1dct_4t.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $maxIndex = 0;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $max) {\n\
    \            return $maxIndex;\n        }\n        if ($arr[$i] > $max) {\n  \
    \          $max = $arr[$i];\n            $maxIndex = $i;\n        }\n    }\n \
    \   return -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf2dux0vq.php:29\n\
    Stack trace:\n#0 /tmp/tmpf2dux0vq.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpf2dux0vq.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = 0; $i < count($arr)\
    \ - 1; $i++) {\n    if ($arr[$i] >= $arr[$i + 1]) {\n      $max = $i;\n    }\n\
    \  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw9_8x6mb.php:24\n\
    Stack trace:\n#0 /tmp/tmpw9_8x6mb.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpw9_8x6mb.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $last = $arr[0];\n    $index = -1;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $last) {\n\
    \            $index = $i;\n            $last = $arr[$i];\n        }\n    }\n \
    \   return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnmv_v5d2.php:26\n\
    Stack trace:\n#0 /tmp/tmpnmv_v5d2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpnmv_v5d2.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $result = -1;\n  for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      $result = $i\
    \ - 1;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_t_fyj01.php:24\n\
    Stack trace:\n#0 /tmp/tmp_t_fyj01.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_t_fyj01.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3pz_m0oc.php:27\n\
    Stack trace:\n#0 /tmp/tmp3pz_m0oc.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3pz_m0oc.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr = array_reverse($arr);\n    $max\
    \ = $arr[0];\n    $index = 0;\n    for ($i = 1; $i < count($arr); $i++) {\n  \
    \      if ($arr[$i] < $max) {\n            $index = $i;\n            break;\n\
    \        }\n        $max = $arr[$i];\n    }\n    return $index;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwiau09cf.php:28\n\
    Stack trace:\n#0 /tmp/tmpwiau09cf.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpwiau09cf.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arr = array_reverse($arr);\n  for ($i\
    \ = 0; $i < count($arr); $i++) {\n    if ($arr[$i] < $arr[$i + 1]) {\n      return\
    \ count($arr) - $i - 1;\n    }\n  }\n  return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 4 in /tmp/tmp3nz00yoh.php on line 12\n"
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $index = -1;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] <= $max) {\n      $max\
    \ = $arr[$i];\n      $index = $i;\n    }\n  }\n  return $index;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn8ml3810.php:26\n\
    Stack trace:\n#0 /tmp/tmpn8ml3810.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpn8ml3810.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arr_length = count($arr);\n  $max_index\
    \ = $arr_length - 1;\n  $max_index_value = $arr[$max_index];\n  $max_index_value_index\
    \ = $max_index;\n  $max_index_value_index_value = $max_index_value;\n  $max_index_value_index_value_index\
    \ = $max_index_value_index;\n  $max_index_value_index_value_index_value = $max_index_value_index_value;\n\
    \  $max_index_value_index_value_index_value_index = $max_index_value_index_value_index;\n\
    \  $max_index_value_index_value_index_value_index_value = $max_index_value_index_value_index_value;\n\
    \  $max_index_value_index_value_index_value_index_value_index = $max_index_value_index_value_index_value_index;\n\
    \  $max_index_value_index_value_index_value_index_value_index_value = $max_index_value_index_value_index_value_index_value;\n\
    \  $max_index_value_index_value_index_value_index_value_index_value_index = $max_index_value_index_value_index_value_index_value_index;\n\
    \  $max_index_value_index_value_index_value_index_value_index_value_index_value\
    \ = $max_index_value_index_value_index_value_index_value_index_value;\n  $max_index_value_index_value_index_value_index_value_index_value_index_value_index\
    \ = $max_index_value_index_value_index_value_index_value_index_value_index;\n\
    \  $max_index_value_index_value_index_value_index_value_index_value_index_value_index_value\
    \ = $max_index_value_index_value_index_value_index_value_index_value_index_value;\n\
    \  $max_index_value_index_value_index\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\" in /tmp/tmpjgwz9axq.php\
    \ on line 26\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr = array_reverse($arr);\n    $index\
    \ = -1;\n    for ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] >= $arr[$i\
    \ + 1]) {\n            $index = $i;\n            break;\n        }\n    }\n  \
    \  return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpspfj_ugl.php:26\n\
    Stack trace:\n#0 /tmp/tmpspfj_ugl.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpspfj_ugl.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $index = -1;\n  for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      $index = $i\
    \ - 1;\n    }\n  }\n  return $index;\n}\n\nfunction candidate(...$args) {\n  \
    \  return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpberw7j5z.php:24\n\
    Stack trace:\n#0 /tmp/tmpberw7j5z.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpberw7j5z.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $last = $arr[0];\n    $index = -1;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $last) {\n\
    \            $index = $i;\n            $last = $arr[$i];\n        }\n    }\n \
    \   return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplfv8z2ju.php:26\n\
    Stack trace:\n#0 /tmp/tmplfv8z2ju.php(33): test()\n#1 {main}\n  thrown in /tmp/tmplfv8z2ju.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      $max = $i;\n\
    \    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpepxbc_2i.php:24\n\
    Stack trace:\n#0 /tmp/tmpepxbc_2i.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpepxbc_2i.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr = array_reverse($arr);\n    $max\
    \ = $arr[0];\n    $index = 0;\n    for ($i = 1; $i < count($arr); $i++) {\n  \
    \      if ($arr[$i] < $max) {\n            $index = $i;\n            break;\n\
    \        }\n        $max = $arr[$i];\n    }\n    return $index == 0 ? -1 : count($arr)\
    \ - $index - 1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm65bbusj.php:29\n\
    Stack trace:\n#0 /tmp/tmpm65bbusj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpm65bbusj.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arr = array_reverse($arr);\n  $prev =\
    \ $arr[0];\n  for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] < $prev)\
    \ {\n      return count($arr) - $i - 1;\n    }\n    $prev = $arr[$i];\n  }\n \
    \ return -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn8re9h2k.php:27\n\
    Stack trace:\n#0 /tmp/tmpn8re9h2k.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpn8re9h2k.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      $max = $i;\n \
    \   } else {\n      $max = -1;\n    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcqlc01v0.php:26\n\
    Stack trace:\n#0 /tmp/tmpcqlc01v0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpcqlc01v0.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] <= $arr[$i - 1]) {\n      $max = $i;\n\
    \    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy8lfozv6.php:27\n\
    Stack trace:\n#0 /tmp/tmpy8lfozv6.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpy8lfozv6.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $max_index = 0;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $max) {\n\
    \            $max = $arr[$i];\n            $max_index = $i;\n        }\n    }\n\
    \    return $max_index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpan8i3huo.php:26\n\
    Stack trace:\n#0 /tmp/tmpan8i3huo.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpan8i3huo.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $result = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $result\
    \ = $i - 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjc8g32f_.php:24\n\
    Stack trace:\n#0 /tmp/tmpjc8g32f_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpjc8g32f_.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $maxIndex = 0;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] > $max) {\n\
    \            $max = $arr[$i];\n            $maxIndex = $i;\n        }\n    }\n\
    \    return $maxIndex;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq8fbzluo.php:26\n\
    Stack trace:\n#0 /tmp/tmpq8fbzluo.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpq8fbzluo.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkuoa450w.php:27\n\
    Stack trace:\n#0 /tmp/tmpkuoa450w.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkuoa450w.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $last = $arr[0];\n    $index = -1;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $last) {\n\
    \            $index = $i;\n            $last = $arr[$i];\n        }\n    }\n \
    \   return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsoxhmama.php:26\n\
    Stack trace:\n#0 /tmp/tmpsoxhmama.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpsoxhmama.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arr_len = count($arr);\n  $i = $arr_len\
    \ - 1;\n  while ($i > 0) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      return $i\
    \ - 1;\n    }\n    $i--;\n  }\n  return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmg4tefpv.php:26\n\
    Stack trace:\n#0 /tmp/tmpmg4tefpv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpmg4tefpv.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $last = $arr[0];\n  $index = -1;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] <= $last) {\n      $index\
    \ = $i;\n      $last = $arr[$i];\n    }\n  }\n  return $index;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpab5uabit.php:26\n\
    Stack trace:\n#0 /tmp/tmpab5uabit.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpab5uabit.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnt1xuik3.php:27\n\
    Stack trace:\n#0 /tmp/tmpnt1xuik3.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpnt1xuik3.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      $max = $i;\n\
    \    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzydh9qmy.php:24\n\
    Stack trace:\n#0 /tmp/tmpzydh9qmy.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpzydh9qmy.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arr = array_reverse($arr);\n  $max =\
    \ $arr[0];\n  $index = 0;\n  for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i]\
    \ < $max) {\n      $index = $i;\n      break;\n    }\n    $max = $arr[$i];\n \
    \ }\n  return $index == 0 ? -1 : count($arr) - $index - 1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfva89b0v.php:29\n\
    Stack trace:\n#0 /tmp/tmpfva89b0v.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfva89b0v.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      $max = $i;\n\
    \    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgy9v5cwn.php:24\n\
    Stack trace:\n#0 /tmp/tmpgy9v5cwn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpgy9v5cwn.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arr = array_reverse($arr);\n  for ($i\
    \ = 0; $i < count($arr); $i++) {\n    if ($arr[$i] >= $arr[$i + 1]) {\n      return\
    \ count($arr) - $i - 1;\n    }\n  }\n  return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpob4xax9z.php:24\n\
    Stack trace:\n#0 /tmp/tmpob4xax9z.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpob4xax9z.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] <= $arr[$i - 1]) {\n      $max = $i;\n\
    \    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuurr_bbl.php:27\n\
    Stack trace:\n#0 /tmp/tmpuurr_bbl.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpuurr_bbl.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $last = $arr[0];\n    $index = -1;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $last) {\n\
    \            $index = $i;\n            $last = $arr[$i];\n        }\n    }\n \
    \   return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt_y_f8ws.php:26\n\
    Stack trace:\n#0 /tmp/tmpt_y_f8ws.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpt_y_f8ws.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $maxIndex = 0;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] > $max) {\n      $max =\
    \ $arr[$i];\n      $maxIndex = $i;\n    }\n  }\n  for ($i = $maxIndex - 1; $i\
    \ >= 0; $i--) {\n    if ($arr[$i] > $arr[$i + 1]) {\n      return -1;\n    }\n\
    \  }\n  return $maxIndex;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzrgpx1yq.php:31\n\
    Stack trace:\n#0 /tmp/tmpzrgpx1yq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpzrgpx1yq.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arr_length = count($arr);\n  for ($i\
    \ = 1; $i < $arr_length; $i++) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      return\
    \ $i - 1;\n    }\n  }\n  return -1;\n}\n\nfunction candidate(...$args) {\n   \
    \ return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6o0avkhg.php:24\n\
    Stack trace:\n#0 /tmp/tmp6o0avkhg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp6o0avkhg.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_aptv9zo.php:27\n\
    Stack trace:\n#0 /tmp/tmp_aptv9zo.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_aptv9zo.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr = array_reverse($arr);\n    $i\
    \ = 0;\n    while ($i < count($arr) - 1) {\n        if ($arr[$i] < $arr[$i + 1])\
    \ {\n            return count($arr) - $i - 1;\n        }\n        $i++;\n    }\n\
    \    return -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      $max = $i;\n \
    \   } else {\n      $arr[$i - 1] = $max;\n    }\n  }\n  return $arr[0];\n}\n\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprdwihigi.php:27\n\
    Stack trace:\n#0 /tmp/tmprdwihigi.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprdwihigi.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $last = $arr[0];\n  for ($i = 1; $i <\
    \ count($arr); $i++) {\n    if ($arr[$i] <= $last) {\n      return $i - 1;\n \
    \   }\n    $last = $arr[$i];\n  }\n  return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5a4f8ae7.php:25\n\
    Stack trace:\n#0 /tmp/tmp5a4f8ae7.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5a4f8ae7.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $index = -1;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $max) {\n\
    \            $max = $arr[$i];\n            $index = $i;\n        }\n    }\n  \
    \  return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpox3_38sv.php:26\n\
    Stack trace:\n#0 /tmp/tmpox3_38sv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpox3_38sv.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $max_index = 0;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] > $max) {\n\
    \            $max = $arr[$i];\n            $max_index = $i;\n        }\n    }\n\
    \    return $max_index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptupy2a3o.php:26\n\
    Stack trace:\n#0 /tmp/tmptupy2a3o.php(33): test()\n#1 {main}\n  thrown in /tmp/tmptupy2a3o.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\necho can_arrange([1,2,4,3,5])\
    \ . \"\\n\";\necho can_arrange([1,2,3]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "3\n-1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpos0fk75o.php:28\n\
    Stack trace:\n#0 /tmp/tmpos0fk75o.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpos0fk75o.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $result = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $result\
    \ = $i - 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1cd8eo16.php:24\n\
    Stack trace:\n#0 /tmp/tmp1cd8eo16.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp1cd8eo16.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $maxIndex = 0;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] > $max) {\n      $max =\
    \ $arr[$i];\n      $maxIndex = $i;\n    }\n  }\n  return $maxIndex;\n}\n\necho\
    \ can_arrange([1,2,4,3,5]) . \"\\n\";\necho can_arrange([1,2,3]) . \"\\n\";\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "4\n2\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa2_9k9xy.php:28\n\
    Stack trace:\n#0 /tmp/tmpa2_9k9xy.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpa2_9k9xy.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  $maxIndex = -1;\n  for ($i\
    \ = count($arr) - 1; $i >= 0; $i--) {\n    if ($arr[$i] >= $max) {\n      $max\
    \ = $arr[$i];\n      $maxIndex = $i;\n    }\n  }\n  return $maxIndex;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1cxqjwoy.php:26\n\
    Stack trace:\n#0 /tmp/tmp1cxqjwoy.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1cxqjwoy.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr = array_reverse($arr);\n    for\
    \ ($i = 0; $i < count($arr) - 1; $i++) {\n        if ($arr[$i] >= $arr[$i + 1])\
    \ {\n            return count($arr) - $i - 1;\n        }\n    }\n    return -1;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_zwndz8s.php:24\n\
    Stack trace:\n#0 /tmp/tmp_zwndz8s.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_zwndz8s.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $index = -1;\n  for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n    if ($arr[$i] <= $arr[$i - 1]) {\n      $index = $i\
    \ - 1;\n    }\n  }\n  return $index;\n}\n\necho can_arrange([1,2,4,3,5]) . \"\\\
    n\";\necho can_arrange([1,2,3]) . \"\\n\";\necho can_arrange([1,2,4,3,5,6,7,8,9,10])\
    \ . \"\\n\";\necho can_arrange([1,2,3,4,5,6,7,8,9,10]) . \"\\n\";\necho can_arrange([10,9,8,7,6,5,4,3,2,1])\
    \ . \"\\n\";\necho can_arrange([1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1]) . \"\\\
    n\";\necho can_arrange([1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10])\
    \ . \"\\n\";\necho can_arrange([1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10,11])\
    \ . \"\\n\";\necho can_arrange([1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9,10,11,12])\
    \ . \"\\n\";\necho can_arrange([1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1,2,3,4\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmp6t43h9o8.php on line 29\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      $max = $i;\n\
    \    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgercx6q3.php:24\n\
    Stack trace:\n#0 /tmp/tmpgercx6q3.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpgercx6q3.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      $max = $i;\n\
    \    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc5u1k_ar.php:24\n\
    Stack trace:\n#0 /tmp/tmpc5u1k_ar.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpc5u1k_ar.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arr2 = array_reverse($arr);\n  for ($i\
    \ = 0; $i < count($arr); $i++) {\n    if ($arr[$i] >= $arr[$i + 1]) {\n      return\
    \ count($arr) - $i - 1;\n    }\n  }\n  return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb04_0_ig.php:24\n\
    Stack trace:\n#0 /tmp/tmpb04_0_ig.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpb04_0_ig.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplrf2vg71.php:27\n\
    Stack trace:\n#0 /tmp/tmplrf2vg71.php(31): test()\n#1 {main}\n  thrown in /tmp/tmplrf2vg71.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      $max = $i;\n\
    \    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7z3q3ma6.php:24\n\
    Stack trace:\n#0 /tmp/tmp7z3q3ma6.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp7z3q3ma6.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $index = -1;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $max) {\n\
    \            $index = $i;\n        } else {\n            $max = $arr[$i];\n  \
    \      }\n    }\n    return $index;\n}\n\necho can_arrange([1,2,4,3,5]);\necho\
    \ \"\\n\";\necho can_arrange([1,2,3]);\necho \"\\n\";\necho can_arrange([1,2,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmpl0m9xsbs.php on line 27\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $count = count($arr);\n    for ($i =\
    \ $count - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n      \
    \      return $i - 1;\n        }\n    }\n    return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5o_vtlwb.php:24\n\
    Stack trace:\n#0 /tmp/tmp5o_vtlwb.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp5o_vtlwb.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arr_len = count($arr);\n  $last_index\
    \ = $arr_len - 1;\n  $prev_index = $last_index - 1;\n  $last_element = $arr[$last_index];\n\
    \  $prev_element = $arr[$prev_index];\n  if ($last_element >= $prev_element) {\n\
    \    return -1;\n  }\n  for ($i = $last_index - 1; $i >= 0; $i--) {\n    if ($arr[$i]\
    \ <= $last_element) {\n      return $i;\n    }\n  }\n  return -1;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn2qkn0q2.php:31\n\
    Stack trace:\n#0 /tmp/tmpn2qkn0q2.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpn2qkn0q2.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = 0; $i < count($arr)\
    \ - 1; $i++) {\n    if ($arr[$i] >= $arr[$i + 1]) {\n      continue;\n    }\n\
    \    $max = $i;\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n  \
    \  return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvnppg88u.php:26\n\
    Stack trace:\n#0 /tmp/tmpvnppg88u.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpvnppg88u.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arr = array_reverse($arr);\n  $max =\
    \ $arr[0];\n  $index = 0;\n  for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i]\
    \ < $max) {\n      $index = $i;\n      break;\n    }\n    $max = $arr[$i];\n \
    \ }\n  return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpym3bdg3h.php:28\n\
    Stack trace:\n#0 /tmp/tmpym3bdg3h.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpym3bdg3h.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $last = $arr[0];\n  $index = -1;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] <= $last) {\n      $index\
    \ = $i;\n      $last = $arr[$i];\n    }\n  }\n  return $index;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6p8rcfp5.php:26\n\
    Stack trace:\n#0 /tmp/tmp6p8rcfp5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6p8rcfp5.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $index = -1;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] > $max) {\n\
    \            $max = $arr[$i];\n            $index = $i;\n        }\n    }\n  \
    \  return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl1r4508f.php:26\n\
    Stack trace:\n#0 /tmp/tmpl1r4508f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpl1r4508f.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $index = -1;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $max) {\n\
    \            $max = $arr[$i];\n            $index = $i;\n        }\n    }\n  \
    \  return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz6ofofbz.php:26\n\
    Stack trace:\n#0 /tmp/tmpz6ofofbz.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpz6ofofbz.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = 0;\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] <= $arr[$i - 1]) {\n            $max = $i;\n \
    \       }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpju831u0i.php:25\n\
    Stack trace:\n#0 /tmp/tmpju831u0i.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpju831u0i.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] >= $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvacv061g.php:24\n\
    Stack trace:\n#0 /tmp/tmpvacv061g.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpvacv061g.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr = array_reverse($arr);\n    $last\
    \ = $arr[0];\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i]\
    \ < $last) {\n            return count($arr) - $i - 1;\n        }\n        $last\
    \ = $arr[$i];\n    }\n    return -1;\n}\n\nfunction candidate(...$args) {\n  \
    \  return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkuw7v09x.php:27\n\
    Stack trace:\n#0 /tmp/tmpkuw7v09x.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpkuw7v09x.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr_len = count($arr);\n    $index\
    \ = -1;\n    for ($i = 1; $i < $arr_len; $i++) {\n        if ($arr[$i] < $arr[$i\
    \ - 1]) {\n            $index = $i - 1;\n            break;\n        }\n    }\n\
    \    return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvjrcdyrc.php:26\n\
    Stack trace:\n#0 /tmp/tmpvjrcdyrc.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvjrcdyrc.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] >= $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpci1a3j1i.php:24\n\
    Stack trace:\n#0 /tmp/tmpci1a3j1i.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpci1a3j1i.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $index = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $index\
    \ = $i - 1;\n            break;\n        }\n    }\n    return $index;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpug96_65a.php:25\n\
    Stack trace:\n#0 /tmp/tmpug96_65a.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpug96_65a.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      $max = $i;\n \
    \   } else {\n      $arr[$i - 1] = $max;\n    }\n  }\n  return $arr[0];\n}\n\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprmki2n4p.php:27\n\
    Stack trace:\n#0 /tmp/tmprmki2n4p.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprmki2n4p.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $index = -1;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] <= $max) {\n      $max\
    \ = $arr[$i];\n      $index = $i;\n    }\n  }\n  return $index;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpudjr8p9u.php:26\n\
    Stack trace:\n#0 /tmp/tmpudjr8p9u.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpudjr8p9u.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      $max = $i;\n \
    \   } else {\n      $max = $max > $i ? $max : $i;\n    }\n  }\n  return $max;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgq30i8x_.php:27\n\
    Stack trace:\n#0 /tmp/tmpgq30i8x_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgq30i8x_.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $index = -1;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] <= $max) {\n      $max\
    \ = $arr[$i];\n      $index = $i;\n    }\n  }\n  return $index;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp315eh7cm.php:26\n\
    Stack trace:\n#0 /tmp/tmp315eh7cm.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp315eh7cm.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr_len = count($arr);\n    $max_index\
    \ = -1;\n    for ($i = $arr_len - 1; $i > 0; $i--) {\n        if ($arr[$i] >=\
    \ $arr[$i - 1]) {\n            $max_index = $i;\n        }\n    }\n    return\
    \ $max_index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyyz6zfwq.php:25\n\
    Stack trace:\n#0 /tmp/tmpyyz6zfwq.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpyyz6zfwq.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $max_index = 0;\n \
    \ for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] > $max) {\n      $max\
    \ = $arr[$i];\n      $max_index = $i;\n    }\n  }\n  for ($i = 0; $i < $max_index;\
    \ $i++) {\n    if ($arr[$i] > $arr[$i + 1]) {\n      return -1;\n    }\n  }\n\
    \  return $max_index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_k41i8m3.php:31\n\
    Stack trace:\n#0 /tmp/tmp_k41i8m3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_k41i8m3.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr = array_reverse($arr);\n    $max\
    \ = $arr[0];\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i]\
    \ < $max) {\n            return count($arr) - $i - 1;\n        }\n        $max\
    \ = max($max, $arr[$i]);\n    }\n    return -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwrsu1d46.php:27\n\
    Stack trace:\n#0 /tmp/tmpwrsu1d46.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpwrsu1d46.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] <= $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\necho can_arrange([1,2,4,3,5])\
    \ . \"\\n\";\necho can_arrange([1,2,3]) . \"\\n\";\necho can_arrange([1,2,4,3,5,6,7,8,9,10])\
    \ . \"\\n\";\necho can_arrange([1,2,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmpdeh0vjsm.php on line 23\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $index = -1;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $max) {\n\
    \            $max = $arr[$i];\n            $index = $i;\n        }\n    }\n  \
    \  return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpff04y0ao.php:26\n\
    Stack trace:\n#0 /tmp/tmpff04y0ao.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpff04y0ao.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $maxIndex = 0;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $max) {\n\
    \            return $maxIndex;\n        }\n        if ($arr[$i] > $max) {\n  \
    \          $max = $arr[$i];\n            $maxIndex = $i;\n        }\n    }\n \
    \   return -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2_982jq7.php:29\n\
    Stack trace:\n#0 /tmp/tmp2_982jq7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2_982jq7.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $arr_len = count($arr);\n  $last_index\
    \ = $arr_len - 1;\n  for ($i = $last_index; $i > 0; $i--) {\n    if ($arr[$i]\
    \ <= $arr[$i - 1]) {\n      return $i - 1;\n    }\n  }\n  return -1;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkpp4h9wc.php:25\n\
    Stack trace:\n#0 /tmp/tmpkpp4h9wc.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpkpp4h9wc.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $len = count($arr);\n  for ($i = $len\
    \ - 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      return $i -\
    \ 1;\n    }\n  }\n  return -1;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe078k_56.php:24\n\
    Stack trace:\n#0 /tmp/tmpe078k_56.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpe078k_56.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4i55t0lo.php:27\n\
    Stack trace:\n#0 /tmp/tmp4i55t0lo.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4i55t0lo.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      $max = $i;\n\
    \    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc4r4cx98.php:24\n\
    Stack trace:\n#0 /tmp/tmpc4r4cx98.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpc4r4cx98.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      $max = $i;\n \
    \   } else {\n      $arr[$i - 1] = $max;\n    }\n  }\n  return $arr[0];\n}\n\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpql4xibfi.php:27\n\
    Stack trace:\n#0 /tmp/tmpql4xibfi.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpql4xibfi.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $index = -1;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] <= $max) {\n      $max\
    \ = $arr[$i];\n      $index = $i;\n    }\n  }\n  return $index;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpodaucu2g.php:26\n\
    Stack trace:\n#0 /tmp/tmpodaucu2g.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpodaucu2g.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] >= $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt7m2az05.php:24\n\
    Stack trace:\n#0 /tmp/tmpt7m2az05.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpt7m2az05.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $max_index = 0;\n \
    \ for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] <= $max) {\n      return\
    \ $max_index;\n    }\n    if ($arr[$i] > $max) {\n      $max = $arr[$i];\n   \
    \   $max_index = $i;\n    }\n  }\n  return -1;\n}\necho can_arrange([1,2,4,3,5])\
    \ . \"\\n\";\necho can_arrange([1,2,3]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "2\n-1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxvpnq33i.php:30\n\
    Stack trace:\n#0 /tmp/tmpxvpnq33i.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxvpnq33i.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      $max = $i;\n\
    \    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpze_4zl6m.php:24\n\
    Stack trace:\n#0 /tmp/tmpze_4zl6m.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpze_4zl6m.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr = array_reverse($arr);\n    $max\
    \ = $arr[0];\n    $maxIndex = 0;\n    for ($i = 1; $i < count($arr); $i++) {\n\
    \        if ($arr[$i] < $max) {\n            $max = $arr[$i];\n            $maxIndex\
    \ = $i;\n        }\n    }\n    return count($arr) - $maxIndex - 1;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprn48urow.php:27\n\
    Stack trace:\n#0 /tmp/tmprn48urow.php(34): test()\n#1 {main}\n  thrown in /tmp/tmprn48urow.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $max_index = 0;\n \
    \ for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] > $max) {\n      $max\
    \ = $arr[$i];\n      $max_index = $i;\n    }\n  }\n  return $max_index;\n}\n\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8cxu21f6.php:26\n\
    Stack trace:\n#0 /tmp/tmp8cxu21f6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp8cxu21f6.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $maxIndex = 0;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] > $max) {\n\
    \            $max = $arr[$i];\n            $maxIndex = $i;\n        }\n    }\n\
    \    return $maxIndex;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnpd_1mor.php:26\n\
    Stack trace:\n#0 /tmp/tmpnpd_1mor.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpnpd_1mor.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr = array_reverse($arr);\n    $index\
    \ = -1;\n    for ($i = 0; $i < count($arr) - 1; $i++) {\n        if ($arr[$i]\
    \ < $arr[$i + 1]) {\n            $index = count($arr) - $i - 2;\n            break;\n\
    \        }\n    }\n    return $index;\n}\n\nfunction candidate(...$args) {\n \
    \   return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2sb0rm5s.php:26\n\
    Stack trace:\n#0 /tmp/tmp2sb0rm5s.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2sb0rm5s.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp860u4ycr.php:27\n\
    Stack trace:\n#0 /tmp/tmp860u4ycr.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp860u4ycr.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr = array_reverse($arr);\n    $max\
    \ = $arr[0];\n    $index = -1;\n    for ($i = 1; $i < count($arr); $i++) {\n \
    \       if ($arr[$i] < $max) {\n            $index = count($arr) - $i - 1;\n \
    \           break;\n        }\n        $max = max($max, $arr[$i]);\n    }\n  \
    \  return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmputtz_ami.php:29\n\
    Stack trace:\n#0 /tmp/tmputtz_ami.php(35): test()\n#1 {main}\n  thrown in /tmp/tmputtz_ami.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $maxIndex = 0;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $max) {\n\
    \            return $maxIndex;\n        }\n        if ($arr[$i] > $max) {\n  \
    \          $max = $arr[$i];\n            $maxIndex = $i;\n        }\n    }\n \
    \   return -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbzozawyn.php:29\n\
    Stack trace:\n#0 /tmp/tmpbzozawyn.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpbzozawyn.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      $max = $i;\n \
    \   } else {\n      $arr[$i - 1] = $max;\n    }\n  }\n  return $arr[0];\n}\n\n\
    echo can_arrange([1,2,4,3,5]) . \"\\n\";\necho can_arrange([1,2,3]) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "3\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_bximagv.php:29\n\
    Stack trace:\n#0 /tmp/tmp_bximagv.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_bximagv.php\
    \ on line 29\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $maxIndex = 0;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] > $max) {\n\
    \            $max = $arr[$i];\n            $maxIndex = $i;\n        }\n    }\n\
    \    if ($maxIndex === 0) {\n        return -1;\n    }\n    return $maxIndex;\n\
    }\n\necho can_arrange([1,2,4,3,5]) . \"\\n\";\necho can_arrange([1,2,3]) . \"\\\
    n\";\necho can_arrange([1,2,4,3,5,6,7,8,9,10]) . \"\\n\";\necho can_arrange([1,2,4,3,5,6,7,8,9,10,11])\
    \ . \"\\n\";\necho can_arrange([1,2,4,3,5,6,7,8,9,10,11,12]) . \"\\n\";\necho\
    \ can_arrange([1,2,4,3,5,6,7,8,9,10,11,12,13]) . \"\\n\";\necho can_arrange([1,2,4,3,5,6,7,8,9,10,11,12,13,14])\
    \ . \"\\n\";\necho can_arrange([1,2,4,3,5,6,7,8,9,10,11,12,13,14,15]) . \"\\n\"\
    ;\necho can_arrange([1,2,4,3,5,6,7,8,9,10,11,12,13,14,15,16]) . \"\\n\";\necho\
    \ can_arrange([1,2,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17]) . \"\\n\";\necho can_arrange([1,2,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\
    \ . \"\\n\";\necho can_arrange([1,2,4,3,5,\nfunction candidate(...$args) {\n \
    \   return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmp1fn_mjjm.php on line 36\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = $arr[0];\n  $maxIndex = 0;\n  for\
    \ ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] > $max) {\n      $max =\
    \ $arr[$i];\n      $maxIndex = $i;\n    }\n  }\n  for ($i = 0; $i < $maxIndex;\
    \ $i++) {\n    if ($arr[$i] > $arr[$i + 1]) {\n      return -1;\n    }\n  }\n\
    \  return $maxIndex;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4cmjr13m.php:31\n\
    Stack trace:\n#0 /tmp/tmp4cmjr13m.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp4cmjr13m.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $arr_len = count($arr);\n    $max_index\
    \ = -1;\n    for ($i = 1; $i < $arr_len; $i++) {\n        if ($arr[$i] <= $arr[$i\
    \ - 1]) {\n            $max_index = $i - 1;\n        }\n    }\n    return $max_index;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkoctbphb.php:25\n\
    Stack trace:\n#0 /tmp/tmpkoctbphb.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpkoctbphb.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      $max = $i;\n \
    \   } else {\n      $max = -1;\n    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuaulh6s8.php:26\n\
    Stack trace:\n#0 /tmp/tmpuaulh6s8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpuaulh6s8.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] < $arr[$i - 1]) {\n      $max = $i;\n \
    \   } else {\n      $arr[$i - 1] = $max;\n    }\n  }\n  return $arr[0];\n}\n\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6_7mrfon.php:27\n\
    Stack trace:\n#0 /tmp/tmp6_7mrfon.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6_7mrfon.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpo17f28eg.php:27\n\
    Stack trace:\n#0 /tmp/tmpo17f28eg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpo17f28eg.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      $max = $i;\n\
    \    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv4m430zb.php:24\n\
    Stack trace:\n#0 /tmp/tmpv4m430zb.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpv4m430zb.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = 0;\n    $index = -1;\n    for\
    \ ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] > $max) {\n       \
    \     $max = $arr[$i];\n            $index = $i;\n        }\n    }\n    return\
    \ $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8c4ss_j1.php:26\n\
    Stack trace:\n#0 /tmp/tmp8c4ss_j1.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp8c4ss_j1.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      $max = $i;\n\
    \    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpygv1a1c2.php:24\n\
    Stack trace:\n#0 /tmp/tmpygv1a1c2.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpygv1a1c2.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  for ($i = count($arr) -\
    \ 1; $i > 0; $i--) {\n    if ($arr[$i] >= $arr[$i - 1]) {\n      $max = $i;\n\
    \    }\n  }\n  return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk0h86jbq.php:24\n\
    Stack trace:\n#0 /tmp/tmpk0h86jbq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpk0h86jbq.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $max_index = 0;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] <= $max) {\n\
    \            return $max_index;\n        }\n        $max = $arr[$i];\n       \
    \ $max_index = $i;\n    }\n    return -1;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxinpo9fr.php:27\n\
    Stack trace:\n#0 /tmp/tmpxinpo9fr.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpxinpo9fr.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  $max_index = -1;\n  for\
    \ ($i = count($arr) - 1; $i >= 0; $i--) {\n    if ($arr[$i] >= $max) {\n     \
    \ $max = $arr[$i];\n      $max_index = $i;\n    }\n  }\n  return $max_index;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4ei3qwi_.php:26\n\
    Stack trace:\n#0 /tmp/tmp4ei3qwi_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4ei3qwi_.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] <= $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\necho can_arrange([1,2,4,3,5])\
    \ . \"\\n\";\necho can_arrange([1,2,3]) . \"\\n\";\necho can_arrange([1,2,4,3,5,6,7,8,9,10])\
    \ . \"\\n\";\necho can_arrange([1,2,4,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmpkxzpocxv.php on line 23\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmfb1uzjw.php:27\n\
    Stack trace:\n#0 /tmp/tmpmfb1uzjw.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpmfb1uzjw.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    for ($i = count($arr)\
    \ - 1; $i > 0; $i--) {\n        if ($arr[$i] < $arr[$i - 1]) {\n            $max\
    \ = $i;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmputlrqjye.php:27\n\
    Stack trace:\n#0 /tmp/tmputlrqjye.php(31): test()\n#1 {main}\n  thrown in /tmp/tmputlrqjye.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
