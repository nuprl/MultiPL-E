name: HumanEval_156_int_to_mini_roman
language: php
results:
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n        $result\
    \ .= str_repeat($numeral, $number / $value);\n        $number %= $value;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'M' => 1000,\n       \
    \ 'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n\
    \        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' =>\
    \ 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I'\
    \ => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n        while\
    \ ($number >= $value) {\n            $result .= $numeral;\n            $number\
    \ -= $value;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0m18y7xj.php:40\n\
    Stack trace:\n#0 /tmp/tmp0m18y7xj.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp0m18y7xj.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1\n    );\n    foreach ($numerals as $numeral => $value) {\n        $result\
    \ .= str_repeat($numeral, $number / $value);\n        $number %= $value;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $roman_numerals = array(\n    'm' => 1000,\n    'd' =>\
    \ 500,\n    'c' => 100,\n    'l' => 50,\n    'x' => 10,\n    'v' => 5,\n    'i'\
    \ => 1,\n  );\n  foreach ($roman_numerals as $roman => $int) {\n    $matches =\
    \ intdiv($number, $int);\n    $result .= str_repeat($roman, $matches);\n    $number\
    \ = $number % $int;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdp5zmois.php:33\n\
    Stack trace:\n#0 /tmp/tmpdp5zmois.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpdp5zmois.php\
    \ on line 33\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = [\n        'm' => 1000,\n      \
    \  'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1\n    ];\n    foreach ($roman_numerals as $roman => $int) {\n        $matches\
    \ = intdiv($number, $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $number_array = str_split($number);\n  $number_length =\
    \ count($number_array);\n  $number_array = array_reverse($number_array);\n  $number_array\
    \ = array_map('intval', $number_array);\n  $number_array = array_pad($number_array,\
    \ 4, 0);\n  $number_array = array_reverse($number_array);\n  $number_array = array_map('strval',\
    \ $number_array);\n  $number_array = array_map('intval', $number_array);\n  $number_array\
    \ = array_pad($number_array, 4, 0);\n  $number_array = array_reverse($number_array);\n\
    \  $number_array = array_map('strval', $number_array);\n  $number_array = array_map('intval',\
    \ $number_array);\n  $number_array = array_pad($number_array, 4, 0);\n  $number_array\
    \ = array_reverse($number_array);\n  $number_array = array_map('strval', $number_array);\n\
    \  $number_array = array_map('intval', $number_array);\n  $number_array = array_pad($number_array,\
    \ 4, 0);\n  $number_array = array_reverse($number_array);\n  $number_array = array_map('strval',\
    \ $number_array);\n  $number_array = array_map('intval', $number_array);\n  $number_array\
    \ = array_pad($number_array, 4, 0);\n  $number_array = array_reverse($number_array);\n\
    \  $number_array = array_map('strval', $number_array);\n  $number_array = array_map('intval',\
    \ $number_array);\n  $number_array = array_pad($number_array, 4, 0);\n  $number_array\
    \ = array_reverse($number_array);\n  $number_array = array_map('strval', $number_array);\n\
    \  $number_array = array_map('intval', $number_array);\n  $number_array = array_pad($number_\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \")\" in /tmp/tmpf6s2qi_9.php on line 40\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1\n    );\n    foreach ($roman_numerals as $roman => $int) {\n   \
    \     $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $numerals = array(\n    'm' => 1000,\n    'd' => 500,\n\
    \    'c' => 100,\n    'l' => 50,\n    'x' => 10,\n    'v' => 5,\n    'i' => 1\n\
    \  );\n  foreach ($numerals as $numeral => $value) {\n    $result .= str_repeat($numeral,\
    \ floor($number / $value));\n    $number %= $value;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplkahs8nf.php:32\n\
    Stack trace:\n#0 /tmp/tmplkahs8nf.php(48): test()\n#1 {main}\n  thrown in /tmp/tmplkahs8nf.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman_numerals = array(\n    'm' => 1000,\n    'cm' => 900,\n    'd' =>\
    \ 500,\n    'cd' => 400,\n    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n \
    \   'xl' => 40,\n    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n\
    \    'i' => 1,\n  );\n  $result = '';\n  foreach ($roman_numerals as $roman =>\
    \ $int) {\n    $matches = intval($number / $int);\n    $result .= str_repeat($roman,\
    \ $matches);\n    $number = $number % $int;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n        $result\
    \ .= str_repeat($numeral, $number / $value);\n        $number %= $value;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $numerals = [\n    'm' => 1000,\n    'd' => 500,\n   \
    \ 'c' => 100,\n    'l' => 50,\n    'x' => 10,\n    'v' => 5,\n    'i' => 1\n \
    \ ];\n  foreach ($numerals as $numeral => $value) {\n    $result .= str_repeat($numeral,\
    \ floor($number / $value));\n    $number %= $value;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqpoxdvj4.php:32\n\
    Stack trace:\n#0 /tmp/tmpqpoxdvj4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqpoxdvj4.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman_numerals = array(\n    'm' => 1000,\n    'cm' => 900,\n    'd' =>\
    \ 500,\n    'cd' => 400,\n    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n \
    \   'xl' => 40,\n    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n\
    \    'i' => 1,\n  );\n  $result = '';\n  foreach ($roman_numerals as $roman =>\
    \ $int) {\n    $matches = intval($number / $int);\n    $result .= str_repeat($roman,\
    \ $matches);\n    $number = $number % $int;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1\n    );\n    foreach ($numerals as $numeral => $value) {\n        $result\
    \ .= str_repeat($numeral, $number / $value);\n        $number %= $value;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $numerals = array(\n    1000 => 'm',\n    900 => 'cm',\n\
    \    500 => 'd',\n    400 => 'cd',\n    100 => 'c',\n    90 => 'xc',\n    50 =>\
    \ 'l',\n    40 => 'xl',\n    10 => 'x',\n    9 => 'ix',\n    5 => 'v',\n    4\
    \ => 'iv',\n    1 => 'i'\n  );\n  foreach ($numerals as $key => $value) {\n  \
    \  while ($number >= $key) {\n      $roman .= $value;\n      $number -= $key;\n\
    \    }\n  }\n  return $roman;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $map = array(\n        'M' => 1000,\n        'CM'\
    \ => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n  \
    \      'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n\
    \        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n\
    \    );\n    foreach ($map as $roman => $int) {\n        $matches = intval($number\
    \ / $int);\n        $result .= str_repeat($roman, $matches);\n        $number\
    \ = $number % $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjubjlsjd.php:39\n\
    Stack trace:\n#0 /tmp/tmpjubjlsjd.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpjubjlsjd.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl',\
    \ 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        while ($number >= $numbers[$i]) {\n            $result .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n        $result\
    \ .= str_repeat($numeral, $number / $value);\n        $number %= $value;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1\n    );\n    foreach ($numerals as $numeral => $value) {\n        $result\
    \ .= str_repeat($numeral, $number / $value);\n        $number %= $value;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = [\n        'm' => 1000,\n        'cm' =>\
    \ 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n     \
    \   'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    ];\n    foreach ($numerals as $numeral => $value) {\n        while ($number\
    \ >= $value) {\n            $roman .= $numeral;\n            $number -= $value;\n\
    \        }\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n \
    \   return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1\n    );\n    foreach ($roman_numerals as $roman => $int) {\n   \
    \     $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $map = array(\n        'M' => 1000,\n        'CM'\
    \ => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n  \
    \      'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n\
    \        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n\
    \    );\n    foreach ($map as $roman => $int) {\n        $matches = intval($number\
    \ / $int);\n        $result .= str_repeat($roman, $matches);\n        $number\
    \ = $number % $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg42ugkm3.php:39\n\
    Stack trace:\n#0 /tmp/tmpg42ugkm3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpg42ugkm3.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman_numerals = array(\n    'm' => 1000,\n    'cm' => 900,\n    'd' =>\
    \ 500,\n    'cd' => 400,\n    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n \
    \   'xl' => 40,\n    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n\
    \    'i' => 1,\n  );\n  $result = '';\n  foreach ($roman_numerals as $roman =>\
    \ $int) {\n    $matches = intval($number / $int);\n    $result .= str_repeat($roman,\
    \ $matches);\n    $number = $number % $int;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $num) {\n  \
    \      $matches = intval($number / $num);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $num;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $numerals = array(\n    'm' => 1000,\n    'd' => 500,\n\
    \    'c' => 100,\n    'l' => 50,\n    'x' => 10,\n    'v' => 5,\n    'i' => 1\n\
    \  );\n  foreach ($numerals as $numeral => $value) {\n    $result .= str_repeat($numeral,\
    \ intval($number / $value));\n    $number %= $value;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpywnyxym_.php:32\n\
    Stack trace:\n#0 /tmp/tmpywnyxym_.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpywnyxym_.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman_numerals = [\n    'm' => 1000,\n    'cm' => 900,\n    'd' => 500,\n\
    \    'cd' => 400,\n    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n    'xl'\
    \ => 40,\n    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n    'i'\
    \ => 1\n  ];\n  $result = '';\n  foreach ($roman_numerals as $roman => $int) {\n\
    \    $matches = intdiv($number, $int);\n    $result .= str_repeat($roman, $matches);\n\
    \    $number = $number % $int;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n        $result\
    \ .= str_repeat($numeral, $number / $value);\n        $number %= $value;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$result = '';\n\t$roman_numerals = array(\n\t\t'M'  => 1000,\n\t\t'CM'\
    \ => 900,\n\t\t'D'  => 500,\n\t\t'CD' => 400,\n\t\t'C'  => 100,\n\t\t'XC' => 90,\n\
    \t\t'L'  => 50,\n\t\t'XL' => 40,\n\t\t'X'  => 10,\n\t\t'IX' => 9,\n\t\t'V'  =>\
    \ 5,\n\t\t'IV' => 4,\n\t\t'I'  => 1,\n\t);\n\tforeach ($roman_numerals as $roman\
    \ => $int) {\n\t\t$matches = intval($number / $int);\n\t\t$result .= str_repeat($roman,\
    \ $matches);\n\t\t$number = $number % $int;\n\t}\n\treturn $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi0g9qfc0.php:39\n\
    Stack trace:\n#0 /tmp/tmpi0g9qfc0.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpi0g9qfc0.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman_numerals = array(\n    'm' => 1000,\n    'cm' => 900,\n    'd' =>\
    \ 500,\n    'cd' => 400,\n    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n \
    \   'xl' => 40,\n    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n\
    \    'i' => 1,\n  );\n  $result = '';\n  foreach ($roman_numerals as $roman =>\
    \ $int) {\n    $matches = intval($number / $int);\n    $result .= str_repeat($roman,\
    \ $matches);\n    $number = $number % $int;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl',\
    \ 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        while ($number >= $numbers[$i]) {\n            $result .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $map = array(\n        'M' => 1000,\n        'CM'\
    \ => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n  \
    \      'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n\
    \        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n\
    \    );\n    foreach ($map as $roman => $int) {\n        $matches = intval($number\
    \ / $int);\n        $result .= str_repeat($roman, $matches);\n        $number\
    \ = $number % $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjxwc0isc.php:39\n\
    Stack trace:\n#0 /tmp/tmpjxwc0isc.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpjxwc0isc.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman_numerals = array(\n    'm' => 1000,\n    'cm' => 900,\n    'd' =>\
    \ 500,\n    'cd' => 400,\n    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n \
    \   'xl' => 40,\n    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n\
    \    'i' => 1,\n  );\n  $result = '';\n  foreach ($roman_numerals as $roman =>\
    \ $int) {\n    $matches = intval($number / $int);\n    $result .= str_repeat($roman,\
    \ $matches);\n    $number = $number % $int;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $roman_numerals = array(\n    'm' => 1000,\n    'cm' =>\
    \ 900,\n    'd' => 500,\n    'cd' => 400,\n    'c' => 100,\n    'xc' => 90,\n\
    \    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n\
    \    'iv' => 4,\n    'i' => 1,\n  );\n  foreach ($roman_numerals as $roman =>\
    \ $int) {\n    $matches = intval($number / $int);\n    $result .= str_repeat($roman,\
    \ $matches);\n    $number = $number % $int;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n        $result\
    \ .= str_repeat($numeral, $number / $value);\n        $number %= $value;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman_numerals = array(\n    'm' => 1000,\n    'cm' => 900,\n    'd' =>\
    \ 500,\n    'cd' => 400,\n    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n \
    \   'xl' => 40,\n    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n\
    \    'i' => 1,\n  );\n  $result = '';\n  foreach ($roman_numerals as $roman =>\
    \ $int) {\n    $matches = intval($number / $int);\n    $result .= str_repeat($roman,\
    \ $matches);\n    $number = $number % $int;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $num_to_roman = array(\n        1000 => 'm',\n   \
    \     900 => 'cm',\n        500 => 'd',\n        400 => 'cd',\n        100 =>\
    \ 'c',\n        90 => 'xc',\n        50 => 'l',\n        40 => 'xl',\n       \
    \ 10 => 'x',\n        9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n    \
    \    1 => 'i'\n    );\n    foreach ($num_to_roman as $num => $roman) {\n     \
    \   while ($number >= $num) {\n            $result .= $roman;\n            $number\
    \ -= $num;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $conversion = array(\n        'M' => 1000,\n        'CM' => 900,\n  \
    \      'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' =>\
    \ 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX'\
    \ => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n   \
    \ $result = '';\n    foreach ($conversion as $roman => $value) {\n        $matches\
    \ = intval($number / $value);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $value;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfihl77xt.php:39\n\
    Stack trace:\n#0 /tmp/tmpfihl77xt.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfihl77xt.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n    \
    \    'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n    $result\
    \ = '';\n    foreach ($numerals as $numeral => $value) {\n        while ($number\
    \ >= $value) {\n            $result .= $numeral;\n            $number -= $value;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1\n    );\n    foreach ($numerals as $numeral => $value) {\n        while\
    \ ($number >= $value) {\n            $result .= $numeral;\n            $number\
    \ -= $value;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1\n    );\n    foreach ($numerals as $numeral => $value) {\n        $result\
    \ .= str_repeat($numeral, $number / $value);\n        $number %= $value;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = [\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    ];\n    foreach ($numerals as $numeral => $value) {\n        $result .= str_repeat($numeral,\
    \ intdiv($number, $value));\n        $number %= $value;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $roman_numerals = array(\n    'm' => 1000,\n    'cm' =>\
    \ 900,\n    'd' => 500,\n    'cd' => 400,\n    'c' => 100,\n    'xc' => 90,\n\
    \    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n\
    \    'iv' => 4,\n    'i' => 1,\n  );\n  foreach ($roman_numerals as $roman =>\
    \ $int) {\n    $matches = intval($number / $int);\n    $result .= str_repeat($roman,\
    \ $matches);\n    $number = $number % $int;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $numerals = array(\n    'm' => 1000,\n    'd' => 500,\n\
    \    'c' => 100,\n    'l' => 50,\n    'x' => 10,\n    'v' => 5,\n    'i' => 1,\n\
    \  );\n  foreach ($numerals as $numeral => $value) {\n    $result .= str_repeat($numeral,\
    \ intval($number / $value));\n    $number %= $value;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp005t0xgr.php:32\n\
    Stack trace:\n#0 /tmp/tmp005t0xgr.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp005t0xgr.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $numerals = array(\n    'm' => 1000,\n    'd' => 500,\n\
    \    'c' => 100,\n    'l' => 50,\n    'x' => 10,\n    'v' => 5,\n    'i' => 1\n\
    \  );\n  foreach ($numerals as $numeral => $value) {\n    $result .= str_repeat($numeral,\
    \ floor($number / $value));\n    $number %= $value;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpguaigtz3.php:32\n\
    Stack trace:\n#0 /tmp/tmpguaigtz3.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpguaigtz3.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1\n    );\n    foreach ($numerals as $numeral => $value) {\n        $result\
    \ .= str_repeat($numeral, $number / $value);\n        $number %= $value;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n        $result\
    \ .= str_repeat($numeral, $number / $value);\n        $number %= $value;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = [\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    ];\n    foreach ($numerals as $numeral => $value) {\n        while ($number\
    \ >= $value) {\n            $result .= $numeral;\n            $number -= $value;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $key => $value) {\n      \
    \  while ($number >= $value) {\n            $result .= $key;\n            $number\
    \ -= $value;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $numerals = array(\n    'm' => 1000,\n    'd' => 500,\n\
    \    'c' => 100,\n    'l' => 50,\n    'x' => 10,\n    'v' => 5,\n    'i' => 1\n\
    \  );\n  foreach ($numerals as $numeral => $value) {\n    $result .= str_repeat($numeral,\
    \ floor($number / $value));\n    $number %= $value;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdrqvhea6.php:32\n\
    Stack trace:\n#0 /tmp/tmpdrqvhea6.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpdrqvhea6.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n        while\
    \ ($number >= $value) {\n            $result .= $numeral;\n            $number\
    \ -= $value;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $roman_numerals = array(\n    'm' => 1000,\n    'cm' =>\
    \ 900,\n    'd' => 500,\n    'cd' => 400,\n    'c' => 100,\n    'xc' => 90,\n\
    \    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n\
    \    'iv' => 4,\n    'i' => 1,\n  );\n  foreach ($roman_numerals as $roman =>\
    \ $int) {\n    $matches = intval($number / $int);\n    $result .= str_repeat($roman,\
    \ $matches);\n    $number = $number % $int;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $numerals = array(\n    'm' => 1000,\n    'd' => 500,\n\
    \    'c' => 100,\n    'l' => 50,\n    'x' => 10,\n    'v' => 5,\n    'i' => 1\n\
    \  );\n  foreach ($numerals as $numeral => $value) {\n    $result .= str_repeat($numeral,\
    \ floor($number / $value));\n    $number %= $value;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbvrkm3ix.php:32\n\
    Stack trace:\n#0 /tmp/tmpbvrkm3ix.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpbvrkm3ix.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $map = [\n        'M' => 1000,\n        'CM' => 900,\n\
    \        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC'\
    \ => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n      \
    \  'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n    ];\n\
    \    foreach ($map as $roman => $int) {\n        $matches = intdiv($number, $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkv7pqwr8.php:39\n\
    Stack trace:\n#0 /tmp/tmpkv7pqwr8.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpkv7pqwr8.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1\n    );\n    foreach ($numerals as $numeral => $value) {\n        $result\
    \ .= str_repeat($numeral, $number / $value);\n        $number %= $value;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $numerals = array(\n    'm' => 1000,\n    'd' => 500,\n\
    \    'c' => 100,\n    'l' => 50,\n    'x' => 10,\n    'v' => 5,\n    'i' => 1\n\
    \  );\n  foreach ($numerals as $numeral => $value) {\n    $result .= str_repeat($numeral,\
    \ floor($number / $value));\n    $number %= $value;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpphw496f3.php:32\n\
    Stack trace:\n#0 /tmp/tmpphw496f3.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpphw496f3.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        while ($number\
    \ >= $value) {\n            $roman .= $numeral;\n            $number -= $value;\n\
    \        }\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n \
    \   return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'M'  => 1000,\n\
    \        'CM' => 900,\n        'D'  => 500,\n        'CD' => 400,\n        'C'\
    \  => 100,\n        'XC' => 90,\n        'L'  => 50,\n        'XL' => 40,\n  \
    \      'X'  => 10,\n        'IX' => 9,\n        'V'  => 5,\n        'IV' => 4,\n\
    \        'I'  => 1\n    );\n    foreach ($roman_numerals as $roman => $int) {\n\
    \        $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6kf97kdb.php:39\n\
    Stack trace:\n#0 /tmp/tmp6kf97kdb.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp6kf97kdb.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n\t$roman = \"\";\n\t$numerals = array(\n\t\t'M' => 1000,\n\t\t'CM' => 900,\n\
    \t\t'D' => 500,\n\t\t'CD' => 400,\n\t\t'C' => 100,\n\t\t'XC' => 90,\n\t\t'L' =>\
    \ 50,\n\t\t'XL' => 40,\n\t\t'X' => 10,\n\t\t'IX' => 9,\n\t\t'V' => 5,\n\t\t'IV'\
    \ => 4,\n\t\t'I' => 1\n\t);\n\tforeach ($numerals as $numeral => $value) {\n\t\
    \twhile ($number >= $value) {\n\t\t\t$roman .= $numeral;\n\t\t\t$number -= $value;\n\
    \t\t}\n\t}\n\treturn $roman;\n}\n\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbx0e9k1f.php:40\n\
    Stack trace:\n#0 /tmp/tmpbx0e9k1f.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpbx0e9k1f.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1\n    );\n    foreach ($numerals as $numeral => $value) {\n        $result\
    \ .= str_repeat($numeral, $number / $value);\n        $number %= $value;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'd'\
    \ => 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n     \
    \   'v' => 5,\n        'i' => 1\n    );\n    foreach ($numerals as $numeral =>\
    \ $value) {\n        $roman .= str_repeat($numeral, $number / $value);\n     \
    \   $number %= $value;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr4x795pm.php:32\n\
    Stack trace:\n#0 /tmp/tmpr4x795pm.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpr4x795pm.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman_numerals = array(\n    'm' => 1000,\n    'cm' => 900,\n    'd' =>\
    \ 500,\n    'cd' => 400,\n    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n \
    \   'xl' => 40,\n    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n\
    \    'i' => 1\n  );\n  $result = '';\n  foreach ($roman_numerals as $roman =>\
    \ $int) {\n    $matches = intval($number / $int);\n    $result .= str_repeat($roman,\
    \ $matches);\n    $number = $number % $int;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'd'\
    \ => 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n     \
    \   'v' => 5,\n        'i' => 1,\n    );\n    foreach ($numerals as $numeral =>\
    \ $value) {\n        $roman .= str_repeat($numeral, floor($number / $value));\n\
    \        $number %= $value;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnhif38ys.php:32\n\
    Stack trace:\n#0 /tmp/tmpnhif38ys.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpnhif38ys.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n        while\
    \ ($number >= $value) {\n            $result .= $numeral;\n            $number\
    \ -= $value;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $roman .= str_repeat($numeral,\
    \ $number / $value);\n        $number %= $value;\n    }\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $roman_numerals = array(\n    'm' => 1000,\n    'cm' =>\
    \ 900,\n    'd' => 500,\n    'cd' => 400,\n    'c' => 100,\n    'xc' => 90,\n\
    \    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n\
    \    'iv' => 4,\n    'i' => 1,\n  );\n  foreach ($roman_numerals as $roman =>\
    \ $int) {\n    $matches = intval($number / $int);\n    $result .= str_repeat($roman,\
    \ $matches);\n    $number = $number % $int;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        while ($number\
    \ >= $value) {\n            $roman .= $numeral;\n            $number -= $value;\n\
    \        }\n    }\n    return $roman;\n}\n\nfunction candidate(...$args) {\n \
    \   return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman_numerals = array(\n    'm' => 1000,\n    'cm' => 900,\n    'd' =>\
    \ 500,\n    'cd' => 400,\n    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n \
    \   'xl' => 40,\n    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n\
    \    'i' => 1,\n  );\n  $result = '';\n  foreach ($roman_numerals as $roman =>\
    \ $int) {\n    $matches = intval($number / $int);\n    $result .= str_repeat($roman,\
    \ $matches);\n    $number = $number % $int;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman_numerals = array(\n    'm' => 1000,\n    'cm' => 900,\n    'd' =>\
    \ 500,\n    'cd' => 400,\n    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n \
    \   'xl' => 40,\n    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n\
    \    'i' => 1,\n  );\n  $result = '';\n  foreach ($roman_numerals as $roman =>\
    \ $int) {\n    $matches = intval($number / $int);\n    $result .= str_repeat($roman,\
    \ $matches);\n    $number = $number % $int;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = [\n        'm' => 1000,\n        'd' =>\
    \ 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n        'v'\
    \ => 5,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral => $value)\
    \ {\n        $roman .= str_repeat($numeral, floor($number / $value));\n      \
    \  $number %= $value;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgyq5hp9o.php:32\n\
    Stack trace:\n#0 /tmp/tmpgyq5hp9o.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpgyq5hp9o.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = [\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    ];\n    foreach ($numerals as $numeral => $value) {\n        while ($number\
    \ >= $value) {\n            $result .= $numeral;\n            $number -= $value;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1\n    );\n    foreach ($roman_numerals as $roman => $int) {\n   \
    \     $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1\n    );\n    foreach ($numerals as $numeral => $value) {\n        while\
    \ ($number >= $value) {\n            $result .= $numeral;\n            $number\
    \ -= $value;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1\n    );\n    foreach ($numerals as $numeral => $value) {\n        while\
    \ ($number >= $value) {\n            $result .= $numeral;\n            $number\
    \ -= $value;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = [\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    ];\n    foreach ($numerals as $numeral => $value) {\n        while ($number\
    \ >= $value) {\n            $result .= $numeral;\n            $number -= $value;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1\n    );\n    foreach ($roman_numerals as $roman => $int) {\n   \
    \     $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1\n    );\n    foreach ($numerals as $numeral => $value) {\n        $result\
    \ .= str_repeat($numeral, $number / $value);\n        $number %= $value;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = [\n        'm' => 1000,\n        'cm' => 900,\n   \
    \     'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' =>\
    \ 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix'\
    \ => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    ];\n   \
    \ $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n        $matches\
    \ = intdiv($number, $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $roman .= str_repeat($numeral,\
    \ $number / $value);\n        $number %= $value;\n    }\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = \"\";\n    $numerals = array(\n        'm' => 1000,\n     \
    \   'd' => 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n\
    \        'v' => 5,\n        'i' => 1\n    );\n    foreach ($numerals as $numeral\
    \ => $value) {\n        $result .= str_repeat($numeral, $number / $value);\n \
    \       $number %= $value;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeora5cmt.php:31\n\
    Stack trace:\n#0 /tmp/tmpeora5cmt.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpeora5cmt.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $number = (int) $number;\n    $numerals = array(\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1,\n    );\n    foreach ($numerals as $numeral\
    \ => $value) {\n        $matches = intval($number / $value);\n        $roman .=\
    \ str_repeat($numeral, $matches);\n        $number = $number % $value;\n    }\n\
    \    return $roman;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1\n    );\n    foreach ($roman_numerals as $roman => $int) {\n   \
    \     $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n        while\
    \ ($number >= $value) {\n            $result .= $numeral;\n            $number\
    \ -= $value;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $numerals = array(\n    'm' => 1000,\n    'd' => 500,\n\
    \    'c' => 100,\n    'l' => 50,\n    'x' => 10,\n    'v' => 5,\n    'i' => 1\n\
    \  );\n  foreach ($numerals as $numeral => $value) {\n    $roman .= str_repeat($numeral,\
    \ floor($number / $value));\n    $number %= $value;\n  }\n  return $roman;\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp57ywfvkq.php:32\n\
    Stack trace:\n#0 /tmp/tmp57ywfvkq.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp57ywfvkq.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $numerals = array(\n    'm' => 1000,\n    'd' => 500,\n\
    \    'c' => 100,\n    'l' => 50,\n    'x' => 10,\n    'v' => 5,\n    'i' => 1\n\
    \  );\n  foreach ($numerals as $numeral => $value) {\n    $result .= str_repeat($numeral,\
    \ floor($number / $value));\n    $number %= $value;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphx5ba_dj.php:32\n\
    Stack trace:\n#0 /tmp/tmphx5ba_dj.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphx5ba_dj.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman_numerals = array(\n    'm' => 1000,\n    'cm' => 900,\n    'd' =>\
    \ 500,\n    'cd' => 400,\n    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n \
    \   'xl' => 40,\n    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n\
    \    'i' => 1,\n  );\n  $result = '';\n  foreach ($roman_numerals as $roman =>\
    \ $int) {\n    $matches = intval($number / $int);\n    $result .= str_repeat($roman,\
    \ $matches);\n    $number = $number % $int;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $map = array(\n        'M' => 1000,\n        'CM'\
    \ => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n  \
    \      'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n\
    \        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n\
    \    );\n    foreach ($map as $roman => $int) {\n        $matches = intval($number\
    \ / $int);\n        $result .= str_repeat($roman, $matches);\n        $number\
    \ = $number % $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7nca3v35.php:39\n\
    Stack trace:\n#0 /tmp/tmp7nca3v35.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp7nca3v35.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $romans = array(\n        'm' => 1000,\n        'cm' => 900,\n      \
    \  'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n    $result\
    \ = '';\n    foreach ($romans as $roman => $int) {\n        $matches = intval($number\
    \ / $int);\n        $result .= str_repeat($roman, $matches);\n        $number\
    \ = $number % $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'd'\
    \ => 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n     \
    \   'v' => 5,\n        'i' => 1\n    );\n    foreach ($numerals as $numeral =>\
    \ $value) {\n        $roman .= str_repeat($numeral, floor($number / $value));\n\
    \        $number %= $value;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkro9m8k4.php:32\n\
    Stack trace:\n#0 /tmp/tmpkro9m8k4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpkro9m8k4.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n        while\
    \ ($number >= $value) {\n            $result .= $numeral;\n            $number\
    \ -= $value;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman_numerals = array(\n    'm' => 1000,\n    'cm' => 900,\n    'd' =>\
    \ 500,\n    'cd' => 400,\n    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n \
    \   'xl' => 40,\n    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n\
    \    'i' => 1,\n  );\n  $result = '';\n  foreach ($roman_numerals as $roman =>\
    \ $int) {\n    $matches = intval($number / $int);\n    $result .= str_repeat($roman,\
    \ $matches);\n    $number = $number % $int;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $roman .= str_repeat($numeral,\
    \ $number / $value);\n        $number %= $value;\n    }\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $numerals = array(\n    'M' => 1000,\n    'CM' => 900,\n\
    \    'D' => 500,\n    'CD' => 400,\n    'C' => 100,\n    'XC' => 90,\n    'L'\
    \ => 50,\n    'XL' => 40,\n    'X' => 10,\n    'IX' => 9,\n    'V' => 5,\n   \
    \ 'IV' => 4,\n    'I' => 1\n  );\n  foreach ($numerals as $numeral => $value)\
    \ {\n    while ($number >= $value) {\n      $result .= $numeral;\n      $number\
    \ -= $value;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp28_c4rdm.php:40\n\
    Stack trace:\n#0 /tmp/tmp28_c4rdm.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp28_c4rdm.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1\n    );\n    foreach ($numerals as $numeral => $value) {\n        while\
    \ ($number >= $value) {\n            $result .= $numeral;\n            $number\
    \ -= $value;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1\n    );\n    foreach ($numerals as $numeral => $value) {\n        $result\
    \ .= str_repeat($numeral, $number / $value);\n        $number %= $value;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n        $result\
    \ .= str_repeat($numeral, $number / $value);\n        $number %= $value;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x',\
    \ 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n   \
    \     while ($number >= $numbers[$i]) {\n            $roman .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $values = array(1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1);\n    $numerals = array('m', 'cm', 'd', 'cd', 'c', 'xc', 'l',\
    \ 'xl', 'x', 'ix', 'v', 'iv', 'i');\n    for ($i = 0; $i < count($values); $i++)\
    \ {\n        while ($number >= $values[$i]) {\n            $number -= $values[$i];\n\
    \            $roman .= $numerals[$i];\n        }\n    }\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman_numerals = array(\n    'm' => 1000,\n    'cm' => 900,\n    'd' =>\
    \ 500,\n    'cd' => 400,\n    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n \
    \   'xl' => 40,\n    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n\
    \    'i' => 1,\n  );\n  $result = '';\n  foreach ($roman_numerals as $roman =>\
    \ $int) {\n    $matches = intval($number / $int);\n    $result .= str_repeat($roman,\
    \ $matches);\n    $number = $number % $int;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $lookup = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($lookup as $roman => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($roman, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqzv0x7_5.php:39\n\
    Stack trace:\n#0 /tmp/tmpqzv0x7_5.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpqzv0x7_5.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $map = [\n        'M' => 1000,\n        'CM' => 900,\n\
    \        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC'\
    \ => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n      \
    \  'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n    ];\n\
    \    foreach ($map as $roman => $int) {\n        $matches = intdiv($number, $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuoto168j.php:39\n\
    Stack trace:\n#0 /tmp/tmpuoto168j.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpuoto168j.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1\n    );\n    foreach ($roman_numerals as $roman => $int) {\n   \
    \     $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n        while\
    \ ($number >= $value) {\n            $result .= $numeral;\n            $number\
    \ -= $value;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $numerals = array(\n    'm' => 1000,\n    'd' => 500,\n\
    \    'c' => 100,\n    'l' => 50,\n    'x' => 10,\n    'v' => 5,\n    'i' => 1\n\
    \  );\n  foreach ($numerals as $numeral => $value) {\n    $result .= str_repeat($numeral,\
    \ floor($number / $value));\n    $number %= $value;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp80g8whfn.php:32\n\
    Stack trace:\n#0 /tmp/tmp80g8whfn.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp80g8whfn.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $roman .= str_repeat($numeral,\
    \ $number / $value);\n        $number %= $value;\n    }\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'd'\
    \ => 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n     \
    \   'v' => 5,\n        'i' => 1\n    );\n    foreach ($numerals as $numeral =>\
    \ $value) {\n        $roman .= str_repeat($numeral, $number / $value);\n     \
    \   $number %= $value;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpter_ltxv.php:32\n\
    Stack trace:\n#0 /tmp/tmpter_ltxv.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpter_ltxv.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'd'\
    \ => 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n     \
    \   'v' => 5,\n        'i' => 1\n    );\n    foreach ($numerals as $numeral =>\
    \ $value) {\n        $roman .= str_repeat($numeral, $number / $value);\n     \
    \   $number %= $value;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphpuhjfrt.php:32\n\
    Stack trace:\n#0 /tmp/tmphpuhjfrt.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphpuhjfrt.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'd'\
    \ => 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n     \
    \   'v' => 5,\n        'i' => 1\n    );\n    foreach ($numerals as $numeral =>\
    \ $value) {\n        $roman .= str_repeat($numeral, floor($number / $value));\n\
    \        $number %= $value;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa1dvbrit.php:32\n\
    Stack trace:\n#0 /tmp/tmpa1dvbrit.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpa1dvbrit.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $numerals = array(\n    'm' => 1000,\n    'd' => 500,\n\
    \    'c' => 100,\n    'l' => 50,\n    'x' => 10,\n    'v' => 5,\n    'i' => 1\n\
    \  );\n  foreach ($numerals as $numeral => $value) {\n    $result .= str_repeat($numeral,\
    \ intval($number / $value));\n    $number %= $value;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxyepxvyr.php:32\n\
    Stack trace:\n#0 /tmp/tmpxyepxvyr.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpxyepxvyr.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n        $result\
    \ .= str_repeat($numeral, (int) ($number / $value));\n        $number %= $value;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'd'\
    \ => 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n     \
    \   'v' => 5,\n        'i' => 1\n    );\n    foreach ($numerals as $numeral =>\
    \ $value) {\n        $roman .= str_repeat($numeral, $number / $value);\n     \
    \   $number %= $value;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsrwmg_n6.php:32\n\
    Stack trace:\n#0 /tmp/tmpsrwmg_n6.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpsrwmg_n6.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman_numerals = array(\n    'm' => 1000,\n    'cm' => 900,\n    'd' =>\
    \ 500,\n    'cd' => 400,\n    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n \
    \   'xl' => 40,\n    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n\
    \    'i' => 1,\n  );\n  $result = '';\n  foreach ($roman_numerals as $roman =>\
    \ $int) {\n    $matches = intval($number / $int);\n    $result .= str_repeat($roman,\
    \ $matches);\n    $number = $number % $int;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1\n    );\n    foreach ($roman_numerals as $roman => $int) {\n   \
    \     $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numeral_map = array(\n        'M' => 1000,\n    \
    \    'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n\
    \        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' =>\
    \ 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I'\
    \ => 1\n    );\n    foreach ($numeral_map as $roman => $int) {\n        $matches\
    \ = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr92s78e2.php:39\n\
    Stack trace:\n#0 /tmp/tmpr92s78e2.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpr92s78e2.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n        while\
    \ ($number >= $value) {\n            $result .= $numeral;\n            $number\
    \ -= $value;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n        while\
    \ ($number >= $value) {\n            $result .= $numeral;\n            $number\
    \ -= $value;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman_numerals = array(\n    'm' => 1000,\n    'cm' => 900,\n    'd' =>\
    \ 500,\n    'cd' => 400,\n    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n \
    \   'xl' => 40,\n    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n\
    \    'i' => 1,\n  );\n  $result = '';\n  foreach ($roman_numerals as $roman =>\
    \ $int) {\n    $matches = intval($number / $int);\n    $result .= str_repeat($roman,\
    \ $matches);\n    $number = $number % $int;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'd'\
    \ => 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n     \
    \   'v' => 5,\n        'i' => 1\n    );\n    foreach ($numerals as $numeral =>\
    \ $value) {\n        $roman .= str_repeat($numeral, floor($number / $value));\n\
    \        $number %= $value;\n    }\n    return $roman;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj7nojdx4.php:32\n\
    Stack trace:\n#0 /tmp/tmpj7nojdx4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpj7nojdx4.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $result = '';\n  $numerals = array(\n    'm' => 1000,\n    'd' => 500,\n\
    \    'c' => 100,\n    'l' => 50,\n    'x' => 10,\n    'v' => 5,\n    'i' => 1\n\
    \  );\n  foreach ($numerals as $numeral => $value) {\n    $result .= str_repeat($numeral,\
    \ $number / $value);\n    $number %= $value;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplwqioune.php:32\n\
    Stack trace:\n#0 /tmp/tmplwqioune.php(48): test()\n#1 {main}\n  thrown in /tmp/tmplwqioune.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = [\n        'm' => 1000,\n        'd' =>\
    \ 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n        'v'\
    \ => 5,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral => $value)\
    \ {\n        $result .= str_repeat($numeral, intval($number / $value));\n    \
    \    $number %= $value;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkq9llerj.php:32\n\
    Stack trace:\n#0 /tmp/tmpkq9llerj.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpkq9llerj.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n        $result\
    \ .= str_repeat($numeral, $number / $value);\n        $number %= $value;\n   \
    \ }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $numerals = array(\n    'm' => 1000,\n    'd' => 500,\n\
    \    'c' => 100,\n    'l' => 50,\n    'x' => 10,\n    'v' => 5,\n    'i' => 1\n\
    \  );\n  foreach ($numerals as $numeral => $value) {\n    $roman .= str_repeat($numeral,\
    \ (int)($number / $value));\n    $number %= $value;\n  }\n  return $roman;\n}\n\
    \nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbh3kic06.php:32\n\
    Stack trace:\n#0 /tmp/tmpbh3kic06.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpbh3kic06.php\
    \ on line 32\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $roman .= str_repeat($numeral,\
    \ $number / $value);\n        $number %= $value;\n    }\n    return $roman;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n\
    // Examples:\n// >>> int_to_mini_roman(19) == 'xix'\n// >>> int_to_mini_roman(152)\
    \ == 'clii'\n// >>> int_to_mini_roman(426) == 'cdxxvi'\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $int) {\n  \
    \      $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
