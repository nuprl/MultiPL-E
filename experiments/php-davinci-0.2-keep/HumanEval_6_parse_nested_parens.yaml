name: HumanEval_6_parse_nested_parens
language: php
prompt: "<?php\n// Input to this function is a string represented multiple groups\
  \ for nested parentheses separated by spaces.\n// For each of the group, output\
  \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels\
  \ of nesting while ((())) has three.\n// >>> parse_nested_parens('(()()) ((()))\
  \ () ((())()())')\n// [2, 3, 1, 3]\nfunction parse_nested_parens($paren_string)\
  \ {\n"
tests: "function candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
  ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n   \
    \ $paren_string = array_filter($paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    return $paren_string;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_count = array();\n    foreach ($paren_array as $paren_group) {\n \
    \       $paren_count[] = parse_parens($paren_group);\n    }\n    return $paren_count;\n\
    }\n", "    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_groups as $group) {\n        $max_nesting[] = parse_nested_parens_helper($group);\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    return strlen($paren_string);\n}\n",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_count = 0;\n    $paren_max = 0;\n    $paren_max_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $paren_count++;\n            if ($paren_count > $paren_max) {\n       \
    \         $paren_max = $paren_count;\n            }\n        } elseif ($paren\
    \ == ')') {\n            $paren_count--;\n            if ($paren_count == 0) {\n\
    \                array_push($paren_max_array, $paren_max);\n                $paren_max\
    \ = 0;\n            }\n        }\n    }\n    return $paren_max_array;\n}\n", " \
    \ $paren_string = str_replace(' ', '', $paren_string);\n  $paren_array = str_split($paren_string);\n\
    \  $paren_stack = [];\n  $max_depth = 0;\n  $current_depth = 0;\n  $paren_depth_array\
    \ = [];\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n    \
    \  array_push($paren_stack, $paren);\n      $current_depth++;\n      if ($current_depth\
    \ > $max_depth) {\n        $max_depth = $current_depth;\n      }\n    } else {\n\
    \      array_pop($paren_stack);\n      array_push($paren_depth_array, $max_depth);\n\
    \      $current_depth--;\n      $max_depth = $current_depth;\n    }\n  }\n  return\
    \ $paren_depth_array;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max\
    \ = 0;\n    $paren_max_array = array();\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == '(') {\n            $paren_count++;\n            if\
    \ ($paren_count > $paren_max) {\n                $paren_max = $paren_count;\n\
    \            }\n        } elseif ($paren == ')') {\n            $paren_count--;\n\
    \            if ($paren_count == 0) {\n                array_push($paren_max_array,\
    \ $paren_max);\n                $paren_max = 0;\n            }\n        }\n  \
    \  }\n    return $paren_max_array;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $stack\
    \ = new SplStack();\n    $max_depth = 0;\n    $depth = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $stack->push($paren);\n\
    \            $depth++;\n            if ($depth > $max_depth) {\n             \
    \   $max_depth = $depth;\n            }\n        } elseif ($paren == ')') {\n\
    \            $stack->pop();\n            $depth--;\n        }\n    }\n    return\
    \ $max_depth;\n}\n", "  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = array();\n    $max_depth = 0;\n    $depth = 0;\n    $result\
    \ = array();\n    foreach ($paren_array as $paren) {\n        if ($paren == '(')\
    \ {\n            array_push($paren_stack, $paren);\n            $depth++;\n  \
    \          if ($depth > $max_depth) {\n                $max_depth = $depth;\n\
    \            }\n        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n\
    \            $depth--;\n            if (empty($paren_stack)) {\n             \
    \   array_push($result, $max_depth);\n                $max_depth = 0;\n      \
    \      }\n        }\n    }\n    return $result;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $result = array();\n   \
    \ foreach ($paren_array as $paren_str) {\n        $result[] = parse_nested_parens_helper($paren_str);\n\
    \    }\n    return $result;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth\
    \ = 0;\n    $depth_array = [];\n    $current_depth = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $current_depth++;\n\
    \            if ($current_depth > $max_depth) {\n                $max_depth =\
    \ $current_depth;\n            }\n        } elseif ($paren == ')') {\n       \
    \     $depth_array[] = $current_depth;\n            $current_depth--;\n      \
    \  }\n    }\n    return $depth_array;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = array();\n    $max_depth = 0;\n    $current_depth = 0;\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $current_depth++;\n\
    \            if ($current_depth > $max_depth) {\n                $max_depth =\
    \ $current_depth;\n            }\n        } elseif ($paren == ')') {\n       \
    \     $current_depth--;\n        }\n    }\n    return $max_depth;\n}\n", "   \
    \ $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = [];\n    $paren_count = [];\n    $max_count = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n        } else {\n            array_pop($paren_stack);\n         \
    \   $max_count = max($max_count, count($paren_stack));\n        }\n    }\n   \
    \ return $max_count;\n}\n", "    $paren_arr = explode(' ', $paren_string);\n \
    \   $result = [];\n    foreach ($paren_arr as $paren) {\n        $result[] = parse_nested_parens_helper($paren);\n\
    \    }\n    return $result;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\( /', '(', $paren_string);\n    $paren_string = preg_replace('/\
    \ \\)/', ')', $paren_string);\n    $paren_string = preg_replace('/\\(\\) /', '',\
    \ $paren_string);\n    $paren_string = preg_replace('/ \\) \\(/', ' ', $paren_string);\n\
    \    $paren_string = preg_replace('/\\( \\)/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\)$/', '', $paren_string);\n    $paren_string = preg_replace('/^\\\
    (\\) /', '', $paren_string);\n    $paren_string = preg_replace('/^\\(\\)$/', '',\
    \ $paren_string);\n    $paren_string = preg_replace('/^\\s+/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+$/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\(/', '(', $paren_string);\n    $paren_string = preg_replace('/\\)\\)/', ')',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\)/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\)/', '', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\)/', '', $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\)/', '', $paren_string);\n",
  "    $paren_string = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren) {\n        $count\
    \ = 0;\n        $max = 0;\n        for ($i = 0; $i < strlen($paren); $i++) {\n\
    \            if ($paren[$i] == '(') {\n                $count++;\n           \
    \ } else if ($paren[$i] == ')') {\n                $count--;\n            }\n\
    \            if ($count > $max) {\n                $max = $count;\n          \
    \  }\n        }\n        array_push($result, $max);\n    }\n    return $result;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $paren_array_count = count($paren_array);\n\
    \    $paren_array_count_minus_one = $paren_array_count - 1;\n    $paren_array_count_minus_two\
    \ = $paren_array_count - 2;\n    $paren_array_count_minus_three = $paren_array_count\
    \ - 3;\n    $paren_array_count_minus_four = $paren_array_count - 4;\n    $paren_array_count_minus_five\
    \ = $paren_array_count - 5;\n    $paren_array_count_minus_six = $paren_array_count\
    \ - 6;\n    $paren_array_count_minus_seven = $paren_array_count - 7;\n    $paren_array_count_minus_eight\
    \ = $paren_array_count - 8;\n    $paren_array_count_minus_nine = $paren_array_count\
    \ - 9;\n    $paren_array_count_minus_ten = $paren_array_count - 10;\n    $paren_array_count_minus_eleven\
    \ = $paren_array_count - 11;\n    $paren_array_count_minus_twelve = $paren_array_count\
    \ - 12;\n    $paren_array_count_minus_thirteen = $paren_array_count - 13;\n  \
    \  $paren_array_count_minus_fourteen = $paren_array_count - 14;\n    $paren_array_count_minus_fifteen\
    \ = $paren_array_count - 15;\n    $paren_array_count_minus_sixteen = $paren_array_count\
    \ - 16;\n    $paren", "    $paren_array = explode(' ', $paren_string);\n    $result\
    \ = array();\n    foreach ($paren_array as $paren_group) {\n        $result[]\
    \ = parse_nested_parens_helper($paren_group);\n    }\n    return $result;\n}\n",
  "    $paren_array = explode(' ', $paren_string);\n    $result = array();\n    foreach\
    \ ($paren_array as $paren) {\n        $result[] = parse_nested_paren($paren);\n\
    \    }\n    return $result;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth\
    \ = 0;\n    $depth_array = [];\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == '(') {\n            array_push($paren_stack, $paren);\n    \
    \        $max_depth++;\n        } else {\n            array_pop($paren_stack);\n\
    \            array_push($depth_array, $max_depth);\n            $max_depth--;\n\
    \        }\n    }\n    return $depth_array;\n}\n", "    $paren_array = explode('\
    \ ', $paren_string);\n    $paren_levels = [];\n    foreach ($paren_array as $paren_group)\
    \ {\n        $paren_levels[] = parse_nested_parens_helper($paren_group);\n   \
    \ }\n    return $paren_levels;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren_group) {\n      \
    \  $result[] = count_nested_parens($paren_group);\n    }\n    return $result;\n\
    }\n", "    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_groups as $group) {\n        $max_nesting[] = find_max_nesting($group);\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_count\
    \ = 0;\n    $paren_max = 0;\n    $paren_max_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $paren_count++;\n  \
    \          if ($paren_count > $paren_max) {\n                $paren_max = $paren_count;\n\
    \            }\n        } elseif ($paren == ')') {\n            $paren_count--;\n\
    \            if ($paren_count == 0) {\n                array_push($paren_max_array,\
    \ $paren_max);\n                $paren_max = 0;\n            }\n        }\n  \
    \  }\n    return $paren_max_array;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_", "    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_map('strlen', $paren_string);\n    return $paren_string;\n\
    }\n", "    $paren_array = explode(' ', $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_nested_paren($paren);\n\
    \    }\n    return $result;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $current_depth = 0;\n    $paren_groups = [];\n    foreach ($paren_array as\
    \ $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $current_depth++;\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n            }\n        } else\
    \ {\n            array_pop($paren_stack);\n            $current_depth--;\n   \
    \         if (empty($paren_stack)) {\n                array_push($paren_groups,\
    \ $max_depth);\n                $max_depth = 0;\n                $current_depth\
    \ = 0;\n            }\n        }\n    }\n    return $paren_groups;\n}\n", "  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('()',\
    \ '', $paren_string);\n  $paren_string = str_replace('(', '', $paren_string);\n\
    \  $paren_string = str_replace(')', '', $paren_string);\n  $paren_string = str_replace('',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = explode(' ', $paren_string);\n  return $paren_string;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max = 0;\n  \
    \  $paren_max_array = array();\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == '(') {\n            $paren_count++;\n            if ($paren_count\
    \ > $paren_max) {\n                $paren_max = $paren_count;\n            }\n\
    \        } else {\n            $paren_count--;\n            if ($paren_count ==\
    \ 0) {\n                array_push($paren_max_array, $paren_max);\n          \
    \      $paren_max = 0;\n            }\n        }\n    }\n    return $paren_max_array;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $current_depth = 0;\n    $result = [];\n    foreach ($paren_array as $char)\
    \ {\n        if ($char == '(') {\n            $current_depth++;\n            if\
    \ ($current_depth > $max_depth) {\n                $max_depth = $current_depth;\n\
    \            }\n        } else if ($char == ')') {\n            $current_depth--;\n\
    \            if ($current_depth == 0) {\n                array_push($result, $max_depth);\n\
    \                $max_depth = 0;\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth\
    \ = 0;\n    $depth_array = [];\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == '(') {\n            array_push($paren_stack, $paren);\n    \
    \        $max_depth = max($max_depth, count($paren_stack));\n        } else {\n\
    \            array_pop($paren_stack);\n            if (count($paren_stack) ==\
    \ 0) {\n                array_push($depth_array, $max_depth);\n              \
    \  $max_depth = 0;\n            }\n        }\n    }\n    return $depth_array;\n\
    }\n", "    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_groups as $group) {\n        $max_nesting[] = get_max_nesting($group);\n\
    \    }\n    return $max_nesting;\n}\n", "  $paren_array = explode(' ', $paren_string);\n\
    \  $result = array();\n  foreach ($paren_array as $paren) {\n    $result[] = parse_nested_paren($paren);\n\
    \  }\n  return $result;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $max_depth = 0;\n    $curr_depth\
    \ = 0;\n    $paren_depth = [];\n    foreach ($paren_array as $paren) {\n     \
    \   if ($paren == '(') {\n            $curr_depth++;\n            if ($curr_depth\
    \ > $max_depth) {\n                $max_depth = $curr_depth;\n            }\n\
    \        } elseif ($paren == ')') {\n            $paren_depth[] = $curr_depth;\n\
    \            $curr_depth--;\n        }\n    }\n    return $paren_depth;\n}\n",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_map('strlen', $paren_string);\n    return $paren_string;\n\
    }\n", "    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n   ", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = [];\n    $paren_level\
    \ = 0;\n    $paren_level_array = [];\n    foreach ($paren_array as $paren) {\n\
    \        if ($paren == '(') {\n            $paren_stack[] = $paren;\n        \
    \    $paren_level++;\n        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n\
    \            $paren_level_array[] = $paren_level;\n            $paren_level--;\n\
    \        }\n    }\n    return $paren_level_array;\n}\n", "    $paren_string =\
    \ preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_array = explode(' ', $paren_string);\n    $max_nesting = [];\n   \
    \ foreach ($paren_array as $paren_group) {\n        $nesting = 0;\n        $max_nesting_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == '(') {\n                $nesting++;\n            } else\
    \ if ($paren_group[$i] == ')') {\n                $nesting--;\n            }\n\
    \            if ($nesting > $max_nesting_in_group) {\n                $max_nesting_in_group\
    \ = $nesting;\n            }\n        }\n        $max_nesting[] = $max_nesting_in_group;\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_count\
    \ = 0;\n    $max_count = 0;\n    $max_count_array = [];\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $paren_count++;\n  \
    \      } elseif ($paren == ')') {\n            $paren_count--;\n        }\n  \
    \      if ($paren_count > $max_count) {\n            $max_count = $paren_count;\n\
    \        }\n        if ($paren_count == 0) {\n            $max_count_array[] =\
    \ $max_count;\n            $max_count = 0;\n        }\n    }\n    return $max_count_array;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $paren_level = [];\n\
    \    $max_level = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            array_push($paren_stack, $paren);\n            $max_level++;\n\
    \        } else {\n            array_pop($paren_stack);\n            $max_level--;\n\
    \        }\n        array_push($paren_level, $max_level);\n    }\n    return $paren_level;\n\
    }\n", "    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+$/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/^\\s+/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+$/', '', $paren_string);\n    $paren_string = preg_replace('/^\\s+/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+$/', '', $paren_string);\n    $paren_string = preg_replace('/^\\\
    s+/', '', $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+$/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/^\\s+/', '', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+$/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/^\\s+/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+$/', '', $paren_string);\n    $paren_string = preg_replace('/^\\s+/', '', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = preg_replace('", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max\
    \ = 0;\n    $paren_array_max = array();\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == '(') {\n            $paren_count++;\n        } elseif\
    \ ($paren == ')') {\n            $paren_count--;\n        }\n        if ($paren_count\
    \ > $paren_max) {\n            $paren_max = $paren_count;\n        }\n       \
    \ if ($paren_count == 0) {\n            array_push($paren_array_max, $paren_max);\n\
    \            $paren_max = 0;\n        }\n    }\n    return $paren_array_max;\n\
    }\n\n$paren_string = '(()()) ((())) () ((())()())';\n$paren_array_max = parse_nested_parens($paren_string);\n\
    print_r($paren_array_max);", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = [];\n    $max_nesting\
    \ = 0;\n    $nesting_array = [];\n    foreach ($paren_array as $paren) {\n   \
    \     if ($paren == '(') {\n            array_push($paren_stack, $paren);\n  \
    \      } else {\n            array_pop($paren_stack);\n            $current_nesting\
    \ = count($paren_stack);\n            if ($current_nesting > $max_nesting) {\n\
    \                $max_nesting = $current_nesting;\n            }\n           \
    \ if ($paren == ')') {\n                array_push($nesting_array, $max_nesting);\n\
    \            }\n        }\n    }\n    return $nesting_array;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_", "    $paren_groups = explode(' ', $paren_string);\n\
    \    $max_nesting = [];\n    foreach ($paren_groups as $group) {\n        $nesting\
    \ = 0;\n        $max_nesting_in_group = 0;\n        for ($i = 0; $i < strlen($group);\
    \ $i++) {\n            if ($group[$i] == '(') {\n                $nesting++;\n\
    \            } else if ($group[$i] == ')') {\n                $nesting--;\n  \
    \          }\n            $max_nesting_in_group = max($max_nesting_in_group, $nesting);\n\
    \        }\n        $max_nesting[] = $max_nesting_in_group;\n    }\n    return\
    \ $max_nesting;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_groups = str_split($paren_string, strlen($paren_string) / 2);\n  \
    \  $max_nesting = 0;\n    $nesting_levels = [];\n    foreach ($paren_groups as\
    \ $paren_group) {\n        $nesting = 0;\n        $max_nesting = 0;\n        for\
    \ ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == '(') {\n                $nesting++;\n            } else {\n             \
    \   $nesting--;\n            }\n            if ($nesting > $max_nesting) {\n \
    \               $max_nesting = $nesting;\n            }\n        }\n        $nesting_levels[]\
    \ = $max_nesting;\n    }\n    return $nesting_levels;\n}\n", "    $paren_array\
    \ = explode(' ', $paren_string);\n    $result = array();\n    foreach ($paren_array\
    \ as $paren_group) {\n        $result[] = parse_parens($paren_group);\n    }\n\
    \    return $result;\n}\n", "    $paren_string = trim($paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = explode('\
    \ ', $paren_string);\n    $result = array();\n    foreach ($paren_string as $paren_group)\
    \ {\n        $result[] = parse_nested_parens_helper($paren_group);\n    }\n  \
    \  return $result;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_arr = str_split($paren_string);\n    $paren_arr_len = count($paren_arr);\n\
    \    $paren_stack = [];\n    $max_nesting = 0;\n    $nesting_arr = [];\n    for\
    \ ($i = 0; $i < $paren_arr_len; $i++) {\n        if ($paren_arr[$i] == '(') {\n\
    \            array_push($paren_stack, $paren_arr[$i]);\n            $max_nesting++;\n\
    \        } elseif ($paren_arr[$i] == ')') {\n            array_pop($paren_stack);\n\
    \            array_push($nesting_arr, $max_nesting);\n            $max_nesting--;\n\
    \        }\n    }\n    return $nesting_arr;\n}\n", "    $paren_groups = explode('\
    \ ', $paren_string);\n    $max_nesting = [];\n    foreach ($paren_groups as $paren_group)\
    \ {\n        $nesting = 0;\n        $max_nesting_in_group = 0;\n        for ($i\
    \ = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i] ==\
    \ '(') {\n                $nesting++;\n            } else {\n                $nesting--;\n\
    \            }\n            $max_nesting_in_group = max($max_nesting_in_group,\
    \ $nesting);\n        }\n        $max_nesting[] = $max_nesting_in_group;\n   \
    \ }\n    return $max_nesting;\n}\n\n$paren_string = '(()()) ((())) () ((())()())';\n\
    $max_nesting = parse_nested_parens($paren_string);\nprint_r($max_nesting);", " \
    \   $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_map('strlen', $paren_string);\n    return $paren_string;\n\
    }\n", "    $paren_array = explode(' ', $paren_string);\n    $paren_result = array();\n\
    \    foreach ($paren_array as $paren_group) {\n        $paren_result[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $paren_result;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    return explode('\
    \ ', $paren_string);\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren) {\n        $result[]\
    \ = parse_paren($paren);\n    }\n    return $result;\n}\n", "    $paren_array\
    \ = explode(' ', $paren_string);\n    $result = array();\n    foreach ($paren_array\
    \ as $paren) {\n        $result[] = parse_nested_paren($paren);\n    }\n    return\
    \ $result;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_", "  $paren_string\
    \ = trim($paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n  $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = [];\n    $paren_count = [];\n    $max_count = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            $paren_stack[]\
    \ = $paren;\n            $max_count++;\n        } else {\n            if (count($paren_stack)\
    \ == 0) {\n                return false;\n            }\n            $paren_stack[]\
    \ = $paren;\n            if (count($paren_stack) == 2) {\n                $paren_count[]\
    \ = $max_count;\n                $max_count = 0;\n                $paren_stack\
    \ = [];\n            }\n        }\n    }\n    return $paren_count;\n}\n", "  \
    \  $paren_array = explode(' ', $paren_string);\n    $result = array();\n    foreach\
    \ ($paren_array as $paren_group) {\n        $result[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $result;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $max_nesting = 0;\n    $nesting\
    \ = 0;\n    $nesting_array = [];\n    foreach ($paren_array as $paren) {\n   \
    \     if ($paren == '(') {\n            $nesting++;\n            if ($nesting\
    \ > $max_nesting) {\n                $max_nesting = $nesting;\n            }\n\
    \        } else {\n            $nesting_array[] = $max_nesting;\n            $max_nesting\
    \ = 0;\n            $nesting = 0;\n        }\n    }\n    return $nesting_array;\n\
    }\n", "    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n   ", "    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_levels = [];\n    foreach ($paren_array as $paren_group) {\n       \
    \ $paren_levels[] = parse_single_parens($paren_group);\n    }\n    return $paren_levels;\n\
    }\n", "    $paren_array = explode(' ', $paren_string);\n    $result = array();\n\
    \    foreach ($paren_array as $paren) {\n        $result[] = parse_nested_paren($paren);\n\
    \    }\n    return $result;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $max_nesting = [];\n    foreach ($paren_array as $paren_group) {\n      \
    \  $max_nesting[] = get_nesting_level($paren_group);\n    }\n    return $max_nesting;\n\
    }\n", "    $paren_string = trim($paren_string);\n    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $", "    $paren_groups = explode(' ',\
    \ $paren_string);\n    $max_nesting = [];\n    foreach ($paren_groups as $group)\
    \ {\n        $max_nesting[] = max_nesting($group);\n    }\n    return $max_nesting;\n\
    }\n", "    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+\\(/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\)\\s+/', ')', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\s+/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+\\(/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\)\\s+/', ')', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\s+/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+\\(/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\)\\s+/', ')', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\s+/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+\\(/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\)\\s+/', ')', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+\\)/', ')', $paren", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max\
    \ = 0;\n    $paren_max_array = array();\n    for ($i = 0; $i < count($paren_array);\
    \ $i++) {\n        if ($paren_array[$i] == '(') {\n            $paren_count++;\n\
    \            if ($paren_count > $paren_max) {\n                $paren_max = $paren_count;\n\
    \            }\n        } else if ($paren_array[$i] == ')') {\n            $paren_count--;\n\
    \            if ($paren_count == 0) {\n                array_push($paren_max_array,\
    \ $paren_max);\n                $paren_max = 0;\n            }\n        }\n  \
    \  }\n    return $paren_max_array;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n  \
    \  foreach ($paren_groups as $paren_group) {\n        $max_nesting[] = parse_nested_parens_helper($paren_group);\n\
    \    }\n    return $max_nesting;\n}\n", "  $paren_arr = explode(' ', $paren_string);\n\
    \  $max_level = [];\n  foreach ($paren_arr as $paren) {\n    $max_level[] = get_max_level($paren);\n\
    \  }\n  return $max_level;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren_group) {\n      \
    \  $result[] = parse_nested_parens_helper($paren_group);\n    }\n    return $result;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n   \
    \ $paren_string = array_filter($paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n", "    $paren_array = explode('\
    \ ', $paren_string);\n    $result = array();\n    foreach ($paren_array as $paren_group)\
    \ {\n        $result[] = parse_nested_parens_helper($paren_group);\n    }\n  \
    \  return $result;\n}\n", "    $paren_groups = explode(' ', $paren_string);\n\
    \    $max_nesting = [];\n    foreach ($paren_groups as $group) {\n        $nesting\
    \ = 0;\n        $max_nesting_in_group = 0;\n        for ($i = 0; $i < strlen($group);\
    \ $i++) {\n            if ($group[$i] == '(') {\n                $nesting++;\n\
    \            } else {\n                $nesting--;\n            }\n          \
    \  $max_nesting_in_group = max($max_nesting_in_group, $nesting);\n        }\n\
    \        $max_nesting[] = $max_nesting_in_group;\n    }\n    return $max_nesting;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth\
    \ = 0;\n    $current_depth = 0;\n    $max_depth_array = [];\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $current_depth++;\n            if ($current_depth > $max_depth)\
    \ {\n                $max_depth = $current_depth;\n            }\n        } elseif\
    \ ($paren == ')') {\n            array_pop($paren_stack);\n            $current_depth--;\n\
    \            if (count($paren_stack) == 0) {\n                array_push($max_depth_array,\
    \ $max_depth);\n                $max_depth = 0;\n                $current_depth\
    \ = 0;\n            }\n        }\n    }\n    return $max_depth_array;\n}\n", " \
    \   $paren_array = explode(' ', $paren_string);\n    $max_depth = array();\n \
    \   foreach ($paren_array as $paren_group) {\n        $depth = 0;\n        $max_depth_group\
    \ = 0;\n        for ($i = 0; $i < strlen($paren_group); $i++) {\n            if\
    \ ($paren_group[$i] == '(') {\n                $depth++;\n            } else {\n\
    \                $depth--;\n            }\n            if ($depth > $max_depth_group)\
    \ {\n                $max_depth_group = $depth;\n            }\n        }\n  \
    \      $max_depth[] = $max_depth_group;\n    }\n    return $max_depth;\n}\n",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '0', $paren_string);\n    $paren_string = str_replace('(', '1', $paren_string);\n\
    \    $paren_string = str_replace(')', '0', $paren_string);\n    $paren_string\
    \ = str_replace('0', '', $paren_string);\n    $paren_string = str_replace('1',\
    \ '0', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('0', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    return $paren_string;\n\
    }\n", "    $paren_array = explode(' ', $paren_string);\n    $paren_levels = [];\n\
    \    foreach ($paren_array as $paren_group) {\n        $paren_levels[] = parse_parens($paren_group);\n\
    \    }\n    return $paren_levels;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '0', $paren_string);\n\
    \    $paren_string = str_replace('(', '1', $paren_string);\n    $paren_string\
    \ = str_replace(')', '2', $paren_string);\n    $paren_string = str_replace('0',\
    \ '', $paren_string);\n    $paren_string = str_replace('1', '0', $paren_string);\n\
    \    $paren_string = str_replace('2', '1', $paren_string);\n    $paren_string\
    \ = str_replace('0', '', $paren_string);\n    $paren_string = str_replace('1',\
    \ '0', $paren_string);\n    $paren_string = str_replace('0', '1', $paren_string);\n\
    \    $paren_string = str_replace('1', '0', $paren_string);\n    $paren_string\
    \ = str_replace('0', '1', $paren_string);\n    $paren_string = str_replace('1',\
    \ '0', $paren_string);\n    $paren_string = str_replace('0', '1', $paren_string);\n\
    \    $paren_string = str_replace('1', '0', $paren_string);\n    $paren_string\
    \ = str_replace('0', '1', $paren_string);\n    $paren_string = str_replace('1',\
    \ '0', $paren_string);\n    $paren_string = str_replace('0', '1', $paren_string);\n\
    \    $paren_string = str_replace('1', '0', $paren_string);\n    $paren_string\
    \ = str_replace('0', '1', $paren_string);\n    $paren_string = str_replace('1',\
    \ '0', $paren_string);\n    $paren_string = str_replace('0', '1', $paren_string);\n\
    \    $paren_string = str_replace('1', '0', $paren_string);\n    $paren_string\
    \ = str_replace('0', '1', $paren_string);\n    $paren_string = str_replace('1",
  "    $paren_array = explode(' ', $paren_string);\n    $paren_count = [];\n    foreach\
    \ ($paren_array as $paren) {\n        $paren_count[] = count_parens($paren);\n\
    \    }\n    return $paren_count;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n", "    $paren_array = explode('\
    \ ', $paren_string);\n    $result = array();\n    foreach ($paren_array as $paren)\
    \ {\n        $result[] = parse_nested_paren($paren);\n    }\n    return $result;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_arr\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $depth_arr = [];\n    foreach ($paren_arr as $paren) {\n        if ($paren\
    \ == '(') {\n            array_push($paren_stack, $paren);\n            $max_depth++;\n\
    \        } else {\n            array_pop($paren_stack);\n            if (empty($paren_stack))\
    \ {\n                array_push($depth_arr, $max_depth);\n                $max_depth\
    \ = 0;\n            }\n        }\n    }\n    return $depth_arr;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_count = 0;\n    $paren_max = 0;\n    $paren_max_array = array();\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $paren_count++;\n            if ($paren_count > $paren_max) {\n       \
    \         $paren_max = $paren_count;\n            }\n        } elseif ($paren\
    \ == ')') {\n            $paren_count--;\n            if ($paren_count == 0) {\n\
    \                array_push($paren_max_array, $paren_max);\n                $paren_max\
    \ = 0;\n            }\n        }\n    }\n    return $paren_max_array;\n}\n\n$paren_string\
    \ = '(()()) ((())) () ((())()())';\nprint_r(parse_nested_parens($paren_string));",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $current_level = 0;\n    $max_level = 0;\n    $max_level_array = [];\n  \
    \  foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n        \
    \    $current_level++;\n            if ($current_level > $max_level) {\n     \
    \           $max_level = $current_level;\n            }\n        } else {\n  \
    \          $max_level_array[] = $max_level;\n            $max_level = 0;\n   \
    \         $current_level = 0;\n        }\n    }\n    return $max_level_array;\n\
    }\n", "  $paren_groups = explode(' ', $paren_string);\n  $max_nesting = array();\n\
    \  foreach ($paren_groups as $group) {\n    $nesting = 0;\n    $max_nesting_in_group\
    \ = 0;\n    for ($i = 0; $i < strlen($group); $i++) {\n      if ($group[$i] ==\
    \ '(') {\n        $nesting++;\n      } else if ($group[$i] == ')') {\n       \
    \ $nesting--;\n      }\n      if ($nesting > $max_nesting_in_group) {\n      \
    \  $max_nesting_in_group = $nesting;\n      }\n    }\n    $max_nesting[] = $max_nesting_in_group;\n\
    \  }\n  return $max_nesting;\n}\n", "    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace('()', '0', $paren_string);\n\
    \    $paren_string = str_replace('(', '1', $paren_string);\n    $paren_string\
    \ = str_replace(')', '2', $paren_string);\n    $paren_string = str_replace('0',\
    \ '', $paren_string);\n    $paren_string = str_replace('1', '0', $paren_string);\n\
    \    $paren_string = str_replace('2', '1', $paren_string);\n    $paren_string\
    \ = str_replace('0', '', $paren_string);\n    $paren_string = str_replace('1',\
    \ '0', $paren_string);\n    $paren_string = str_replace('0', '', $paren_string);\n\
    \    $paren_string = str_replace('1', '0', $paren_string);\n    $paren_string\
    \ = str_replace('0', '', $paren_string);\n    $paren_string = str_replace('1',\
    \ '0', $paren_string);\n    $paren_string = str_replace('0', '', $paren_string);\n\
    \    $paren_string = str_replace('1', '0', $paren_string);\n    $paren_string\
    \ = str_replace('0', '', $paren_string);\n    $paren_string = str_replace('1',\
    \ '0', $paren_string);\n    $paren_string = str_replace('0', '', $paren_string);\n\
    \    $paren_string = str_replace('1', '0', $paren_string);\n    $paren_string\
    \ = str_replace('0', '', $paren_string);\n    $paren_string = str_replace('1',\
    \ '0', $paren_string);\n    $paren_string = str_replace('0', '', $paren_string);\n\
    \    $paren_string = str_replace('1', '0', $paren_string);\n    $paren_string\
    \ = str_replace('0', '', $paren_string);\n    $paren_string = str_replace('1',\
    \ '0', $paren_string", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_", "    $paren_string\
    \ = trim($paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $paren_string = array_map('trim',\
    \ $paren_string);\n    $paren_string = array_filter($paren_string);\n    $paren_string\
    \ = array_map('strlen', $paren_string);\n    $paren_string = array_map('intval',\
    \ $paren_string);\n    $paren_string = array_map('floor', $paren_string/2);\n\
    \    return $paren_string;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren) {\n        $result[]\
    \ = parse_nested_paren($paren);\n    }\n    return $result;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n", "    $paren_array = explode('\
    \ ', $paren_string);\n    $max_depth = array();\n    foreach ($paren_array as\
    \ $paren_group) {\n        $depth = 0;\n        $max_depth_so_far = 0;\n     \
    \   for ($i = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i]\
    \ == '(') {\n                $depth++;\n            } else {\n               \
    \ $depth--;\n            }\n            if ($depth > $max_depth_so_far) {\n  \
    \              $max_depth_so_far = $depth;\n            }\n        }\n       \
    \ $max_depth[] = $max_depth_so_far;\n    }\n    return $max_depth;\n}\n", "  \
    \  $paren_string = trim($paren_string);\n    $paren_groups = explode(' ', $paren_string);\n\
    \    $max_nest_levels = [];\n    foreach ($paren_groups as $paren_group) {\n \
    \       $nest_level = 0;\n        $max_nest_level = 0;\n        for ($i = 0; $i\
    \ < strlen($paren_group); $i++) {\n            if ($paren_group[$i] == '(') {\n\
    \                $nest_level++;\n            } else if ($paren_group[$i] == ')')\
    \ {\n                $nest_level--;\n            }\n            if ($nest_level\
    \ > $max_nest_level) {\n                $max_nest_level = $nest_level;\n     \
    \       }\n        }\n        $max_nest_levels[] = $max_nest_level;\n    }\n \
    \   return $max_nest_levels;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $max_nesting = [];\n    foreach ($paren_array as $paren) {\n        $max_nesting[]\
    \ = count_parens($paren);\n    }\n    return $max_nesting;\n}\n", "    $paren_groups\
    \ = explode(' ', $paren_string);\n    $max_nesting = [];\n    foreach ($paren_groups\
    \ as $group) {\n        $nesting = 0;\n        $max_nesting_level = 0;\n     \
    \   for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i] == '(')\
    \ {\n                $nesting++;\n            } else {\n                $nesting--;\n\
    \            }\n            $max_nesting_level = max($max_nesting_level, $nesting);\n\
    \        }\n        $max_nesting[] = $max_nesting_level;\n    }\n    return $max_nesting;\n\
    }\n", "    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_groups as $paren_group) {\n        $max_nesting[] = get_max_nesting($paren_group);\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n   ", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_", "    $paren_groups = explode('\
    \ ', $paren_string);\n    $max_nesting = [];\n    foreach ($paren_groups as $group)\
    \ {\n        $nesting = 0;\n        $max_nesting_in_group = 0;\n        for ($i\
    \ = 0; $i < strlen($group); $i++) {\n            if ($group[$i] == '(') {\n  \
    \              $nesting++;\n            } else {\n                $nesting--;\n\
    \            }\n            $max_nesting_in_group = max($max_nesting_in_group,\
    \ $nesting);\n        }\n        $max_nesting[] = $max_nesting_in_group;\n   \
    \ }\n    return $max_nesting;\n}\n", "    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_", "    $paren_groups = explode(' ', $paren_string);\n    $max_nesting =\
    \ [];\n    foreach ($paren_groups as $group) {\n        $nesting = 0;\n      \
    \  $max_nesting_in_group = 0;\n        for ($i = 0; $i < strlen($group); $i++)\
    \ {\n            if ($group[$i] == '(') {\n                $nesting++;\n     \
    \       } else if ($group[$i] == ')') {\n                $nesting--;\n       \
    \     }\n            $max_nesting_in_group = max($max_nesting_in_group, $nesting);\n\
    \        }\n        $max_nesting[] = $max_nesting_in_group;\n    }\n    return\
    \ $max_nesting;\n}\n", "    $paren_array = explode(' ', $paren_string);\n    $max_nesting\
    \ = [];\n    foreach ($paren_array as $paren_group) {\n        $nesting = 0;\n\
    \        $max_nesting_level = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == '(') {\n                $nesting++;\n\
    \            } else if ($paren_group[$i] == ')') {\n                $nesting--;\n\
    \            }\n            if ($nesting > $max_nesting_level) {\n           \
    \     $max_nesting_level = $nesting;\n            }\n        }\n        $max_nesting[]\
    \ = $max_nesting_level;\n    }\n    return $max_nesting;\n}\n", "    $paren_string\
    \ = trim($paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+$/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/^\\s+/', '', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\s+/', '(', $paren_string);\n    $paren_string = preg_replace('/\\s+\\)/', ')',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+$/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/^\\s+/', '', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\s+/', '(', $paren_string);\n    $paren_string = preg_replace('/\\s+\\)/', ')',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+$/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/^\\s+/', '', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\s+/', '(', $paren_string);\n    $paren_string = preg_replace('/\\s+\\)/', ')',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+$/', '', $paren_string);\n    $paren_string\
    \ = preg_replace('/^\\s+/', '', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\s+/', '(', $paren_string);\n    $paren_string", "  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  $paren_array = str_split($paren_string);\n  $paren_stack\
    \ = [];\n  $max_depth = 0;\n  $depth_array = [];\n  foreach ($paren_array as $paren)\
    \ {\n    if ($paren == '(') {\n      array_push($paren_stack, $paren);\n     \
    \ $max_depth = max($max_depth, count($paren_stack));\n    } else {\n      array_pop($paren_stack);\n\
    \      if (count($paren_stack) == 0) {\n        array_push($depth_array, $max_depth);\n\
    \        $max_depth = 0;\n      }\n    }\n  }\n  return $depth_array;\n}\n", " \
    \   $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = explode(' ', $paren_string);\n   \
    \ $paren_string = array_filter($paren_string);\n    $paren_string = array_map('strlen',\
    \ $paren_string);\n    return $paren_string;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n  \
    \  foreach ($paren_groups as $group) {\n        $max_nesting[] = get_max_nesting($group);\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $max_nesting = [];\n    foreach ($paren_array as $paren_group) {\n      \
    \  $nesting = 0;\n        $max_nesting_group = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == '(') {\n                $nesting++;\n\
    \            } else {\n                $nesting--;\n            }\n          \
    \  if ($nesting > $max_nesting_group) {\n                $max_nesting_group =\
    \ $nesting;\n            }\n        }\n        $max_nesting[] = $max_nesting_group;\n\
    \    }\n    return $max_nesting;\n}\n", "  $paren_groups = explode(' ', $paren_string);\n\
    \  $max_nesting = [];\n  foreach ($paren_groups as $group) {\n    $max_nesting[]\
    \ = get_max_nesting($group);\n  }\n  return $max_nesting;\n}\n", "  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_array = str_split($paren_string);\n\
    \  $paren_stack = array();\n  $max_depth = 0;\n  $current_depth = 0;\n  $max_depth_array\
    \ = array();\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n\
    \      $current_depth++;\n      if ($current_depth > $max_depth) {\n        $max_depth\
    \ = $current_depth;\n      }\n      array_push($paren_stack, $paren);\n    } elseif\
    \ ($paren == ')') {\n      array_pop($paren_stack);\n      $current_depth--;\n\
    \      if (count($paren_stack) == 0) {\n        array_push($max_depth_array, $max_depth);\n\
    \        $max_depth = 0;\n        $current_depth = 0;\n      }\n    }\n  }\n \
    \ return $max_depth_array;\n}\n", "  $paren_array = explode(' ', $paren_string);\n\
    \  $result = array();\n  foreach ($paren_array as $paren) {\n    $result[] = parse_nested_paren($paren);\n\
    \  }\n  return $result;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $result = array();\n    foreach ($paren_array as $paren) {\n        $result[]\
    \ = parse_nested_paren($paren);\n    }\n    return $result;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace('', ' ', $", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = [];\n    $paren_count = 0;\n    $paren_max = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            $paren_stack[]\
    \ = $paren;\n            $paren_count++;\n            if ($paren_count > $paren_max)\
    \ {\n                $paren_max = $paren_count;\n            }\n        } elseif\
    \ ($paren == ')') {\n            array_pop($paren_stack);\n            $paren_count--;\n\
    \        }\n    }\n    return $paren_max;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = [];\n    $max_depth = 0;\n    $depth_array = [];\n    $paren_array_length\
    \ = count($paren_array);\n    for ($i = 0; $i < $paren_array_length; $i++) {\n\
    \        if ($paren_array[$i] == '(') {\n            array_push($paren_stack,\
    \ $paren_array[$i]);\n            $max_depth = max($max_depth, count($paren_stack));\n\
    \        } elseif ($paren_array[$i] == ')') {\n            array_pop($paren_stack);\n\
    \        } else {\n            array_push($depth_array, $max_depth);\n       \
    \     $max_depth = 0;\n        }\n    }\n    return $depth_array;\n}\n", "   \
    \ $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = [];\n    $paren_count = 0;\n    $paren_max = 0;\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            $paren_stack[]\
    \ = $paren;\n            $paren_count++;\n            if ($paren_count > $paren_max)\
    \ {\n                $paren_max = $paren_count;\n            }\n        } elseif\
    \ ($paren == ')') {\n            array_pop($paren_stack);\n            $paren_count--;\n\
    \        }\n    }\n    return $paren_max;\n}\n", "    $paren_array = explode('\
    \ ', $paren_string);\n    $max_nesting = [];\n    foreach ($paren_array as $paren_group)\
    \ {\n        $nesting = 0;\n        $max_nesting_in_group = 0;\n        for ($i\
    \ = 0; $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i] ==\
    \ '(') {\n                $nesting++;\n            } elseif ($paren_group[$i]\
    \ == ')') {\n                $nesting--;\n            }\n            if ($nesting\
    \ > $max_nesting_in_group) {\n                $max_nesting_in_group = $nesting;\n\
    \            }\n        }\n        $max_nesting[] = $max_nesting_in_group;\n \
    \   }\n    return $max_nesting;\n}\n", "  $paren_array = explode(' ', $paren_string);\n\
    \  $result = array();\n  foreach ($paren_array as $paren_group) {\n    $result[]\
    \ = parse_nested_parens_helper($paren_group);\n  }\n  return $result;\n}\n", " \
    \   $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = [];\n    $max_depth = 0;\n    $depth_array = [];\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $max_depth++;\n        } elseif ($paren == ')') {\n  \
    \          array_pop($paren_stack);\n            array_push($depth_array, $max_depth);\n\
    \            $max_depth--;\n        }\n    }\n    return $depth_array;\n}\n",
  "    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n    foreach\
    \ ($paren_groups as $group) {\n        $nesting = 0;\n        $max_nesting_in_group\
    \ = 0;\n        for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i]\
    \ == '(') {\n                $nesting++;\n            } else if ($group[$i] ==\
    \ ')') {\n                $nesting--;\n            }\n            $max_nesting_in_group\
    \ = max($max_nesting_in_group, $nesting);\n        }\n        $max_nesting[] =\
    \ $max_nesting_in_group;\n    }\n    return $max_nesting;\n}\n", "  $paren_string\
    \ = trim($paren_string);\n  $paren_string = str_replace(' ', '', $paren_string);\n\
    \  $paren_string = str_replace('(', '( ', $paren_string);\n  $paren_string = str_replace(')',\
    \ ' )', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n  $paren_string = trim($paren_string);\n\
    \  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('(',\
    \ '( ', $paren_string);\n  $paren_string = str_replace(')', ' )', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace('  ', '\
    \ ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('(', '(\
    \ ', $paren_string);\n  $paren_string = str_replace(')', ' )', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace('  ', '\
    \ ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('(', '(\
    \ ', $paren_string);\n  $paren_string = str_replace(')', ' )', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n  $paren_string = str_replace('  ', '\
    \ ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_string\
    \ = str_replace(' ', '', $paren_string);\n  $paren_string = str_replace('(', '(\
    \ ', $paren_string);\n  $paren_string = str_replace(')', ' )', $paren_string);\n\
    \  $paren_string = trim($paren_string);\n ", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+\\)/', ')', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\s+/', '(', $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\s+/', '(', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+\\)/', ')', $paren_string);\n    $paren_string = preg_replace('/\\(\\s+/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\s+/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\s+\\)/', ')',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\s+/', '(', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+\\)/', ')', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\s+/', '(', $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ',\
    \ $paren_string);\n    $paren_string", "    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_groups\
    \ = explode(' ', $paren_string);\n    $paren_groups_count = count($paren_groups);\n\
    \    $paren_groups_max_nesting = array();\n    for ($i = 0; $i < $paren_groups_count;\
    \ $i++) {\n        $paren_groups_max_nesting[] = get_max_nesting($paren_groups[$i]);\n\
    \    }\n    return $paren_groups_max_nesting;\n}\n", "    $paren_array = explode('\
    \ ', $paren_string);\n    $paren_depth = [];\n    foreach ($paren_array as $paren_group)\
    \ {\n        $paren_depth[] = parse_parens($paren_group);\n    }\n    return $paren_depth;\n\
    }\n", "  $paren_array = explode(' ', $paren_string);\n  $result = array();\n \
    \ foreach ($paren_array as $paren) {\n    $result[] = parse_nested_paren($paren);\n\
    \  }\n  return $result;\n}\n", "  $paren_array = explode(' ', $paren_string);\n\
    \  $result = array();\n  foreach ($paren_array as $paren) {\n    $result[] = parse_nested_paren($paren);\n\
    \  }\n  return $result;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_levels = [];\n    foreach ($paren_array as $paren) {\n        $paren_levels[]\
    \ = get_paren_level($paren);\n    }\n    return $paren_levels;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $max_nesting = 0;\n    $nesting = 0;\n    $result = [];\n    foreach ($paren_array\
    \ as $char) {\n        if ($char == '(') {\n            $nesting++;\n        \
    \    if ($nesting > $max_nesting) {\n                $max_nesting = $nesting;\n\
    \            }\n        } elseif ($char == ')') {\n            $nesting--;\n \
    \           if ($nesting == 0) {\n                $result[] = $max_nesting;\n\
    \                $max_nesting = 0;\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "    $paren_array = explode(' ', $paren_string);\n    $max_depth\
    \ = array();\n    foreach ($paren_array as $paren) {\n        $depth = 0;\n  \
    \      $max_depth_in_paren = 0;\n        for ($i = 0; $i < strlen($paren); $i++)\
    \ {\n            if ($paren[$i] == '(') {\n                $depth++;\n       \
    \     } else {\n                $depth--;\n            }\n            if ($depth\
    \ > $max_depth_in_paren) {\n                $max_depth_in_paren = $depth;\n  \
    \          }\n        }\n        $max_depth[] = $max_depth_in_paren;\n    }\n\
    \    return $max_depth;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '0', $paren_string);\n    $paren_string\
    \ = str_replace('(', '1', $paren_string);\n    $paren_string = str_replace(')',\
    \ '0', $paren_string);\n    $paren_string = str_replace('0', ')', $paren_string);\n\
    \    $paren_string = str_replace('1', '(', $paren_string);\n    $paren_string\
    \ = str_replace(')(', ' ', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('0', '', $paren_string);\n    $paren_string = str_replace('1', '',\
    \ $paren_string);\n    $paren_string = str_replace('2', '', $paren_string);\n\
    \    $paren_string = str_replace('3', '', $paren_string);\n    $paren_string =\
    \ str_replace('4', '', $paren_string);\n    $paren_string = str_replace('5', '',\
    \ $paren_string);\n    $paren_string = str_replace('6', '', $paren_string);\n\
    \    $paren_string = str_replace('7', '', $paren_string);\n    $paren_string =\
    \ str_replace('8', '', $paren_string);\n    $paren_string = str_replace('9', '',\
    \ $paren_string);\n    $paren_string = str_replace('0', '', $paren_string);\n\
    \    $paren_string = str_replace('1', '', $paren_string);\n    $paren_string =\
    \ str_replace('2', '', $paren_string);\n    $paren_string = str_replace('3', '',\
    \ $paren_string);\n    $paren_string = str_replace('4', '', $paren_string);\n\
    \    $paren_string = str_replace", "  $paren_array = explode(' ', $paren_string);\n\
    \  $max_nesting = array();\n  foreach ($paren_array as $paren_group) {\n    $nesting\
    \ = 0;\n    $max_nesting_in_group = 0;\n    for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n      if ($paren_group[$i] == '(') {\n        $nesting++;\n      }\
    \ else if ($paren_group[$i] == ')') {\n        $nesting--;\n      }\n      if\
    \ ($nesting > $max_nesting_in_group) {\n        $max_nesting_in_group = $nesting;\n\
    \      }\n    }\n    $max_nesting[] = $max_nesting_in_group;\n  }\n  return $max_nesting;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '0', $paren_string);\n    $paren_string = str_replace('(',\
    \ '1', $paren_string);\n    $paren_string = str_replace(')', '2', $paren_string);\n\
    \    $paren_string = str_replace('0', '', $paren_string);\n    $paren_string =\
    \ str_replace('1', '', $paren_string);\n    $paren_string = str_replace('2', '',\
    \ $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('(', '',\
    \ $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')', '',\
    \ $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren", "    $paren_string = trim($paren_string);\n  \
    \  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = str_replace(' ', ') (', $paren_string);\n    $paren_string = '(' . $paren_string\
    \ . ')';\n    $paren_string = str_split($paren_string);\n    $paren_stack = array();\n\
    \    $max_depth = 0;\n    $current_depth = 0;\n    $max_depth_list = array();\n\
    \    foreach ($paren_string as $paren) {\n        if ($paren == '(') {\n     \
    \       array_push($paren_stack, $paren);\n            $current_depth++;\n   \
    \         if ($current_depth > $max_depth) {\n                $max_depth = $current_depth;\n\
    \            }\n        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n\
    \            $current_depth--;\n            if (empty($paren_stack)) {\n     \
    \           array_push($max_depth_list, $max_depth);\n                $max_depth\
    \ = 0;\n                $current_depth = 0;\n            }\n        }\n    }\n\
    \    return $max_depth_list;\n}\n", "    $paren_string = str_replace(' ', '',\
    \ $paren_string);\n    $paren_groups = str_split($paren_string, 1);\n    $paren_groups_count\
    \ = count($paren_groups);\n    $max_nesting = 0;\n    $current_nesting = 0;\n\
    \    $nesting_levels = [];\n    for ($i = 0; $i < $paren_groups_count; $i++) {\n\
    \        if ($paren_groups[$i] == '(') {\n            $current_nesting++;\n  \
    \          if ($current_nesting > $max_nesting) {\n                $max_nesting\
    \ = $current_nesting;\n            }\n        } elseif ($paren_groups[$i] == ')')\
    \ {\n            $current_nesting--;\n            if ($current_nesting == 0) {\n\
    \                $nesting_levels[] = $max_nesting;\n                $max_nesting\
    \ = 0;\n            }\n        }\n    }\n    return $nesting_levels;\n}\n", " \
    \   $paren_array = explode(' ', $paren_string);\n    $max_nesting = [];\n    foreach\
    \ ($paren_array as $paren) {\n        $max_nesting[] = get_max_nesting($paren);\n\
    \    }\n    return $max_nesting;\n}\n", "  $paren_string = str_replace(' ', '',\
    \ $paren_string);\n  $paren_array = str_split($paren_string);\n  $paren_stack\
    \ = [];\n  $paren_levels = [];\n  $max_level = 0;\n  $current_level = 0;\n  foreach\
    \ ($paren_array as $paren) {\n    if ($paren == '(') {\n      $current_level++;\n\
    \      $max_level = max($max_level, $current_level);\n      array_push($paren_stack,\
    \ $paren);\n    } else {\n      $current_level--;\n      array_pop($paren_stack);\n\
    \      if (empty($paren_stack)) {\n        array_push($paren_levels, $max_level);\n\
    \        $max_level = 0;\n      }\n    }\n  }\n  return $paren_levels;\n}\n",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_arr = str_split($paren_string);\n\
    \    $paren_stack = [];\n    $max_nesting = 0;\n    $nesting_arr = [];\n    foreach\
    \ ($paren_arr as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n        } else {\n            array_pop($paren_stack);\n        }\n\
    \        $max_nesting = max($max_nesting, count($paren_stack));\n        if ($paren\
    \ == ')') {\n            array_push($nesting_arr, $max_nesting);\n        }\n\
    \    }\n    return $nesting_arr;\n}\n", "  $paren_string = preg_replace('/\\s+/',\
    \ ' ', $paren_string);\n  $paren_string = trim($paren_string);\n  $paren_groups\
    \ = explode(' ', $paren_string);\n  $max_nesting = array();\n  foreach ($paren_groups\
    \ as $group) {\n    $max_nesting[] = get_max_nesting($group);\n  }\n  return $max_nesting;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '0', $paren_string);\n    $paren_string = str_replace('(',\
    \ '1', $paren_string);\n    $paren_string = str_replace(')', '0', $paren_string);\n\
    \    $paren_string = str_replace('0', ')', $paren_string);\n    $paren_string\
    \ = str_replace('1', '(', $paren_string);\n    $paren_string = str_replace('((',\
    \ '2', $paren_string);\n    $paren_string = str_replace('))', '2', $paren_string);\n\
    \    $paren_string = str_replace('(((', '3', $paren_string);\n    $paren_string\
    \ = str_replace(')))', '3', $paren_string);\n    $paren_string = str_replace('((((',\
    \ '4', $paren_string);\n    $paren_string = str_replace('))))', '4', $paren_string);\n\
    \    $paren_string = str_replace('(((((', '5', $paren_string);\n    $paren_string\
    \ = str_replace('))))))', '5', $paren_string);\n    $paren_string = str_replace('((((((',\
    \ '6', $paren_string);\n    $paren_string = str_replace(')))))))', '6', $paren_string);\n\
    \    $paren_string = str_replace('(((((((', '7', $paren_string);\n    $paren_string\
    \ = str_replace('))))))))', '7', $paren_string);\n    $paren_string = str_replace('((((((((',\
    \ '8', $paren_string);\n    $paren_string = str_replace('))))))))))', '8', $paren_string);\n\
    \    $paren_string = str_replace('(((((((((', '9', $paren_string);\n    $paren_string\
    \ = str_replace(')))))))))))', '9', $paren_string);\n    $paren_string = str_replace('((((((((((',\
    \ '10', $paren_string);\n    $paren_", "    $paren_groups = explode(' ', $paren_string);\n\
    \    $max_nesting = [];\n    foreach ($paren_groups as $group) {\n        $max_nesting[]\
    \ = parse_nested_parens_group($group);\n    }\n    return $max_nesting;\n}\n",
  "    $paren_array = explode(' ', $paren_string);\n    $max_nesting = [];\n    foreach\
    \ ($paren_array as $paren) {\n        $max_nesting[] = get_max_nesting($paren);\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $paren_count = [];\n    foreach ($paren_array as $paren) {\n        $paren_count[]\
    \ = count_parens($paren);\n    }\n    return $paren_count;\n}\n", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_map('strlen', $paren_string);\n    return $paren_string;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $", "    $paren_array = explode(' ', $paren_string);\n    $paren_levels =\
    \ [];\n    foreach ($paren_array as $paren) {\n        $paren_levels[] = parse_parens($paren);\n\
    \    }\n    return $paren_levels;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' \
    \ ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string =", "    $paren_groups\
    \ = explode(' ', $paren_string);\n    $max_nesting = [];\n    foreach ($paren_groups\
    \ as $group) {\n        $nesting = 0;\n        $max_nesting_in_group = 0;\n  \
    \      for ($i = 0; $i < strlen($group); $i++) {\n            if ($group[$i] ==\
    \ '(') {\n                $nesting++;\n            } else {\n                $nesting--;\n\
    \            }\n            $max_nesting_in_group = max($max_nesting_in_group,\
    \ $nesting);\n        }\n        $max_nesting[] = $max_nesting_in_group;\n   \
    \ }\n    return $max_nesting;\n}\n\n$paren_string = '(()()) ((())) () ((())()())';\n\
    $max_nesting = parse_nested_parens($paren_string);\nprint_r($max_nesting);", " \
    \   $paren_array = explode(' ', $paren_string);\n    $max_nesting = array();\n\
    \    foreach ($paren_array as $paren) {\n        $nesting = 0;\n        $max_nesting_level\
    \ = 0;\n        for ($i = 0; $i < strlen($paren); $i++) {\n            if ($paren[$i]\
    \ == '(') {\n                $nesting++;\n            } else {\n             \
    \   $nesting--;\n            }\n            if ($nesting > $max_nesting_level)\
    \ {\n                $max_nesting_level = $nesting;\n            }\n        }\n\
    \        $max_nesting[] = $max_nesting_level;\n    }\n    return $max_nesting;\n\
    }\n", "    $paren_groups = explode(' ', $paren_string);\n    $max_nesting = [];\n\
    \    foreach ($paren_groups as $paren_group) {\n        $max_nesting[] = get_max_nesting($paren_group);\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $paren_stack = [];\n    $max_depth = 0;\n \
    \   $depth_array = [];\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            array_push($paren_stack, $paren);\n            $max_depth++;\n\
    \        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n  \
    \          array_push($depth_array, $max_depth);\n            $max_depth--;\n\
    \        }\n    }\n    return $depth_array;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = [];\n    $max_depth = 0;\n    $depth_array = [];\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $max_depth++;\n        } else {\n            array_pop($paren_stack);\n\
    \            array_push($depth_array, $max_depth);\n            $max_depth--;\n\
    \        }\n    }\n    return $depth_array;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace(')(', ') (', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', ' ( ', $paren_string);\n\
    \    $paren_string = str_replace(')', ' ) ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $paren_string = str_replace('\
    \  ', ' ', $paren_string);\n    $paren_string = str_replace('  ', ' ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('  ', ' ', $paren_string);\n    $", "    $paren_array = explode('\
    \ ', $paren_string);\n    $max_nesting = array();\n    foreach ($paren_array as\
    \ $paren_group) {\n        $max_nesting[] = get_max_nesting($paren_group);\n \
    \   }\n    return $max_nesting;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $depth_array = array();\n    foreach ($paren_array as $paren_group) {\n \
    \       $depth = 0;\n        $max_depth = 0;\n        for ($i = 0; $i < strlen($paren_group);\
    \ $i++) {\n            if ($paren_group[$i] == '(') {\n                $depth++;\n\
    \            } else {\n                $depth--;\n            }\n            if\
    \ ($depth > $max_depth) {\n                $max_depth = $depth;\n            }\n\
    \        }\n        $depth_array[] = $max_depth;\n    }\n    return $depth_array;\n\
    }\n", "    $paren_array = explode(' ', $paren_string);\n    $paren_levels = [];\n\
    \    foreach ($paren_array as $paren_group) {\n        $paren_levels[] = parse_parens($paren_group);\n\
    \    }\n    return $paren_levels;\n}\n", "    $paren_array = explode(' ', $paren_string);\n\
    \    $max_nesting = array();\n    foreach ($paren_array as $paren_group) {\n \
    \       $max_nesting[] = get_max_nesting($paren_group);\n    }\n    return $max_nesting;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_stack = [];\n    $max_level\
    \ = 0;\n    $level = 0;\n    $max_level_array = [];\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $level++;\n        \
    \    if ($level > $max_level) {\n                $max_level = $level;\n      \
    \      }\n            array_push($paren_stack, $paren);\n        } else {\n  \
    \          if ($level > 0) {\n                $level--;\n            }\n     \
    \       array_pop($paren_stack);\n            if (count($paren_stack) == 0) {\n\
    \                array_push($max_level_array, $max_level);\n                $max_level\
    \ = 0;\n            }\n        }\n    }\n    return $max_level_array;\n}\n", " \
    \   $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = array();\n    $paren_count = array();\n    $paren_count_index\
    \ = 0;\n    $paren_count_max = 0;\n    $paren_count_max_index = 0;\n    $paren_count_max_index_array\
    \ = array();\n    $paren_count_max_index_array_index = 0;\n    $paren_count_max_index_array_index_max\
    \ = 0;\n    for ($i = 0; $i < count($paren_array); $i++) {\n        if ($paren_array[$i]\
    \ == '(') {\n            array_push($paren_stack, $paren_array[$i]);\n       \
    \     $paren_count[$paren_count_index]++;\n        } else if ($paren_array[$i]\
    \ == ')') {\n            array_pop($paren_stack);\n            if (count($paren_stack)\
    \ == 0) {\n                $paren_count_index++;\n                $paren_count_max_index_array[$paren_count_max_index_array_index]\
    \ = $paren_count_max_index;\n                $paren_count_max_index_array_index++;\n\
    \                $paren_count_max_index = 0;\n            }\n        }\n     \
    \   if ($paren_count[$paren_count_index] > $paren_count_max) {\n            $paren_count_max\
    \ = $paren_count[$paren_count_index];\n            $paren_count_max_index = $paren_count_index;\n\
    \        }\n    }\n    for ($i = 0; $i < count($paren_count_max_index_array);\
    \ $i++) {\n        if ($paren_count_max_index_array[$i] > $paren_count_max_index_array_index_max)\
    \ {\n            $paren_count_max_index_array_index_max = $paren_count_max_index_array[$i];\n\
    \        }\n    }\n    return $paren_count[$paren_count_max_index", "    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = [];\n    $max_depth = 0;\n    $depth_array = [];\n    $current_depth\
    \ = 0;\n    foreach ($paren_array as $char) {\n        if ($char == '(') {\n \
    \           $current_depth++;\n            if ($current_depth > $max_depth) {\n\
    \                $max_depth = $current_depth;\n            }\n        } elseif\
    \ ($char == ')') {\n            $current_depth--;\n            if ($current_depth\
    \ == 0) {\n                array_push($depth_array, $max_depth);\n           \
    \     $max_depth = 0;\n            }\n        }\n    }\n    return $depth_array;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $max_depth = 0;\n    $current_depth = 0;\n\
    \    $max_depth_array = array();\n    foreach ($paren_array as $paren) {\n   \
    \     if ($paren == '(') {\n            $current_depth++;\n            if ($current_depth\
    \ > $max_depth) {\n                $max_depth = $current_depth;\n            }\n\
    \        } else {\n            $max_depth_array[] = $max_depth;\n            $max_depth\
    \ = 0;\n            $current_depth = 0;\n        }\n    }\n    return $max_depth_array;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $max_nesting = 0;\n    $current_nesting = 0;\n\
    \    $nesting_array = array();\n    for ($i = 0; $i < count($paren_array); $i++)\
    \ {\n        if ($paren_array[$i] == '(') {\n            $current_nesting++;\n\
    \            if ($current_nesting > $max_nesting) {\n                $max_nesting\
    \ = $current_nesting;\n            }\n        } elseif ($paren_array[$i] == ')')\
    \ {\n            $current_nesting--;\n            if ($current_nesting == 0) {\n\
    \                array_push($nesting_array, $max_nesting);\n                $max_nesting\
    \ = 0;\n            }\n        }\n    }\n    return $nesting_array;\n}\n", " \
    \   $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = [];\n    $max_depth = 0;\n    $current_depth = 0;\n    $paren_depth_array\
    \ = [];\n    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n\
    \            $current_depth++;\n            if ($current_depth > $max_depth) {\n\
    \                $max_depth = $current_depth;\n            }\n            array_push($paren_stack,\
    \ $paren);\n        } elseif ($paren == ')') {\n            array_pop($paren_stack);\n\
    \            $current_depth--;\n            if (count($paren_stack) == 0) {\n\
    \                array_push($paren_depth_array, $max_depth);\n               \
    \ $max_depth = 0;\n                $current_depth = 0;\n            }\n      \
    \  }\n    }\n    return $paren_depth_array;\n}\n", "    $paren_array = explode('\
    \ ', $paren_string);\n    $max_nesting = 0;\n    $nesting_array = [];\n    foreach\
    \ ($paren_array as $paren_group) {\n        $nesting = 0;\n        for ($i = 0;\
    \ $i < strlen($paren_group); $i++) {\n            if ($paren_group[$i] == '(')\
    \ {\n                $nesting++;\n            } elseif ($paren_group[$i] == ')')\
    \ {\n                $nesting--;\n            }\n        }\n        $nesting_array[]\
    \ = $nesting;\n    }\n    return $nesting_array;\n}\n", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $", "    $paren_groups\
    \ = explode(' ', $paren_string);\n    $max_nesting = [];\n    foreach ($paren_groups\
    \ as $paren_group) {\n        $max_nesting[] = get_max_nesting($paren_group);\n\
    \    }\n    return $max_nesting;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_groups = explode(' ', $paren_string);\n    $paren_levels = [];\n \
    \   foreach ($paren_groups as $group) {\n        $paren_levels[] = parse_nested_parens_group($group);\n\
    \    }\n    return $paren_levels;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    $paren_string = array_filter($paren_string);\n\
    \    $paren_string = array_map('strlen', $paren_string);\n    return $paren_string;\n\
    }\n", "    $paren_string = trim($paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\(\\s+/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\(\\s+/', '(', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+\\)/', ')', $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\(\\s+/', '(', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\\
    (\\s+/', '(', $paren_string);\n    $paren_string = preg_replace('/\\s+\\)/', ')',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \    $paren_string = preg_replace('/\\(\\s+/', '(', $paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+\\)/', ')', $paren_string);\n    $paren_string = preg_replace('/\\\
    s+/', ' ', $paren_string);\n    $paren_string = preg_replace('/\\(\\s+/', '(',\
    \ $paren_string);\n    $paren_string = preg_replace('/\\s+\\)/', ')', $paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string",
  "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = [];\n    $max_depth = 0;\n    $depth_array = [];\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            if (count($paren_stack) > $max_depth) {\n            \
    \    $max_depth = count($paren_stack);\n            }\n        } elseif ($paren\
    \ == ')') {\n            array_pop($paren_stack);\n            array_push($depth_array,\
    \ $max_depth);\n            $max_depth = 0;\n        }\n    }\n    return $depth_array;\n\
    }\n", "    $paren_groups = explode(' ', $paren_string);\n    $paren_levels = [];\n\
    \    foreach ($paren_groups as $group) {\n        $paren_levels[] = parse_nested_parens_helper($group);\n\
    \    }\n    return $paren_levels;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_arr = str_split($paren_string);\n    $paren_stack\
    \ = [];\n    $max_depth = 0;\n    $depth_arr = [];\n    foreach ($paren_arr as\
    \ $paren) {\n        if ($paren == '(') {\n            array_push($paren_stack,\
    \ $paren);\n            $max_depth++;\n        } else {\n            if (count($paren_stack)\
    \ > 0) {\n                array_pop($paren_stack);\n                $max_depth--;\n\
    \            } else {\n                $depth_arr[] = 0;\n                $max_depth\
    \ = 0;\n            }\n        }\n    }\n    $depth_arr[] = $max_depth;\n    return\
    \ $depth_arr;\n}\n", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_array = str_split($paren_string);\n    $paren_count = 0;\n    $paren_max\
    \ = 0;\n    $paren_max_array = array();\n    foreach ($paren_array as $paren)\
    \ {\n        if ($paren == '(') {\n            $paren_count++;\n            if\
    \ ($paren_count > $paren_max) {\n                $paren_max = $paren_count;\n\
    \            }\n        } elseif ($paren == ')') {\n            $paren_count--;\n\
    \            if ($paren_count == 0) {\n                array_push($paren_max_array,\
    \ $paren_max);\n                $paren_max = 0;\n            }\n        }\n  \
    \  }\n    return $paren_max_array;\n}\n", "    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '0', $paren_string);\n\
    \    $paren_string = str_replace('(', '1', $paren_string);\n    $paren_string\
    \ = str_replace(')', '2', $paren_string);\n    $paren_string = str_replace('0',\
    \ '', $paren_string);\n    $paren_string = str_replace('1', '0', $paren_string);\n\
    \    $paren_string = str_replace('2', '1', $paren_string);\n    $paren_string\
    \ = str_replace('0', '', $paren_string);\n    $paren_string = str_replace('1',\
    \ '0', $paren_string);\n    $paren_string = str_replace('0', '', $paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '0', $paren_string);\n    $paren_string = str_replace('(',\
    \ '1', $paren_string);\n    $paren_string = str_replace(')', '2', $paren_string);\n\
    \    $paren_string = str_replace('0', '', $paren_string);\n    $paren_string =\
    \ str_replace('1', '0', $paren_string);\n    $paren_string = str_replace('2',\
    \ '1', $paren_string);\n    $paren_string = str_replace('0', '', $paren_string);\n\
    \    $paren_string = str_replace('1', '0', $paren_string);\n    $paren_string\
    \ = str_replace('0', '', $paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '0', $paren_string);\n\
    \    $paren_string = str_replace('(', '1', $paren_string);\n    $paren_string\
    \ = str_replace(')', '2', $paren_string);\n    $paren_string = str_replace('0',\
    \ '', $paren_string);", "    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $paren_string);\n    $paren_string =\
    \ str_replace('', '', $paren_string);\n    $paren_string = str_replace('', '',\
    \ $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n \
    \   $paren_string = str_replace('', '', $paren_string);\n    $paren_string = str_replace('',\
    \ '', $paren_string);\n    $paren_string = str_replace('', '', $paren_string);\n\
    \    $paren_string = str_replace('', '', $", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = explode(' ', $paren_string);\n    $result = [];\n    foreach ($paren_string\
    \ as $paren) {\n        $result[] = strlen($paren);\n    }\n    return $result;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $", "    $paren_groups = explode(' ', $paren_string);\n    $max_nesting =\
    \ array();\n    foreach ($paren_groups as $group) {\n        $nesting = 0;\n \
    \       $max_nesting_in_group = 0;\n        for ($i = 0; $i < strlen($group);\
    \ $i++) {\n            if ($group[$i] == '(') {\n                $nesting++;\n\
    \            } else if ($group[$i] == ')') {\n                $nesting--;\n  \
    \          }\n            if ($nesting > $max_nesting_in_group) {\n          \
    \      $max_nesting_in_group = $nesting;\n            }\n        }\n        $max_nesting[]\
    \ = $max_nesting_in_group;\n    }\n    return $max_nesting;\n}\n", "    $paren_string\
    \ = trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace(')(', ') (', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ ' ( ', $paren_string);\n    $paren_string = str_replace(')', ' ) ', $paren_string);\n\
    \    $paren_string = str_replace('  ', ' ', $paren_string);\n    $paren_string\
    \ = trim($paren_string);\n    $paren_array = explode(' ', $paren_string);\n  \
    \  $paren_array = array_filter($paren_array);\n    $paren_array = array_values($paren_array);\n\
    \    $paren_array_length = count($paren_array);\n    $paren_array_depth = [];\n\
    \    $paren_array_depth_count = 0;\n    for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n        if ($paren_array[$i] == '(') {\n            $paren_array_depth_count++;\n\
    \        } elseif ($paren_array[$i] == ')') {\n            $paren_array_depth[]\
    \ = $paren_array_depth_count;\n            $paren_array_depth_count--;\n     \
    \   }\n    }\n    return $paren_array_depth;\n}\n", "  $paren_array = explode('\
    \ ', $paren_string);\n  $paren_depth = array();\n  foreach ($paren_array as $paren_group)\
    \ {\n    $paren_depth[] = get_paren_depth($paren_group);\n  }\n  return $paren_depth;\n\
    }\n", "    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string\
    \ = str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_replace(')', '', $paren_string);\n\
    \    $paren_string = str_replace('', ' ', $paren_string);\n    $paren_string =\
    \ trim($paren_string);\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_string = str_replace('()', '', $paren_string);\n    $paren_string\
    \ = str_replace('(', '', $paren_string);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('', ' ', $paren_string);\n\
    \    $paren_string = trim($paren_string);\n    $paren_string = str_replace(' ',\
    \ '', $paren_string);\n    $paren_string = str_replace('()', '', $paren_string);\n\
    \    $paren_string = str_replace('(', '', $paren_string);\n    $paren_string =\
    \ str_replace(')', '', $paren_string);\n    $paren_string = str_replace('', '\
    \ ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    $paren_string = str_replace('()',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace(')', '', $paren_string);\n    $paren_string =\
    \ str_replace('', ' ', $paren_string);\n    $paren_string = trim($paren_string);\n\
    \    $paren_string = str_replace(' ', '', $paren_string);\n    $paren_string =\
    \ str_replace('()', '', $paren_string);\n    $paren_string = str_replace('(',\
    \ '', $paren_string);\n    $paren_string = str_", "    $paren_string = str_replace('\
    \ ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n    $paren_stack\
    \ = [];\n    $max_depth = 0;\n    $depth_array = [];\n    $current_depth = 0;\n\
    \    foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n      \
    \      $current_depth++;\n            $max_depth = max($max_depth, $current_depth);\n\
    \            array_push($paren_stack, $paren);\n        } elseif ($paren == ')')\
    \ {\n            array_pop($paren_stack);\n            $current_depth--;\n   \
    \         if (empty($paren_stack)) {\n                array_push($depth_array,\
    \ $max_depth);\n                $max_depth = 0;\n            }\n        }\n  \
    \  }\n    return $depth_array;\n}\n", "    $paren_string = trim($paren_string);\n\
    \    $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_string\
    \ = str_replace('(', ' ( ', $paren_string);\n    $paren_string = str_replace(')',\
    \ ' ) ', $paren_string);\n    $paren_string = trim($paren_string);\n    $paren_string\
    \ = preg_replace('/\\s+/', ' ', $paren_string);\n    $paren_array = explode('\
    \ ', $paren_string);\n    $paren_stack = array();\n    $paren_level = 0;\n   \
    \ $paren_max_level = 0;\n    $paren_max_level_array = array();\n    foreach ($paren_array\
    \ as $paren) {\n        if ($paren == '(') {\n            $paren_level++;\n  \
    \          if ($paren_level > $paren_max_level) {\n                $paren_max_level\
    \ = $paren_level;\n            }\n        } else if ($paren == ')') {\n      \
    \      $paren_level--;\n            if ($paren_level == 0) {\n               \
    \ $paren_max_level_array[] = $paren_max_level;\n                $paren_max_level\
    \ = 0;\n            }\n        }\n    }\n    return $paren_max_level_array;\n\
    }\n\n$paren_string = '(()()) ((())) () ((())()())';\n$paren_max_level_array =\
    \ parse_nested_parens($paren_string);\nprint_r($paren_max_level_array);", "  \
    \  $paren_string = str_replace(' ', '', $paren_string);\n    $paren_array = str_split($paren_string);\n\
    \    $paren_stack = [];\n    $max_nesting = 0;\n    $nesting_array = [];\n   \
    \ foreach ($paren_array as $paren) {\n        if ($paren == '(') {\n         \
    \   array_push($paren_stack, $paren);\n        } else {\n            array_pop($paren_stack);\n\
    \            $max_nesting = max($max_nesting, count($paren_stack));\n        }\n\
    \        if ($paren == ')') {\n            array_push($nesting_array, $max_nesting);\n\
    \        }\n    }\n    return $nesting_array;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
