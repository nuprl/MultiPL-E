name: HumanEval_109_move_one_ball
language: php
results:
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(count($arr) == 0) return true;\n    $min = $arr[0];\n    for($i =\
    \ 1; $i < count($arr); $i++) {\n        if($arr[$i] < $min) return false;\n  \
    \      $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqrsp_dc0.php:36\n\
    Stack trace:\n#0 /tmp/tmpqrsp_dc0.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpqrsp_dc0.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return True;\n  }\n  $min = min($arr);\n  $index\
    \ = array_search($min, $arr);\n  $i = $index;\n  $j = $index;\n  while($i >= 0){\n\
    \    if($arr[$i] > $min){\n      return False;\n    }\n    $i--;\n  }\n  while($j\
    \ < count($arr)){\n    if($arr[$j] > $min){\n      return False;\n    }\n    $j++;\n\
    \  }\n  return True;\n}\necho move_one_ball([3, 4, 5, 1, 2]).\"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2]).\"\\n\";\necho move_one_ball([]).\"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5]).\"\\n\";\necho move_one_ball([5, 4, 3, 2, 1]).\"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]).\"\\n\";\necho move_one_ball([10, 9, 8, 7, 6, 5,\
    \ 4, 3, 2, 1]).\"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20]).\"\\n\";\necho move_one_ball([20, 19, 18,\
    \ 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]).\"\\n\";\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n\n\n\n\n\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpknuc4g3d.php:57\n\
    Stack trace:\n#0 /tmp/tmpknuc4g3d.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpknuc4g3d.php\
    \ on line 57\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $count = count($arr);\n  $min = min($arr);\n\
    \  $min_index = array_search($min, $arr);\n  $max = max($arr);\n  $max_index =\
    \ array_search($max, $arr);\n  if($min_index == 0 && $max_index == $count-1) return\
    \ true;\n  if($min_index == 0 && $max_index != $count-1) return false;\n  if($min_index\
    \ != 0 && $max_index == $count-1) return false;\n  if($min_index != 0 && $max_index\
    \ != $count-1) return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7rg574i3.php:41\n\
    Stack trace:\n#0 /tmp/tmp7rg574i3.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp7rg574i3.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return True;\n    }\n    $count = 0;\n    $i\
    \ = 0;\n    while($i < count($arr)){\n        if($arr[$i] > $arr[$i+1]){\n   \
    \         $count++;\n        }\n        $i++;\n    }\n    if($count == 1){\n \
    \       return True;\n    }\n    return False;\n}\necho move_one_ball([3, 4, 5,\
    \ 1, 2]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]);\necho \"\\n\";\n\
    echo move_one_ball([3, 4, 5, 1, 2, 6]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 4, 5, 1, 2, 6, 7]);\necho \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 6, 7,\
    \ 8]);\necho \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 6, 7, 8, 9]);\necho\
    \ \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 6, 7, 8, 9, 10]);\necho \"\\n\"\
    ;\necho move_one_ball([3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11]);\necho \"\\n\";\necho\
    \ move_one_ball([3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12]);\necho \"\\n\";\necho\
    \ move_one_ball([3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13]);\necho \"\\n\";\n\
    echo move_one_ball([3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14]);\necho \"\\\
    n\";\necho move_one_ball([3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n\
    echo \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 6, 7, 8, 9,\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmp5nojxwnk.php on line 63\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $sorted = $arr;\n  sort($sorted);\n  $count\
    \ = 0;\n  for($i=0; $i<count($arr); $i++) {\n    if($arr[$i] != $sorted[$i]) $count++;\n\
    \  }\n  return $count <= 1;\n}\necho move_one_ball([3, 4, 5, 1, 2]) . \"\\n\"\
    ;\necho move_one_ball([3, 5, 4, 1, 2]) . \"\\n\";\necho move_one_ball([]) . \"\
    \\n\";\necho move_one_ball([1, 2, 3, 4, 5]) . \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7]) . \"\\\
    n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8]) . \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\
    \ . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) . \"\
    \\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) . \"\\\
    n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) . \"\
    \\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\
    \ . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmpm9m66hmx.php on line 46\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $arr = array_values($arr);\n    $len = count($arr);\n    if ($len ==\
    \ 0) {\n        return true;\n    }\n    $min = $arr[0];\n    $max = $arr[0];\n\
    \    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n       \
    \     $min = $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n          \
    \  $max = $arr[$i];\n        }\n    }\n    if ($max - $min == $len - 1) {\n  \
    \      return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9e1zu32v.php:49\n\
    Stack trace:\n#0 /tmp/tmp9e1zu32v.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp9e1zu32v.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $count = count($arr);\n  $min = $arr[0];\n\
    \  for($i=1; $i<$count; $i++) {\n    if($arr[$i] < $min) return false;\n    $min\
    \ = min($min, $arr[$i]);\n  }\n  return true;\n}\necho move_one_ball([3, 4, 5,\
    \ 1, 2]) . PHP_EOL;\necho move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL;\necho move_one_ball([])\
    \ . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5]) . PHP_EOL;\necho move_one_ball([5,\
    \ 4, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\
    \ . PHP_EOL;\necho move_one_ball([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) . PHP_EOL;\n\
    echo move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20]) . PHP_EOL;\necho move_one_ball([20, 19, 18, 17, 16, 15, 14, 13,\
    \ 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47, 48, 49, 50]) . PHP_EOL;\necho move_one_ball([50, 49, 48,\
    \ 47, 46, 45, 44,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmpvzie31oo.php on line 42\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return true;\n    $count = count($arr);\n    for($i=0;\
    \ $i<$count; $i++){\n        if($arr[$i]>$arr[$i+1]){\n            $temp = $arr[$i];\n\
    \            $arr[$i] = $arr[$i+1];\n            $arr[$i+1] = $temp;\n       \
    \ }\n    }\n    if($arr == $arr2) return true;\n    else return false;\n}\necho\
    \ move_one_ball([3, 4, 5, 1, 2]);\necho move_one_ball([3, 5, 4, 1, 2]);\necho\
    \ move_one_ball([3, 4, 5, 1, 2, 6]);\necho move_one_ball([3, 4, 5, 1, 2, 6, 7]);\n\
    echo move_one_ball([3, 4, 5, 1, 2, 6, 7, 8]);\necho move_one_ball([3, 4, 5, 1,\
    \ 2, 6, 7, 8, 9]);\necho move_one_ball([3, 4, 5, 1, 2, 6, 7, 8, 9, 10]);\necho\
    \ move_one_ball([3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11]);\necho move_one_ball([3,\
    \ 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12]);\necho move_one_ball([3, 4, 5, 1, 2, 6,\
    \ 7, 8, 9, 10, 11, 12, 13]);\necho move_one_ball([3, 4, 5, 1, 2, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14]);\necho move_one_ball([3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15]);\necho move_one_ball([3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16]);\necho move_one_ball([3, 4, 5, 1, 2, 6,\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmpob_j6nlp.php on line 48\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(count($arr)==0) return True;\n    $min = min($arr);\n    $max = max($arr);\n\
    \    $min_index = array_search($min, $arr);\n    $max_index = array_search($max,\
    \ $arr);\n    if($min_index==0) return True;\n    if($max_index==count($arr)-1)\
    \ return True;\n    if($min_index<$max_index) return False;\n    return True;\n\
    }\necho move_one_ball([3, 4, 5, 1, 2]).\"\\n\";\necho move_one_ball([3, 5, 4,\
    \ 1, 2]).\"\\n\";\necho move_one_ball([]).\"\\n\";\necho move_one_ball([1, 2,\
    \ 3, 4, 5]).\"\\n\";\necho move_one_ball([5, 4, 3, 2, 1]).\"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6]).\"\\n\";\necho move_one_ball([6, 5, 4, 3, 2, 1]).\"\\n\";\n\
    echo move_one_ball([1, 2, 3, 4, 5, 6, 7]).\"\\n\";\necho move_one_ball([7, 6,\
    \ 5, 4, 3, 2, 1]).\"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8]).\"\\\
    n\";\necho move_one_ball([8, 7, 6, 5, 4, 3, 2, 1]).\"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]).\"\\n\";\necho move_one_ball([9, 8, 7, 6, 5, 4, 3,\
    \ 2, 1]).\"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).\"\\n\"\
    ;\necho move_one_ball([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]).\"\\n\";\necho move_one_ball([1,\
    \ 2, 3,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmpg8exbnhm.php on line 48\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) {\n    return True;\n  }\n  $count = 0;\n  $len = count($arr);\n\
    \  for($i = 0; $i < $len; $i++) {\n    if($arr[$i] > $arr[$i + 1]) {\n      $count++;\n\
    \    }\n  }\n  if($count > 1) {\n    return False;\n  }\n  return True;\n}\necho\
    \ move_one_ball([3, 4, 5, 1, 2]);\necho \"\\n\";\necho move_one_ball([3, 5, 4,\
    \ 1, 2]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3]);\necho \"\\n\"\
    ;\necho move_one_ball([3, 5, 4, 1, 2, 3, 4]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2, 3, 4, 5]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3,\
    \ 4, 5, 6]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7]);\n\
    echo \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8]);\necho \"\
    \\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\necho \"\\n\"\
    ;\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\necho \"\\n\"\
    ;\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\necho \"\\\
    n\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\n\
    echo \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmpkccu_in1.php on line 62\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $count = count($arr);\n  $min\
    \ = $arr[0];\n  for($i=1;$i<$count;$i++){\n    if($arr[$i]<$min){\n      return\
    \ false;\n    }\n    $min = $arr[$i];\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0kcvvdnb.php:41\n\
    Stack trace:\n#0 /tmp/tmp0kcvvdnb.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp0kcvvdnb.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $arr_len = count($arr);\n  $min\
    \ = $arr[0];\n  $min_index = 0;\n  for($i=1; $i<$arr_len; $i++){\n    if($arr[$i]<$min){\n\
    \      $min = $arr[$i];\n      $min_index = $i;\n    }\n  }\n  $min_index = $min_index+1;\n\
    \  if($min_index==$arr_len){\n    return true;\n  }\n  return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppouda4sw.php:46\n\
    Stack trace:\n#0 /tmp/tmppouda4sw.php(53): test()\n#1 {main}\n  thrown in /tmp/tmppouda4sw.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) {\n    return true;\n  }\n  $sorted = $arr;\n  sort($sorted);\n\
    \  $count = 0;\n  for ($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i] !=\
    \ $sorted[$i]) {\n      $count++;\n    }\n  }\n  return $count == 1;\n}\necho\
    \ move_one_ball([3, 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2])\
    \ . \"\\n\";\necho move_one_ball([]) . \"\\n\";\necho move_one_ball([1, 2, 3,\
    \ 4, 5]) . \"\\n\";\necho move_one_ball([5, 4, 3, 2, 1]) . \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 5, 4]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6]) . \"\\n\";\n\
    echo move_one_ball([1, 2, 3, 4, 5, 6, 7]) . \"\\n\";\necho move_one_ball([1, 2,\
    \ 3, 4, 5, 6, 7, 8]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9])\
    \ . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) . \"\\n\";\n\
    echo move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) . \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) . \"\\n\";\necho move_one_ball([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) . \"\\n\";\necho move_one_ball([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) . \"\\n\";\necho move\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \",\" or \";\" in /tmp/tmpftrtlk4j.php on line 51\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return true;\n    $len = count($arr);\n    for($i=0;\
    \ $i<$len; $i++){\n        if($arr[$i] != $i+1) return false;\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8g29tvwj.php:35\n\
    Stack trace:\n#0 /tmp/tmp8g29tvwj.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp8g29tvwj.php\
    \ on line 35\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $count = 0;\n    for($i\
    \ = 0; $i < count($arr); $i++){\n        if($arr[$i] > $arr[$i+1]){\n        \
    \    $count++;\n        }\n    }\n    if($count > 1){\n        return false;\n\
    \    }\n    return true;\n}\necho move_one_ball([3, 4, 5, 1, 2]);\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 5 in /tmp/tmphxgj343x.php on line 27\n\
    PHP Warning:  Undefined array key 5 in /tmp/tmphxgj343x.php on line 27\nPHP Fatal\
    \ error:  Uncaught Exception: Test failed! in /tmp/tmphxgj343x.php:42\nStack trace:\n\
    #0 /tmp/tmphxgj343x.php(49): test()\n#1 {main}\n  thrown in /tmp/tmphxgj343x.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $count = count($arr);\n    if($count == 0) return true;\n    $min = $arr[0];\n\
    \    for($i = 1; $i < $count; $i++) {\n        if($arr[$i] < $min) return false;\n\
    \        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfgkvx5zt.php:37\n\
    Stack trace:\n#0 /tmp/tmpfgkvx5zt.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpfgkvx5zt.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(count($arr)==0) return True;\n  $sorted = $arr;\n  sort($sorted);\n\
    \  $count = 0;\n  for($i=0; $i<count($arr); $i++) {\n    if($arr[$i]!=$sorted[$i])\
    \ $count++;\n  }\n  if($count>1) return False;\n  return True;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]) . \"\\n\";\necho\
    \ move_one_ball([]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5]) . \"\\n\"\
    ;\necho move_one_ball([1, 2, 3, 4, 5, 6]) . \"\\n\";\necho move_one_ball([1, 2,\
    \ 3, 4, 5, 6, 7]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8]) . \"\
    \\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9]) . \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15]) . \"\\n\";\necho move_one_\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \",\" or \";\" in /tmp/tmpc3v_03ym.php on line 47\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $sorted = $arr;\n\
    \    sort($sorted);\n    $count = 0;\n    for($i = 0; $i < count($arr); $i++){\n\
    \        if($arr[$i] != $sorted[$i]){\n            $count++;\n        }\n    }\n\
    \    if($count == 1){\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpd3vfkh4d.php:44\n\
    Stack trace:\n#0 /tmp/tmpd3vfkh4d.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpd3vfkh4d.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $count = count($arr);\n  if($count == 0) return true;\n  $min = $arr[0];\n\
    \  for($i = 1; $i < $count; $i++) {\n    if($arr[$i] < $min) {\n      return false;\n\
    \    }\n    $min = $arr[$i];\n  }\n  return true;\n}\necho move_one_ball([3, 4,\
    \ 5, 1, 2]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]) . \"\\n\";\necho move_one_ball([])\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph2mp7_u3.php:41\n\
    Stack trace:\n#0 /tmp/tmph2mp7_u3.php(48): test()\n#1 {main}\n  thrown in /tmp/tmph2mp7_u3.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) {\n    return true;\n  }\n  $count = 0;\n  for($i = 0;\
    \ $i < count($arr); $i++) {\n    if($arr[$i] > $arr[$i + 1]) {\n      $count++;\n\
    \    }\n  }\n  if($count > 1) {\n    return false;\n  }\n  return true;\n}\necho\
    \ move_one_ball([3, 4, 5, 1, 2]);\necho move_one_ball([3, 5, 4, 1, 2]);\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 5 in /tmp/tmpnl4nmj2x.php on line 27\n\
    PHP Warning:  Undefined array key 5 in /tmp/tmpnl4nmj2x.php on line 27\nPHP Warning:\
    \  Undefined array key 5 in /tmp/tmpnl4nmj2x.php on line 27\nPHP Fatal error:\
    \  Uncaught Exception: Test failed! in /tmp/tmpnl4nmj2x.php:43\nStack trace:\n\
    #0 /tmp/tmpnl4nmj2x.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpnl4nmj2x.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return True;\n  $arr_sorted = $arr;\n  sort($arr_sorted);\n\
    \  $arr_sorted_str = implode('', $arr_sorted);\n  $arr_str = implode('', $arr);\n\
    \  $arr_str_rotated = substr($arr_str, -1) . substr($arr_str, 0, -1);\n  if($arr_sorted_str\
    \ == $arr_str_rotated) return True;\n  return False;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]);\necho \"\\\
    n\";\necho move_one_ball([3, 5, 4, 1, 2, 3]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2, 3, 4]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4,\
    \ 5]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6]);\necho\
    \ \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7]);\necho \"\\n\"\
    ;\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8]);\necho \"\\n\";\necho\
    \ move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\necho \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n\n\n\n\n\n\n\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp87ms85vc.php:61\n\
    Stack trace:\n#0 /tmp/tmp87ms85vc.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp87ms85vc.php\
    \ on line 61\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $count = count($arr);\n  for($i=0; $i<$count;\
    \ $i++) {\n    $arr[] = $arr[$i];\n    unset($arr[$i]);\n    if(is_sorted($arr))\
    \ return true;\n  }\n  return false;\n}\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_sorted()\
    \ in /tmp/tmp4ohiionk.php:27\nStack trace:\n#0 /tmp/tmp4ohiionk.php(32): move_one_ball()\n\
    #1 /tmp/tmp4ohiionk.php(36): candidate()\n#2 /tmp/tmp4ohiionk.php(43): test()\n\
    #3 {main}\n  thrown in /tmp/tmp4ohiionk.php on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return true;\n    $count = 0;\n    for($i=0; $i<count($arr)-1;\
    \ $i++){\n        if($arr[$i] > $arr[$i+1]){\n            $count++;\n        }\n\
    \    }\n    if($count > 1) return false;\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $count = count($arr);\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++){\n        if($arr[$i]\
    \ < $min){\n            return false;\n        }\n        $min = $arr[$i];\n \
    \   }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2445giqd.php:41\n\
    Stack trace:\n#0 /tmp/tmp2445giqd.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp2445giqd.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $arr = array_unique($arr);\n    $len = count($arr);\n    if ($len ==\
    \ 0) return true;\n    $min = min($arr);\n    $max = max($arr);\n    $min_index\
    \ = array_search($min, $arr);\n    $max_index = array_search($max, $arr);\n  \
    \  if ($min_index == 0 && $max_index == $len - 1) return true;\n    if ($min_index\
    \ == 0 && $max_index != $len - 1) return false;\n    if ($min_index != 0 && $max_index\
    \ == $len - 1) return false;\n    if ($min_index != 0 && $max_index != $len -\
    \ 1) return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvn07oh45.php:42\n\
    Stack trace:\n#0 /tmp/tmpvn07oh45.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpvn07oh45.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return true;\n    $count = count($arr);\n    $min = min($arr);\n\
    \    $min_index = array_search($min, $arr);\n    if($min_index == 0) return true;\n\
    \    for($i=0; $i<$count; $i++){\n        if($i == $min_index) continue;\n   \
    \     if($arr[$i] < $min) return false;\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq94xu9oc.php:41\n\
    Stack trace:\n#0 /tmp/tmpq94xu9oc.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpq94xu9oc.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return true;\n    $len = count($arr);\n    $min = $arr[0];\n\
    \    for($i=1; $i<$len; $i++){\n        if($arr[$i]<$min) return false;\n    \
    \    $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7ncjmtbg.php:37\n\
    Stack trace:\n#0 /tmp/tmp7ncjmtbg.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp7ncjmtbg.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $sorted_arr = $arr;\n  sort($sorted_arr);\n\
    \  $count = 0;\n  for($i=0; $i<count($arr); $i++){\n    if($arr[$i] != $sorted_arr[$i]){\n\
    \      $count++;\n    }\n  }\n  if($count == 1){\n    return true;\n  }\n  return\
    \ false;\n}\necho move_one_ball([3, 4, 5, 1, 2]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2]);\necho \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5]);\necho \"\\\
    n\";\necho move_one_ball([5, 4, 3, 2, 1]);\necho \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6]);\necho \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7]);\n\
    echo \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8]);\necho \"\\n\";\n\
    echo move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9]);\necho \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]);\necho \"\\n\";\necho move_one_ball([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11]);\necho \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12]);\necho \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13]);\necho \"\\n\";\necho move_one_ball([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]);\necho \"\\n\";\necho move_one_\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \",\" or \";\" in /tmp/tmpqbviju57.php on line 65\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\t$sorted = $arr;\n\tsort($sorted);\n\t$count = 0;\n\t$i = 0;\n\twhile($i\
    \ < count($arr)) {\n\t\tif($arr[$i] != $sorted[$i]) {\n\t\t\t$count++;\n\t\t}\n\
    \t\t$i++;\n\t}\n\tif($count > 1) {\n\t\treturn False;\n\t}\n\treturn True;\n}\n\
    echo move_one_ball([3, 4, 5, 1, 2]).\"\\n\";\necho move_one_ball([3, 5, 4, 1,\
    \ 2]).\"\\n\";\necho move_one_ball([]).\"\\n\";\necho move_one_ball([1, 2, 3,\
    \ 4, 5]).\"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6]).\"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7]).\"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8]).\"\
    \\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9]).\"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]).\"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]).\"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12]).\"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13]).\"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14]).\"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15]).\"\\\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"Test\", expecting\
    \ \",\" or \";\" in /tmp/tmppf1pzwha.php on line 56\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return True;\n  $sorted = $arr;\n  sort($sorted);\n  $sorted\
    \ = array_reverse($sorted);\n  $count = count($arr);\n  for($i=0; $i<$count; $i++)\
    \ {\n    $arr = array_merge(array_slice($arr, 1), array_slice($arr, 0, 1));\n\
    \    if($arr == $sorted) return True;\n  }\n  return False;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]) . \"\\n\";\necho\
    \ move_one_ball([]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5]) . \"\\n\"\
    ;\necho move_one_ball([5, 4, 3, 2, 1]) . \"\\n\";\necho move_one_ball([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\
    \ 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\
    \ 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,\
    \ 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,\
    \ 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])\
    \ . \"\\n\";\necho move_one_ball([100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90,\
    \ 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71,\
    \ 70, 69, 68, 67, 66, 65, 64\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmp9_gjuk7x.php on line 40\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $count = 0;\n    $len\
    \ = count($arr);\n    for($i = 0; $i < $len; $i++){\n        if($arr[$i] != $i\
    \ + 1){\n            $count++;\n        }\n    }\n    if($count > 1){\n      \
    \  return false;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1b71xo8g.php:43\n\
    Stack trace:\n#0 /tmp/tmp1b71xo8g.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp1b71xo8g.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $arr = array_unique($arr);\n  if(empty($arr)){\n    return true;\n  }\n\
    \  $sorted = $arr;\n  sort($sorted);\n  $count = 0;\n  while(!empty($arr)){\n\
    \    $first = array_shift($arr);\n    $last = array_pop($arr);\n    if($first\
    \ == $sorted[$count]){\n      $count++;\n    }\n    if($last == $sorted[$count]){\n\
    \      $count++;\n    }\n  }\n  return $count == count($sorted);\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2ox2pkyu.php:47\n\
    Stack trace:\n#0 /tmp/tmp2ox2pkyu.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp2ox2pkyu.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (empty($arr)) {\n        return true;\n    }\n    $count = count($arr);\n\
    \    $i = 0;\n    $j = $count - 1;\n    while ($i < $j) {\n        if ($arr[$i]\
    \ > $arr[$i + 1]) {\n            $temp = $arr[$i];\n            $arr[$i] = $arr[$i\
    \ + 1];\n            $arr[$i + 1] = $temp;\n            $i++;\n        } else\
    \ {\n            $temp = $arr[$j];\n            $arr[$j] = $arr[$j - 1];\n   \
    \         $arr[$j - 1] = $temp;\n            $j--;\n        }\n    }\n    if ($arr\
    \ == $arr2) {\n        return true;\n    } else {\n        return false;\n   \
    \ }\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined variable $arr2 in /tmp/tmphwzgm4fs.php on line\
    \ 41\nPHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphwzgm4fs.php:53\n\
    Stack trace:\n#0 /tmp/tmphwzgm4fs.php(60): test()\n#1 {main}\n  thrown in /tmp/tmphwzgm4fs.php\
    \ on line 53\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n\tif(empty($arr)) return true;\n\t$min = min($arr);\n\t$min_index = array_search($min,\
    \ $arr);\n\t$max = max($arr);\n\t$max_index = array_search($max, $arr);\n\tif($min_index\
    \ == 0) return true;\n\tif($max_index == count($arr)-1) return true;\n\treturn\
    \ false;\n}\necho move_one_ball([3, 4, 5, 1, 2]).\"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2]).\"\\n\";\necho move_one_ball([]).\"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5]).\"\\n\";\necho move_one_ball([5, 4, 3, 2, 1]).\"\\n\";\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa1atbpss.php:41\n\
    Stack trace:\n#0 /tmp/tmpa1atbpss.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpa1atbpss.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) {\n        return True;\n    }\n    $count = count($arr);\n\
    \    $count_arr = array_count_values($arr);\n    $max = max($arr);\n    $min =\
    \ min($arr);\n    if($count_arr[$max] == 1 && $count_arr[$min] == 1) {\n     \
    \   return True;\n    }\n    return False;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjrp28zit.php:42\n\
    Stack trace:\n#0 /tmp/tmpjrp28zit.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpjrp28zit.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (empty($arr)) {\n        return true;\n    }\n    $count = count($arr);\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = $arr[$i];\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpo0jzaci4.php:41\n\
    Stack trace:\n#0 /tmp/tmpo0jzaci4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpo0jzaci4.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) {\n    return True;\n  }\n  $count = 0;\n  $max = max($arr);\n\
    \  $min = min($arr);\n  $max_index = array_search($max, $arr);\n  $min_index =\
    \ array_search($min, $arr);\n  if ($max_index == 0) {\n    $count++;\n  }\n  if\
    \ ($min_index == count($arr) - 1) {\n    $count++;\n  }\n  if ($count == 2) {\n\
    \    return True;\n  }\n  return False;\n}\n\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnr_ljpmb.php:47\n\
    Stack trace:\n#0 /tmp/tmpnr_ljpmb.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpnr_ljpmb.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return True;\n  $count = 0;\n  for($i=0; $i<count($arr)-1;\
    \ $i++){\n    if($arr[$i]>$arr[$i+1]){\n      $count++;\n    }\n  }\n  if($count>1)\
    \ return False;\n  return True;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) {\n    return true;\n  }\n  $sorted = $arr;\n  sort($sorted);\n\
    \  $count = 0;\n  for ($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i] !=\
    \ $sorted[$i]) {\n      $count++;\n    }\n  }\n  return $count <= 1;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgby575yo.php:41\n\
    Stack trace:\n#0 /tmp/tmpgby575yo.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpgby575yo.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) {\n    return true;\n  }\n  $sorted = $arr;\n  sort($sorted);\n\
    \  $count = 0;\n  while ($arr !== $sorted) {\n    $last = array_pop($arr);\n \
    \   array_unshift($arr, $last);\n    $count++;\n    if ($count > count($arr))\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]) . PHP_EOL;\necho move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL;\necho\
    \ move_one_ball([]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5]) . PHP_EOL;\n\
    echo move_one_ball([5, 4, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10]) . PHP_EOL;\necho move_one_ball([10, 9, 8, 7, 6, 5, 4, 3,\
    \ 2, 1]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20]) . PHP_EOL;\necho move_one_ball([20, 19, 18,\
    \ 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) . PHP_EOL;\necho\
    \ move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\
    \ 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,\
    \ 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) . PHP_EOL;\necho\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmpxfwixeng.php on line 49\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $count = count($arr);\n\
    \    $min = min($arr);\n    $min_index = array_search($min, $arr);\n    $max =\
    \ max($arr);\n    $max_index = array_search($max, $arr);\n    if($min_index ==\
    \ 0 && $max_index == $count-1){\n        return true;\n    }\n    if($min_index\
    \ == 0 && $max_index != $count-1){\n        return false;\n    }\n    if($min_index\
    \ != 0 && $max_index == $count-1){\n        return false;\n    }\n    if($min_index\
    \ != 0 && $max_index != $count-1){\n        return true;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq658ar_q.php:51\n\
    Stack trace:\n#0 /tmp/tmpq658ar_q.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpq658ar_q.php\
    \ on line 51\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $i = 0;\n    $j =\
    \ count($arr) - 1;\n    while($i < $j){\n        if($arr[$i] > $arr[$i + 1]){\n\
    \            return false;\n        }\n        $i++;\n    }\n    return true;\n\
    }\necho move_one_ball([3, 4, 5, 1, 2]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3]);\necho\
    \ \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2, 3, 4, 5]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3,\
    \ 4, 5, 6]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7]);\n\
    echo \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8]);\necho \"\
    \\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\necho \"\\n\"\
    ;\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\necho \"\\n\"\
    ;\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\necho \"\\\
    n\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\n\
    echo \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmpx1xarr63.php on line 60\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $count = count($arr);\n    if ($count == 0) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if\
    \ ($arr[$i] < $min) {\n            return false;\n        }\n        $min = $arr[$i];\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1wautwnx.php:41\n\
    Stack trace:\n#0 /tmp/tmp1wautwnx.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp1wautwnx.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $count = count($arr);\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++){\n        if($arr[$i]\
    \ < $min){\n            return false;\n        }\n        $min = $arr[$i];\n \
    \   }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpu72a9e8g.php:41\n\
    Stack trace:\n#0 /tmp/tmpu72a9e8g.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpu72a9e8g.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return True;\n  $sorted = $arr;\n  sort($sorted);\n  $count\
    \ = 0;\n  for($i=0; $i<count($arr); $i++) {\n    if($arr[$i]!=$sorted[$i]) $count++;\n\
    \  }\n  return $count<=1;\n}\necho move_one_ball([3, 4, 5, 1, 2]).\"\\n\";\necho\
    \ move_one_ball([3, 5, 4, 1, 2]).\"\\n\";\necho move_one_ball([]).\"\\n\";\necho\
    \ move_one_ball([1, 2, 3, 4, 5]).\"\\n\";\necho move_one_ball([1, 2, 3, 4, 5,\
    \ 6]).\"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7]).\"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7, 8]).\"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9]).\"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]).\"\\n\";\n\
    echo move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]).\"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]).\"\\n\";\necho move_one_ball([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]).\"\\n\";\necho move_one_ball([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]).\"\\n\";\necho move_one_ball([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]).\"\\n\";\necho move_one_ball([1, 2,\
    \ 3, 4,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmpv_szeld_.php on line 46\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) return true;\n  $min = min($arr);\n  $min_index = array_search($min,\
    \ $arr);\n  $max = max($arr);\n  $max_index = array_search($max, $arr);\n  if\
    \ ($min_index == 0 && $max_index == count($arr) - 1) return true;\n  if ($min_index\
    \ == 0 && $max_index == 1) return true;\n  if ($min_index == count($arr) - 1 &&\
    \ $max_index == count($arr) - 2) return true;\n  return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpidjrnhbm.php:38\n\
    Stack trace:\n#0 /tmp/tmpidjrnhbm.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpidjrnhbm.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(count($arr) === 0) {\n    return true;\n  }\n  $min = min($arr);\n \
    \ $min_index = array_search($min, $arr);\n  $max = max($arr);\n  $max_index =\
    \ array_search($max, $arr);\n  if($min_index === 0 && $max_index === count($arr)\
    \ - 1) {\n    return true;\n  }\n  return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk_5xags4.php:40\n\
    Stack trace:\n#0 /tmp/tmpk_5xags4.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpk_5xags4.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return true;\n    $count = 0;\n    for($i=0; $i<count($arr)-1;\
    \ $i++){\n        if($arr[$i] > $arr[$i+1]){\n            $count++;\n        }\n\
    \    }\n    if($count > 1) return false;\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return True;\n  $count = count($arr);\n  $min = $arr[0];\n\
    \  for($i=1; $i<$count; $i++){\n    if($arr[$i] < $min) return False;\n    $min\
    \ = min($min, $arr[$i]);\n  }\n  return True;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx9nbmako.php:37\n\
    Stack trace:\n#0 /tmp/tmpx9nbmako.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpx9nbmako.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $sorted = $arr;\n    sort($sorted);\n    $count = 0;\n    while ($arr\
    \ != $sorted) {\n        $last = array_pop($arr);\n        array_unshift($arr,\
    \ $last);\n        $count++;\n    }\n    return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8qqyecgo.php:38\n\
    Stack trace:\n#0 /tmp/tmp8qqyecgo.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp8qqyecgo.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return true;\n    $count = 0;\n    for($i = 0; $i < count($arr);\
    \ $i++) {\n        if($arr[$i] > $arr[$i+1]) {\n            $count++;\n      \
    \  }\n    }\n    if($count > 1) {\n        return false;\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 5 in /tmp/tmp0kivamo8.php on line 25\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0kivamo8.php:40\n\
    Stack trace:\n#0 /tmp/tmp0kivamo8.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp0kivamo8.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $sorted = $arr;\n\
    \    sort($sorted);\n    $i = 0;\n    while($arr[$i] != $sorted[$i]){\n      \
    \  $i++;\n    }\n    $j = $i;\n    while($arr[$j] == $sorted[$j]){\n        $j++;\n\
    \    }\n    $j--;\n    $temp = $arr[$i];\n    $arr[$i] = $arr[$j];\n    $arr[$j]\
    \ = $temp;\n    if($arr == $sorted){\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: "b'PHP Warning:  Undefined array key 5 in /tmp/tmposn8iwyj.php on line 28\\\
    nPHP Warning:  Undefined array key 5 in /tmp/tmposn8iwyj.php on line 28\\nPHP\
    \ Warning:  Undefined array key 5 in /tmp/tmposn8iwyj.php on line 32\\nPHP Warning:\
    \  Undefined array key 5 in /tmp/tmposn8iwyj.php on line 32\\nPHP Warning:  Undefined\
    \ array key 6 in /tmp/tmposn8iwyj.php on line 32\\nPHP Warning:  Undefined array\
    \ key 6 in /tmp/tmposn8iwyj.php on line 32\\nPHP Warning:  Undefined array key\
    \ 7 in /tmp/tmposn8iwyj.php on line 32\\nPHP Warning:  Undefined array key 7 in\
    \ /tmp/tmposn8iwyj.php on line 32\\nPHP Warning:  Undefined array key 8 in /tmp/tmposn8iwyj.php\
    \ on line 32\\nPHP Warning:  Undefined array key 8 in /tmp/tmposn8iwyj.php on\
    \ line 32\\nPHP Warning:  Undefined array key 9 in /tmp/tmposn8iwyj.php on line\
    \ 32\\nPHP Warning:  Undefined array key 9 in /tmp/tmposn8iwyj.php on line 32\\\
    nPHP Warning:  Undefined array key 10 in /tmp/tmposn8iwyj.php on line 32\\nPHP\
    \ Warning:  Undefined array key 10 in /tmp/tmposn8iwyj.php on line 32\\nPHP Warning:\
    \  Undefined array key 11 in /tmp/tmposn8iwyj.php on line 32\\nPHP Warning:  Undefined\
    \ array key 11 in /tmp/tmposn8iwyj.php on line 32\\nPHP Warning:  Undefined array\
    \ key 12 in /tmp/tmposn8iwyj.php on line 32\\nPHP Warning:  Undefined array key\
    \ 12 in /tmp/tmposn8iwyj.php on line 32\\nPHP Warning:  Undefined array key 13\
    \ in /tmp/tmposn8iwyj.php on line 32\\nPHP Warning:  Undefined array key 13 in\
    \ /tmp/tmposn8iwyj.php on line 32\\nPHP Warning:  Undefined array key 14 in /tmp/tmposn8iwyj.php\
    \ on line 32\\nPHP Warning:  Undefined array key 14 in /tmp/tmposn8iwyj.php on\
    \ line 32\\nPHP Warning:  Undefined array key 15 in /tmp/tmposn8iwyj.php on line\
    \ 32\\nPHP Warning:  Undefined array key 15 in /tmp/tmposn8iwyj.php on line 32\\\
    nPHP Warning:  Undefined array key 16 in /tmp/tmposn8iwyj.php on line 32\\nPHP\
    \ Warning:  Undefined array key 16 in /tmp/tmposn8iwyj.php on line 32\\nPHP Warning:\
    \  Undefined array key 17 in /tmp/tmposn8iwyj.php on line 32\\nPHP Warning:  Undefined\
    \ array key 17 in /tmp/tmposn8iwyj.php on line 32\\nPHP Warning:  "
  exit_code: -1
  status: Timeout
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return True;\n  $count = count($arr);\n  for($i=0; $i<$count;\
    \ $i++){\n    $arr[] = $arr[$i];\n  }\n  $arr = array_slice($arr, $count);\n \
    \ for($i=0; $i<$count; $i++){\n    if($arr[$i] > $arr[$i+1]) return False;\n \
    \ }\n  return True;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzwilnifj.php:39\n\
    Stack trace:\n#0 /tmp/tmpzwilnifj.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpzwilnifj.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $count = 0;\n  $arr_len = count($arr);\n\
    \  for($i = 0; $i < $arr_len; $i++) {\n    if($arr[$i] > $arr[$i+1]) {\n     \
    \ $count++;\n    }\n  }\n  if($count > 1) {\n    return false;\n  } else {\n \
    \   return true;\n  }\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 5 in /tmp/tmpr8855z_7.php on line 26\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr8855z_7.php:42\n\
    Stack trace:\n#0 /tmp/tmpr8855z_7.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpr8855z_7.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $sorted = $arr;\n  sort($sorted);\n  $count = count($arr);\n  for ($i =\
    \ 0; $i < $count; $i++) {\n    if ($arr[$i] == $sorted[$i]) {\n      continue;\n\
    \    }\n    $temp = $arr[$i];\n    $arr[$i] = $arr[$count - 1];\n    $arr[$count\
    \ - 1] = $temp;\n    if ($arr == $sorted) {\n      return true;\n    }\n    $arr[$count\
    \ - 1] = $arr[$i];\n    $arr[$i] = $temp;\n  }\n  return false;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]) . \"\\n\";\necho\
    \ move_one_ball([1, 2, 3, 4, 5]) . \"\\n\";\necho move_one_ball([5, 4, 3, 2, 1])\
    \ . \"\\n\";\necho move_one_ball([1, 2, 3, 5, 4]) . \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6]) . \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 6]) . \"\\n\"\
    ;\necho move_one_ball([3, 4, 5, 1, 2, 6, 7]) . \"\\n\";\necho move_one_ball([3,\
    \ 4, 5, 1, 2, 6, 7, 8]) . \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 6, 7, 8,\
    \ 9]) . \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 6, 7, 8, 9, 10]) . \"\\n\"\
    ;\necho move_one_ball([3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11]) . \"\\n\";\necho move_one_ball([3,\
    \ 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n\n\n1\n\n\n\n\n\n\n\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj15qzeb6.php:58\n\
    Stack trace:\n#0 /tmp/tmpj15qzeb6.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpj15qzeb6.php\
    \ on line 58\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(count($arr) == 0) return true;\n  $min = $arr[0];\n  for($i = 1; $i\
    \ < count($arr); $i++) {\n    if($arr[$i] < $min) return false;\n    $min = min($min,\
    \ $arr[$i]);\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphedy5spu.php:36\n\
    Stack trace:\n#0 /tmp/tmphedy5spu.php(43): test()\n#1 {main}\n  thrown in /tmp/tmphedy5spu.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $count = count($arr);\n    if ($count == 0) return true;\n    $min =\
    \ $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i] < $min)\
    \ return false;\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3xw8nphy.php:37\n\
    Stack trace:\n#0 /tmp/tmp3xw8nphy.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3xw8nphy.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return True;\n  $count = 0;\n  $len = count($arr);\n  for($i=0;\
    \ $i<$len; $i++){\n    if($arr[$i] == $i+1) $count++;\n  }\n  if($count == $len)\
    \ return True;\n  return False;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptew4x3rh.php:37\n\
    Stack trace:\n#0 /tmp/tmptew4x3rh.php(44): test()\n#1 {main}\n  thrown in /tmp/tmptew4x3rh.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $count = count($arr);\n  $min\
    \ = $arr[0];\n  for($i = 1; $i < $count; $i++){\n    if($arr[$i] < $min){\n  \
    \    return false;\n    }\n    $min = $arr[$i];\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5fhuguzl.php:41\n\
    Stack trace:\n#0 /tmp/tmp5fhuguzl.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp5fhuguzl.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $count = count($arr);\n  $min = $arr[0];\n\
    \  for($i=1; $i<$count; $i++) {\n    if($arr[$i] < $min) return false;\n    $min\
    \ = min($min, $arr[$i]);\n  }\n  return true;\n}\necho move_one_ball([3, 4, 5,\
    \ 1, 2]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]);\necho \"\\n\";\n\
    echo move_one_ball([1, 2, 3, 4, 5]);\necho \"\\n\";\necho move_one_ball([5, 4,\
    \ 3, 2, 1]);\necho \"\\n\";\necho move_one_ball([]);\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5zya5ooo.php:46\n\
    Stack trace:\n#0 /tmp/tmp5zya5ooo.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp5zya5ooo.php\
    \ on line 46\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $len = count($arr);\n  if ($len == 0) {\n    return true;\n  }\n  $max\
    \ = $arr[0];\n  for ($i = 1; $i < $len; $i++) {\n    if ($arr[$i] < $max) {\n\
    \      return false;\n    }\n    $max = $arr[$i];\n  }\n  return true;\n}\necho\
    \ move_one_ball([3, 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2])\
    \ . \"\\n\";\necho move_one_ball([]) . \"\\n\";\necho move_one_ball([1, 2, 3,\
    \ 4, 5]) . \"\\n\";\necho move_one_ball([5, 4, 3, 2, 1]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqxe6bp6l.php:45\n\
    Stack trace:\n#0 /tmp/tmpqxe6bp6l.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpqxe6bp6l.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return true;\n    $count = count($arr);\n    for($i=0;\
    \ $i<$count; $i++){\n        $temp = $arr[$i];\n        $arr[$i] = $arr[$count-1];\n\
    \        $arr[$count-1] = $temp;\n        if(is_sorted($arr)) return true;\n \
    \   }\n    return false;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function is_sorted()\
    \ in /tmp/tmp2hdol9du.php:28\nStack trace:\n#0 /tmp/tmp2hdol9du.php(33): move_one_ball()\n\
    #1 /tmp/tmp2hdol9du.php(37): candidate()\n#2 /tmp/tmp2hdol9du.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmp2hdol9du.php on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $count = count($arr);\n  $min\
    \ = min($arr);\n  $min_index = array_search($min, $arr);\n  $max = max($arr);\n\
    \  $max_index = array_search($max, $arr);\n  if($min_index == 0 && $max_index\
    \ == $count-1){\n    return true;\n  }\n  if($min_index == 0 && $max_index !=\
    \ $count-1){\n    return false;\n  }\n  if($min_index != 0 && $max_index == $count-1){\n\
    \    return false;\n  }\n  if($min_index != 0 && $max_index != $count-1){\n  \
    \  return true;\n  }\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxfddrm2c.php:51\n\
    Stack trace:\n#0 /tmp/tmpxfddrm2c.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpxfddrm2c.php\
    \ on line 51\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $count = count($arr);\n  if($count == 0) return true;\n  $min = $arr[0];\n\
    \  for($i = 1; $i < $count; $i++) {\n    if($arr[$i] < $min) return false;\n \
    \   $min = min($min, $arr[$i]);\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptxax8e61.php:37\n\
    Stack trace:\n#0 /tmp/tmptxax8e61.php(44): test()\n#1 {main}\n  thrown in /tmp/tmptxax8e61.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $count = 0;\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $key = array_search($min, $arr);\n  $key2 = array_search($max,\
    \ $arr);\n  $arr2 = array_slice($arr, $key);\n  $arr3 = array_slice($arr, 0, $key);\n\
    \  $arr4 = array_merge($arr2, $arr3);\n  for($i = 0; $i < count($arr4); $i++){\n\
    \    if($arr4[$i] > $arr4[$i+1]){\n      $count++;\n    }\n  }\n  if($count ==\
    \ 0){\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 5 in /tmp/tmp6di1hb9h.php on line 34\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6di1hb9h.php:51\n\
    Stack trace:\n#0 /tmp/tmp6di1hb9h.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp6di1hb9h.php\
    \ on line 51\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(count($arr) == 0) return true;\n  $min = $arr[0];\n  for($i = 1; $i\
    \ < count($arr); $i++) {\n    if($arr[$i] < $min) return false;\n    $min = min($min,\
    \ $arr[$i]);\n  }\n  return true;\n}\necho move_one_ball([3, 4, 5, 1, 2]) . \"\
    \\n\";\necho move_one_ball([3, 5, 4, 1, 2]) . \"\\n\";\necho move_one_ball([])\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplx72whlp.php:38\n\
    Stack trace:\n#0 /tmp/tmplx72whlp.php(45): test()\n#1 {main}\n  thrown in /tmp/tmplx72whlp.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $count = count($arr);\n  if($count == 0) return true;\n  $min = $arr[0];\n\
    \  for($i = 1; $i < $count; $i++) {\n    if($arr[$i] < $min) return false;\n \
    \   $min = min($min, $arr[$i]);\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj7i14a9k.php:37\n\
    Stack trace:\n#0 /tmp/tmpj7i14a9k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpj7i14a9k.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $count = 0;\n  for($i = 0; $i < count($arr);\
    \ $i++) {\n    if($arr[$i] > $arr[$i+1]) $count++;\n  }\n  if($count == 1) return\
    \ true;\n  return false;\n}\necho move_one_ball([3, 4, 5, 1, 2]);\necho \"<br>\"\
    ;\necho move_one_ball([3, 5, 4, 1, 2]);\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: <br>
  stderr: "PHP Warning:  Undefined array key 5 in /tmp/tmpf345d5e5.php on line 25\n\
    PHP Warning:  Undefined array key 5 in /tmp/tmpf345d5e5.php on line 25\nPHP Warning:\
    \  Undefined array key 5 in /tmp/tmpf345d5e5.php on line 25\nPHP Fatal error:\
    \  Uncaught Exception: Test failed! in /tmp/tmpf345d5e5.php:38\nStack trace:\n\
    #0 /tmp/tmpf345d5e5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpf345d5e5.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $arr_len = count($arr);\n  if ($arr_len == 0) {\n    return True;\n  }\n\
    \  $min_val = $arr[0];\n  $min_index = 0;\n  for ($i = 1; $i < $arr_len; $i++)\
    \ {\n    if ($arr[$i] < $min_val) {\n      $min_val = $arr[$i];\n      $min_index\
    \ = $i;\n    }\n  }\n  $arr_len = $arr_len - $min_index;\n  $arr = array_slice($arr,\
    \ $min_index);\n  $arr = array_merge($arr, array_slice($arr, 0, $arr_len));\n\
    \  for ($i = 1; $i < $arr_len; $i++) {\n    if ($arr[$i] < $arr[$i - 1]) {\n \
    \     return False;\n    }\n  }\n  return True;\n}\necho move_one_ball([3, 4,\
    \ 5, 1, 2]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]) . \"\\n\";\necho move_one_ball([])\
    \ . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5]) . \"\\n\";\necho move_one_ball([5,\
    \ 4, 3, 2, 1]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\
    \ . \"\\n\";\necho move_one_ball([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) . \"\\n\";\n\
    echo move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20]) . \"\\n\";\necho move_one_ball([20, 19, 18, 17, 16, 15, 14, 13,\
    \ 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) . \"\\n\";\necho move_one_ball([1, 2,\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmpnl5rx88q.php on line 54\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $temp = $arr;\n  sort($temp);\n  $count\
    \ = 0;\n  for($i=0; $i<count($arr); $i++) {\n    if($arr[$i] == $temp[$i]) $count++;\n\
    \  }\n  if($count == count($arr)) return true;\n  return false;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]) . PHP_EOL;\necho move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL;\necho\
    \ move_one_ball([]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5]) . PHP_EOL;\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9ighf7x7.php:41\n\
    Stack trace:\n#0 /tmp/tmp9ighf7x7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp9ighf7x7.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $min = $arr[0];\n  $max = $arr[0];\n  for($i=1;\
    \ $i<count($arr); $i++) {\n    if($arr[$i] < $min) {\n      $min = $arr[$i];\n\
    \    }\n    if($arr[$i] > $max) {\n      $max = $arr[$i];\n    }\n  }\n  if($min\
    \ == $max) return true;\n  return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8jcp0bhf.php:42\n\
    Stack trace:\n#0 /tmp/tmp8jcp0bhf.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp8jcp0bhf.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $count = count($arr);\n  $i\
    \ = 0;\n  $j = 1;\n  while($j < $count){\n    if($arr[$i] > $arr[$j]){\n     \
    \ return false;\n    }\n    $i++;\n    $j++;\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi82mzc78.php:43\n\
    Stack trace:\n#0 /tmp/tmpi82mzc78.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpi82mzc78.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $min = $arr[0];\n  $max = $arr[0];\n  $count\
    \ = 0;\n  foreach($arr as $value) {\n    if($value < $min) {\n      $min = $value;\n\
    \      $count++;\n    }\n    if($value > $max) {\n      $max = $value;\n    }\n\
    \  }\n  if($count > 1) return false;\n  if($count == 1 && $min != $arr[0]) return\
    \ false;\n  if($count == 1 && $min == $arr[0]) return true;\n  if($max == $arr[0])\
    \ return true;\n  return false;\n}\necho move_one_ball([3, 4, 5, 1, 2]) . PHP_EOL;\n\
    echo move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL;\necho move_one_ball([3, 4, 5, 1,\
    \ 2, 3]) . PHP_EOL;\necho move_one_ball([3, 5, 4, 1, 2, 3]) . PHP_EOL;\necho move_one_ball([3,\
    \ 4, 5, 1, 2, 3, 4]) . PHP_EOL;\necho move_one_ball([3, 5, 4, 1, 2, 3, 4]) . PHP_EOL;\n\
    echo move_one_ball([3, 4, 5, 1, 2, 3, 4, 5]) . PHP_EOL;\necho move_one_ball([3,\
    \ 5, 4, 1, 2, 3, 4, 5]) . PHP_EOL;\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5,\
    \ 6]) . PHP_EOL;\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6]) . PHP_EOL;\n\
    echo move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6, 7]) . PHP_EOL;\necho move_one_ball([3,\
    \ 5, 4, 1, 2, 3, 4, 5, 6, 7]) .\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmp3m9w1fqa.php on line 53\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) {\n    return true;\n  }\n  $count = count($arr);\n  $min\
    \ = min($arr);\n  $min_index = array_search($min, $arr);\n  $max = max($arr);\n\
    \  $max_index = array_search($max, $arr);\n  if ($min_index == 0 && $max_index\
    \ == $count - 1) {\n    return true;\n  }\n  if ($min_index == 0 && $max_index\
    \ != $count - 1) {\n    return false;\n  }\n  if ($min_index != 0 && $max_index\
    \ == $count - 1) {\n    return true;\n  }\n  if ($min_index != 0 && $max_index\
    \ != $count - 1) {\n    return false;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph31na8tr.php:49\n\
    Stack trace:\n#0 /tmp/tmph31na8tr.php(56): test()\n#1 {main}\n  thrown in /tmp/tmph31na8tr.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) {\n    return true;\n  }\n  $sorted = $arr;\n  sort($sorted);\n\
    \  $count = count($arr);\n  for ($i = 0; $i < $count; $i++) {\n    if ($arr[$i]\
    \ != $sorted[$i]) {\n      $arr = array_merge(array_slice($arr, $i + 1), array_slice($arr,\
    \ 0, $i + 1));\n      if ($arr == $sorted) {\n        return true;\n      }\n\
    \    }\n  }\n  return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return True;\n  }\n  $min = min($arr);\n  $min_index\
    \ = array_search($min, $arr);\n  $sorted_arr = array_slice($arr, $min_index);\n\
    \  $sorted_arr = array_merge($sorted_arr, array_slice($arr, 0, $min_index));\n\
    \  return $sorted_arr == $arr;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz4ppg_sq.php:37\n\
    Stack trace:\n#0 /tmp/tmpz4ppg_sq.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpz4ppg_sq.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $min = $arr[0];\n  $max = $arr[0];\n  for($i=1;\
    \ $i<count($arr); $i++) {\n    if($arr[$i] < $min) {\n      $min = $arr[$i];\n\
    \    }\n    if($arr[$i] > $max) {\n      $max = $arr[$i];\n    }\n  }\n  if($min\
    \ == $max) return true;\n  return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcz_qxb98.php:42\n\
    Stack trace:\n#0 /tmp/tmpcz_qxb98.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpcz_qxb98.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $count = 0;\n  $len = count($arr);\n  for($i = 0; $i < $len; $i++) {\n\
    \    if($arr[$i] > $arr[$i+1]) {\n      $count++;\n    }\n  }\n  if($count > 1)\
    \ {\n    return false;\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 5 in /tmp/tmp0d_jq7ft.php on line 25\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0d_jq7ft.php:40\n\
    Stack trace:\n#0 /tmp/tmp0d_jq7ft.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp0d_jq7ft.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $count = count($arr);\n    if($count == 0){\n        return true;\n \
    \   }\n    $min = $arr[0];\n    for($i = 1; $i < $count; $i++){\n        if($arr[$i]\
    \ < $min){\n            return false;\n        }\n        $min = $arr[$i];\n \
    \   }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz56z0co0.php:41\n\
    Stack trace:\n#0 /tmp/tmpz56z0co0.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpz56z0co0.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) return true;\n  $count = count($arr);\n  $min = $arr[0];\n\
    \  for ($i = 1; $i < $count; $i++) {\n    if ($arr[$i] < $min) return false;\n\
    \    $min = min($min, $arr[$i]);\n  }\n  return true;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]) . PHP_EOL;\necho move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL;\necho\
    \ move_one_ball([]) . PHP_EOL;\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpck89bgys.php:39\n\
    Stack trace:\n#0 /tmp/tmpck89bgys.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpck89bgys.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $count = count($arr);\n    if($count == 0) return True;\n    $min = $arr[0];\n\
    \    for($i = 1; $i < $count; $i++) {\n        if($arr[$i] < $min) return False;\n\
    \        $min = min($min, $arr[$i]);\n    }\n    return True;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzklp0paq.php:37\n\
    Stack trace:\n#0 /tmp/tmpzklp0paq.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzklp0paq.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return true;\n    $count = count($arr);\n    $min = $arr[0];\n\
    \    for($i=1; $i<$count; $i++){\n        if($arr[$i]<$min) return false;\n  \
    \      $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8q16mshx.php:37\n\
    Stack trace:\n#0 /tmp/tmp8q16mshx.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp8q16mshx.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $count = count($arr);\n\
    \    $i = 0;\n    while($i < $count - 1){\n        if($arr[$i] > $arr[$i + 1]){\n\
    \            return false;\n        }\n        $i++;\n    }\n    return true;\n\
    }\necho move_one_ball([3, 4, 5, 1, 2]) . PHP_EOL;\necho move_one_ball([3, 5, 4,\
    \ 1, 2]) . PHP_EOL;\necho move_one_ball([]) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy834wt0m.php:43\n\
    Stack trace:\n#0 /tmp/tmpy834wt0m.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpy834wt0m.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return true;\n    $count = 0;\n    $sorted = $arr;\n\
    \    sort($sorted);\n    for($i=0; $i<count($arr); $i++) {\n        if($arr[$i]\
    \ != $sorted[$i]) $count++;\n    }\n    return $count <= 1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7kn7q3gf.php:37\n\
    Stack trace:\n#0 /tmp/tmp7kn7q3gf.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp7kn7q3gf.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $count = count($arr);\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++){\n        if($arr[$i]\
    \ < $min){\n            return false;\n        }\n        $min = $arr[$i];\n \
    \   }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplyregjvk.php:41\n\
    Stack trace:\n#0 /tmp/tmplyregjvk.php(48): test()\n#1 {main}\n  thrown in /tmp/tmplyregjvk.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return True;\n  $arr_sorted = $arr;\n  sort($arr_sorted);\n\
    \  $arr_sorted = array_values($arr_sorted);\n  $arr_sorted_str = implode('', $arr_sorted);\n\
    \  $arr_str = implode('', $arr);\n  $arr_str_shifted = substr($arr_str, -1) .\
    \ substr($arr_str, 0, -1);\n  if($arr_str_shifted == $arr_sorted_str) return True;\n\
    \  return False;\n}\necho move_one_ball([3, 4, 5, 1, 2]) . PHP_EOL;\necho move_one_ball([3,\
    \ 5, 4, 1, 2]) . PHP_EOL;\necho move_one_ball([]) . PHP_EOL;\necho move_one_ball([1,\
    \ 2, 3, 4, 5]) . PHP_EOL;\necho move_one_ball([5, 4, 3, 2, 1]) . PHP_EOL;\necho\
    \ move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) . PHP_EOL;\necho move_one_ball([10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) . PHP_EOL;\necho move_one_ball([20,\
    \ 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) . PHP_EOL;\n\
    echo move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\
    \ 37, 38\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmppqy5mrn8.php on line 42\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $n = count($arr);\n  $min = $arr[0];\n\
    \  for($i=1; $i<$n; $i++) {\n    if($arr[$i]<$min) return false;\n    $min = min($min,\
    \ $arr[$i]);\n  }\n  return true;\n}\necho move_one_ball([3, 4, 5, 1, 2]) . PHP_EOL;\n\
    echo move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpkh606k53.php:38\n\
    Stack trace:\n#0 /tmp/tmpkh606k53.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpkh606k53.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $count = count($arr);\n  if ($count == 0) {\n    return True;\n  }\n  $sorted\
    \ = $arr;\n  sort($sorted);\n  $i = 0;\n  while ($i < $count) {\n    if ($arr[$i]\
    \ == $sorted[$i]) {\n      $i++;\n    } else {\n      $j = $i + 1;\n      while\
    \ ($j < $count) {\n        if ($arr[$j] == $sorted[$i]) {\n          $temp = $arr[$j];\n\
    \          $arr[$j] = $arr[$i];\n          $arr[$i] = $temp;\n          break;\n\
    \        }\n        $j++;\n      }\n      if ($j == $count) {\n        return\
    \ False;\n      }\n    }\n  }\n  return True;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxgjsfhnk.php:58\n\
    Stack trace:\n#0 /tmp/tmpxgjsfhnk.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpxgjsfhnk.php\
    \ on line 58\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $count = count($arr);\n  if($count == 0) return True;\n  $min = $arr[0];\n\
    \  for($i = 1; $i < $count; $i++) {\n    if($arr[$i] < $min) {\n      return False;\n\
    \    }\n    $min = $arr[$i];\n  }\n  return True;\n}\necho move_one_ball([3, 4,\
    \ 5, 1, 2]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]) . \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5]) . \"\\n\";\necho move_one_ball([5, 4, 3, 2, 1]) . \"\\n\";\necho\
    \ move_one_ball([]) . \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpmae0pxor.php:43\n\
    Stack trace:\n#0 /tmp/tmpmae0pxor.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpmae0pxor.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) {\n    return True;\n  }\n  $count = 0;\n  for ($i = 0;\
    \ $i < count($arr); $i++) {\n    if ($arr[$i] > $arr[$i + 1]) {\n      $count++;\n\
    \    }\n  }\n  if ($count > 1) {\n    return False;\n  }\n  return True;\n}\n\
    echo move_one_ball([3, 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1,\
    \ 2]) . \"\\n\";\necho move_one_ball([]) . \"\\n\";\necho move_one_ball([1, 2,\
    \ 3, 4, 5]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6]) . \"\\n\";\necho\
    \ move_one_ball([1, 2, 3, 4, 5, 6, 7]) . \"\\n\";\necho move_one_ball([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9])\
    \ . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) . \"\\n\";\n\
    echo move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) . \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) . \"\\n\";\necho move_one_ball([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) . \"\\n\";\necho move_one_ball([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) . \"\\n\";\necho move_one_ball([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) . \"\\n\";\necho move_one_\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \",\" or \";\" in /tmp/tmprh40ydzw.php on line 51\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $count = 0;\n    $min\
    \ = min($arr);\n    $max = max($arr);\n    $min_index = array_search($min, $arr);\n\
    \    $max_index = array_search($max, $arr);\n    if($min_index == 0){\n      \
    \  $count++;\n    }\n    if($max_index == count($arr)-1){\n        $count++;\n\
    \    }\n    if($count == 2){\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzp0q98cp.php:47\n\
    Stack trace:\n#0 /tmp/tmpzp0q98cp.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpzp0q98cp.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return true;\n    $len = count($arr);\n    $min = $arr[0];\n\
    \    for($i=1; $i<$len; $i++){\n        if($arr[$i] < $min) return false;\n  \
    \      $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnphtkuow.php:37\n\
    Stack trace:\n#0 /tmp/tmpnphtkuow.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpnphtkuow.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $count = count($arr);\n  $min = $arr[0];\n\
    \  for($i=1; $i<$count; $i++) {\n    if($arr[$i]<$min) return false;\n    $min\
    \ = min($min, $arr[$i]);\n  }\n  return true;\n}\necho move_one_ball([3, 4, 5,\
    \ 1, 2]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]) . \"\\n\";\necho move_one_ball([])\
    \ . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5]) . \"\\n\";\necho move_one_ball([5,\
    \ 4, 3, 2, 1]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\
    \ . \"\\n\";\necho move_one_ball([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) . \"\\n\";\n\
    echo move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20]) . \"\\n\";\necho move_one_ball([20, 19, 18, 17, 16, 15, 14, 13,\
    \ 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) . \"\\n\";\necho move_one_ball([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47, 48, 49, 50]) . \"\\n\";\necho move_one_ball([50, 49, 48,\
    \ 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34,\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmph683i5q4.php on line 42\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) {\n    return true;\n  }\n  $count = 0;\n  for ($i = 0;\
    \ $i < count($arr); $i++) {\n    if ($arr[$i] > $arr[$i + 1]) {\n      $count++;\n\
    \    }\n  }\n  if ($count > 1) {\n    return false;\n  }\n  return true;\n}\n\
    echo move_one_ball([3, 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1,\
    \ 2]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3]) . \"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2, 3, 4]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5])\
    \ . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6]) . \"\\n\";\necho\
    \ move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7]) . \"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2, 3, 4, 5, 6, 7, 8]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13]) .\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmpu5xehd_7.php on line 49\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $arr_length = count($arr);\n\
    \  $min = $arr[0];\n  $max = $arr[0];\n  for($i = 1; $i < $arr_length; $i++){\n\
    \    if($arr[$i] < $min){\n      $min = $arr[$i];\n    }\n    if($arr[$i] > $max){\n\
    \      $max = $arr[$i];\n    }\n  }\n  if($min == $max){\n    return true;\n \
    \ }\n  return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp17yo60un.php:47\n\
    Stack trace:\n#0 /tmp/tmp17yo60un.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp17yo60un.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $len = count($arr);\n    if ($len == 0) {\n        return True;\n   \
    \ }\n    $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return False;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return True;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_g185zs6.php:41\n\
    Stack trace:\n#0 /tmp/tmp_g185zs6.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp_g185zs6.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (empty($arr)) {\n        return true;\n    }\n    $count = count($arr);\n\
    \    $i = 0;\n    $j = $count - 1;\n    while ($i < $j) {\n        if ($arr[$i]\
    \ > $arr[$i + 1]) {\n            $temp = $arr[$i];\n            $arr[$i] = $arr[$i\
    \ + 1];\n            $arr[$i + 1] = $temp;\n            $i++;\n        } else\
    \ {\n            $temp = $arr[$j];\n            $arr[$j] = $arr[$j - 1];\n   \
    \         $arr[$j - 1] = $temp;\n            $j--;\n        }\n    }\n    if ($arr\
    \ == sort($arr)) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4kgi0j56.php:55\n\
    Stack trace:\n#0 /tmp/tmp4kgi0j56.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp4kgi0j56.php\
    \ on line 55\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $count = count($arr);\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++){\n        if($arr[$i]\
    \ < $min){\n            return false;\n        }\n        $min = $arr[$i];\n \
    \   }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeverf421.php:41\n\
    Stack trace:\n#0 /tmp/tmpeverf421.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpeverf421.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $count = count($arr);\n  $min = $arr[0];\n\
    \  for($i=1; $i<$count; $i++) {\n    if($arr[$i] < $min) return false;\n    $min\
    \ = min($min, $arr[$i]);\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuap4xusv.php:37\n\
    Stack trace:\n#0 /tmp/tmpuap4xusv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpuap4xusv.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $count = 0;\n  for($i = 0; $i\
    \ < count($arr); $i++){\n    if($arr[$i] > $arr[$i+1]){\n      $count++;\n   \
    \ }\n  }\n  if($count > 1){\n    return false;\n  }\n  return true;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]) . PHP_EOL;\necho move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL;\necho\
    \ move_one_ball([]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5]) . PHP_EOL;\n\
    echo move_one_ball([5, 4, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 5,\
    \ 4]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) . PHP_EOL;\n\
    echo move_one_ball([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) . PHP_EOL;\necho move_one_ball([11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12]) . PHP_EOL;\necho move_one_ball([12, 11, 10, 9, 8, 7, 6, 5,\
    \ 4, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13]) . PHP_EOL;\necho move_one_ball([13, 12, 11, 10, 9, 8, 7, 6, 5\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmpn4wrjgt7.php on line 50\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(count($arr)<=1) return true;\n    $min = $arr[0];\n    for($i=1;$i<count($arr);$i++){\n\
    \        if($arr[$i]<$min) return false;\n        $min = min($min,$arr[$i]);\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxiha0v6_.php:36\n\
    Stack trace:\n#0 /tmp/tmpxiha0v6_.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpxiha0v6_.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $arr_len = count($arr);\n\
    \    $min = $arr[0];\n    $min_index = 0;\n    for($i=1; $i<$arr_len; $i++){\n\
    \        if($arr[$i] < $min){\n            $min = $arr[$i];\n            $min_index\
    \ = $i;\n        }\n    }\n    if($min_index == 0){\n        return true;\n  \
    \  }\n    for($i=0; $i<$min_index; $i++){\n        if($arr[$i] > $arr[$i+1]){\n\
    \            return false;\n        }\n    }\n    for($i=$min_index; $i<$arr_len-1;\
    \ $i++){\n        if($arr[$i] > $arr[$i+1]){\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpywac6am2.php:55\n\
    Stack trace:\n#0 /tmp/tmpywac6am2.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpywac6am2.php\
    \ on line 55\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $count = count($arr);\n  if($count == 0) return True;\n  $min = $arr[0];\n\
    \  for($i = 1; $i < $count; $i++) {\n    if($arr[$i] < $min) return False;\n \
    \   $min = min($min, $arr[$i]);\n  }\n  return True;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]);\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk2fjrb8w.php:39\n\
    Stack trace:\n#0 /tmp/tmpk2fjrb8w.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpk2fjrb8w.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return True;\n    $count = 0;\n    $len = count($arr);\n\
    \    for($i=0; $i<$len; $i++){\n        if($arr[$i]>$arr[$i+1]){\n           \
    \ $count++;\n        }\n    }\n    if($count>1) return False;\n    return True;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 5 in /tmp/tmpyma4x0og.php on line 26\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyma4x0og.php:39\n\
    Stack trace:\n#0 /tmp/tmpyma4x0og.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpyma4x0og.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $count=0;\n    $min=min($arr);\n\
    \    $max=max($arr);\n    $key=array_search($min,$arr);\n    $key1=array_search($max,$arr);\n\
    \    if($key1==0){\n        $count++;\n    }\n    if($key==count($arr)-1){\n \
    \       $count++;\n    }\n    if($count==2){\n        return true;\n    }\n  \
    \  return false;\n}\necho move_one_ball([3, 4, 5, 1, 2]);\necho \"\\n\";\necho\
    \ move_one_ball([3, 5, 4, 1, 2]);\necho \"\\n\";\necho move_one_ball([3, 4, 5,\
    \ 1, 2, 6]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 6]);\necho \"\\\
    n\";\necho move_one_ball([3, 4, 5, 1, 2, 6, 7]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2, 6, 7]);\necho \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 6, 7,\
    \ 8]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 6, 7, 8]);\necho \"\\\
    n\";\necho move_one_ball([3, 4, 5, 1, 2, 6, 7, 8, 9]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2, 6, 7, 8, 9]);\necho \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2,\
    \ 6, 7, 8, 9, 10]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 6, 7, 8,\
    \ 9, 10]);\necho \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 6, 7, 8, 9, 10,\
    \ 11]);\necho \"\\n\";\necho move_one_ball([3,\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmpcdp3x6k8.php on line 68\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) return true;\n  $sorted = $arr;\n  sort($sorted);\n  $count\
    \ = 0;\n  while ($arr != $sorted) {\n    $last = array_pop($arr);\n    array_unshift($arr,\
    \ $last);\n    $count++;\n    if ($count > count($arr)) return false;\n  }\n \
    \ return true;\n}\necho move_one_ball([3, 4, 5, 1, 2]) . PHP_EOL;\necho move_one_ball([3,\
    \ 5, 4, 1, 2]) . PHP_EOL;\necho move_one_ball([]) . PHP_EOL;\necho move_one_ball([1,\
    \ 2, 3, 4, 5]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5, 6]) . PHP_EOL;\n\
    echo move_one_ball([1, 2, 3, 4, 5, 6, 7]) . PHP_EOL;\necho move_one_ball([1, 2,\
    \ 3, 4, 5, 6, 7, 8]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9])\
    \ . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) . PHP_EOL;\n\
    echo move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) . PHP_EOL;\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) . PHP_EOL;\necho move_one_ball([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) . PHP_EOL;\necho move_one_ball([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) . PHP_EOL;\necho move_one_ball([1, 2,\
    \ 3, 4, 5, 6, 7, 8\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmpq_gm0ehj.php on line 48\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return True;\n  }\n  $count = 0;\n  for($i=0; $i<count($arr)-1;\
    \ $i++){\n    if($arr[$i]>$arr[$i+1]){\n      $count++;\n    }\n  }\n  if($count>1){\n\
    \    return False;\n  }\n  return True;\n}\n\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $arr_sorted = $arr;\n  sort($arr_sorted);\n\
    \  $arr_sorted = array_values($arr_sorted);\n  $arr_sorted = array_reverse($arr_sorted);\n\
    \  $arr_sorted = array_values($arr_sorted);\n  $arr_sorted = array_reverse($arr_sorted);\n\
    \  $arr_sorted = array_values($arr_sorted);\n  $arr_sorted = array_reverse($arr_sorted);\n\
    \  $arr_sorted = array_values($arr_sorted);\n  $arr_sorted = array_reverse($arr_sorted);\n\
    \  $arr_sorted = array_values($arr_sorted);\n  $arr_sorted = array_reverse($arr_sorted);\n\
    \  $arr_sorted = array_values($arr_sorted);\n  $arr_sorted = array_reverse($arr_sorted);\n\
    \  $arr_sorted = array_values($arr_sorted);\n  $arr_sorted = array_reverse($arr_sorted);\n\
    \  $arr_sorted = array_values($arr_sorted);\n  $arr_sorted = array_reverse($arr_sorted);\n\
    \  $arr_sorted = array_values($arr_sorted);\n  $arr_sorted = array_reverse($arr_sorted);\n\
    \  $arr_sorted = array_values($arr_sorted);\n  $arr_sorted = array_reverse($arr_sorted);\n\
    \  $arr_sorted = array_values($arr_sorted);\n  $arr_sorted = array_reverse($arr_sorted);\n\
    \  $arr_sorted = array_values($arr_sorted);\n  $arr_sorted = array_reverse($arr_sorted);\n\
    \  $arr_sorted = array_values($arr_sorted);\n  $arr_sorted = array_reverse($arr_sorted);\n\
    \  $arr_sorted = array_values($arr_sorted);\n  $arr_sorted = array_reverse($arr_sorted\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \")\" in /tmp/tmpsdt4xsl2.php on line 55\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $n = count($arr);\n  $i = 0;\n  while($i\
    \ < $n - 1) {\n    if($arr[$i] > $arr[$i + 1]) {\n      $temp = $arr[$i];\n  \
    \    $arr[$i] = $arr[$i + 1];\n      $arr[$i + 1] = $temp;\n      $i = 0;\n  \
    \  } else {\n      $i++;\n    }\n  }\n  if($arr == range(min($arr), max($arr)))\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]) . PHP_EOL;\necho move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzpo_wn1x.php:49\n\
    Stack trace:\n#0 /tmp/tmpzpo_wn1x.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpzpo_wn1x.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $sorted = $arr;\n  sort($sorted);\n  $count\
    \ = 0;\n  for($i=0; $i<count($arr); $i++) {\n    if($arr[$i] == $sorted[$i]) $count++;\n\
    \  }\n  return $count == count($arr) ? true : false;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]) . PHP_EOL;\necho move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL;\necho\
    \ move_one_ball([]) . PHP_EOL;\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpypyzmmc1.php:39\n\
    Stack trace:\n#0 /tmp/tmpypyzmmc1.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpypyzmmc1.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $count = count($arr);\n\
    \    $temp = $arr[$count-1];\n    for($i=$count-1;$i>0;$i--){\n        $arr[$i]\
    \ = $arr[$i-1];\n    }\n    $arr[0] = $temp;\n    for($i=0;$i<$count-1;$i++){\n\
    \        if($arr[$i]>$arr[$i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp73n10ism.php:44\n\
    Stack trace:\n#0 /tmp/tmp73n10ism.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp73n10ism.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return True;\n    }\n    $count = 0;\n    $min\
    \ = $arr[0];\n    for($i = 1; $i < count($arr); $i++){\n        if($arr[$i] <\
    \ $min){\n            $count++;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return $count <= 1;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpf0i0qwii.php:44\n\
    Stack trace:\n#0 /tmp/tmpf0i0qwii.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpf0i0qwii.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $count = count($arr);\n  $i = 0;\n  $j = $count - 1;\n  $k = 0;\n  while\
    \ ($i < $j) {\n    if ($arr[$i] > $arr[$i + 1]) {\n      $k = $i + 1;\n      while\
    \ ($k < $j) {\n        if ($arr[$k] > $arr[$k + 1]) {\n          return false;\n\
    \        }\n        $k++;\n      }\n      if ($arr[$i] <= $arr[$j]) {\n      \
    \  return true;\n      }\n      return false;\n    }\n    $i++;\n  }\n  return\
    \ true;\n}\necho move_one_ball([3, 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5]) . \"\\n\";\necho\
    \ move_one_ball([5, 4, 3, 2, 1]) . \"\\n\";\necho move_one_ball([1, 2, 3, 5, 4])\
    \ . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\
    \ 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\
    \ 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\
    \ 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,\
    \ 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,\
    \ 108, 109, 110, 111, 112, 113, 114, 115\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmp166psg6q.php on line 50\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $count = 0;\n  $len = count($arr);\n  for($i\
    \ = 0; $i < $len; $i++) {\n    if($arr[$i] > $arr[$i+1]) {\n      $count++;\n\
    \    }\n  }\n  if($count > 1) {\n    return false;\n  } else {\n    return true;\n\
    \  }\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 5 in /tmp/tmpepv_obxg.php on line 26\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpepv_obxg.php:42\n\
    Stack trace:\n#0 /tmp/tmpepv_obxg.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpepv_obxg.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return true;\n    $count = 0;\n    for($i=0; $i<count($arr)-1;\
    \ $i++){\n        if($arr[$i]>$arr[$i+1]){\n            $count++;\n        }\n\
    \    }\n    if($count>1) return false;\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $sorted = $arr;\n  sort($sorted);\n\
    \  $count = 0;\n  for($i = 0; $i < count($arr); $i++){\n    if($arr[$i] != $sorted[$i]){\n\
    \      $count++;\n    }\n  }\n  if($count > 1){\n    return false;\n  }\n  return\
    \ true;\n}\necho move_one_ball([3, 4, 5, 1, 2]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2]);\necho \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5]);\necho \"\\\
    n\";\necho move_one_ball([5, 4, 3, 2, 1]);\necho \"\\n\";\necho move_one_ball([5,\
    \ 4, 3, 1, 2]);\necho \"\\n\";\necho move_one_ball([1, 2, 3, 5, 4]);\necho \"\\\
    n\";\necho move_one_ball([1, 2, 3, 4, 5, 6]);\necho \"\\n\";\necho move_one_ball([6,\
    \ 5, 4, 3, 2, 1]);\necho \"\\n\";\necho move_one_ball([6, 5, 4, 3, 1, 2]);\necho\
    \ \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7]);\necho \"\\n\";\necho move_one_ball([7,\
    \ 6, 5, 4, 3, 2, 1]);\necho \"\\n\";\necho move_one_ball([7, 6, 5, 4, 3, 1, 2]);\n\
    echo \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8]);\necho \"\\n\";\n\
    echo move_one_ball([8, 7, 6, 5, 4, 3, 2, 1]);\necho \"\\n\";\necho move_one_ball([8,\
    \ 7, 6, 5, 4, 3, 1, 2]);\necho \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6,\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmpwnzvosy3.php on line 69\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $n = count($arr);\n  $i = 0;\n  while($i\
    \ < $n - 1) {\n    if($arr[$i] > $arr[$i + 1]) {\n      $temp = $arr[$i];\n  \
    \    $arr[$i] = $arr[$i + 1];\n      $arr[$i + 1] = $temp;\n      $i = 0;\n  \
    \  } else {\n      $i++;\n    }\n  }\n  return $arr == range(min($arr), max($arr));\n\
    }\necho move_one_ball([3, 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3, 5, 4,\
    \ 1, 2]) . \"\\n\";\necho move_one_ball([]) . \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5]) . \"\\n\";\necho move_one_ball([5, 4, 3, 2, 1]) . \"\\n\";\necho\
    \ move_one_ball([1, 2, 3, 5, 4]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10]) . \"\\n\";\necho move_one_ball([10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\
    \ 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\
    \ 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\
    \ 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmpo5cjwvt2.php on line 46\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (empty($arr)) {\n        return true;\n    }\n    $count = count($arr);\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = $arr[$i];\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxej4y_jv.php:41\n\
    Stack trace:\n#0 /tmp/tmpxej4y_jv.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpxej4y_jv.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $sorted = $arr;\n  sort($sorted);\n\
    \  $count = 0;\n  for($i = 0; $i < count($arr); $i++){\n    if($arr[$i] == $sorted[$i]){\n\
    \      $count++;\n    }\n  }\n  if($count == count($arr)){\n    return true;\n\
    \  }\n  return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpl5s718hz.php:44\n\
    Stack trace:\n#0 /tmp/tmpl5s718hz.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpl5s718hz.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return true;\n    $count = count($arr);\n    $min = $arr[0];\n\
    \    for($i=1; $i<$count; $i++){\n        if($arr[$i]<$min) return false;\n  \
    \      $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt1lj2o9k.php:37\n\
    Stack trace:\n#0 /tmp/tmpt1lj2o9k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpt1lj2o9k.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $sorted = $arr;\n  sort($sorted);\n\
    \  $count = 0;\n  for($i = 0; $i < count($arr); $i++){\n    if($arr[$i] != $sorted[$i]){\n\
    \      $count++;\n    }\n  }\n  if($count > 1){\n    return false;\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyrtqnc8r.php:44\n\
    Stack trace:\n#0 /tmp/tmpyrtqnc8r.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpyrtqnc8r.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(count($arr) == 0) return true;\n  $min = $arr[0];\n  for($i = 1; $i\
    \ < count($arr); $i++) {\n    if($arr[$i] < $min) return false;\n    $min = min($min,\
    \ $arr[$i]);\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq672j7su.php:36\n\
    Stack trace:\n#0 /tmp/tmpq672j7su.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpq672j7su.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $min = min($arr);\n  $max =\
    \ max($arr);\n  $min_index = array_search($min, $arr);\n  $max_index = array_search($max,\
    \ $arr);\n  if($min_index == 0){\n    return true;\n  }\n  if($max_index == count($arr)-1){\n\
    \    return true;\n  }\n  return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5a6jgi96.php:43\n\
    Stack trace:\n#0 /tmp/tmp5a6jgi96.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp5a6jgi96.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(count($arr)==0) return True;\n  $min = min($arr);\n  $min_index = array_search($min,\
    \ $arr);\n  $max = max($arr);\n  $max_index = array_search($max, $arr);\n  if($min_index==0\
    \ && $max_index==count($arr)-1) return True;\n  else return False;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]).\"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]).\"\\n\";\necho move_one_ball([]).\"\
    \\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6aobp2c6.php:38\n\
    Stack trace:\n#0 /tmp/tmp6aobp2c6.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6aobp2c6.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $count = 0;\n    $min\
    \ = $arr[0];\n    for($i = 1; $i < count($arr); $i++){\n        if($arr[$i] <\
    \ $min){\n            $count++;\n        }\n        if($count > 1){\n        \
    \    return false;\n        }\n        $min = min($min, $arr[$i]);\n    }\n  \
    \  return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph2yaum4t.php:47\n\
    Stack trace:\n#0 /tmp/tmph2yaum4t.php(51): test()\n#1 {main}\n  thrown in /tmp/tmph2yaum4t.php\
    \ on line 47\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return True;\n  }\n  $count = count($arr);\n  $min\
    \ = min($arr);\n  $min_index = array_search($min, $arr);\n  $max = max($arr);\n\
    \  $max_index = array_search($max, $arr);\n  if($min_index == 0){\n    return\
    \ True;\n  }\n  if($max_index == $count-1){\n    return True;\n  }\n  if($min_index\
    \ > $max_index){\n    return True;\n  }\n  return False;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn0ya3kly.php:49\n\
    Stack trace:\n#0 /tmp/tmpn0ya3kly.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpn0ya3kly.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $sorted = $arr;\n  sort($sorted);\n  $count\
    \ = 0;\n  while($arr != $sorted) {\n    $last = array_pop($arr);\n    array_unshift($arr,\
    \ $last);\n    $count++;\n    if($count > count($arr)) return false;\n  }\n  return\
    \ true;\n}\necho move_one_ball([3, 4, 5, 1, 2]) . PHP_EOL;\necho move_one_ball([3,\
    \ 5, 4, 1, 2]) . PHP_EOL;\necho move_one_ball([]) . PHP_EOL;\necho move_one_ball([1,\
    \ 2, 3, 4, 5]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 5, 4]) . PHP_EOL;\necho\
    \ move_one_ball([1, 2, 3, 4, 5, 6]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 5,\
    \ 4, 6]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5, 6, 7]) . PHP_EOL;\necho\
    \ move_one_ball([1, 2, 3, 5, 4, 6, 7]) . PHP_EOL;\necho move_one_ball([1, 2, 3,\
    \ 4, 5, 6, 7, 8]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 5, 4, 6, 7, 8]) . PHP_EOL;\n\
    echo move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9]) . PHP_EOL;\necho move_one_ball([1,\
    \ 2, 3, 5, 4, 6, 7, 8, 9]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 5, 4, 6, 7, 8, 9, 10]) .\
    \ PHP_EOL;\necho move_one\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \",\" or \";\" in /tmp/tmp4qpmwrql.php on line 50\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $count = 0;\n    for($i\
    \ = 0; $i < count($arr); $i++){\n        if($arr[$i] > $arr[$i+1]){\n        \
    \    $count++;\n        }\n    }\n    if($count == 1){\n        return true;\n\
    \    }\n    return false;\n}\necho move_one_ball([3, 4, 5, 1, 2]);\necho move_one_ball([3,\
    \ 5, 4, 1, 2]);\necho move_one_ball([3, 5, 4, 1, 2, 3]);\necho move_one_ball([3,\
    \ 5, 4, 1, 2, 3, 4]);\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5]);\necho move_one_ball([3,\
    \ 5, 4, 1, 2, 3, 4, 5, 6]);\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7]);\n\
    echo move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8]);\necho move_one_ball([3,\
    \ 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\necho move_one_ball([3, 5, 4, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10]);\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]);\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\n\
    echo move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]);\necho\
    \ move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]);\necho\
    \ move_one_ball([\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmptat2or85.php on line 51\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $count = count($arr);\n  $min = $arr[0];\n\
    \  for($i=1; $i<$count; $i++) {\n    if($arr[$i] < $min) return false;\n    $min\
    \ = min($min, $arr[$i]);\n  }\n  return true;\n}\necho move_one_ball([3, 4, 5,\
    \ 1, 2]) . PHP_EOL;\necho move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL;\necho move_one_ball([])\
    \ . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5]) . PHP_EOL;\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5, 6, 7]) . PHP_EOL;\n\
    echo move_one_ball([1, 2, 3, 4, 5, 6, 7, 8]) . PHP_EOL;\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\
    \ . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) . PHP_EOL;\n\
    echo move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) . PHP_EOL;\necho\
    \ move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) . PHP_EOL;\n\
    echo move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmp_37ofdw1.php on line 45\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return True;\n  $min = min($arr);\n  $max = max($arr);\n\
    \  $min_index = array_search($min, $arr);\n  $max_index = array_search($max, $arr);\n\
    \  if($min_index == 0 && $max_index == count($arr)-1) return True;\n  return False;\n\
    }\necho move_one_ball([3, 4, 5, 1, 2]) . PHP_EOL;\necho move_one_ball([3, 5, 4,\
    \ 1, 2]) . PHP_EOL;\necho move_one_ball([]) . PHP_EOL;\necho move_one_ball([1,\
    \ 2, 3, 4, 5]) . PHP_EOL;\necho move_one_ball([5, 4, 3, 2, 1]) . PHP_EOL;\necho\
    \ move_one_ball([1, 2, 3, 4, 5, 6]) . PHP_EOL;\necho move_one_ball([6, 5, 4, 3,\
    \ 2, 1]) . PHP_EOL;\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n1\n\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg54nttxw.php:42\n\
    Stack trace:\n#0 /tmp/tmpg54nttxw.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpg54nttxw.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $max = max($arr);\n  $min =\
    \ min($arr);\n  $max_index = array_search($max, $arr);\n  $min_index = array_search($min,\
    \ $arr);\n  if($max_index > $min_index){\n    return false;\n  }\n  return true;\n\
    }\necho move_one_ball([3, 4, 5, 1, 2]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2]);\necho \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3]);\necho\
    \ \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 4, 5, 1, 2, 3, 4]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4]);\n\
    echo \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5]);\necho \"\\n\";\n\
    echo move_one_ball([3, 5, 4, 1, 2, 3, 4, 5]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 4, 5, 1, 2, 3, 4, 5, 6]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2,\
    \ 3, 4, 5, 6]);\necho \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6,\
    \ 7]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7]);\necho\
    \ \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8]);\necho \"\\\
    n\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8]);\necho \"\\n\";\n\
    echo move_one_ball([3, 4\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmpnsz9jsmx.php on line 63\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) {\n    return true;\n  }\n  $count = 0;\n  $min = $arr[0];\n\
    \  for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] < $min) {\n      $count++;\n\
    \    }\n    $min = min($min, $arr[$i]);\n  }\n  return $count <= 1;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]) . \"\\n\";\necho\
    \ move_one_ball([1, 2, 3, 4, 5]) . \"\\n\";\necho move_one_ball([5, 4, 3, 2, 1])\
    \ . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6]) . \"\\n\";\necho move_one_ball([6,\
    \ 5, 4, 3, 2, 1]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7]) . \"\\\
    n\";\necho move_one_ball([7, 6, 5, 4, 3, 2, 1]) . \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7, 8]) . \"\\n\";\necho move_one_ball([8, 7, 6, 5, 4, 3, 2, 1])\
    \ . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9]) . \"\\n\";\necho\
    \ move_one_ball([9, 8, 7, 6, 5, 4, 3, 2, 1]) . \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) . \"\\n\";\necho move_one_ball([10, 9, 8, 7, 6,\
    \ 5, 4, 3, 2, 1]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) . \"\\n\";\necho move_one_ball\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \",\" or \";\" in /tmp/tmpjsrmt9vj.php on line 51\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) {\n    return true;\n  }\n  $len = count($arr);\n  $min\
    \ = $arr[0];\n  for ($i = 1; $i < $len; $i++) {\n    if ($arr[$i] < $min) {\n\
    \      return false;\n    }\n    $min = min($min, $arr[$i]);\n  }\n  return true;\n\
    }\necho move_one_ball([3, 4, 5, 1, 2]) . PHP_EOL;\necho move_one_ball([3, 5, 4,\
    \ 1, 2]) . PHP_EOL;\necho move_one_ball([]) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsgk43ecx.php:43\n\
    Stack trace:\n#0 /tmp/tmpsgk43ecx.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpsgk43ecx.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $count = 0;\n    for($i\
    \ = 0; $i < count($arr); $i++){\n        if($arr[$i] > $arr[$i+1]){\n        \
    \    $count++;\n        }\n    }\n    if($count > 1){\n        return false;\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 5 in /tmp/tmpbwn1z2z6.php on line 27\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbwn1z2z6.php:42\n\
    Stack trace:\n#0 /tmp/tmpbwn1z2z6.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpbwn1z2z6.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $min = min($arr);\n\
    \    $min_index = array_search($min, $arr);\n    $max = max($arr);\n    $max_index\
    \ = array_search($max, $arr);\n    if($min_index == 0 && $max_index == count($arr)-1){\n\
    \        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfdw3fkwq.php:40\n\
    Stack trace:\n#0 /tmp/tmpfdw3fkwq.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpfdw3fkwq.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) {\n    return true;\n  }\n  $min = $arr[0];\n  $max =\
    \ $arr[0];\n  for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] < $min)\
    \ {\n      $min = $arr[$i];\n    }\n    if ($arr[$i] > $max) {\n      $max = $arr[$i];\n\
    \    }\n  }\n  if ($min == $max) {\n    return true;\n  }\n  return false;\n}\n\
    echo move_one_ball([3, 4, 5, 1, 2]) . PHP_EOL;\necho move_one_ball([3, 5, 4, 1,\
    \ 2]) . PHP_EOL;\necho move_one_ball([3, 3, 3, 3, 3]) . PHP_EOL;\necho move_one_ball([])\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxydg35c9.php:49\n\
    Stack trace:\n#0 /tmp/tmpxydg35c9.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpxydg35c9.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $count = count($arr);\n  $min = $arr[0];\n\
    \  for($i=1; $i<$count; $i++) {\n    if($arr[$i] < $min) return false;\n    $min\
    \ = min($min, $arr[$i]);\n  }\n  return true;\n}\necho move_one_ball([3, 4, 5,\
    \ 1, 2]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]);\necho \"\\n\";\n\
    echo move_one_ball([3, 3, 3, 3, 3]);\necho \"\\n\";\necho move_one_ball([3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmpmc1yzzbz.php on line 38\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $count = count($arr);\n  $min = $arr[0];\n\
    \  for($i=1; $i<$count; $i++) {\n    if($arr[$i] < $min) return false;\n    $min\
    \ = min($min, $arr[$i]);\n  }\n  return true;\n}\necho move_one_ball([3, 4, 5,\
    \ 1, 2]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]);\necho \"\\n\";\n\
    echo move_one_ball([1, 2, 3, 4, 5]);\necho \"\\n\";\necho move_one_ball([5, 4,\
    \ 3, 2, 1]);\necho \"\\n\";\necho move_one_ball([]);\necho \"\\n\";\necho move_one_ball([1]);\n\
    echo \"\\n\";\necho move_one_ball([1, 1, 1, 1, 1]);\necho \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100]);\necho \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmp9iyskjd_.php on line 48\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $count = 0;\n    for($i\
    \ = 0; $i < count($arr); $i++){\n        if($arr[$i] > $arr[$i+1]){\n        \
    \    $count++;\n        }\n    }\n    if($count > 1){\n        return false;\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 5 in /tmp/tmpp9iivyq2.php on line 27\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpp9iivyq2.php:42\n\
    Stack trace:\n#0 /tmp/tmpp9iivyq2.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpp9iivyq2.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $count = count($arr);\n\
    \    for($i=0;$i<$count;$i++){\n        $arr[] = $arr[$i];\n    }\n    for($i=0;$i<$count;$i++){\n\
    \        $temp = $arr[$i];\n        for($j=$i+1;$j<$count+$i;$j++){\n        \
    \    if($temp>$arr[$j]){\n                return false;\n            }\n     \
    \   }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjqgat0q_.php:45\n\
    Stack trace:\n#0 /tmp/tmpjqgat0q_.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpjqgat0q_.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $len = count($arr);\n  if ($len == 0) return true;\n  $min = $arr[0];\n\
    \  for ($i = 1; $i < $len; $i++) {\n    if ($arr[$i] < $min) return false;\n \
    \   $min = min($min, $arr[$i]);\n  }\n  return true;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]) . \"\\n\";\necho\
    \ move_one_ball([]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5]) . \"\\n\"\
    ;\necho move_one_ball([5, 4, 3, 2, 1]) . \"\\n\";\necho move_one_ball([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10]) . \"\\n\";\necho move_one_ball([10, 9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20]) . \"\\n\";\necho move_one_ball([20, 19,\
    \ 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) . \"\\n\";\n\
    echo move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\
    \ 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) . \"\\n\";\necho move_one_ball([50,\
    \ 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34,\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmplypxvosu.php on line 42\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $len = count($arr);\n    if ($len == 0) return true;\n    $min = $arr[0];\n\
    \    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) return false;\n\
    \        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp24svw0du.php:37\n\
    Stack trace:\n#0 /tmp/tmp24svw0du.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp24svw0du.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $len = count($arr);\n    if ($len == 0) return true;\n    $min = $arr[0];\n\
    \    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) return false;\n\
    \        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpiye9fxor.php:37\n\
    Stack trace:\n#0 /tmp/tmpiye9fxor.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpiye9fxor.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) return true;\n  $count = count($arr);\n  $i = 0;\n  while\
    \ ($i < $count) {\n    if ($arr[$i] > $arr[$i + 1]) {\n      $temp = $arr[$i];\n\
    \      $arr[$i] = $arr[$i + 1];\n      $arr[$i + 1] = $temp;\n      $i = 0;\n\
    \    } else {\n      $i++;\n    }\n  }\n  return $arr == range(min($arr), max($arr));\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 5 in /tmp/tmp9ge_9boy.php on line 26\n\
    PHP Warning:  Undefined array key 5 in /tmp/tmp9ge_9boy.php on line 28\nPHP Warning:\
    \  Undefined array key 5 in /tmp/tmp9ge_9boy.php on line 26\nPHP Warning:  Undefined\
    \ array key 5 in /tmp/tmp9ge_9boy.php on line 28\nPHP Fatal error:  Uncaught Exception:\
    \ Test failed! in /tmp/tmp9ge_9boy.php:44\nStack trace:\n#0 /tmp/tmp9ge_9boy.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9ge_9boy.php on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $arr_len = count($arr);\n  if ($arr_len == 0) {\n    return true;\n  }\n\
    \  $min = $arr[0];\n  $max = $arr[0];\n  for ($i = 1; $i < $arr_len; $i++) {\n\
    \    if ($arr[$i] < $min) {\n      $min = $arr[$i];\n    }\n    if ($arr[$i] >\
    \ $max) {\n      $max = $arr[$i];\n    }\n  }\n  if ($min == $max) {\n    return\
    \ true;\n  }\n  return false;\n}\necho move_one_ball([3, 4, 5, 1, 2]) . PHP_EOL;\n\
    echo move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4,\
    \ 5]) . PHP_EOL;\necho move_one_ball([5, 4, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1,\
    \ 1, 1, 1, 1]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\
    \ . PHP_EOL;\necho move_one_ball([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) . PHP_EOL;\n\
    echo move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20]) . PHP_EOL;\necho move_one_ball([20, 19, 18, 17, 16, 15, 14, 13,\
    \ 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmpno5xq6ro.php on line 51\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $count = 0;\n  $len = count($arr);\n  for($i\
    \ = 0; $i < $len; $i++) {\n    if($arr[$i] > $arr[$i+1]) {\n      $count++;\n\
    \    }\n  }\n  if($count > 1) {\n    return false;\n  } else {\n    return true;\n\
    \  }\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 5 in /tmp/tmpj5hokdp6.php on line 26\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj5hokdp6.php:42\n\
    Stack trace:\n#0 /tmp/tmpj5hokdp6.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpj5hokdp6.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $sorted = $arr;\n  sort($sorted);\n  $count\
    \ = 0;\n  while($arr != $sorted) {\n    $last = array_pop($arr);\n    array_unshift($arr,\
    \ $last);\n    $count++;\n    if($count > count($arr)) return false;\n  }\n  return\
    \ true;\n}\necho move_one_ball([3, 4, 5, 1, 2]) . PHP_EOL;\necho move_one_ball([3,\
    \ 5, 4, 1, 2]) . PHP_EOL;\necho move_one_ball([]) . PHP_EOL;\necho move_one_ball([1,\
    \ 2, 3, 4, 5]) . PHP_EOL;\necho move_one_ball([5, 4, 3, 2, 1]) . PHP_EOL;\necho\
    \ move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) . PHP_EOL;\necho move_one_ball([10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) . PHP_EOL;\necho move_one_ball([20,\
    \ 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) . PHP_EOL;\n\
    echo move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\
    \ 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) . PHP_EOL;\necho move_one_ball([50,\
    \ 49, 48, 47\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmpoxb6t3gv.php on line 45\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $sorted = $arr;\n  sort($sorted);\n  $count\
    \ = 0;\n  while($arr != $sorted) {\n    $last = array_pop($arr);\n    array_unshift($arr,\
    \ $last);\n    $count++;\n    if($count > count($arr)) return false;\n  }\n  return\
    \ true;\n}\necho move_one_ball([3, 4, 5, 1, 2]) . PHP_EOL;\necho move_one_ball([3,\
    \ 5, 4, 1, 2]) . PHP_EOL;\necho move_one_ball([]) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "1\n\n1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return true;\n    $len = count($arr);\n    $min = $arr[0];\n\
    \    for($i=1; $i<$len; $i++){\n        if($arr[$i]<$min) return false;\n    \
    \    $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqmqsg6_8.php:37\n\
    Stack trace:\n#0 /tmp/tmpqmqsg6_8.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpqmqsg6_8.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $sorted = $arr;\n  sort($sorted);\n\
    \  $count = 0;\n  for($i = 0; $i < count($arr); $i++){\n    if($arr[$i] != $sorted[$i]){\n\
    \      $count++;\n    }\n  }\n  if($count > 1){\n    return false;\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk0ts0xnq.php:44\n\
    Stack trace:\n#0 /tmp/tmpk0ts0xnq.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpk0ts0xnq.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return true;\n    $count = count($arr);\n    $temp =\
    \ $arr[$count-1];\n    for($i = $count-1; $i > 0; $i--){\n        $arr[$i] = $arr[$i-1];\n\
    \    }\n    $arr[0] = $temp;\n    $sorted = $arr;\n    sort($sorted);\n    if($arr\
    \ == $sorted) return true;\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptmomvwur.php:40\n\
    Stack trace:\n#0 /tmp/tmptmomvwur.php(47): test()\n#1 {main}\n  thrown in /tmp/tmptmomvwur.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return true;\n    $min = $arr[0];\n    for($i=1; $i<count($arr);\
    \ $i++){\n        if($arr[$i] < $min) return false;\n        $min = min($min,\
    \ $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n \
    \   return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpd5wnzvb9.php:36\n\
    Stack trace:\n#0 /tmp/tmpd5wnzvb9.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd5wnzvb9.php\
    \ on line 36\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $count = count($arr);\n\
    \    for($i=0;$i<$count;$i++){\n        if($arr[$i]>$arr[$i+1]){\n           \
    \ return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdwz1ne1k.php:39\n\
    Stack trace:\n#0 /tmp/tmpdwz1ne1k.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpdwz1ne1k.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (empty($arr)) {\n        return true;\n    }\n    $arr_length = count($arr);\n\
    \    $sorted_arr = $arr;\n    sort($sorted_arr);\n    for ($i = 0; $i < $arr_length;\
    \ $i++) {\n        if ($arr[$i] != $sorted_arr[$i]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\necho move_one_ball([3, 4, 5, 1, 2]) .\
    \ PHP_EOL;\necho move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL;\necho move_one_ball([])\
    \ . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5]) . PHP_EOL;\necho move_one_ball([5,\
    \ 4, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\
    \ . PHP_EOL;\necho move_one_ball([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) . PHP_EOL;\n\
    echo move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20]) . PHP_EOL;\necho move_one_ball([20, 19, 18, 17, 16, 15, 14, 13,\
    \ 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47, 48, 49, 50]) . PHP_EOL;\necho move_one\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \",\" or \";\" in /tmp/tmpnkepna8a.php on line 46\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $count = count($arr);\n  $min = $arr[0];\n\
    \  for($i=1; $i<$count; $i++) {\n    if($arr[$i] < $min) return false;\n    $min\
    \ = min($min, $arr[$i]);\n  }\n  return true;\n}\necho move_one_ball([3, 4, 5,\
    \ 1, 2]) . PHP_EOL;\necho move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL;\necho move_one_ball([])\
    \ . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5]) . PHP_EOL;\necho move_one_ball([5,\
    \ 4, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\
    \ . PHP_EOL;\necho move_one_ball([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) . PHP_EOL;\n\
    echo move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20]) . PHP_EOL;\necho move_one_ball([20, 19, 18, 17, 16, 15, 14, 13,\
    \ 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47, 48, 49, 50]) . PHP_EOL;\necho move_one_ball([50, 49, 48,\
    \ 47, 46, 45, 44,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmpca_trezc.php on line 42\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $sorted = $arr;\n  sort($sorted);\n  $count\
    \ = count($arr);\n  for($i=0; $i<$count; $i++) {\n    if($arr[$i] != $sorted[$i])\
    \ return false;\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmps4wifgoo.php:37\n\
    Stack trace:\n#0 /tmp/tmps4wifgoo.php(44): test()\n#1 {main}\n  thrown in /tmp/tmps4wifgoo.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $count = 0;\n  $len = count($arr);\n  for($i\
    \ = 0; $i < $len; $i++) {\n    if($arr[$i] > $arr[$i+1]) {\n      $count++;\n\
    \    }\n  }\n  if($count > 1) {\n    return false;\n  }\n  return true;\n}\n\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 5 in /tmp/tmpky53ufd6.php on line 26\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpky53ufd6.php:41\n\
    Stack trace:\n#0 /tmp/tmpky53ufd6.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpky53ufd6.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $arr_length = count($arr);\n    if ($arr_length == 0) {\n        return\
    \ true;\n    }\n    $min_value = min($arr);\n    $min_index = array_search($min_value,\
    \ $arr);\n    $max_value = max($arr);\n    $max_index = array_search($max_value,\
    \ $arr);\n    if ($min_index == 0 && $max_index == $arr_length - 1) {\n      \
    \  return true;\n    }\n    if ($min_index == 0 && $max_index != $arr_length -\
    \ 1) {\n        return false;\n    }\n    if ($min_index != 0 && $max_index ==\
    \ $arr_length - 1) {\n        return false;\n    }\n    if ($min_index != 0 &&\
    \ $max_index != $arr_length - 1) {\n        return true;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp26tcdq4s.php:50\n\
    Stack trace:\n#0 /tmp/tmp26tcdq4s.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp26tcdq4s.php\
    \ on line 50\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $min = min($arr);\n  $max = max($arr);\n\
    \  $min_index = array_search($min, $arr);\n  $max_index = array_search($max, $arr);\n\
    \  if($min_index == 0 && $max_index == count($arr) - 1) return true;\n  if($min_index\
    \ == 0 && $max_index != count($arr) - 1) return false;\n  if($min_index != 0 &&\
    \ $max_index == count($arr) - 1) return true;\n  if($min_index != 0 && $max_index\
    \ != count($arr) - 1) return false;\n}\necho move_one_ball([3, 4, 5, 1, 2]) .\
    \ PHP_EOL;\necho move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL;\necho move_one_ball([])\
    \ . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5]) . PHP_EOL;\necho move_one_ball([5,\
    \ 4, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 5, 4]) . PHP_EOL;\necho\
    \ move_one_ball([5, 4, 3, 1, 2]) . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n1\n\n\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprxq9e3fn.php:44\n\
    Stack trace:\n#0 /tmp/tmprxq9e3fn.php(51): test()\n#1 {main}\n  thrown in /tmp/tmprxq9e3fn.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $count = 0;\n    $len\
    \ = count($arr);\n    for($i = 0; $i < $len; $i++){\n        if($arr[$i] > $arr[$i+1]){\n\
    \            $count++;\n        }\n    }\n    if($count > 1){\n        return\
    \ false;\n    }else{\n        return true;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 5 in /tmp/tmppyqbog_i.php on line 28\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppyqbog_i.php:44\n\
    Stack trace:\n#0 /tmp/tmppyqbog_i.php(51): test()\n#1 {main}\n  thrown in /tmp/tmppyqbog_i.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $count = 0;\n  $len = count($arr);\n\
    \  for($i = 0; $i < $len; $i++){\n    if($arr[$i] == $i + 1){\n      $count++;\n\
    \    }\n  }\n  if($count == $len){\n    return true;\n  }\n  return false;\n}\n\
    echo move_one_ball([3, 4, 5, 1, 2]);\necho \"\\n\";\necho move_one_ball([3, 5,\
    \ 4, 1, 2]);\necho \"\\n\";\necho move_one_ball([]);\necho \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5]);\necho \"\\n\";\necho move_one_ball([5, 4, 3, 2, 1]);\necho \"\\\
    n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\necho \"\\n\";\necho\
    \ move_one_ball([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]);\necho \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);\necho\
    \ \"\\n\";\necho move_one_ball([20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]);\necho \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50]);\necho \"\\n\";\necho move_one_ball([50, 49, 48, 47,\
    \ 46, 45\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmp836za2h2.php on line 58\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $count = 0;\n  for($i = 0; $i\
    \ < count($arr); $i++){\n    if($arr[$i] > $arr[$i+1]){\n      $count++;\n   \
    \ }\n  }\n  if($count > 1){\n    return false;\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 5 in /tmp/tmp0jw3oy8g.php on line 27\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0jw3oy8g.php:42\n\
    Stack trace:\n#0 /tmp/tmp0jw3oy8g.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp0jw3oy8g.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return True;\n  }\n  $len = count($arr);\n  $min\
    \ = $arr[0];\n  for($i=1;$i<$len;$i++){\n    if($arr[$i]<$min){\n      return\
    \ False;\n    }\n    $min = $arr[$i];\n  }\n  return True;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptyryplj6.php:41\n\
    Stack trace:\n#0 /tmp/tmptyryplj6.php(48): test()\n#1 {main}\n  thrown in /tmp/tmptyryplj6.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(count($arr) == 0) return true;\n    $min = $arr[0];\n    for($i =\
    \ 1; $i < count($arr); $i++) {\n        if($arr[$i] < $min) {\n            return\
    \ false;\n        }\n        $min = min($min, $arr[$i]);\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptla8lugb.php:38\n\
    Stack trace:\n#0 /tmp/tmptla8lugb.php(45): test()\n#1 {main}\n  thrown in /tmp/tmptla8lugb.php\
    \ on line 38\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return True;\n  }\n  $count = 0;\n  $len = count($arr);\n\
    \  for($i=0; $i<$len; $i++){\n    if($arr[$i]>$arr[$i+1]){\n      $count++;\n\
    \    }\n  }\n  if($count>1){\n    return False;\n  }\n  return True;\n}\n\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 5 in /tmp/tmpnyq61m9z.php on line 28\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnyq61m9z.php:43\n\
    Stack trace:\n#0 /tmp/tmpnyq61m9z.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpnyq61m9z.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (empty($arr)) {\n        return true;\n    }\n    $count = count($arr);\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = $arr[$i];\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvi044e09.php:41\n\
    Stack trace:\n#0 /tmp/tmpvi044e09.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpvi044e09.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return true;\n    $count = count($arr);\n    $temp =\
    \ $arr[0];\n    for($i=1; $i<$count; $i++){\n        if($arr[$i] < $temp){\n \
    \           return false;\n        }\n        $temp = $arr[$i];\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzwsmrs7x.php:39\n\
    Stack trace:\n#0 /tmp/tmpzwsmrs7x.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpzwsmrs7x.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(count($arr) == 0) {\n        return true;\n    }\n    $count = 0;\n\
    \    for($i = 0; $i < count($arr); $i++) {\n        if($arr[$i] > $arr[$i + 1])\
    \ {\n            $count++;\n        }\n    }\n    if($count > 1) {\n        return\
    \ false;\n    }\n    return true;\n}\necho move_one_ball([3, 4, 5, 1, 2]);\necho\
    \ move_one_ball([3, 5, 4, 1, 2]);\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 5 in /tmp/tmpprc0o4k8.php on line 27\n\
    PHP Warning:  Undefined array key 5 in /tmp/tmpprc0o4k8.php on line 27\nPHP Warning:\
    \  Undefined array key 5 in /tmp/tmpprc0o4k8.php on line 27\nPHP Fatal error:\
    \  Uncaught Exception: Test failed! in /tmp/tmpprc0o4k8.php:43\nStack trace:\n\
    #0 /tmp/tmpprc0o4k8.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpprc0o4k8.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return True;\n    $count = 0;\n    for($i=0; $i<count($arr)-1;\
    \ $i++){\n        if($arr[$i]>$arr[$i+1]){\n            $count++;\n        }\n\
    \    }\n    if($count>1) return False;\n    return True;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) {\n    return true;\n  }\n  $count = 0;\n  $min = $arr[0];\n\
    \  for ($i = 1; $i < count($arr); $i++) {\n    if ($arr[$i] < $min) {\n      $count++;\n\
    \    }\n    $min = min($min, $arr[$i]);\n  }\n  return $count <= 1;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]);\necho \"\\\
    n\";\necho move_one_ball([3, 4, 5, 1, 2, 3]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 4, 5, 1, 2, 3, 4]);\necho \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3, 4,\
    \ 5]);\necho \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6]);\necho\
    \ \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6, 7]);\necho \"\\n\"\
    ;\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8]);\necho \"\\n\";\necho\
    \ move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 4, 5, 1, 2, 3, 4, 5\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmpbytmalsh.php on line 60\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $len = count($arr);\n  if ($len == 0) {\n    return True;\n  }\n  $min\
    \ = $arr[0];\n  for ($i = 1; $i < $len; $i++) {\n    if ($arr[$i] < $min) {\n\
    \      return False;\n    }\n    $min = min($min, $arr[$i]);\n  }\n  return True;\n\
    }\necho move_one_ball([3, 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3, 5, 4,\
    \ 1, 2]) . \"\\n\";\necho move_one_ball([]) . \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5]) . \"\\n\";\necho move_one_ball([5, 4, 3, 2, 1]) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp8vwzc_8y.php:45\n\
    Stack trace:\n#0 /tmp/tmp8vwzc_8y.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp8vwzc_8y.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return true;\n    $count = count($arr);\n    $min = $arr[0];\n\
    \    for($i=1; $i<$count; $i++){\n        if($arr[$i] < $min) return false;\n\
    \        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpsmz8abbi.php:37\n\
    Stack trace:\n#0 /tmp/tmpsmz8abbi.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpsmz8abbi.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $count = count($arr);\n  if($count == 0) return true;\n  $min = $arr[0];\n\
    \  for($i = 1; $i < $count; $i++) {\n    if($arr[$i] < $min) return false;\n \
    \   $min = min($min, $arr[$i]);\n  }\n  return true;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]) . \"\\n\";\necho\
    \ move_one_ball([]) . \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgp64mke3.php:39\n\
    Stack trace:\n#0 /tmp/tmpgp64mke3.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpgp64mke3.php\
    \ on line 39\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) {\n    return true;\n  }\n  $count = count($arr);\n  $min\
    \ = $arr[0];\n  for($i = 1; $i < $count; $i++) {\n    if($arr[$i] < $min) {\n\
    \      return false;\n    }\n    $min = $arr[$i];\n  }\n  return true;\n}\n\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr19qnn75.php:41\n\
    Stack trace:\n#0 /tmp/tmpr19qnn75.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpr19qnn75.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $sorted = $arr;\n  sort($sorted);\n\
    \  $count = 0;\n  for($i = 0; $i < count($arr); $i++){\n    if($arr[$i] != $sorted[$i]){\n\
    \      $count++;\n    }\n  }\n  if($count > 1){\n    return false;\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5fd7k_6n.php:44\n\
    Stack trace:\n#0 /tmp/tmp5fd7k_6n.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp5fd7k_6n.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $min = $arr[0];\n  $max = $arr[0];\n  for($i=1;\
    \ $i<count($arr); $i++) {\n    if($arr[$i] < $min) {\n      $min = $arr[$i];\n\
    \    }\n    if($arr[$i] > $max) {\n      $max = $arr[$i];\n    }\n  }\n  if($min\
    \ == $max) return true;\n  return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4a847jla.php:42\n\
    Stack trace:\n#0 /tmp/tmp4a847jla.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp4a847jla.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $n = count($arr);\n  $min = $arr[0];\n\
    \  for($i=1; $i<$n; $i++) {\n    if($arr[$i] < $min) return false;\n    $min =\
    \ min($min, $arr[$i]);\n  }\n  return true;\n}\necho move_one_ball([3, 4, 5, 1,\
    \ 2]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]) . \"\\n\";\necho move_one_ball([])\
    \ . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5]) . \"\\n\";\necho move_one_ball([5,\
    \ 4, 3, 2, 1]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\
    \ . \"\\n\";\necho move_one_ball([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) . \"\\n\";\n\
    echo move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20]) . \"\\n\";\necho move_one_ball([20, 19, 18, 17, 16, 15, 14, 13,\
    \ 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) . \"\\n\";\necho move_one_ball([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47, 48, 49, 50]) . \"\\n\";\necho move_one_ball([50, 49, 48,\
    \ 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34,\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmpec2nxpzh.php on line 42\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $count = 0;\n  $len = count($arr);\n\
    \  for($i = 0; $i < $len; $i++){\n    if($arr[$i] > $arr[$i+1]){\n      $count++;\n\
    \    }\n  }\n  if($count > 1){\n    return false;\n  }\n  return true;\n}\n\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 5 in /tmp/tmpc35e43hs.php on line 28\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc35e43hs.php:43\n\
    Stack trace:\n#0 /tmp/tmpc35e43hs.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpc35e43hs.php\
    \ on line 43\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (empty($arr)) {\n        return true;\n    }\n    $count = count($arr);\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = $arr[$i];\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpe3sadm68.php:41\n\
    Stack trace:\n#0 /tmp/tmpe3sadm68.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpe3sadm68.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $count = 0;\n  $len = count($arr);\n  for($i\
    \ = 0; $i < $len; $i++) {\n    if($arr[$i] > $arr[$i+1]) {\n      $count++;\n\
    \    }\n  }\n  if($count > 1) {\n    return false;\n  }\n  return true;\n}\necho\
    \ move_one_ball([3, 4, 5, 1, 2]);\necho \"\\n\";\necho move_one_ball([3, 5, 4,\
    \ 1, 2]);\necho \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3]);\necho \"\\n\"\
    ;\necho move_one_ball([3, 4, 5, 1, 2, 3, 4]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 4, 5, 1, 2, 3, 4, 5]);\necho \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3,\
    \ 4, 5, 6]);\necho \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6, 7]);\n\
    echo \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8]);\necho \"\
    \\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\necho \"\\n\"\
    ;\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\necho \"\\n\"\
    ;\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\necho \"\\\
    n\";\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\n\
    echo \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6, 7\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmpo6_ff9vy.php on line 60\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return true;\n    $min = min($arr);\n    $max = max($arr);\n\
    \    $min_index = array_search($min, $arr);\n    $max_index = array_search($max,\
    \ $arr);\n    if($min_index == 0) return true;\n    if($max_index == count($arr)-1)\
    \ return true;\n    if($min_index < $max_index) return false;\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpx_a53_7s.php:40\n\
    Stack trace:\n#0 /tmp/tmpx_a53_7s.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpx_a53_7s.php\
    \ on line 40\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if (empty($arr)) {\n        return true;\n    }\n    $count = count($arr);\n\
    \    $start = $arr[0];\n    $end = $arr[$count - 1];\n    $start_index = 0;\n\
    \    $end_index = $count - 1;\n    for ($i = 1; $i < $count; $i++) {\n       \
    \ if ($arr[$i] < $start) {\n            $start = $arr[$i];\n            $start_index\
    \ = $i;\n        }\n        if ($arr[$i] > $end) {\n            $end = $arr[$i];\n\
    \            $end_index = $i;\n        }\n    }\n    if ($start_index == 0 &&\
    \ $end_index == $count - 1) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptl0k8763.php:51\n\
    Stack trace:\n#0 /tmp/tmptl0k8763.php(58): test()\n#1 {main}\n  thrown in /tmp/tmptl0k8763.php\
    \ on line 51\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $count = count($arr);\n  $min = min($arr);\n\
    \  $min_index = array_search($min, $arr);\n  $max = max($arr);\n  $max_index =\
    \ array_search($max, $arr);\n  if($min_index == 0 && $max_index == $count-1) return\
    \ true;\n  if($min_index == $count-1 && $max_index == 0) return true;\n  return\
    \ false;\n}\necho move_one_ball([3, 4, 5, 1, 2]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2]);\necho \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3]);\necho\
    \ \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3, 4]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 4, 5, 1, 2, 3, 4, 5]);\necho \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3,\
    \ 4, 5, 6]);\necho \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6, 7]);\n\
    echo \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8]);\necho \"\
    \\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\necho \"\\n\"\
    ;\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\necho \"\\n\"\
    ;\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\necho \"\\\
    n\";\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\n\
    echo \"\\n\";\necho move\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \",\" or \";\" in /tmp/tmpgp21fjdh.php on line 57\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) {\n    return True;\n  }\n  $count = 0;\n  for ($i = 0;\
    \ $i < count($arr); $i++) {\n    if ($arr[$i] > $arr[$i + 1]) {\n      $count++;\n\
    \    }\n  }\n  if ($count == 1) {\n    return True;\n  } else {\n    return False;\n\
    \  }\n}\necho move_one_ball([3, 4, 5, 1, 2]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2]);\necho \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5]);\necho \"\\\
    n\";\necho move_one_ball([5, 4, 3, 2, 1]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 4, 5, 1, 2, 3]);\necho \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3, 4]);\n\
    echo \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5]);\necho \"\\n\";\n\
    echo move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 4, 5, 1, 2, 3, 4, 5, 6, 7]);\necho \"\\n\";\necho move_one_ball([3, 4, 5, 1,\
    \ 2, 3, 4, 5, 6, 7, 8]);\necho \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9]);\necho \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10]);\necho \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11]);\necho \"\\n\";\necho move_one_ball([3, 4, 5, 1, 2,\
    \ 3, 4\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmpwk_9dhy1.php on line 64\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) return true;\n  $count = count($arr);\n  $min = $arr[0];\n\
    \  for ($i = 1; $i < $count; $i++) {\n    if ($arr[$i] < $min) return false;\n\
    \    $min = min($min, $arr[$i]);\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpen7vgsr6.php:37\n\
    Stack trace:\n#0 /tmp/tmpen7vgsr6.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpen7vgsr6.php\
    \ on line 37\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $count = 0;\n    for($i\
    \ = 0; $i < count($arr); $i++){\n        if($arr[$i] > $arr[$i+1]){\n        \
    \    $count++;\n        }\n    }\n    if($count == 1){\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 5 in /tmp/tmppnce4k4w.php on line 27\n\
    PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppnce4k4w.php:42\n\
    Stack trace:\n#0 /tmp/tmppnce4k4w.php(49): test()\n#1 {main}\n  thrown in /tmp/tmppnce4k4w.php\
    \ on line 42\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $count = count($arr);\n  $min\
    \ = min($arr);\n  $min_index = array_search($min, $arr);\n  $max = max($arr);\n\
    \  $max_index = array_search($max, $arr);\n  if($min_index == 0 && $max_index\
    \ == $count-1){\n    return true;\n  }\n  if($min_index == 0 && $max_index !=\
    \ $count-1){\n    return false;\n  }\n  if($min_index != 0 && $max_index == $count-1){\n\
    \    return false;\n  }\n  if($min_index != 0 && $max_index != $count-1){\n  \
    \  return true;\n  }\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdlq3f1ii.php:51\n\
    Stack trace:\n#0 /tmp/tmpdlq3f1ii.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpdlq3f1ii.php\
    \ on line 51\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $count = count($arr);\n  for($i=0; $i<$count;\
    \ $i++) {\n    if($arr[$i] > $arr[$i+1]) {\n      $temp = $arr[$i];\n      $arr[$i]\
    \ = $arr[$i+1];\n      $arr[$i+1] = $temp;\n      $i = -1;\n    }\n  }\n  return\
    \ $arr;\n}\necho move_one_ball([3, 4, 5, 1, 2]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2]);\necho \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5]);\necho \"\\\
    n\";\necho move_one_ball([5, 4, 3, 2, 1]);\necho \"\\n\";\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6]);\necho \"\\n\";\necho move_one_ball([6, 5, 4, 3, 2, 1]);\necho\
    \ \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7]);\necho \"\\n\";\necho move_one_ball([7,\
    \ 6, 5, 4, 3, 2, 1]);\necho \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7,\
    \ 8]);\necho \"\\n\";\necho move_one_ball([8, 7, 6, 5, 4, 3, 2, 1]);\necho \"\\\
    n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9]);\necho \"\\n\";\necho move_one_ball([9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]);\necho \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10]);\necho \"\\n\";\necho move_one_ball([10, 9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]);\necho \"\\n\";\necho move_one_ball([1\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmphj200vh7.php on line 63\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $count = count($arr);\n  if ($count == 0) {\n    return true;\n  }\n  $min\
    \ = $arr[0];\n  for ($i = 1; $i < $count; $i++) {\n    if ($arr[$i] < $min) {\n\
    \      return false;\n    }\n    $min = $arr[$i];\n  }\n  return true;\n}\necho\
    \ move_one_ball([3, 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2])\
    \ . \"\\n\";\necho move_one_ball([]) . \"\\n\";\necho move_one_ball([1, 2, 3,\
    \ 4, 5]) . \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n1\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpswpzbir5.php:44\n\
    Stack trace:\n#0 /tmp/tmpswpzbir5.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpswpzbir5.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $count = 0;\n  for($i = 0; $i\
    \ < count($arr); $i++){\n    if($arr[$i] > $arr[$i+1]){\n      $count++;\n   \
    \ }\n  }\n  if($count > 1){\n    return false;\n  }\n  return true;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]);\necho \"<br>\";\necho move_one_ball([3, 5, 4, 1, 2]);\necho \"\
    <br>\";\necho move_one_ball([3, 4, 5, 1, 2, 3]);\necho \"<br>\";\necho move_one_ball([3,\
    \ 4, 5, 1, 2, 3, 4]);\necho \"<br>\";\necho move_one_ball([3, 4, 5, 1, 2, 3, 4,\
    \ 5]);\necho \"<br>\";\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6]);\necho\
    \ \"<br>\";\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6, 7]);\necho \"<br>\"\
    ;\necho move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8]);\necho \"<br>\";\necho\
    \ move_one_ball([3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\necho \"<br>\";\necho move_one_ball([3,\
    \ 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\necho \"<br>\";\necho move_one_ball([3,\
    \ 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\necho \"<br>\";\necho move_one_ball([3,\
    \ 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\necho \"<br>\";\necho move_one_ball([3,\
    \ 4, 5, 1, 2,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmpzorejf6n.php on line 61\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $sorted = $arr;\n  sort($sorted);\n  $count\
    \ = 0;\n  for($i=0; $i<count($arr); $i++) {\n    if($arr[$i] != $sorted[$i]) $count++;\n\
    \  }\n  return $count <= 1;\n}\necho move_one_ball([3, 4, 5, 1, 2]) . PHP_EOL;\n\
    echo move_one_ball([3, 5, 4, 1, 2]) . PHP_EOL;\necho move_one_ball([]) . PHP_EOL;\n\
    echo move_one_ball([1, 2, 3, 4, 5]) . PHP_EOL;\necho move_one_ball([5, 4, 3, 2,\
    \ 1]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5, 6]) . PHP_EOL;\necho move_one_ball([6,\
    \ 5, 4, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5, 6, 7]) . PHP_EOL;\n\
    echo move_one_ball([7, 6, 5, 4, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1, 2,\
    \ 3, 4, 5, 6, 7, 8]) . PHP_EOL;\necho move_one_ball([8, 7, 6, 5, 4, 3, 2, 1])\
    \ . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9]) . PHP_EOL;\necho\
    \ move_one_ball([9, 8, 7, 6, 5, 4, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) . PHP_EOL;\necho move_one_ball([10, 9, 8, 7, 6,\
    \ 5, 4, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmpdprcew6r.php on line 47\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $count = 0;\n    for($i\
    \ = 0; $i < count($arr); $i++){\n        for($j = $i + 1; $j < count($arr); $j++){\n\
    \            if($arr[$i] > $arr[$j]){\n                $count++;\n           \
    \ }\n        }\n    }\n    if($count > 1){\n        return false;\n    }\n   \
    \ return true;\n}\necho move_one_ball([3, 4, 5, 1, 2]);\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcl446seb.php:44\n\
    Stack trace:\n#0 /tmp/tmpcl446seb.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpcl446seb.php\
    \ on line 44\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)){\n    return true;\n  }\n  $sorted = $arr;\n  sort($sorted);\n\
    \  $count = 0;\n  for($i = 0; $i < count($arr); $i++){\n    if($arr[$i] != $sorted[$i]){\n\
    \      $count++;\n    }\n  }\n  if($count == 1){\n    return true;\n  }\n  return\
    \ false;\n}\necho move_one_ball([3, 4, 5, 1, 2]);\necho \"<br>\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2]);\necho \"<br>\";\necho move_one_ball([3, 5, 4, 1, 2, 3]);\necho\
    \ \"<br>\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4]);\necho \"<br>\";\necho\
    \ move_one_ball([3, 5, 4, 1, 2, 3, 4, 5]);\necho \"<br>\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2, 3, 4, 5, 6]);\necho \"<br>\";\necho move_one_ball([3, 5, 4, 1, 2,\
    \ 3, 4, 5, 6, 7]);\necho \"<br>\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5,\
    \ 6, 7, 8]);\necho \"<br>\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9]);\necho \"<br>\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10]);\necho \"<br>\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]);\necho \"<br>\";\necho move_one_ball([3, 5, 4, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12]);\necho \"<br>\";\necho move\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \",\" or \";\" in /tmp/tmp2a3kmfq7.php on line 63\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return true;\n    }\n    $count = count($arr);\n\
    \    $i = 0;\n    while($i < $count){\n        if($arr[$i] > $arr[$i+1]){\n  \
    \          $temp = $arr[$i];\n            $arr[$i] = $arr[$i+1];\n           \
    \ $arr[$i+1] = $temp;\n            $i = 0;\n        }else{\n            $i++;\n\
    \        }\n    }\n    if($arr == $arr2){\n        return true;\n    }else{\n\
    \        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Warning:  Undefined array key 5 in /tmp/tmplfpo_rom.php on line 28\n\
    PHP Warning:  Undefined array key 5 in /tmp/tmplfpo_rom.php on line 30\nPHP Warning:\
    \  Undefined variable $arr2 in /tmp/tmplfpo_rom.php on line 37\nPHP Fatal error:\
    \  Uncaught Exception: Test failed! in /tmp/tmplfpo_rom.php:49\nStack trace:\n\
    #0 /tmp/tmplfpo_rom.php(56): test()\n#1 {main}\n  thrown in /tmp/tmplfpo_rom.php\
    \ on line 49\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    $count = count($arr);\n    if ($count == 0) {\n        return true;\n\
    \    }\n    $max = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if\
    \ ($arr[$i] < $max) {\n            return false;\n        }\n        $max = $arr[$i];\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpd3vfwfza.php:41\n\
    Stack trace:\n#0 /tmp/tmpd3vfwfza.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpd3vfwfza.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if (empty($arr)) {\n    return True;\n  }\n  $count = count($arr);\n  $min\
    \ = min($arr);\n  $min_index = array_search($min, $arr);\n  $max = max($arr);\n\
    \  $max_index = array_search($max, $arr);\n  if ($min_index == 0 && $max_index\
    \ == $count - 1) {\n    return True;\n  }\n  if ($min_index == 0 && $max_index\
    \ < $count - 1) {\n    return False;\n  }\n  if ($min_index > 0 && $max_index\
    \ == $count - 1) {\n    return False;\n  }\n  if ($min_index > 0 && $max_index\
    \ < $count - 1) {\n    return True;\n  }\n}\necho move_one_ball([3, 4, 5, 1, 2]);\n\
    echo \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2, 6]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 6, 7]);\n\
    echo \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2, 6, 7, 8]);\necho \"\\n\";\n\
    echo move_one_ball([3, 5, 4, 1, 2, 6, 7, 8, 9]);\necho \"\\n\";\necho move_one_ball([3,\
    \ 5, 4, 1, 2, 6, 7, 8, 9, 10]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1,\
    \ 2, 6, 7, 8, 9, 10, 11]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2,\
    \ 6, 7, 8, 9, 10, 11, 12]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2,\
    \ 6, 7, 8, 9, 10, 11, 12, 13]);\necho \"\\n\";\necho move_one_ball([3, 5, 4, 1,\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected identifier \"candidate\", expecting\
    \ \"(\" in /tmp/tmppmv8ufjy.php on line 64\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  $count = count($arr);\n  if ($count == 0) return true;\n  $min = $arr[0];\n\
    \  for ($i = 1; $i < $count; $i++) {\n    if ($arr[$i] < $min) return false;\n\
    \    $min = min($min, $arr[$i]);\n  }\n  return true;\n}\necho move_one_ball([3,\
    \ 4, 5, 1, 2]) . \"\\n\";\necho move_one_ball([3, 5, 4, 1, 2]) . \"\\n\";\necho\
    \ move_one_ball([]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5]) . \"\\n\"\
    ;\necho move_one_ball([5, 4, 3, 2, 1]) . \"\\n\";\necho move_one_ball([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10]) . \"\\n\";\necho move_one_ball([10, 9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1]) . \"\\n\";\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20]) . \"\\n\";\necho move_one_ball([20, 19,\
    \ 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) . \"\\n\";\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\n1\n1\n\n1\n\n1\n\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpswvckazs.php:45\n\
    Stack trace:\n#0 /tmp/tmpswvckazs.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpswvckazs.php\
    \ on line 45\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)) return True;\n    $count = 0;\n    for($i=0; $i<count($arr)-1;\
    \ $i++){\n        if($arr[$i]>$arr[$i+1]){\n            $count++;\n        }\n\
    \    }\n    if($count>1) return False;\n    return True;\n}\n\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n  if(empty($arr)) return true;\n  $sorted = $arr;\n  sort($sorted);\n  $count\
    \ = count($arr);\n  for($i=0; $i<$count; $i++) {\n    if($arr[$i] != $sorted[$i])\
    \ {\n      $arr = array_merge(array_slice($arr, $i), array_slice($arr, 0, $i));\n\
    \      if($arr == $sorted) return true;\n    }\n  }\n  return false;\n}\necho\
    \ move_one_ball([3, 4, 5, 1, 2]) . PHP_EOL;\necho move_one_ball([3, 5, 4, 1, 2])\
    \ . PHP_EOL;\necho move_one_ball([]) . PHP_EOL;\necho move_one_ball([1, 2, 3,\
    \ 4, 5]) . PHP_EOL;\necho move_one_ball([5, 4, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) . PHP_EOL;\necho move_one_ball([10, 9, 8, 7, 6,\
    \ 5, 4, 3, 2, 1]) . PHP_EOL;\necho move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) . PHP_EOL;\necho move_one_ball([20,\
    \ 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) . PHP_EOL;\n\
    echo move_one_ball([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,\
    \ 37, 38, 39, 40, 41, 42, 43, 44, 45\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Parse error:  syntax error, unexpected token \"function\", expecting\
    \ \"]\" in /tmp/tmp45po96bh.php on line 44\n"
  exit_code: 255
  status: SyntaxError
- program: "<?php\n// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    // numbers in the array will be randomly ordered. Your task is to determine if\n\
    // it is possible to get an array sorted in non-decreasing order by performing\
    \ \n// the following operation on the given array:\n// You are allowed to perform\
    \ right shift operation any number of times.\n// One right shift operation means\
    \ shifting all elements of the array by one\n// position in the right direction.\
    \ The last element of the array will be moved to\n// the starting position in\
    \ the array i.e. 0th index. \n// If it is possible to obtain the sorted array\
    \ by performing the above operation\n// then return True else return False.\n\
    // If the given array is empty then return True.\n// Note: The given list is guaranteed\
    \ to have unique elements.\n// For Example:\n// move_one_ball([3, 4, 5, 1, 2])==>True\n\
    // Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    // be achieved for the given array.\n// move_one_ball([3, 5, 4, 1, 2])==>False\n\
    // Explanation:It is not possible to get non-decreasing order for the given\n\
    // array by performing any number of right shift operations.\nfunction move_one_ball($arr)\
    \ {\n    if(empty($arr)){\n        return True;\n    }\n    $count = count($arr);\n\
    \    $min = $arr[0];\n    for($i=1;$i<$count;$i++){\n        if($arr[$i]<$min){\n\
    \            return False;\n        }\n        $min = $arr[$i];\n    }\n    return\
    \ True;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp07k4kznc.php:41\n\
    Stack trace:\n#0 /tmp/tmp07k4kznc.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp07k4kznc.php\
    \ on line 41\n"
  exit_code: 255
  status: Exception
