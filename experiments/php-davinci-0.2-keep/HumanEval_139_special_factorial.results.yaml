name: HumanEval_139_special_factorial
language: php
results:
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppam482is.php:24\n\
    Stack trace:\n#0 /tmp/tmppam482is.php(30): test()\n#1 {main}\n  thrown in /tmp/tmppam482is.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9hs2rp61.php:23\n\
    Stack trace:\n#0 /tmp/tmp9hs2rp61.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9hs2rp61.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpac3h3ix1.php:23\n\
    Stack trace:\n#0 /tmp/tmpac3h3ix1.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpac3h3ix1.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphsg90ftz.php:23\n\
    Stack trace:\n#0 /tmp/tmphsg90ftz.php(29): test()\n#1 {main}\n  thrown in /tmp/tmphsg90ftz.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  for\
    \ ($i = $n - 1; $i > 0; $i--) {\n    $result *= $i;\n  }\n  for ($i = $n - 2;\
    \ $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn7g68z1p.php:30\n\
    Stack trace:\n#0 /tmp/tmpn7g68z1p.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpn7g68z1p.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpschv6qre.php:24\n\
    Stack trace:\n#0 /tmp/tmpschv6qre.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpschv6qre.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuoh5nguh.php:23\n\
    Stack trace:\n#0 /tmp/tmpuoh5nguh.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpuoh5nguh.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvgjxnp_0.php:23\n\
    Stack trace:\n#0 /tmp/tmpvgjxnp_0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvgjxnp_0.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp65dl7tfb.php:23\n\
    Stack trace:\n#0 /tmp/tmp65dl7tfb.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp65dl7tfb.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2r8n9xbi.php:24\n\
    Stack trace:\n#0 /tmp/tmp2r8n9xbi.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2r8n9xbi.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\n$n = 4;\necho special_factorial($n);\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgu5486wi.php:25\n\
    Stack trace:\n#0 /tmp/tmpgu5486wi.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpgu5486wi.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy2pr4zq9.php:24\n\
    Stack trace:\n#0 /tmp/tmpy2pr4zq9.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpy2pr4zq9.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp71priz6d.php:23\n\
    Stack trace:\n#0 /tmp/tmp71priz6d.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp71priz6d.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphm1wvhwk.php:24\n\
    Stack trace:\n#0 /tmp/tmphm1wvhwk.php(30): test()\n#1 {main}\n  thrown in /tmp/tmphm1wvhwk.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    for ($i = $n - 1; $i > 0; $i--) {\n        $result *= $i;\n    }\n\
    \    for ($i = $n - 2; $i > 0; $i--) {\n        $result *= $i;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1nl7a44e.php:30\n\
    Stack trace:\n#0 /tmp/tmp1nl7a44e.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp1nl7a44e.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbezhi3fe.php:23\n\
    Stack trace:\n#0 /tmp/tmpbezhi3fe.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbezhi3fe.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyna5_nd1.php:23\n\
    Stack trace:\n#0 /tmp/tmpyna5_nd1.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpyna5_nd1.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\necho special_factorial(4);\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplz7sh9iw.php:24\n\
    Stack trace:\n#0 /tmp/tmplz7sh9iw.php(30): test()\n#1 {main}\n  thrown in /tmp/tmplz7sh9iw.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw92vqovj.php:23\n\
    Stack trace:\n#0 /tmp/tmpw92vqovj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpw92vqovj.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa96z8xpe.php:23\n\
    Stack trace:\n#0 /tmp/tmpa96z8xpe.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpa96z8xpe.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp95d8_f1l.php:23\n\
    Stack trace:\n#0 /tmp/tmp95d8_f1l.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp95d8_f1l.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptg4rz0hx.php:24\n\
    Stack trace:\n#0 /tmp/tmptg4rz0hx.php(30): test()\n#1 {main}\n  thrown in /tmp/tmptg4rz0hx.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  for\
    \ ($i = $n - 1; $i > 0; $i--) {\n    $result *= $i;\n  }\n  for ($i = $n - 2;\
    \ $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfmfp5t2i.php:30\n\
    Stack trace:\n#0 /tmp/tmpfmfp5t2i.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfmfp5t2i.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_wpz8jmw.php:24\n\
    Stack trace:\n#0 /tmp/tmp_wpz8jmw.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp_wpz8jmw.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpigesk71p.php:23\n\
    Stack trace:\n#0 /tmp/tmpigesk71p.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpigesk71p.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp00b0q6xx.php:23\n\
    Stack trace:\n#0 /tmp/tmp00b0q6xx.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp00b0q6xx.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyz27bfol.php:23\n\
    Stack trace:\n#0 /tmp/tmpyz27bfol.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpyz27bfol.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpufpnjd4p.php:23\n\
    Stack trace:\n#0 /tmp/tmpufpnjd4p.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpufpnjd4p.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function factorial()\
    \ in /tmp/tmpm2_jr7pt.php:13\nStack trace:\n#0 /tmp/tmpm2_jr7pt.php(19): special_factorial()\n\
    #1 /tmp/tmpm2_jr7pt.php(23): candidate()\n#2 /tmp/tmpm2_jr7pt.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpm2_jr7pt.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqlr04q19.php:23\n\
    Stack trace:\n#0 /tmp/tmpqlr04q19.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqlr04q19.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr90q91wu.php:24\n\
    Stack trace:\n#0 /tmp/tmpr90q91wu.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpr90q91wu.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  for\
    \ ($i = $n - 1; $i > 0; $i--) {\n    $result *= $i;\n  }\n  for ($i = $n - 2;\
    \ $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpp115zg1r.php:30\n\
    Stack trace:\n#0 /tmp/tmpp115zg1r.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpp115zg1r.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgwbdr69p.php:23\n\
    Stack trace:\n#0 /tmp/tmpgwbdr69p.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpgwbdr69p.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpw3wbs4ad.php:24\n\
    Stack trace:\n#0 /tmp/tmpw3wbs4ad.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpw3wbs4ad.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function factorial()\
    \ in /tmp/tmpcqy_n1p9.php:13\nStack trace:\n#0 /tmp/tmpcqy_n1p9.php(19): special_factorial()\n\
    #1 /tmp/tmpcqy_n1p9.php(23): candidate()\n#2 /tmp/tmpcqy_n1p9.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpcqy_n1p9.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function factorial()\
    \ in /tmp/tmp10_3icsl.php:13\nStack trace:\n#0 /tmp/tmp10_3icsl.php(19): special_factorial()\n\
    #1 /tmp/tmp10_3icsl.php(23): candidate()\n#2 /tmp/tmp10_3icsl.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp10_3icsl.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4bmkpy41.php:23\n\
    Stack trace:\n#0 /tmp/tmp4bmkpy41.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp4bmkpy41.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxb9o2byo.php:23\n\
    Stack trace:\n#0 /tmp/tmpxb9o2byo.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpxb9o2byo.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\necho special_factorial(4);\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpy_4q1pdy.php:24\n\
    Stack trace:\n#0 /tmp/tmpy_4q1pdy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpy_4q1pdy.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9jyfo_o7.php:23\n\
    Stack trace:\n#0 /tmp/tmp9jyfo_o7.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9jyfo_o7.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $result *= $i;\n  }\n  for\
    \ ($i = 1; $i < $n; $i++) {\n    $result *= $i;\n  }\n  return $result;\n}\n\n\
    echo special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: '144'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyyewh_cg.php:27\n\
    Stack trace:\n#0 /tmp/tmpyyewh_cg.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpyyewh_cg.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdev8b6_y.php:23\n\
    Stack trace:\n#0 /tmp/tmpdev8b6_y.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpdev8b6_y.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0b2xht1s.php:24\n\
    Stack trace:\n#0 /tmp/tmp0b2xht1s.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp0b2xht1s.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplhy7vbn7.php:23\n\
    Stack trace:\n#0 /tmp/tmplhy7vbn7.php(29): test()\n#1 {main}\n  thrown in /tmp/tmplhy7vbn7.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcdourexm.php:23\n\
    Stack trace:\n#0 /tmp/tmpcdourexm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpcdourexm.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcldkt4qi.php:24\n\
    Stack trace:\n#0 /tmp/tmpcldkt4qi.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcldkt4qi.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6b1mpnzy.php:24\n\
    Stack trace:\n#0 /tmp/tmp6b1mpnzy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp6b1mpnzy.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpddl3j5xg.php:23\n\
    Stack trace:\n#0 /tmp/tmpddl3j5xg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpddl3j5xg.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\necho special_factorial(4);\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_h9uae3n.php:24\n\
    Stack trace:\n#0 /tmp/tmp_h9uae3n.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp_h9uae3n.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpeul7tsqu.php:23\n\
    Stack trace:\n#0 /tmp/tmpeul7tsqu.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpeul7tsqu.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxcebz392.php:23\n\
    Stack trace:\n#0 /tmp/tmpxcebz392.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpxcebz392.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpm9_cx0kb.php:23\n\
    Stack trace:\n#0 /tmp/tmpm9_cx0kb.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpm9_cx0kb.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpiv7juon8.php:24\n\
    Stack trace:\n#0 /tmp/tmpiv7juon8.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpiv7juon8.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3gcp9_j9.php:23\n\
    Stack trace:\n#0 /tmp/tmp3gcp9_j9.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp3gcp9_j9.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp87aff9ux.php:23\n\
    Stack trace:\n#0 /tmp/tmp87aff9ux.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp87aff9ux.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvh0_1nvu.php:23\n\
    Stack trace:\n#0 /tmp/tmpvh0_1nvu.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvh0_1nvu.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnh70easa.php:23\n\
    Stack trace:\n#0 /tmp/tmpnh70easa.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpnh70easa.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5x7kdkvs.php:23\n\
    Stack trace:\n#0 /tmp/tmp5x7kdkvs.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp5x7kdkvs.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvrgq1ajk.php:23\n\
    Stack trace:\n#0 /tmp/tmpvrgq1ajk.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvrgq1ajk.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpyqvccerf.php:23\n\
    Stack trace:\n#0 /tmp/tmpyqvccerf.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpyqvccerf.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  for\
    \ ($i = $n - 1; $i > 0; $i--) {\n    $result *= $i;\n  }\n  for ($i = $n - 2;\
    \ $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\necho special_factorial(4);\n\
    function candidate(...$args) {\n    return special_factorial(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: '288'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmprezo4ud0.php:31\n\
    Stack trace:\n#0 /tmp/tmprezo4ud0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmprezo4ud0.php\
    \ on line 31\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5aadpo3s.php:23\n\
    Stack trace:\n#0 /tmp/tmp5aadpo3s.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp5aadpo3s.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5q9kpbck.php:24\n\
    Stack trace:\n#0 /tmp/tmp5q9kpbck.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp5q9kpbck.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2keyg2_p.php:23\n\
    Stack trace:\n#0 /tmp/tmp2keyg2_p.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2keyg2_p.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmptn47bdll.php:23\n\
    Stack trace:\n#0 /tmp/tmptn47bdll.php(29): test()\n#1 {main}\n  thrown in /tmp/tmptn47bdll.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg08q2uet.php:23\n\
    Stack trace:\n#0 /tmp/tmpg08q2uet.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpg08q2uet.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpceat0te1.php:23\n\
    Stack trace:\n#0 /tmp/tmpceat0te1.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpceat0te1.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpiqjh56dh.php:23\n\
    Stack trace:\n#0 /tmp/tmpiqjh56dh.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpiqjh56dh.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp7y1m_eq6.php:23\n\
    Stack trace:\n#0 /tmp/tmp7y1m_eq6.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp7y1m_eq6.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphu9ibonb.php:23\n\
    Stack trace:\n#0 /tmp/tmphu9ibonb.php(29): test()\n#1 {main}\n  thrown in /tmp/tmphu9ibonb.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpydes9fly.php:23\n\
    Stack trace:\n#0 /tmp/tmpydes9fly.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpydes9fly.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpaf998_f8.php:23\n\
    Stack trace:\n#0 /tmp/tmpaf998_f8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpaf998_f8.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp74a3fo5b.php:23\n\
    Stack trace:\n#0 /tmp/tmp74a3fo5b.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp74a3fo5b.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0tuhplsv.php:24\n\
    Stack trace:\n#0 /tmp/tmp0tuhplsv.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp0tuhplsv.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2xzw_xqr.php:23\n\
    Stack trace:\n#0 /tmp/tmp2xzw_xqr.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2xzw_xqr.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1f50abth.php:23\n\
    Stack trace:\n#0 /tmp/tmp1f50abth.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1f50abth.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa7v2kwdo.php:23\n\
    Stack trace:\n#0 /tmp/tmpa7v2kwdo.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpa7v2kwdo.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_imc2gzb.php:23\n\
    Stack trace:\n#0 /tmp/tmp_imc2gzb.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_imc2gzb.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpps6kn872.php:23\n\
    Stack trace:\n#0 /tmp/tmpps6kn872.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpps6kn872.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzvo_dvd6.php:23\n\
    Stack trace:\n#0 /tmp/tmpzvo_dvd6.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpzvo_dvd6.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp42m6rfla.php:24\n\
    Stack trace:\n#0 /tmp/tmp42m6rfla.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp42m6rfla.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function factorial()\
    \ in /tmp/tmpwcnndvm1.php:13\nStack trace:\n#0 /tmp/tmpwcnndvm1.php(19): special_factorial()\n\
    #1 /tmp/tmpwcnndvm1.php(23): candidate()\n#2 /tmp/tmpwcnndvm1.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwcnndvm1.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpetub489k.php:23\n\
    Stack trace:\n#0 /tmp/tmpetub489k.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpetub489k.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplcf5v7jp.php:23\n\
    Stack trace:\n#0 /tmp/tmplcf5v7jp.php(29): test()\n#1 {main}\n  thrown in /tmp/tmplcf5v7jp.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppswy47u9.php:23\n\
    Stack trace:\n#0 /tmp/tmppswy47u9.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppswy47u9.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpob91zdwz.php:22\n\
    Stack trace:\n#0 /tmp/tmpob91zdwz.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpob91zdwz.php\
    \ on line 22\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  for\
    \ ($i = $n - 1; $i > 0; $i--) {\n    $result *= $i;\n  }\n  for ($i = $n - 2;\
    \ $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1ylzuh7i.php:30\n\
    Stack trace:\n#0 /tmp/tmp1ylzuh7i.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp1ylzuh7i.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6afwn1kk.php:23\n\
    Stack trace:\n#0 /tmp/tmp6afwn1kk.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6afwn1kk.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvd7b_2n2.php:23\n\
    Stack trace:\n#0 /tmp/tmpvd7b_2n2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvd7b_2n2.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\necho special_factorial(4);\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp99nibibd.php:24\n\
    Stack trace:\n#0 /tmp/tmp99nibibd.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp99nibibd.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  $factorial_array = [];\n  for ($i = 1; $i <= $n; $i++) {\n\
    \    $factorial *= $i;\n    $factorial_array[] = $factorial;\n  }\n  return array_product($factorial_array);\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpziikqxse.php:23\n\
    Stack trace:\n#0 /tmp/tmpziikqxse.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpziikqxse.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc261tmly.php:23\n\
    Stack trace:\n#0 /tmp/tmpc261tmly.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpc261tmly.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\necho special_factorial(4);\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjpij82db.php:24\n\
    Stack trace:\n#0 /tmp/tmpjpij82db.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpjpij82db.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_c4e2zp8.php:22\n\
    Stack trace:\n#0 /tmp/tmp_c4e2zp8.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp_c4e2zp8.php\
    \ on line 22\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjmeu1q6x.php:23\n\
    Stack trace:\n#0 /tmp/tmpjmeu1q6x.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjmeu1q6x.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\necho special_factorial(4);\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn22dw68x.php:24\n\
    Stack trace:\n#0 /tmp/tmpn22dw68x.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpn22dw68x.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcg6_e496.php:24\n\
    Stack trace:\n#0 /tmp/tmpcg6_e496.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcg6_e496.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp799mdgi1.php:23\n\
    Stack trace:\n#0 /tmp/tmp799mdgi1.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp799mdgi1.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfnf1iz_m.php:23\n\
    Stack trace:\n#0 /tmp/tmpfnf1iz_m.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpfnf1iz_m.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9mmqhqx2.php:23\n\
    Stack trace:\n#0 /tmp/tmp9mmqhqx2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9mmqhqx2.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnroe6ciq.php:23\n\
    Stack trace:\n#0 /tmp/tmpnroe6ciq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpnroe6ciq.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpo52210j3.php:24\n\
    Stack trace:\n#0 /tmp/tmpo52210j3.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpo52210j3.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppio8hn8h.php:23\n\
    Stack trace:\n#0 /tmp/tmppio8hn8h.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppio8hn8h.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\necho special_factorial(4);\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph1yqy31m.php:24\n\
    Stack trace:\n#0 /tmp/tmph1yqy31m.php(30): test()\n#1 {main}\n  thrown in /tmp/tmph1yqy31m.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0vvtrad7.php:23\n\
    Stack trace:\n#0 /tmp/tmp0vvtrad7.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp0vvtrad7.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n <= 0) {\n        return 1;\n    }\n    $factorial = 1;\n    for ($i\
    \ = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n    return $factorial\
    \ * special_factorial($n - 1);\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '288'
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpj3prj1o2.php:23\n\
    Stack trace:\n#0 /tmp/tmpj3prj1o2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpj3prj1o2.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqrhw5ltc.php:23\n\
    Stack trace:\n#0 /tmp/tmpqrhw5ltc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqrhw5ltc.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\necho special_factorial(4) . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "24\n"
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpaoyu5_lr.php:25\n\
    Stack trace:\n#0 /tmp/tmpaoyu5_lr.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpaoyu5_lr.php\
    \ on line 25\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   if ($n === 0) {\n        return 1;\n    }\n    $factorial = 1;\n    for ($i\
    \ = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n    return $factorial\
    \ * special_factorial($n - 1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgfa1fmk4.php:23\n\
    Stack trace:\n#0 /tmp/tmpgfa1fmk4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpgfa1fmk4.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplj4guyuz.php:23\n\
    Stack trace:\n#0 /tmp/tmplj4guyuz.php(29): test()\n#1 {main}\n  thrown in /tmp/tmplj4guyuz.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9ivazhl0.php:24\n\
    Stack trace:\n#0 /tmp/tmp9ivazhl0.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp9ivazhl0.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfdg8qlqf.php:23\n\
    Stack trace:\n#0 /tmp/tmpfdg8qlqf.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpfdg8qlqf.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz1gerach.php:23\n\
    Stack trace:\n#0 /tmp/tmpz1gerach.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpz1gerach.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp86ia9wtx.php:23\n\
    Stack trace:\n#0 /tmp/tmp86ia9wtx.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp86ia9wtx.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpg58tx24m.php:23\n\
    Stack trace:\n#0 /tmp/tmpg58tx24m.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpg58tx24m.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpi5zm5z6r.php:23\n\
    Stack trace:\n#0 /tmp/tmpi5zm5z6r.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpi5zm5z6r.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\necho special_factorial(4);\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph338o5h6.php:24\n\
    Stack trace:\n#0 /tmp/tmph338o5h6.php(30): test()\n#1 {main}\n  thrown in /tmp/tmph338o5h6.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp96fx0odj.php:23\n\
    Stack trace:\n#0 /tmp/tmp96fx0odj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp96fx0odj.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfa7_h6l5.php:23\n\
    Stack trace:\n#0 /tmp/tmpfa7_h6l5.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpfa7_h6l5.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function factorial()\
    \ in /tmp/tmp8g0vhvxr.php:13\nStack trace:\n#0 /tmp/tmp8g0vhvxr.php(19): special_factorial()\n\
    #1 /tmp/tmp8g0vhvxr.php(23): candidate()\n#2 /tmp/tmp8g0vhvxr.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp8g0vhvxr.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    while ($n > 0) {\n        $factorial *= $n;\n       \
    \ $n--;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpftri0td7.php:24\n\
    Stack trace:\n#0 /tmp/tmpftri0td7.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpftri0td7.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $result *= $i;\n  }\n  for\
    \ ($i = $n - 1; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9jrcz7nx.php:26\n\
    Stack trace:\n#0 /tmp/tmp9jrcz7nx.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp9jrcz7nx.php\
    \ on line 26\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdufe6h7m.php:23\n\
    Stack trace:\n#0 /tmp/tmpdufe6h7m.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpdufe6h7m.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2skob7bt.php:24\n\
    Stack trace:\n#0 /tmp/tmp2skob7bt.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2skob7bt.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmph9f3d63k.php:23\n\
    Stack trace:\n#0 /tmp/tmph9f3d63k.php(29): test()\n#1 {main}\n  thrown in /tmp/tmph9f3d63k.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpt9l2atst.php:23\n\
    Stack trace:\n#0 /tmp/tmpt9l2atst.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpt9l2atst.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\necho special_factorial(4);\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2itrzt1b.php:24\n\
    Stack trace:\n#0 /tmp/tmp2itrzt1b.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2itrzt1b.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpa8grpjt3.php:23\n\
    Stack trace:\n#0 /tmp/tmpa8grpjt3.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpa8grpjt3.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $result *= $i;\n\
    \    }\n    for ($i = 1; $i < $n; $i++) {\n        $result *= $i;\n    }\n   \
    \ return $result;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '144'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpqw9rlg4d.php:27\n\
    Stack trace:\n#0 /tmp/tmpqw9rlg4d.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqw9rlg4d.php\
    \ on line 27\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppvxbm9zv.php:23\n\
    Stack trace:\n#0 /tmp/tmppvxbm9zv.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppvxbm9zv.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpbm_n9sp9.php:23\n\
    Stack trace:\n#0 /tmp/tmpbm_n9sp9.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbm_n9sp9.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpehe0u21z.php:23\n\
    Stack trace:\n#0 /tmp/tmpehe0u21z.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpehe0u21z.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ if ($n <= 0) {\n    return null;\n  }\n\n  $result = 1;\n  for ($i = $n; $i\
    \ > 0; $i--) {\n    $result *= $i;\n  }\n\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdee8xwme.php:28\n\
    Stack trace:\n#0 /tmp/tmpdee8xwme.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpdee8xwme.php\
    \ on line 28\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp37xkfcw4.php:23\n\
    Stack trace:\n#0 /tmp/tmp37xkfcw4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp37xkfcw4.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp08l5lyez.php:23\n\
    Stack trace:\n#0 /tmp/tmp08l5lyez.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp08l5lyez.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq_dsj0p_.php:23\n\
    Stack trace:\n#0 /tmp/tmpq_dsj0p_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpq_dsj0p_.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplsn9b141.php:23\n\
    Stack trace:\n#0 /tmp/tmplsn9b141.php(29): test()\n#1 {main}\n  thrown in /tmp/tmplsn9b141.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdvpzw606.php:23\n\
    Stack trace:\n#0 /tmp/tmpdvpzw606.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpdvpzw606.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfhwaoffb.php:24\n\
    Stack trace:\n#0 /tmp/tmpfhwaoffb.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpfhwaoffb.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcdn7cx3h.php:23\n\
    Stack trace:\n#0 /tmp/tmpcdn7cx3h.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpcdn7cx3h.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0smrj2jb.php:24\n\
    Stack trace:\n#0 /tmp/tmp0smrj2jb.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp0smrj2jb.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpb9pymfx7.php:23\n\
    Stack trace:\n#0 /tmp/tmpb9pymfx7.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpb9pymfx7.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3pcxoi3_.php:23\n\
    Stack trace:\n#0 /tmp/tmp3pcxoi3_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp3pcxoi3_.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpvn9o5kz_.php:23\n\
    Stack trace:\n#0 /tmp/tmpvn9o5kz_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvn9o5kz_.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0qbq5krq.php:23\n\
    Stack trace:\n#0 /tmp/tmp0qbq5krq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp0qbq5krq.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmplw7e2yx1.php:23\n\
    Stack trace:\n#0 /tmp/tmplw7e2yx1.php(29): test()\n#1 {main}\n  thrown in /tmp/tmplw7e2yx1.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpdrlsdbbb.php:23\n\
    Stack trace:\n#0 /tmp/tmpdrlsdbbb.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpdrlsdbbb.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpr9v15lzl.php:24\n\
    Stack trace:\n#0 /tmp/tmpr9v15lzl.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpr9v15lzl.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp0yl_w9h8.php:23\n\
    Stack trace:\n#0 /tmp/tmp0yl_w9h8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp0yl_w9h8.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpc405_pyi.php:23\n\
    Stack trace:\n#0 /tmp/tmpc405_pyi.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpc405_pyi.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpq29fhcwm.php:23\n\
    Stack trace:\n#0 /tmp/tmpq29fhcwm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpq29fhcwm.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpwk8nqwut.php:23\n\
    Stack trace:\n#0 /tmp/tmpwk8nqwut.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpwk8nqwut.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcdif7kme.php:23\n\
    Stack trace:\n#0 /tmp/tmpcdif7kme.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpcdif7kme.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpxdm26_m3.php:23\n\
    Stack trace:\n#0 /tmp/tmpxdm26_m3.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpxdm26_m3.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\necho special_factorial(4);\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzcssxsaz.php:24\n\
    Stack trace:\n#0 /tmp/tmpzcssxsaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzcssxsaz.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpjinr_rg6.php:24\n\
    Stack trace:\n#0 /tmp/tmpjinr_rg6.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpjinr_rg6.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv0c34x3j.php:24\n\
    Stack trace:\n#0 /tmp/tmpv0c34x3j.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpv0c34x3j.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    for ($i = $n - 1; $i > 0; $i--) {\n        $result *= $i;\n    }\n\
    \    for ($i = $n - 2; $i > 0; $i--) {\n        $result *= $i;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp77s6_f8r.php:30\n\
    Stack trace:\n#0 /tmp/tmp77s6_f8r.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp77s6_f8r.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpzt8yc972.php:24\n\
    Stack trace:\n#0 /tmp/tmpzt8yc972.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzt8yc972.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuylvx_9u.php:23\n\
    Stack trace:\n#0 /tmp/tmpuylvx_9u.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpuylvx_9u.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpebiopm5m.php:23\n\
    Stack trace:\n#0 /tmp/tmpebiopm5m.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpebiopm5m.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn687e85e.php:24\n\
    Stack trace:\n#0 /tmp/tmpn687e85e.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpn687e85e.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    for ($i = $n - 1; $i > 0; $i--) {\n        $result *= $i;\n    }\n\
    \    for ($i = $n - 2; $i > 0; $i--) {\n        $result *= $i;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp2xrs4k11.php:30\n\
    Stack trace:\n#0 /tmp/tmp2xrs4k11.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2xrs4k11.php\
    \ on line 30\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpo9suar8g.php:23\n\
    Stack trace:\n#0 /tmp/tmpo9suar8g.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpo9suar8g.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp_bf8pmh0.php:23\n\
    Stack trace:\n#0 /tmp/tmp_bf8pmh0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_bf8pmh0.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1s5pvlky.php:23\n\
    Stack trace:\n#0 /tmp/tmp1s5pvlky.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1s5pvlky.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp9erxe13g.php:23\n\
    Stack trace:\n#0 /tmp/tmp9erxe13g.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9erxe13g.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmphpzz56d2.php:23\n\
    Stack trace:\n#0 /tmp/tmphpzz56d2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmphpzz56d2.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp5odg4qac.php:24\n\
    Stack trace:\n#0 /tmp/tmp5odg4qac.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp5odg4qac.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpczkgdmqb.php:23\n\
    Stack trace:\n#0 /tmp/tmpczkgdmqb.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpczkgdmqb.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp4w_oywhl.php:24\n\
    Stack trace:\n#0 /tmp/tmp4w_oywhl.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp4w_oywhl.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp3rwb4ef_.php:23\n\
    Stack trace:\n#0 /tmp/tmp3rwb4ef_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp3rwb4ef_.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpiy07pti1.php:23\n\
    Stack trace:\n#0 /tmp/tmpiy07pti1.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpiy07pti1.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function factorial()\
    \ in /tmp/tmp1lvy64bp.php:13\nStack trace:\n#0 /tmp/tmp1lvy64bp.php(19): special_factorial()\n\
    #1 /tmp/tmp1lvy64bp.php(23): candidate()\n#2 /tmp/tmp1lvy64bp.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp1lvy64bp.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function factorial()\
    \ in /tmp/tmpzrtsmhbf.php:13\nStack trace:\n#0 /tmp/tmpzrtsmhbf.php(19): special_factorial()\n\
    #1 /tmp/tmpzrtsmhbf.php(23): candidate()\n#2 /tmp/tmpzrtsmhbf.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzrtsmhbf.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpccn_cc2w.php:23\n\
    Stack trace:\n#0 /tmp/tmpccn_cc2w.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpccn_cc2w.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmppzmiv2lq.php:23\n\
    Stack trace:\n#0 /tmp/tmppzmiv2lq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmppzmiv2lq.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp50b07b_b.php:24\n\
    Stack trace:\n#0 /tmp/tmp50b07b_b.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp50b07b_b.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function factorial()\
    \ in /tmp/tmpzey2pvtw.php:13\nStack trace:\n#0 /tmp/tmpzey2pvtw.php(19): special_factorial()\n\
    #1 /tmp/tmpzey2pvtw.php(23): candidate()\n#2 /tmp/tmpzey2pvtw.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzey2pvtw.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpahdgxvsj.php:23\n\
    Stack trace:\n#0 /tmp/tmpahdgxvsj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpahdgxvsj.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpnedlg6qh.php:23\n\
    Stack trace:\n#0 /tmp/tmpnedlg6qh.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpnedlg6qh.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpfhhp13sg.php:24\n\
    Stack trace:\n#0 /tmp/tmpfhhp13sg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpfhhp13sg.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpinf7uasf.php:24\n\
    Stack trace:\n#0 /tmp/tmpinf7uasf.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpinf7uasf.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6kdaoksx.php:23\n\
    Stack trace:\n#0 /tmp/tmp6kdaoksx.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6kdaoksx.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpgq2iv7nu.php:23\n\
    Stack trace:\n#0 /tmp/tmpgq2iv7nu.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpgq2iv7nu.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp6bgotkwe.php:23\n\
    Stack trace:\n#0 /tmp/tmp6bgotkwe.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6bgotkwe.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp1dgjlx31.php:23\n\
    Stack trace:\n#0 /tmp/tmp1dgjlx31.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1dgjlx31.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpuyq2zaxl.php:23\n\
    Stack trace:\n#0 /tmp/tmpuyq2zaxl.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpuyq2zaxl.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpghzqfxi_.php:23\n\
    Stack trace:\n#0 /tmp/tmpghzqfxi_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpghzqfxi_.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpow0rqun9.php:24\n\
    Stack trace:\n#0 /tmp/tmpow0rqun9.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpow0rqun9.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Error: Call to undefined function factorial()\
    \ in /tmp/tmpe7xfwx5h.php:13\nStack trace:\n#0 /tmp/tmpe7xfwx5h.php(19): special_factorial()\n\
    #1 /tmp/tmpe7xfwx5h.php(23): candidate()\n#2 /tmp/tmpe7xfwx5h.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpe7xfwx5h.php on line 13\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\necho special_factorial(4);\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: '24'
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpv9zi5cna.php:24\n\
    Stack trace:\n#0 /tmp/tmpv9zi5cna.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpv9zi5cna.php\
    \ on line 24\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpn508dsxt.php:23\n\
    Stack trace:\n#0 /tmp/tmpn508dsxt.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpn508dsxt.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpcu7v0iri.php:23\n\
    Stack trace:\n#0 /tmp/tmpcu7v0iri.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpcu7v0iri.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpk90txrsv.php:23\n\
    Stack trace:\n#0 /tmp/tmpk90txrsv.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpk90txrsv.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmp922vm0am.php:23\n\
    Stack trace:\n#0 /tmp/tmp922vm0am.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp922vm0am.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
- program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial($n) {\n \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: ''
  stderr: "PHP Fatal error:  Uncaught Exception: Test failed! in /tmp/tmpz4x2443t.php:23\n\
    Stack trace:\n#0 /tmp/tmpz4x2443t.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpz4x2443t.php\
    \ on line 23\n"
  exit_code: 255
  status: Exception
